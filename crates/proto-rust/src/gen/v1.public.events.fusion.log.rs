// This file is @generated by prost-build.
/// Log event that carries inline compiled SQL code.
#[cfg_attr(any(test, feature = "test-utils"), derive(::fake::Dummy))]
#[derive(crate::macros::ProtoNew)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CompiledCodeInline {
    #[prost(string, tag = "1")]
    pub sql: ::prost::alloc::string::String,
}
impl crate::StaticName for CompiledCodeInline {
    const FULL_NAME: &'static str = "v1.public.events.fusion.log.CompiledCodeInline";
    const TYPE_URL: &'static str = "/v1.public.events.fusion.log.CompiledCodeInline";
}
impl ::prost::Name for CompiledCodeInline {
    const NAME: &'static str = "CompiledCodeInline";
    const PACKAGE: &'static str = "v1.public.events.fusion.log";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.events.fusion.log.CompiledCodeInline".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.events.fusion.log.CompiledCodeInline".into()
    }
}
/// Generic event for log messages that do not cary special meaning
/// or additional metadata beyond the standard fields
#[cfg_attr(any(test, feature = "test-utils"), derive(::fake::Dummy))]
#[derive(crate::macros::ProtoNew)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LogMessage {
    /// Optional fusion error/warning code
    #[prost(uint32, optional, tag = "1")]
    pub code: ::core::option::Option<u32>,
    /// Optional legacy dbt-core code (e.g. "Z048") if this event has a strict mapping to a dbt core event.
    #[prost(string, optional, tag = "2")]
    pub dbt_core_event_code: ::core::option::Option<::prost::alloc::string::String>,
    /// Original severity before user up/down-grade configuration applied.
    #[prost(enumeration = "super::compat::SeverityNumber", tag = "3")]
    pub original_severity_number: i32,
    #[prost(string, tag = "4")]
    pub original_severity_text: ::prost::alloc::string::String,
    /// If this log message is emitted in the context of a specific node,
    /// this field should be set to the node's unique FQN.
    #[prost(string, optional, tag = "5")]
    pub unique_id: ::core::option::Option<::prost::alloc::string::String>,
    /// Fusion source code file name where the log was created. Only available in debug builds.
    #[prost(string, optional, tag = "6")]
    pub file: ::core::option::Option<::prost::alloc::string::String>,
    /// Fusion source code file line number where the log was created. Only available in debug builds.
    #[prost(uint32, optional, tag = "7")]
    pub line: ::core::option::Option<u32>,
    /// Execution phase (if known) during which this log was emitted.
    #[prost(enumeration = "super::phase::ExecutionPhase", optional, tag = "8")]
    #[cfg_attr(
        any(test, feature = "test-utils"),
        dummy(
            expr = "Some(::fake::Fake::fake::<super::phase::ExecutionPhase>(&::fake::Faker) as i32)"
        )
    )]
    pub phase: ::core::option::Option<i32>,
    /// Package name of the project dependency for which this log was emitted. Not set for the root project.
    #[prost(string, optional, tag = "9")]
    pub package_name: ::core::option::Option<::prost::alloc::string::String>,
}
impl crate::StaticName for LogMessage {
    const FULL_NAME: &'static str = "v1.public.events.fusion.log.LogMessage";
    const TYPE_URL: &'static str = "/v1.public.events.fusion.log.LogMessage";
}
impl ::prost::Name for LogMessage {
    const NAME: &'static str = "LogMessage";
    const PACKAGE: &'static str = "v1.public.events.fusion.log";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.events.fusion.log.LogMessage".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.events.fusion.log.LogMessage".into()
    }
}
