// Generated from Trino.g4 by ANTLR 4.8
#![allow(dead_code)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(nonstandard_style)]
#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(unused_braces)]
use antlr_rust::PredictionContextCache;
use antlr_rust::error_listener::ErrorListener;
use antlr_rust::parser::{Parser, BaseParser, ParserRecog, ParserNodeType};
use antlr_rust::token_stream::TokenStream;
use antlr_rust::TokenSource;
use antlr_rust::parser_atn_simulator::ParserATNSimulator;
use antlr_rust::errors::*;
use antlr_rust::rule_context::{BaseRuleContext, CustomRuleContext, RuleContext};
use antlr_rust::recognizer::{Recognizer,Actions};
use antlr_rust::atn_deserializer::ATNDeserializer;
use antlr_rust::dfa::DFA;
use antlr_rust::atn::{ATN, INVALID_ALT};
use antlr_rust::error_strategy::{ErrorStrategy, DefaultErrorStrategy};
use antlr_rust::parser_rule_context::{BaseParserRuleContext, ParserRuleContext,cast,cast_mut};
use antlr_rust::tree::*;
use antlr_rust::token::{TOKEN_EOF,OwningToken,Token};
use antlr_rust::int_stream::EOF;
use antlr_rust::vocabulary::{Vocabulary,VocabularyImpl};
use antlr_rust::token_factory::{CommonTokenFactory,TokenFactory, TokenAware};
use super::trinolistener::*;
use super::trinovisitor::*;

use antlr_rust::{TidAble,TidExt};

use std::marker::PhantomData;
use std::rc::Rc;
use std::convert::TryFrom;
use std::cell::RefCell;
use std::ops::{DerefMut, Deref};
use std::borrow::{Borrow,BorrowMut};
use std::any::{Any,TypeId};

		pub const T__0:isize=1; 
		pub const T__1:isize=2; 
		pub const T__2:isize=3; 
		pub const T__3:isize=4; 
		pub const T__4:isize=5; 
		pub const T__5:isize=6; 
		pub const T__6:isize=7; 
		pub const T__7:isize=8; 
		pub const ABORT:isize=9; 
		pub const ABSENT:isize=10; 
		pub const ADD:isize=11; 
		pub const ADMIN:isize=12; 
		pub const AFTER:isize=13; 
		pub const ALL:isize=14; 
		pub const ALTER:isize=15; 
		pub const ANALYZE:isize=16; 
		pub const AND:isize=17; 
		pub const ANTI:isize=18; 
		pub const ANY:isize=19; 
		pub const ARRAY:isize=20; 
		pub const AS:isize=21; 
		pub const ASC:isize=22; 
		pub const AT:isize=23; 
		pub const ATTACH:isize=24; 
		pub const AUTHORIZATION:isize=25; 
		pub const AUTO:isize=26; 
		pub const BACKUP:isize=27; 
		pub const BEGIN:isize=28; 
		pub const BERNOULLI:isize=29; 
		pub const BETWEEN:isize=30; 
		pub const BOTH:isize=31; 
		pub const BY:isize=32; 
		pub const BZIP2:isize=33; 
		pub const CALL:isize=34; 
		pub const CANCEL:isize=35; 
		pub const CASCADE:isize=36; 
		pub const CASE:isize=37; 
		pub const CASE_SENSITIVE:isize=38; 
		pub const CASE_INSENSITIVE:isize=39; 
		pub const CAST:isize=40; 
		pub const CATALOGS:isize=41; 
		pub const CHARACTER:isize=42; 
		pub const CLONE:isize=43; 
		pub const CLOSE:isize=44; 
		pub const CLUSTER:isize=45; 
		pub const COLLATE:isize=46; 
		pub const COLUMN:isize=47; 
		pub const COLUMNS:isize=48; 
		pub const COMMA:isize=49; 
		pub const COMMENT:isize=50; 
		pub const COMMIT:isize=51; 
		pub const COMMITTED:isize=52; 
		pub const COMPOUND:isize=53; 
		pub const COMPRESSION:isize=54; 
		pub const CONDITIONAL:isize=55; 
		pub const CONNECT:isize=56; 
		pub const CONNECTION:isize=57; 
		pub const CONSTRAINT:isize=58; 
		pub const COPARTITION:isize=59; 
		pub const COPY:isize=60; 
		pub const COUNT:isize=61; 
		pub const CREATE:isize=62; 
		pub const CROSS:isize=63; 
		pub const CUBE:isize=64; 
		pub const CURRENT:isize=65; 
		pub const CURRENT_ROLE:isize=66; 
		pub const DATA:isize=67; 
		pub const DATABASE:isize=68; 
		pub const DATASHARE:isize=69; 
		pub const DATE:isize=70; 
		pub const DAY:isize=71; 
		pub const DAYS:isize=72; 
		pub const DEALLOCATE:isize=73; 
		pub const DECLARE:isize=74; 
		pub const DEFAULT:isize=75; 
		pub const DEFAULTS:isize=76; 
		pub const DEFINE:isize=77; 
		pub const DEFINER:isize=78; 
		pub const DELETE:isize=79; 
		pub const DELIMITED:isize=80; 
		pub const DELIMITER:isize=81; 
		pub const DENY:isize=82; 
		pub const DESC:isize=83; 
		pub const DESCRIBE:isize=84; 
		pub const DESCRIPTOR:isize=85; 
		pub const DISTINCT:isize=86; 
		pub const DISTKEY:isize=87; 
		pub const DISTRIBUTED:isize=88; 
		pub const DISTSTYLE:isize=89; 
		pub const DETACH:isize=90; 
		pub const DOUBLE:isize=91; 
		pub const DROP:isize=92; 
		pub const ELSE:isize=93; 
		pub const EMPTY:isize=94; 
		pub const ENCODE:isize=95; 
		pub const ENCODING:isize=96; 
		pub const END:isize=97; 
		pub const ERROR:isize=98; 
		pub const ESCAPE:isize=99; 
		pub const EVEN:isize=100; 
		pub const EXCEPT:isize=101; 
		pub const EXCLUDING:isize=102; 
		pub const EXECUTE:isize=103; 
		pub const EXISTS:isize=104; 
		pub const EXPLAIN:isize=105; 
		pub const EXTERNAL:isize=106; 
		pub const EXTRACT:isize=107; 
		pub const FALSE:isize=108; 
		pub const FETCH:isize=109; 
		pub const FILTER:isize=110; 
		pub const FINAL:isize=111; 
		pub const FIRST:isize=112; 
		pub const FOLLOWING:isize=113; 
		pub const FOR:isize=114; 
		pub const FORMAT:isize=115; 
		pub const FROM:isize=116; 
		pub const FULL:isize=117; 
		pub const FUNCTION:isize=118; 
		pub const FUNCTIONS:isize=119; 
		pub const GENERATED:isize=120; 
		pub const GRACE:isize=121; 
		pub const GRANT:isize=122; 
		pub const GRANTED:isize=123; 
		pub const GRANTS:isize=124; 
		pub const GRAPHVIZ:isize=125; 
		pub const GROUP:isize=126; 
		pub const GROUPING:isize=127; 
		pub const GROUPS:isize=128; 
		pub const GZIP:isize=129; 
		pub const HAVING:isize=130; 
		pub const HEADER:isize=131; 
		pub const HOUR:isize=132; 
		pub const HOURS:isize=133; 
		pub const IDENTITY:isize=134; 
		pub const IF:isize=135; 
		pub const IGNORE:isize=136; 
		pub const IN:isize=137; 
		pub const INCLUDING:isize=138; 
		pub const INITIAL:isize=139; 
		pub const INNER:isize=140; 
		pub const INPUT:isize=141; 
		pub const INPUTFORMAT:isize=142; 
		pub const INTEGER:isize=143; 
		pub const INTERLEAVED:isize=144; 
		pub const INSERT:isize=145; 
		pub const INTERSECT:isize=146; 
		pub const INTERVAL:isize=147; 
		pub const INTO:isize=148; 
		pub const INVOKER:isize=149; 
		pub const IO:isize=150; 
		pub const IS:isize=151; 
		pub const ISOLATION:isize=152; 
		pub const ILIKE:isize=153; 
		pub const JOIN:isize=154; 
		pub const JSON:isize=155; 
		pub const JSON_ARRAY:isize=156; 
		pub const JSON_EXISTS:isize=157; 
		pub const JSON_OBJECT:isize=158; 
		pub const JSON_QUERY:isize=159; 
		pub const JSON_VALUE:isize=160; 
		pub const KEEP:isize=161; 
		pub const KEY:isize=162; 
		pub const KEYS:isize=163; 
		pub const LAMBDA:isize=164; 
		pub const LAST:isize=165; 
		pub const LATERAL:isize=166; 
		pub const LEADING:isize=167; 
		pub const LEFT:isize=168; 
		pub const LEVEL:isize=169; 
		pub const LIBRARY:isize=170; 
		pub const LIKE:isize=171; 
		pub const LIMIT:isize=172; 
		pub const LISTAGG:isize=173; 
		pub const LOCAL:isize=174; 
		pub const LOCATION:isize=175; 
		pub const LOCK:isize=176; 
		pub const LOGICAL:isize=177; 
		pub const M:isize=178; 
		pub const MAP:isize=179; 
		pub const MASKING:isize=180; 
		pub const MATCH:isize=181; 
		pub const MATCHED:isize=182; 
		pub const MATCHES:isize=183; 
		pub const MATCH_RECOGNIZE:isize=184; 
		pub const MATERIALIZED:isize=185; 
		pub const MAX:isize=186; 
		pub const MEASURES:isize=187; 
		pub const MERGE:isize=188; 
		pub const MIN:isize=189; 
		pub const MINUS_KW:isize=190; 
		pub const MINUTE:isize=191; 
		pub const MINUTES:isize=192; 
		pub const MODEL:isize=193; 
		pub const MONTH:isize=194; 
		pub const MONTHS:isize=195; 
		pub const NATURAL:isize=196; 
		pub const NEXT:isize=197; 
		pub const NFC:isize=198; 
		pub const NFD:isize=199; 
		pub const NFKC:isize=200; 
		pub const NFKD:isize=201; 
		pub const NO:isize=202; 
		pub const NONE:isize=203; 
		pub const NORMALIZE:isize=204; 
		pub const NOT:isize=205; 
		pub const NULL:isize=206; 
		pub const NULLS:isize=207; 
		pub const OBJECT:isize=208; 
		pub const OF:isize=209; 
		pub const OFFSET:isize=210; 
		pub const OMIT:isize=211; 
		pub const ON:isize=212; 
		pub const ONE:isize=213; 
		pub const ONLY:isize=214; 
		pub const OPTION:isize=215; 
		pub const OPTIONS:isize=216; 
		pub const OR:isize=217; 
		pub const ORDER:isize=218; 
		pub const ORDINALITY:isize=219; 
		pub const OUTER:isize=220; 
		pub const OUTPUT:isize=221; 
		pub const OUTPUTFORMAT:isize=222; 
		pub const OVER:isize=223; 
		pub const OVERFLOW:isize=224; 
		pub const PARTITION:isize=225; 
		pub const PARTITIONED:isize=226; 
		pub const PARTITIONS:isize=227; 
		pub const PASSING:isize=228; 
		pub const PAST:isize=229; 
		pub const PATH:isize=230; 
		pub const PATTERN:isize=231; 
		pub const PER:isize=232; 
		pub const PERIOD:isize=233; 
		pub const PERMUTE:isize=234; 
		pub const POSITION:isize=235; 
		pub const PRECEDING:isize=236; 
		pub const PRECISION:isize=237; 
		pub const PREPARE:isize=238; 
		pub const PRIOR:isize=239; 
		pub const PROCEDURE:isize=240; 
		pub const PRIVILEGES:isize=241; 
		pub const PROPERTIES:isize=242; 
		pub const PRUNE:isize=243; 
		pub const QUOTES:isize=244; 
		pub const RANGE:isize=245; 
		pub const READ:isize=246; 
		pub const RECURSIVE:isize=247; 
		pub const REFRESH:isize=248; 
		pub const RENAME:isize=249; 
		pub const REPEATABLE:isize=250; 
		pub const REPLACE:isize=251; 
		pub const RESET:isize=252; 
		pub const RESPECT:isize=253; 
		pub const RESTRICT:isize=254; 
		pub const RETURNING:isize=255; 
		pub const REVOKE:isize=256; 
		pub const RIGHT:isize=257; 
		pub const RLS:isize=258; 
		pub const ROLE:isize=259; 
		pub const ROLES:isize=260; 
		pub const ROLLBACK:isize=261; 
		pub const ROLLUP:isize=262; 
		pub const ROW:isize=263; 
		pub const ROWS:isize=264; 
		pub const RUNNING:isize=265; 
		pub const S:isize=266; 
		pub const SCALAR:isize=267; 
		pub const SEC:isize=268; 
		pub const SECOND:isize=269; 
		pub const SECONDS:isize=270; 
		pub const SCHEMA:isize=271; 
		pub const SCHEMAS:isize=272; 
		pub const SECURITY:isize=273; 
		pub const SEEK:isize=274; 
		pub const SELECT:isize=275; 
		pub const SEMI:isize=276; 
		pub const SERDE:isize=277; 
		pub const SERDEPROPERTIES:isize=278; 
		pub const SERIALIZABLE:isize=279; 
		pub const SESSION:isize=280; 
		pub const SET:isize=281; 
		pub const SETS:isize=282; 
		pub const SHOW:isize=283; 
		pub const SIMILAR:isize=284; 
		pub const SKIP_KW:isize=285; 
		pub const SNAPSHOT:isize=286; 
		pub const SOME:isize=287; 
		pub const SORTKEY:isize=288; 
		pub const START:isize=289; 
		pub const STATS:isize=290; 
		pub const STORED:isize=291; 
		pub const STRUCT:isize=292; 
		pub const SUBSET:isize=293; 
		pub const SUBSTRING:isize=294; 
		pub const SYSTEM:isize=295; 
		pub const SYSTEM_TIME:isize=296; 
		pub const TABLE:isize=297; 
		pub const TABLES:isize=298; 
		pub const TABLESAMPLE:isize=299; 
		pub const TEMP:isize=300; 
		pub const TEMPORARY:isize=301; 
		pub const TERMINATED:isize=302; 
		pub const TEXT:isize=303; 
		pub const STRING_KW:isize=304; 
		pub const THEN:isize=305; 
		pub const TIES:isize=306; 
		pub const TIME:isize=307; 
		pub const TIMESTAMP:isize=308; 
		pub const TO:isize=309; 
		pub const TOP:isize=310; 
		pub const TRAILING:isize=311; 
		pub const TRANSACTION:isize=312; 
		pub const TRIM:isize=313; 
		pub const TRUE:isize=314; 
		pub const TRUNCATE:isize=315; 
		pub const TRY_CAST:isize=316; 
		pub const TUPLE:isize=317; 
		pub const TYPE:isize=318; 
		pub const UESCAPE:isize=319; 
		pub const UNBOUNDED:isize=320; 
		pub const UNCOMMITTED:isize=321; 
		pub const UNCONDITIONAL:isize=322; 
		pub const UNION:isize=323; 
		pub const UNIQUE:isize=324; 
		pub const UNKNOWN:isize=325; 
		pub const UNLOAD:isize=326; 
		pub const UNMATCHED:isize=327; 
		pub const UNNEST:isize=328; 
		pub const UNSIGNED:isize=329; 
		pub const UPDATE:isize=330; 
		pub const USE:isize=331; 
		pub const USER:isize=332; 
		pub const USING:isize=333; 
		pub const UTF16:isize=334; 
		pub const UTF32:isize=335; 
		pub const UTF8:isize=336; 
		pub const VACUUM:isize=337; 
		pub const VALIDATE:isize=338; 
		pub const VALUE:isize=339; 
		pub const VALUES:isize=340; 
		pub const VARYING:isize=341; 
		pub const VERBOSE:isize=342; 
		pub const VERSION:isize=343; 
		pub const VIEW:isize=344; 
		pub const WEEK:isize=345; 
		pub const WHEN:isize=346; 
		pub const WHERE:isize=347; 
		pub const WINDOW:isize=348; 
		pub const WITH:isize=349; 
		pub const WITHIN:isize=350; 
		pub const WITHOUT:isize=351; 
		pub const WORK:isize=352; 
		pub const WRAPPER:isize=353; 
		pub const WRITE:isize=354; 
		pub const XZ:isize=355; 
		pub const YEAR:isize=356; 
		pub const YEARS:isize=357; 
		pub const YES:isize=358; 
		pub const ZONE:isize=359; 
		pub const ZSTD:isize=360; 
		pub const LPAREN:isize=361; 
		pub const RPAREN:isize=362; 
		pub const LBRACKET:isize=363; 
		pub const RBRACKET:isize=364; 
		pub const DOT:isize=365; 
		pub const EQ:isize=366; 
		pub const NEQ:isize=367; 
		pub const LT:isize=368; 
		pub const LTE:isize=369; 
		pub const GT:isize=370; 
		pub const GTE:isize=371; 
		pub const PLUS:isize=372; 
		pub const MINUS:isize=373; 
		pub const ASTERISK:isize=374; 
		pub const SLASH:isize=375; 
		pub const PERCENT:isize=376; 
		pub const CONCAT:isize=377; 
		pub const QUESTION_MARK:isize=378; 
		pub const SEMI_COLON:isize=379; 
		pub const COLON:isize=380; 
		pub const DOLLAR:isize=381; 
		pub const BITWISE_SHIFT_LEFT:isize=382; 
		pub const POSIX:isize=383; 
		pub const STRING:isize=384; 
		pub const UNICODE_STRING:isize=385; 
		pub const BINARY_LITERAL:isize=386; 
		pub const INTEGER_VALUE:isize=387; 
		pub const DECIMAL_VALUE:isize=388; 
		pub const DOUBLE_VALUE:isize=389; 
		pub const IDENTIFIER:isize=390; 
		pub const DIGIT_IDENTIFIER:isize=391; 
		pub const QUOTED_IDENTIFIER:isize=392; 
		pub const VARIABLE:isize=393; 
		pub const SIMPLE_COMMENT:isize=394; 
		pub const BRACKETED_COMMENT:isize=395; 
		pub const WS:isize=396; 
		pub const UNPAIRED_TOKEN:isize=397; 
		pub const UNRECOGNIZED:isize=398;
	pub const RULE_multipleStatement:usize = 0; 
	pub const RULE_singleStatement:usize = 1; 
	pub const RULE_standaloneExpression:usize = 2; 
	pub const RULE_standaloneQualifiedName:usize = 3; 
	pub const RULE_standaloneType:usize = 4; 
	pub const RULE_statement:usize = 5; 
	pub const RULE_tableElements:usize = 6; 
	pub const RULE_query:usize = 7; 
	pub const RULE_with:usize = 8; 
	pub const RULE_tableElement:usize = 9; 
	pub const RULE_columnDefinition:usize = 10; 
	pub const RULE_fieldDefinition:usize = 11; 
	pub const RULE_columnName:usize = 12; 
	pub const RULE_columnNameComponent:usize = 13; 
	pub const RULE_columnSchemaWithMetadata:usize = 14; 
	pub const RULE_columnOptionList:usize = 15; 
	pub const RULE_columnOption:usize = 16; 
	pub const RULE_columnSchema:usize = 17; 
	pub const RULE_properties:usize = 18; 
	pub const RULE_propertyAssignments:usize = 19; 
	pub const RULE_property:usize = 20; 
	pub const RULE_propertyKey:usize = 21; 
	pub const RULE_propertyValue:usize = 22; 
	pub const RULE_queryNoWith:usize = 23; 
	pub const RULE_queryLimit:usize = 24; 
	pub const RULE_queryLimitTarget:usize = 25; 
	pub const RULE_rowOrRows:usize = 26; 
	pub const RULE_limitRowCount:usize = 27; 
	pub const RULE_rowCount:usize = 28; 
	pub const RULE_queryTerm:usize = 29; 
	pub const RULE_setOperation:usize = 30; 
	pub const RULE_setOperator:usize = 31; 
	pub const RULE_setOperationIntersect:usize = 32; 
	pub const RULE_setIntersectOperator:usize = 33; 
	pub const RULE_setQuantifier:usize = 34; 
	pub const RULE_inlineTable:usize = 35; 
	pub const RULE_queryPrimary:usize = 36; 
	pub const RULE_sortItem:usize = 37; 
	pub const RULE_querySpecification:usize = 38; 
	pub const RULE_querySelectItems:usize = 39; 
	pub const RULE_aggregationClause:usize = 40; 
	pub const RULE_groupBy:usize = 41; 
	pub const RULE_groupingElement:usize = 42; 
	pub const RULE_groupingSet:usize = 43; 
	pub const RULE_windowDefinition:usize = 44; 
	pub const RULE_windowSpecification:usize = 45; 
	pub const RULE_windowSpecificationPartitionBy:usize = 46; 
	pub const RULE_orderBy:usize = 47; 
	pub const RULE_namedQuery:usize = 48; 
	pub const RULE_selectItemAlias:usize = 49; 
	pub const RULE_selectItem:usize = 50; 
	pub const RULE_multiSelect:usize = 51; 
	pub const RULE_selectStar:usize = 52; 
	pub const RULE_relation:usize = 53; 
	pub const RULE_joinedRelation:usize = 54; 
	pub const RULE_joinType:usize = 55; 
	pub const RULE_joinCriteria:usize = 56; 
	pub const RULE_noJoinRelation:usize = 57; 
	pub const RULE_sampledRelationTarget:usize = 58; 
	pub const RULE_sampledRelation:usize = 59; 
	pub const RULE_sampleOperator:usize = 60; 
	pub const RULE_sampleMethod:usize = 61; 
	pub const RULE_trimsSpecification:usize = 62; 
	pub const RULE_listAggOverflowBehavior:usize = 63; 
	pub const RULE_listaggCountIndication:usize = 64; 
	pub const RULE_patternRecognitionTarget:usize = 65; 
	pub const RULE_patternRecognition:usize = 66; 
	pub const RULE_measureDefinition:usize = 67; 
	pub const RULE_rowsPerMatch:usize = 68; 
	pub const RULE_emptyMatchHandling:usize = 69; 
	pub const RULE_skipTo:usize = 70; 
	pub const RULE_subsetDefinition:usize = 71; 
	pub const RULE_variableDefinition:usize = 72; 
	pub const RULE_aliasedRelationTarget:usize = 73; 
	pub const RULE_aliasedRelation:usize = 74; 
	pub const RULE_columnAliases:usize = 75; 
	pub const RULE_relationPrimary:usize = 76; 
	pub const RULE_tableFunctionCall:usize = 77; 
	pub const RULE_tableFunctionArgumentCopartition:usize = 78; 
	pub const RULE_tableFunctionArgumentName:usize = 79; 
	pub const RULE_tableFunctionArgument:usize = 80; 
	pub const RULE_tableArgument:usize = 81; 
	pub const RULE_tableArgumentRelation:usize = 82; 
	pub const RULE_descriptorArgument:usize = 83; 
	pub const RULE_descriptorField:usize = 84; 
	pub const RULE_copartitionTables:usize = 85; 
	pub const RULE_expression:usize = 86; 
	pub const RULE_booleanExpression:usize = 87; 
	pub const RULE_predicate:usize = 88; 
	pub const RULE_valueExpression:usize = 89; 
	pub const RULE_primaryExpression:usize = 90; 
	pub const RULE_functionCallHead:usize = 91; 
	pub const RULE_functionCallTail:usize = 92; 
	pub const RULE_callArgument:usize = 93; 
	pub const RULE_functionExtraArguments:usize = 94; 
	pub const RULE_functionName:usize = 95; 
	pub const RULE_field:usize = 96; 
	pub const RULE_jsonPathInvocation:usize = 97; 
	pub const RULE_jsonValueExpression:usize = 98; 
	pub const RULE_jsonRepresentation:usize = 99; 
	pub const RULE_jsonArgument:usize = 100; 
	pub const RULE_jsonExistsErrorBehavior:usize = 101; 
	pub const RULE_jsonValueBehavior:usize = 102; 
	pub const RULE_jsonQueryWrapperBehavior:usize = 103; 
	pub const RULE_jsonQueryBehavior:usize = 104; 
	pub const RULE_jsonObjectMember:usize = 105; 
	pub const RULE_processingMode:usize = 106; 
	pub const RULE_nullTreatment:usize = 107; 
	pub const RULE_string:usize = 108; 
	pub const RULE_timeZoneSpecifier:usize = 109; 
	pub const RULE_comparisonOperator:usize = 110; 
	pub const RULE_comparisonQuantifier:usize = 111; 
	pub const RULE_booleanValue:usize = 112; 
	pub const RULE_interval:usize = 113; 
	pub const RULE_intervalField:usize = 114; 
	pub const RULE_normalForm:usize = 115; 
	pub const RULE_typeIdentifier:usize = 116; 
	pub const RULE_type_:usize = 117; 
	pub const RULE_nonnullableType:usize = 118; 
	pub const RULE_rowField:usize = 119; 
	pub const RULE_typeParameter:usize = 120; 
	pub const RULE_whenClause:usize = 121; 
	pub const RULE_filter:usize = 122; 
	pub const RULE_over:usize = 123; 
	pub const RULE_windowFrame:usize = 124; 
	pub const RULE_frameExtent:usize = 125; 
	pub const RULE_frameBound:usize = 126; 
	pub const RULE_rowPattern:usize = 127; 
	pub const RULE_patternPrimary:usize = 128; 
	pub const RULE_patternQuantifier:usize = 129; 
	pub const RULE_transactionMode:usize = 130; 
	pub const RULE_levelOfIsolation:usize = 131; 
	pub const RULE_explainOption:usize = 132; 
	pub const RULE_privilege:usize = 133; 
	pub const RULE_qualifiedName:usize = 134; 
	pub const RULE_pathExpression:usize = 135; 
	pub const RULE_queryPeriod:usize = 136; 
	pub const RULE_rangeType:usize = 137; 
	pub const RULE_principal:usize = 138; 
	pub const RULE_identifier:usize = 139; 
	pub const RULE_quotedIdentifier:usize = 140; 
	pub const RULE_pathComponent:usize = 141; 
	pub const RULE_standaloneIdentifier:usize = 142; 
	pub const RULE_identifierList:usize = 143; 
	pub const RULE_identifierSeq:usize = 144; 
	pub const RULE_number:usize = 145; 
	pub const RULE_prestoShowFunctionType:usize = 146; 
	pub const RULE_prestoShowFunctionRowField:usize = 147; 
	pub const RULE_prestoShowFunctionTypes:usize = 148; 
	pub const RULE_nonReserved:usize = 149;
	pub const ruleNames: [&'static str; 150] =  [
		"multipleStatement", "singleStatement", "standaloneExpression", "standaloneQualifiedName", 
		"standaloneType", "statement", "tableElements", "query", "with", "tableElement", 
		"columnDefinition", "fieldDefinition", "columnName", "columnNameComponent", 
		"columnSchemaWithMetadata", "columnOptionList", "columnOption", "columnSchema", 
		"properties", "propertyAssignments", "property", "propertyKey", "propertyValue", 
		"queryNoWith", "queryLimit", "queryLimitTarget", "rowOrRows", "limitRowCount", 
		"rowCount", "queryTerm", "setOperation", "setOperator", "setOperationIntersect", 
		"setIntersectOperator", "setQuantifier", "inlineTable", "queryPrimary", 
		"sortItem", "querySpecification", "querySelectItems", "aggregationClause", 
		"groupBy", "groupingElement", "groupingSet", "windowDefinition", "windowSpecification", 
		"windowSpecificationPartitionBy", "orderBy", "namedQuery", "selectItemAlias", 
		"selectItem", "multiSelect", "selectStar", "relation", "joinedRelation", 
		"joinType", "joinCriteria", "noJoinRelation", "sampledRelationTarget", 
		"sampledRelation", "sampleOperator", "sampleMethod", "trimsSpecification", 
		"listAggOverflowBehavior", "listaggCountIndication", "patternRecognitionTarget", 
		"patternRecognition", "measureDefinition", "rowsPerMatch", "emptyMatchHandling", 
		"skipTo", "subsetDefinition", "variableDefinition", "aliasedRelationTarget", 
		"aliasedRelation", "columnAliases", "relationPrimary", "tableFunctionCall", 
		"tableFunctionArgumentCopartition", "tableFunctionArgumentName", "tableFunctionArgument", 
		"tableArgument", "tableArgumentRelation", "descriptorArgument", "descriptorField", 
		"copartitionTables", "expression", "booleanExpression", "predicate", "valueExpression", 
		"primaryExpression", "functionCallHead", "functionCallTail", "callArgument", 
		"functionExtraArguments", "functionName", "field", "jsonPathInvocation", 
		"jsonValueExpression", "jsonRepresentation", "jsonArgument", "jsonExistsErrorBehavior", 
		"jsonValueBehavior", "jsonQueryWrapperBehavior", "jsonQueryBehavior", 
		"jsonObjectMember", "processingMode", "nullTreatment", "string", "timeZoneSpecifier", 
		"comparisonOperator", "comparisonQuantifier", "booleanValue", "interval", 
		"intervalField", "normalForm", "typeIdentifier", "type_", "nonnullableType", 
		"rowField", "typeParameter", "whenClause", "filter", "over", "windowFrame", 
		"frameExtent", "frameBound", "rowPattern", "patternPrimary", "patternQuantifier", 
		"transactionMode", "levelOfIsolation", "explainOption", "privilege", "qualifiedName", 
		"pathExpression", "queryPeriod", "rangeType", "principal", "identifier", 
		"quotedIdentifier", "pathComponent", "standaloneIdentifier", "identifierList", 
		"identifierSeq", "number", "prestoShowFunctionType", "prestoShowFunctionRowField", 
		"prestoShowFunctionTypes", "nonReserved"
	];


	pub const _LITERAL_NAMES: [Option<&'static str>;384] = [
		None, Some("'=>'"), Some("'->'"), Some("'|'"), Some("'^'"), Some("'{-'"), 
		Some("'-}'"), Some("'{'"), Some("'}'"), Some("'ABORT'"), Some("'ABSENT'"), 
		Some("'ADD'"), Some("'ADMIN'"), Some("'AFTER'"), Some("'ALL'"), Some("'ALTER'"), 
		Some("'ANALYZE'"), Some("'AND'"), Some("'ANTI'"), Some("'ANY'"), Some("'ARRAY'"), 
		Some("'AS'"), Some("'ASC'"), Some("'AT'"), Some("'ATTACH'"), Some("'AUTHORIZATION'"), 
		Some("'AUTO'"), Some("'BACKUP'"), Some("'BEGIN'"), Some("'BERNOULLI'"), 
		Some("'BETWEEN'"), Some("'BOTH'"), Some("'BY'"), Some("'BZIP2'"), Some("'CALL'"), 
		Some("'CANCEL'"), Some("'CASCADE'"), Some("'CASE'"), Some("'CASE_SENSITIVE'"), 
		Some("'CASE_INSENSITIVE'"), Some("'CAST'"), Some("'CATALOGS'"), Some("'CHARACTER'"), 
		Some("'CLONE'"), Some("'CLOSE'"), Some("'CLUSTER'"), Some("'COLLATE'"), 
		Some("'COLUMN'"), Some("'COLUMNS'"), Some("','"), Some("'COMMENT'"), Some("'COMMIT'"), 
		Some("'COMMITTED'"), Some("'COMPOUND'"), Some("'COMPRESSION'"), Some("'CONDITIONAL'"), 
		Some("'CONNECT'"), Some("'CONNECTION'"), Some("'CONSTRAINT'"), Some("'COPARTITION'"), 
		Some("'COPY'"), Some("'COUNT'"), Some("'CREATE'"), Some("'CROSS'"), Some("'CUBE'"), 
		Some("'CURRENT'"), Some("'CURRENT_ROLE'"), Some("'DATA'"), Some("'DATABASE'"), 
		Some("'DATASHARE'"), Some("'DATE'"), Some("'DAY'"), Some("'DAYS'"), Some("'DEALLOCATE'"), 
		Some("'DECLARE'"), Some("'DEFAULT'"), Some("'DEFAULTS'"), Some("'DEFINE'"), 
		Some("'DEFINER'"), Some("'DELETE'"), Some("'DELIMITED'"), Some("'DELIMITER'"), 
		Some("'DENY'"), Some("'DESC'"), Some("'DESCRIBE'"), Some("'DESCRIPTOR'"), 
		Some("'DISTINCT'"), Some("'DISTKEY'"), Some("'DISTRIBUTED'"), Some("'DISTSTYLE'"), 
		Some("'DETACH'"), Some("'DOUBLE'"), Some("'DROP'"), Some("'ELSE'"), Some("'EMPTY'"), 
		Some("'ENCODE'"), Some("'ENCODING'"), Some("'END'"), Some("'ERROR'"), 
		Some("'ESCAPE'"), Some("'EVEN'"), Some("'EXCEPT'"), Some("'EXCLUDING'"), 
		Some("'EXECUTE'"), Some("'EXISTS'"), Some("'EXPLAIN'"), Some("'EXTERNAL'"), 
		Some("'EXTRACT'"), Some("'FALSE'"), Some("'FETCH'"), Some("'FILTER'"), 
		Some("'FINAL'"), Some("'FIRST'"), Some("'FOLLOWING'"), Some("'FOR'"), 
		Some("'FORMAT'"), Some("'FROM'"), Some("'FULL'"), Some("'FUNCTION'"), 
		Some("'FUNCTIONS'"), Some("'GENERATED'"), Some("'GRACE'"), Some("'GRANT'"), 
		Some("'GRANTED'"), Some("'GRANTS'"), Some("'GRAPHVIZ'"), Some("'GROUP'"), 
		Some("'GROUPING'"), Some("'GROUPS'"), Some("'GZIP'"), Some("'HAVING'"), 
		Some("'HEADER'"), Some("'HOUR'"), Some("'HOURS'"), Some("'IDENTITY'"), 
		Some("'IF'"), Some("'IGNORE'"), Some("'IN'"), Some("'INCLUDING'"), Some("'INITIAL'"), 
		Some("'INNER'"), Some("'INPUT'"), Some("'INPUTFORMAT'"), Some("'INTEGER'"), 
		Some("'INTERLEAVED'"), Some("'INSERT'"), Some("'INTERSECT'"), Some("'INTERVAL'"), 
		Some("'INTO'"), Some("'INVOKER'"), Some("'IO'"), Some("'IS'"), Some("'ISOLATION'"), 
		Some("'ILIKE'"), Some("'JOIN'"), Some("'JSON'"), Some("'JSON_ARRAY'"), 
		Some("'JSON_EXISTS'"), Some("'JSON_OBJECT'"), Some("'JSON_QUERY'"), Some("'JSON_VALUE'"), 
		Some("'KEEP'"), Some("'KEY'"), Some("'KEYS'"), Some("'LAMBDA'"), Some("'LAST'"), 
		Some("'LATERAL'"), Some("'LEADING'"), Some("'LEFT'"), Some("'LEVEL'"), 
		Some("'LIBRARY'"), Some("'LIKE'"), Some("'LIMIT'"), Some("'LISTAGG'"), 
		Some("'LOCAL'"), Some("'LOCATION'"), Some("'LOCK'"), Some("'LOGICAL'"), 
		Some("'M'"), Some("'MAP'"), Some("'MASKING'"), Some("'MATCH'"), Some("'MATCHED'"), 
		Some("'MATCHES'"), Some("'MATCH_RECOGNIZE'"), Some("'MATERIALIZED'"), 
		Some("'MAX'"), Some("'MEASURES'"), Some("'MERGE'"), Some("'MIN'"), Some("'MINUS'"), 
		Some("'MINUTE'"), Some("'MINUTES'"), Some("'MODEL'"), Some("'MONTH'"), 
		Some("'MONTHS'"), Some("'NATURAL'"), Some("'NEXT'"), Some("'NFC'"), Some("'NFD'"), 
		Some("'NFKC'"), Some("'NFKD'"), Some("'NO'"), Some("'NONE'"), Some("'NORMALIZE'"), 
		Some("'NOT'"), Some("'NULL'"), Some("'NULLS'"), Some("'OBJECT'"), Some("'OF'"), 
		Some("'OFFSET'"), Some("'OMIT'"), Some("'ON'"), Some("'ONE'"), Some("'ONLY'"), 
		Some("'OPTION'"), Some("'OPTIONS'"), Some("'OR'"), Some("'ORDER'"), Some("'ORDINALITY'"), 
		Some("'OUTER'"), Some("'OUTPUT'"), Some("'OUTPUTFORMAT'"), Some("'OVER'"), 
		Some("'OVERFLOW'"), Some("'PARTITION'"), Some("'PARTITIONED'"), Some("'PARTITIONS'"), 
		Some("'PASSING'"), Some("'PAST'"), Some("'PATH'"), Some("'PATTERN'"), 
		Some("'PER'"), Some("'PERIOD'"), Some("'PERMUTE'"), Some("'POSITION'"), 
		Some("'PRECEDING'"), Some("'PRECISION'"), Some("'PREPARE'"), Some("'PRIOR'"), 
		Some("'PROCEDURE'"), Some("'PRIVILEGES'"), Some("'PROPERTIES'"), Some("'PRUNE'"), 
		Some("'QUOTES'"), Some("'RANGE'"), Some("'READ'"), Some("'RECURSIVE'"), 
		Some("'REFRESH'"), Some("'RENAME'"), Some("'REPEATABLE'"), Some("'REPLACE'"), 
		Some("'RESET'"), Some("'RESPECT'"), Some("'RESTRICT'"), Some("'RETURNING'"), 
		Some("'REVOKE'"), Some("'RIGHT'"), Some("'RLS'"), Some("'ROLE'"), Some("'ROLES'"), 
		Some("'ROLLBACK'"), Some("'ROLLUP'"), Some("'ROW'"), Some("'ROWS'"), Some("'RUNNING'"), 
		Some("'S'"), Some("'SCALAR'"), Some("'SEC'"), Some("'SECOND'"), Some("'SECONDS'"), 
		Some("'SCHEMA'"), Some("'SCHEMAS'"), Some("'SECURITY'"), Some("'SEEK'"), 
		Some("'SELECT'"), Some("'SEMI'"), Some("'SERDE'"), Some("'SERDEPROPERTIES'"), 
		Some("'SERIALIZABLE'"), Some("'SESSION'"), Some("'SET'"), Some("'SETS'"), 
		Some("'SHOW'"), Some("'SIMILAR'"), Some("'SKIP'"), Some("'SNAPSHOT'"), 
		Some("'SOME'"), Some("'SORTKEY'"), Some("'START'"), Some("'STATS'"), Some("'STORED'"), 
		Some("'STRUCT'"), Some("'SUBSET'"), Some("'SUBSTRING'"), Some("'SYSTEM'"), 
		Some("'SYSTEM_TIME'"), Some("'TABLE'"), Some("'TABLES'"), Some("'TABLESAMPLE'"), 
		Some("'TEMP'"), Some("'TEMPORARY'"), Some("'TERMINATED'"), Some("'TEXT'"), 
		Some("'STRING'"), Some("'THEN'"), Some("'TIES'"), Some("'TIME'"), Some("'TIMESTAMP'"), 
		Some("'TO'"), Some("'TOP'"), Some("'TRAILING'"), Some("'TRANSACTION'"), 
		Some("'TRIM'"), Some("'TRUE'"), Some("'TRUNCATE'"), Some("'TRY_CAST'"), 
		Some("'TUPLE'"), Some("'TYPE'"), Some("'UESCAPE'"), Some("'UNBOUNDED'"), 
		Some("'UNCOMMITTED'"), Some("'UNCONDITIONAL'"), Some("'UNION'"), Some("'UNIQUE'"), 
		Some("'UNKNOWN'"), Some("'UNLOAD'"), Some("'UNMATCHED'"), Some("'UNNEST'"), 
		Some("'UNSIGNED'"), Some("'UPDATE'"), Some("'USE'"), Some("'USER'"), Some("'USING'"), 
		Some("'UTF16'"), Some("'UTF32'"), Some("'UTF8'"), Some("'VACUUM'"), Some("'VALIDATE'"), 
		Some("'VALUE'"), Some("'VALUES'"), Some("'VARYING'"), Some("'VERBOSE'"), 
		Some("'VERSION'"), Some("'VIEW'"), Some("'WEEK'"), Some("'WHEN'"), Some("'WHERE'"), 
		Some("'WINDOW'"), Some("'WITH'"), Some("'WITHIN'"), Some("'WITHOUT'"), 
		Some("'WORK'"), Some("'WRAPPER'"), Some("'WRITE'"), Some("'XZ'"), Some("'YEAR'"), 
		Some("'YEARS'"), Some("'YES'"), Some("'ZONE'"), Some("'ZSTD'"), Some("'('"), 
		Some("')'"), Some("'['"), Some("']'"), Some("'.'"), Some("'='"), None, 
		Some("'<'"), Some("'<='"), Some("'>'"), Some("'>='"), Some("'+'"), Some("'-'"), 
		Some("'*'"), Some("'/'"), Some("'%'"), Some("'||'"), Some("'?'"), Some("';'"), 
		Some("':'"), Some("'$'"), Some("'<<'"), Some("'~'")
	];
	pub const _SYMBOLIC_NAMES: [Option<&'static str>;399]  = [
		None, None, None, None, None, None, None, None, None, Some("ABORT"), Some("ABSENT"), 
		Some("ADD"), Some("ADMIN"), Some("AFTER"), Some("ALL"), Some("ALTER"), 
		Some("ANALYZE"), Some("AND"), Some("ANTI"), Some("ANY"), Some("ARRAY"), 
		Some("AS"), Some("ASC"), Some("AT"), Some("ATTACH"), Some("AUTHORIZATION"), 
		Some("AUTO"), Some("BACKUP"), Some("BEGIN"), Some("BERNOULLI"), Some("BETWEEN"), 
		Some("BOTH"), Some("BY"), Some("BZIP2"), Some("CALL"), Some("CANCEL"), 
		Some("CASCADE"), Some("CASE"), Some("CASE_SENSITIVE"), Some("CASE_INSENSITIVE"), 
		Some("CAST"), Some("CATALOGS"), Some("CHARACTER"), Some("CLONE"), Some("CLOSE"), 
		Some("CLUSTER"), Some("COLLATE"), Some("COLUMN"), Some("COLUMNS"), Some("COMMA"), 
		Some("COMMENT"), Some("COMMIT"), Some("COMMITTED"), Some("COMPOUND"), 
		Some("COMPRESSION"), Some("CONDITIONAL"), Some("CONNECT"), Some("CONNECTION"), 
		Some("CONSTRAINT"), Some("COPARTITION"), Some("COPY"), Some("COUNT"), 
		Some("CREATE"), Some("CROSS"), Some("CUBE"), Some("CURRENT"), Some("CURRENT_ROLE"), 
		Some("DATA"), Some("DATABASE"), Some("DATASHARE"), Some("DATE"), Some("DAY"), 
		Some("DAYS"), Some("DEALLOCATE"), Some("DECLARE"), Some("DEFAULT"), Some("DEFAULTS"), 
		Some("DEFINE"), Some("DEFINER"), Some("DELETE"), Some("DELIMITED"), Some("DELIMITER"), 
		Some("DENY"), Some("DESC"), Some("DESCRIBE"), Some("DESCRIPTOR"), Some("DISTINCT"), 
		Some("DISTKEY"), Some("DISTRIBUTED"), Some("DISTSTYLE"), Some("DETACH"), 
		Some("DOUBLE"), Some("DROP"), Some("ELSE"), Some("EMPTY"), Some("ENCODE"), 
		Some("ENCODING"), Some("END"), Some("ERROR"), Some("ESCAPE"), Some("EVEN"), 
		Some("EXCEPT"), Some("EXCLUDING"), Some("EXECUTE"), Some("EXISTS"), Some("EXPLAIN"), 
		Some("EXTERNAL"), Some("EXTRACT"), Some("FALSE"), Some("FETCH"), Some("FILTER"), 
		Some("FINAL"), Some("FIRST"), Some("FOLLOWING"), Some("FOR"), Some("FORMAT"), 
		Some("FROM"), Some("FULL"), Some("FUNCTION"), Some("FUNCTIONS"), Some("GENERATED"), 
		Some("GRACE"), Some("GRANT"), Some("GRANTED"), Some("GRANTS"), Some("GRAPHVIZ"), 
		Some("GROUP"), Some("GROUPING"), Some("GROUPS"), Some("GZIP"), Some("HAVING"), 
		Some("HEADER"), Some("HOUR"), Some("HOURS"), Some("IDENTITY"), Some("IF"), 
		Some("IGNORE"), Some("IN"), Some("INCLUDING"), Some("INITIAL"), Some("INNER"), 
		Some("INPUT"), Some("INPUTFORMAT"), Some("INTEGER"), Some("INTERLEAVED"), 
		Some("INSERT"), Some("INTERSECT"), Some("INTERVAL"), Some("INTO"), Some("INVOKER"), 
		Some("IO"), Some("IS"), Some("ISOLATION"), Some("ILIKE"), Some("JOIN"), 
		Some("JSON"), Some("JSON_ARRAY"), Some("JSON_EXISTS"), Some("JSON_OBJECT"), 
		Some("JSON_QUERY"), Some("JSON_VALUE"), Some("KEEP"), Some("KEY"), Some("KEYS"), 
		Some("LAMBDA"), Some("LAST"), Some("LATERAL"), Some("LEADING"), Some("LEFT"), 
		Some("LEVEL"), Some("LIBRARY"), Some("LIKE"), Some("LIMIT"), Some("LISTAGG"), 
		Some("LOCAL"), Some("LOCATION"), Some("LOCK"), Some("LOGICAL"), Some("M"), 
		Some("MAP"), Some("MASKING"), Some("MATCH"), Some("MATCHED"), Some("MATCHES"), 
		Some("MATCH_RECOGNIZE"), Some("MATERIALIZED"), Some("MAX"), Some("MEASURES"), 
		Some("MERGE"), Some("MIN"), Some("MINUS_KW"), Some("MINUTE"), Some("MINUTES"), 
		Some("MODEL"), Some("MONTH"), Some("MONTHS"), Some("NATURAL"), Some("NEXT"), 
		Some("NFC"), Some("NFD"), Some("NFKC"), Some("NFKD"), Some("NO"), Some("NONE"), 
		Some("NORMALIZE"), Some("NOT"), Some("NULL"), Some("NULLS"), Some("OBJECT"), 
		Some("OF"), Some("OFFSET"), Some("OMIT"), Some("ON"), Some("ONE"), Some("ONLY"), 
		Some("OPTION"), Some("OPTIONS"), Some("OR"), Some("ORDER"), Some("ORDINALITY"), 
		Some("OUTER"), Some("OUTPUT"), Some("OUTPUTFORMAT"), Some("OVER"), Some("OVERFLOW"), 
		Some("PARTITION"), Some("PARTITIONED"), Some("PARTITIONS"), Some("PASSING"), 
		Some("PAST"), Some("PATH"), Some("PATTERN"), Some("PER"), Some("PERIOD"), 
		Some("PERMUTE"), Some("POSITION"), Some("PRECEDING"), Some("PRECISION"), 
		Some("PREPARE"), Some("PRIOR"), Some("PROCEDURE"), Some("PRIVILEGES"), 
		Some("PROPERTIES"), Some("PRUNE"), Some("QUOTES"), Some("RANGE"), Some("READ"), 
		Some("RECURSIVE"), Some("REFRESH"), Some("RENAME"), Some("REPEATABLE"), 
		Some("REPLACE"), Some("RESET"), Some("RESPECT"), Some("RESTRICT"), Some("RETURNING"), 
		Some("REVOKE"), Some("RIGHT"), Some("RLS"), Some("ROLE"), Some("ROLES"), 
		Some("ROLLBACK"), Some("ROLLUP"), Some("ROW"), Some("ROWS"), Some("RUNNING"), 
		Some("S"), Some("SCALAR"), Some("SEC"), Some("SECOND"), Some("SECONDS"), 
		Some("SCHEMA"), Some("SCHEMAS"), Some("SECURITY"), Some("SEEK"), Some("SELECT"), 
		Some("SEMI"), Some("SERDE"), Some("SERDEPROPERTIES"), Some("SERIALIZABLE"), 
		Some("SESSION"), Some("SET"), Some("SETS"), Some("SHOW"), Some("SIMILAR"), 
		Some("SKIP_KW"), Some("SNAPSHOT"), Some("SOME"), Some("SORTKEY"), Some("START"), 
		Some("STATS"), Some("STORED"), Some("STRUCT"), Some("SUBSET"), Some("SUBSTRING"), 
		Some("SYSTEM"), Some("SYSTEM_TIME"), Some("TABLE"), Some("TABLES"), Some("TABLESAMPLE"), 
		Some("TEMP"), Some("TEMPORARY"), Some("TERMINATED"), Some("TEXT"), Some("STRING_KW"), 
		Some("THEN"), Some("TIES"), Some("TIME"), Some("TIMESTAMP"), Some("TO"), 
		Some("TOP"), Some("TRAILING"), Some("TRANSACTION"), Some("TRIM"), Some("TRUE"), 
		Some("TRUNCATE"), Some("TRY_CAST"), Some("TUPLE"), Some("TYPE"), Some("UESCAPE"), 
		Some("UNBOUNDED"), Some("UNCOMMITTED"), Some("UNCONDITIONAL"), Some("UNION"), 
		Some("UNIQUE"), Some("UNKNOWN"), Some("UNLOAD"), Some("UNMATCHED"), Some("UNNEST"), 
		Some("UNSIGNED"), Some("UPDATE"), Some("USE"), Some("USER"), Some("USING"), 
		Some("UTF16"), Some("UTF32"), Some("UTF8"), Some("VACUUM"), Some("VALIDATE"), 
		Some("VALUE"), Some("VALUES"), Some("VARYING"), Some("VERBOSE"), Some("VERSION"), 
		Some("VIEW"), Some("WEEK"), Some("WHEN"), Some("WHERE"), Some("WINDOW"), 
		Some("WITH"), Some("WITHIN"), Some("WITHOUT"), Some("WORK"), Some("WRAPPER"), 
		Some("WRITE"), Some("XZ"), Some("YEAR"), Some("YEARS"), Some("YES"), Some("ZONE"), 
		Some("ZSTD"), Some("LPAREN"), Some("RPAREN"), Some("LBRACKET"), Some("RBRACKET"), 
		Some("DOT"), Some("EQ"), Some("NEQ"), Some("LT"), Some("LTE"), Some("GT"), 
		Some("GTE"), Some("PLUS"), Some("MINUS"), Some("ASTERISK"), Some("SLASH"), 
		Some("PERCENT"), Some("CONCAT"), Some("QUESTION_MARK"), Some("SEMI_COLON"), 
		Some("COLON"), Some("DOLLAR"), Some("BITWISE_SHIFT_LEFT"), Some("POSIX"), 
		Some("STRING"), Some("UNICODE_STRING"), Some("BINARY_LITERAL"), Some("INTEGER_VALUE"), 
		Some("DECIMAL_VALUE"), Some("DOUBLE_VALUE"), Some("IDENTIFIER"), Some("DIGIT_IDENTIFIER"), 
		Some("QUOTED_IDENTIFIER"), Some("VARIABLE"), Some("SIMPLE_COMMENT"), Some("BRACKETED_COMMENT"), 
		Some("WS"), Some("UNPAIRED_TOKEN"), Some("UNRECOGNIZED")
	];
	thread_local!{
	    static _shared_context_cache: Rc<PredictionContextCache> = Rc::new(PredictionContextCache::new());
		static VOCABULARY: Box<dyn Vocabulary> = Box::new(VocabularyImpl::new(_LITERAL_NAMES.iter(), _SYMBOLIC_NAMES.iter(), None));
	}


type BaseParserType<'input, I> =
	BaseParser<'input,TrinoParserExt<'input>, I, TrinoParserContextType , dyn TrinoListener<'input> + 'input >;

type TokenType<'input> = <LocalTokenFactory<'input> as TokenFactory<'input>>::Tok;

pub type LocalTokenFactory<'input> = antlr_rust::token_factory::ArenaCommonFactory<'input>;

pub type TrinoTreeWalker<'input,'a> =
	ParseTreeWalker<'input, 'a, TrinoParserContextType , dyn TrinoListener<'input> + 'a>;

/// Parser for Trino grammar
pub struct TrinoParser<'input,I,H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	base:BaseParserType<'input,I>,
	interpreter:Rc<ParserATNSimulator>,
	_shared_context_cache: Box<PredictionContextCache>,
    pub err_handler: H,
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn get_serialized_atn() -> &'static str { _serializedATN }

    pub fn set_error_strategy(&mut self, strategy: H) {
        self.err_handler = strategy
    }

    pub fn with_strategy(input: I, strategy: H) -> Self {
		antlr_rust::recognizer::check_version("0","3");
        let interpreter = Rc::new(ParserATNSimulator::new(
            _ATN.with(|atn| atn.clone()),
            _decision_to_DFA.with(|decision| decision.clone()),
            _shared_context_cache.with(|ctx| ctx.clone()),
        ));
		Self {
			base: BaseParser::new_base_parser(
				input,
				Rc::clone(&interpreter),
				TrinoParserExt{
					_pd: Default::default(),
				}
			),
			interpreter,
            _shared_context_cache: Box::new(PredictionContextCache::new()),
            err_handler: strategy,
        }
    }

    pub fn add_error_listener(&mut self, listener: Box<(dyn ErrorListener<'input, BaseParser<'input, TrinoParserExt<'input>, I, TrinoParserContextType, (dyn TrinoListener<'input> + 'input)>> + 'static)>) {
        self.base.add_error_listener(listener)
    }

	pub fn remove_error_listeners(&mut self) {
        self.base.remove_error_listeners()
    }
}

type DynStrategy<'input,I> = Box<dyn ErrorStrategy<'input,BaseParserType<'input,I>> + 'input>;

impl<'input, I> TrinoParser<'input, I, DynStrategy<'input,I>>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
{
    pub fn with_dyn_strategy(input: I) -> Self{
    	Self::with_strategy(input,Box::new(DefaultErrorStrategy::new()))
    }
}

impl<'input, I> TrinoParser<'input, I, DefaultErrorStrategy<'input,TrinoParserContextType>>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
{
    pub fn new(input: I) -> Self{
    	Self::with_strategy(input,DefaultErrorStrategy::new())
    }
}

/// Trait for monomorphized trait object that corresponds to the nodes of parse tree generated for TrinoParser
pub trait TrinoParserContext<'input>:
	for<'x> Listenable<dyn TrinoListener<'input> + 'x > + 
	for<'x> Visitable<dyn TrinoVisitor<'input> + 'x > + 
	ParserRuleContext<'input, TF=LocalTokenFactory<'input>, Ctx=TrinoParserContextType>
{}

antlr_rust::coerce_from!{ 'input : TrinoParserContext<'input> }

impl<'input, 'x, T> VisitableDyn<T> for dyn TrinoParserContext<'input> + 'input
where
    T: TrinoVisitor<'input> + 'x,
{
    fn accept_dyn(&self, visitor: &mut T) {
        self.accept(visitor as &mut (dyn TrinoVisitor<'input> + 'x))
    }
}

impl<'input> TrinoParserContext<'input> for TerminalNode<'input,TrinoParserContextType> {}
impl<'input> TrinoParserContext<'input> for ErrorNode<'input,TrinoParserContextType> {}

antlr_rust::tid! { impl<'input> TidAble<'input> for dyn TrinoParserContext<'input> + 'input }

antlr_rust::tid! { impl<'input> TidAble<'input> for dyn TrinoListener<'input> + 'input }

pub struct TrinoParserContextType;
antlr_rust::tid!{TrinoParserContextType}

impl<'input> ParserNodeType<'input> for TrinoParserContextType{
	type TF = LocalTokenFactory<'input>;
	type Type = dyn TrinoParserContext<'input> + 'input;
}

impl<'input, I, H> Deref for TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
    type Target = BaseParserType<'input,I>;

    fn deref(&self) -> &Self::Target {
        &self.base
    }
}

impl<'input, I, H> DerefMut for TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.base
    }
}

pub struct TrinoParserExt<'input>{
	_pd: PhantomData<&'input str>,
}

impl<'input> TrinoParserExt<'input>{
}
antlr_rust::tid! { TrinoParserExt<'a> }

impl<'input> TokenAware<'input> for TrinoParserExt<'input>{
	type TF = LocalTokenFactory<'input>;
}

impl<'input,I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>> ParserRecog<'input, BaseParserType<'input,I>> for TrinoParserExt<'input>{}

impl<'input,I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>> Actions<'input, BaseParserType<'input,I>> for TrinoParserExt<'input>{
	fn get_grammar_file_name(&self) -> & str{ "Trino.g4"}

   	fn get_rule_names(&self) -> &[& str] {&ruleNames}

   	fn get_vocabulary(&self) -> &dyn Vocabulary { VOCABULARY.with(|v| unsafe { std::mem::transmute(&**v) }) }
	fn sempred(_localctx: Option<&(dyn TrinoParserContext<'input> + 'input)>, rule_index: isize, pred_index: isize,
			   recog:&mut BaseParserType<'input,I>
	)->bool{
		match rule_index {
					54 => TrinoParser::<'input,I,_>::joinedRelation_sempred(_localctx.and_then(|x|x.downcast_ref()), pred_index, recog),
					87 => TrinoParser::<'input,I,_>::booleanExpression_sempred(_localctx.and_then(|x|x.downcast_ref()), pred_index, recog),
					89 => TrinoParser::<'input,I,_>::valueExpression_sempred(_localctx.and_then(|x|x.downcast_ref()), pred_index, recog),
					90 => TrinoParser::<'input,I,_>::primaryExpression_sempred(_localctx.and_then(|x|x.downcast_ref()), pred_index, recog),
					127 => TrinoParser::<'input,I,_>::rowPattern_sempred(_localctx.and_then(|x|x.downcast_ref()), pred_index, recog),
			_ => true
		}
	}
}

impl<'input, I> TrinoParser<'input, I, DefaultErrorStrategy<'input,TrinoParserContextType>>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
{
	fn joinedRelation_sempred(_localctx: Option<&JoinedRelationContext<'input>>, pred_index:isize,
						recog:&mut <Self as Deref>::Target
		) -> bool {
		match pred_index {
				0=>{
					recog.precpred(None, 2)
				}
			_ => true
		}
	}
	fn booleanExpression_sempred(_localctx: Option<&BooleanExpressionContext<'input>>, pred_index:isize,
						recog:&mut <Self as Deref>::Target
		) -> bool {
		match pred_index {
				1=>{
					recog.precpred(None, 2)
				}
				2=>{
					recog.precpred(None, 1)
				}
			_ => true
		}
	}
	fn valueExpression_sempred(_localctx: Option<&ValueExpressionContext<'input>>, pred_index:isize,
						recog:&mut <Self as Deref>::Target
		) -> bool {
		match pred_index {
				3=>{
					recog.precpred(None, 4)
				}
				4=>{
					recog.precpred(None, 3)
				}
				5=>{
					recog.precpred(None, 2)
				}
				6=>{
					recog.precpred(None, 1)
				}
				7=>{
					recog.precpred(None, 6)
				}
			_ => true
		}
	}
	fn primaryExpression_sempred(_localctx: Option<&PrimaryExpressionContext<'input>>, pred_index:isize,
						recog:&mut <Self as Deref>::Target
		) -> bool {
		match pred_index {
				8=>{
					recog.precpred(None, 11)
				}
				9=>{
					recog.precpred(None, 10)
				}
			_ => true
		}
	}
	fn rowPattern_sempred(_localctx: Option<&RowPatternContext<'input>>, pred_index:isize,
						recog:&mut <Self as Deref>::Target
		) -> bool {
		match pred_index {
				10=>{
					recog.precpred(None, 2)
				}
				11=>{
					recog.precpred(None, 1)
				}
			_ => true
		}
	}
}
//------------------- multipleStatement ----------------
pub type MultipleStatementContextAll<'input> = MultipleStatementContext<'input>;


pub type MultipleStatementContext<'input> = BaseParserRuleContext<'input,MultipleStatementContextExt<'input>>;

#[derive(Clone)]
pub struct MultipleStatementContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for MultipleStatementContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for MultipleStatementContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_multipleStatement(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_multipleStatement(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for MultipleStatementContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_multipleStatement(self);
	}
}

impl<'input> CustomRuleContext<'input> for MultipleStatementContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_multipleStatement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_multipleStatement }
}
antlr_rust::tid!{MultipleStatementContextExt<'a>}

impl<'input> MultipleStatementContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<MultipleStatementContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,MultipleStatementContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait MultipleStatementContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<MultipleStatementContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token EOF
/// Returns `None` if there is no child corresponding to token EOF
fn EOF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EOF, 0)
}
fn statement_all(&self) ->  Vec<Rc<StatementContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn statement(&self, i: usize) -> Option<Rc<StatementContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SEMI_COLON, i)
}

}

impl<'input> MultipleStatementContextAttrs<'input> for MultipleStatementContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn multipleStatement(&mut self,)
	-> Result<Rc<MultipleStatementContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = MultipleStatementContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 0, RULE_multipleStatement);
        let mut _localctx: Rc<MultipleStatementContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(301);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if ((((_la - 15)) & !0x3f) == 0 && ((1usize << (_la - 15)) & ((1usize << (ALTER - 15)) | (1usize << (ANALYZE - 15)) | (1usize << (CALL - 15)))) != 0) || ((((_la - 50)) & !0x3f) == 0 && ((1usize << (_la - 50)) & ((1usize << (COMMENT - 50)) | (1usize << (COMMIT - 50)) | (1usize << (CREATE - 50)) | (1usize << (DEALLOCATE - 50)) | (1usize << (DELETE - 50)))) != 0) || ((((_la - 82)) & !0x3f) == 0 && ((1usize << (_la - 82)) & ((1usize << (DENY - 82)) | (1usize << (DESCRIBE - 82)) | (1usize << (DROP - 82)) | (1usize << (EXECUTE - 82)) | (1usize << (EXPLAIN - 82)))) != 0) || _la==GRANT || _la==INSERT || _la==MERGE || ((((_la - 238)) & !0x3f) == 0 && ((1usize << (_la - 238)) & ((1usize << (PREPARE - 238)) | (1usize << (REFRESH - 238)) | (1usize << (RESET - 238)) | (1usize << (REVOKE - 238)) | (1usize << (ROLLBACK - 238)))) != 0) || ((((_la - 275)) & !0x3f) == 0 && ((1usize << (_la - 275)) & ((1usize << (SELECT - 275)) | (1usize << (SET - 275)) | (1usize << (SHOW - 275)) | (1usize << (START - 275)) | (1usize << (TABLE - 275)))) != 0) || ((((_la - 315)) & !0x3f) == 0 && ((1usize << (_la - 315)) & ((1usize << (TRUNCATE - 315)) | (1usize << (UPDATE - 315)) | (1usize << (USE - 315)) | (1usize << (VALUES - 315)))) != 0) || _la==WITH || _la==LPAREN {
				{
				/*InvokeRule statement*/
				recog.base.set_state(300);
				recog.statement()?;

				}
			}

			recog.base.set_state(309);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			while _la==SEMI_COLON {
				{
				{
				recog.base.set_state(303);
				recog.base.match_token(SEMI_COLON,&mut recog.err_handler)?;

				recog.base.set_state(305);
				recog.err_handler.sync(&mut recog.base)?;
				_la = recog.base.input.la(1);
				if ((((_la - 15)) & !0x3f) == 0 && ((1usize << (_la - 15)) & ((1usize << (ALTER - 15)) | (1usize << (ANALYZE - 15)) | (1usize << (CALL - 15)))) != 0) || ((((_la - 50)) & !0x3f) == 0 && ((1usize << (_la - 50)) & ((1usize << (COMMENT - 50)) | (1usize << (COMMIT - 50)) | (1usize << (CREATE - 50)) | (1usize << (DEALLOCATE - 50)) | (1usize << (DELETE - 50)))) != 0) || ((((_la - 82)) & !0x3f) == 0 && ((1usize << (_la - 82)) & ((1usize << (DENY - 82)) | (1usize << (DESCRIBE - 82)) | (1usize << (DROP - 82)) | (1usize << (EXECUTE - 82)) | (1usize << (EXPLAIN - 82)))) != 0) || _la==GRANT || _la==INSERT || _la==MERGE || ((((_la - 238)) & !0x3f) == 0 && ((1usize << (_la - 238)) & ((1usize << (PREPARE - 238)) | (1usize << (REFRESH - 238)) | (1usize << (RESET - 238)) | (1usize << (REVOKE - 238)) | (1usize << (ROLLBACK - 238)))) != 0) || ((((_la - 275)) & !0x3f) == 0 && ((1usize << (_la - 275)) & ((1usize << (SELECT - 275)) | (1usize << (SET - 275)) | (1usize << (SHOW - 275)) | (1usize << (START - 275)) | (1usize << (TABLE - 275)))) != 0) || ((((_la - 315)) & !0x3f) == 0 && ((1usize << (_la - 315)) & ((1usize << (TRUNCATE - 315)) | (1usize << (UPDATE - 315)) | (1usize << (USE - 315)) | (1usize << (VALUES - 315)))) != 0) || _la==WITH || _la==LPAREN {
					{
					/*InvokeRule statement*/
					recog.base.set_state(304);
					recog.statement()?;

					}
				}

				}
				}
				recog.base.set_state(311);
				recog.err_handler.sync(&mut recog.base)?;
				_la = recog.base.input.la(1);
			}
			recog.base.set_state(312);
			recog.base.match_token(EOF,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- singleStatement ----------------
pub type SingleStatementContextAll<'input> = SingleStatementContext<'input>;


pub type SingleStatementContext<'input> = BaseParserRuleContext<'input,SingleStatementContextExt<'input>>;

#[derive(Clone)]
pub struct SingleStatementContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SingleStatementContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SingleStatementContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_singleStatement(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_singleStatement(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SingleStatementContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_singleStatement(self);
	}
}

impl<'input> CustomRuleContext<'input> for SingleStatementContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_singleStatement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_singleStatement }
}
antlr_rust::tid!{SingleStatementContextExt<'a>}

impl<'input> SingleStatementContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SingleStatementContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SingleStatementContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait SingleStatementContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SingleStatementContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token EOF
/// Returns `None` if there is no child corresponding to token EOF
fn EOF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EOF, 0)
}
fn statement(&self) -> Option<Rc<StatementContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token SEMI_COLON
/// Returns `None` if there is no child corresponding to token SEMI_COLON
fn SEMI_COLON(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SEMI_COLON, 0)
}

}

impl<'input> SingleStatementContextAttrs<'input> for SingleStatementContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn singleStatement(&mut self,)
	-> Result<Rc<SingleStatementContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SingleStatementContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 2, RULE_singleStatement);
        let mut _localctx: Rc<SingleStatementContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(315);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if ((((_la - 15)) & !0x3f) == 0 && ((1usize << (_la - 15)) & ((1usize << (ALTER - 15)) | (1usize << (ANALYZE - 15)) | (1usize << (CALL - 15)))) != 0) || ((((_la - 50)) & !0x3f) == 0 && ((1usize << (_la - 50)) & ((1usize << (COMMENT - 50)) | (1usize << (COMMIT - 50)) | (1usize << (CREATE - 50)) | (1usize << (DEALLOCATE - 50)) | (1usize << (DELETE - 50)))) != 0) || ((((_la - 82)) & !0x3f) == 0 && ((1usize << (_la - 82)) & ((1usize << (DENY - 82)) | (1usize << (DESCRIBE - 82)) | (1usize << (DROP - 82)) | (1usize << (EXECUTE - 82)) | (1usize << (EXPLAIN - 82)))) != 0) || _la==GRANT || _la==INSERT || _la==MERGE || ((((_la - 238)) & !0x3f) == 0 && ((1usize << (_la - 238)) & ((1usize << (PREPARE - 238)) | (1usize << (REFRESH - 238)) | (1usize << (RESET - 238)) | (1usize << (REVOKE - 238)) | (1usize << (ROLLBACK - 238)))) != 0) || ((((_la - 275)) & !0x3f) == 0 && ((1usize << (_la - 275)) & ((1usize << (SELECT - 275)) | (1usize << (SET - 275)) | (1usize << (SHOW - 275)) | (1usize << (START - 275)) | (1usize << (TABLE - 275)))) != 0) || ((((_la - 315)) & !0x3f) == 0 && ((1usize << (_la - 315)) & ((1usize << (TRUNCATE - 315)) | (1usize << (UPDATE - 315)) | (1usize << (USE - 315)) | (1usize << (VALUES - 315)))) != 0) || _la==WITH || _la==LPAREN {
				{
				/*InvokeRule statement*/
				recog.base.set_state(314);
				recog.statement()?;

				}
			}

			recog.base.set_state(318);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==SEMI_COLON {
				{
				recog.base.set_state(317);
				recog.base.match_token(SEMI_COLON,&mut recog.err_handler)?;

				}
			}

			recog.base.set_state(320);
			recog.base.match_token(EOF,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- standaloneExpression ----------------
pub type StandaloneExpressionContextAll<'input> = StandaloneExpressionContext<'input>;


pub type StandaloneExpressionContext<'input> = BaseParserRuleContext<'input,StandaloneExpressionContextExt<'input>>;

#[derive(Clone)]
pub struct StandaloneExpressionContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for StandaloneExpressionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for StandaloneExpressionContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_standaloneExpression(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_standaloneExpression(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for StandaloneExpressionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_standaloneExpression(self);
	}
}

impl<'input> CustomRuleContext<'input> for StandaloneExpressionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_standaloneExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_standaloneExpression }
}
antlr_rust::tid!{StandaloneExpressionContextExt<'a>}

impl<'input> StandaloneExpressionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<StandaloneExpressionContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,StandaloneExpressionContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait StandaloneExpressionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<StandaloneExpressionContextExt<'input>>{

fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token EOF
/// Returns `None` if there is no child corresponding to token EOF
fn EOF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EOF, 0)
}

}

impl<'input> StandaloneExpressionContextAttrs<'input> for StandaloneExpressionContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn standaloneExpression(&mut self,)
	-> Result<Rc<StandaloneExpressionContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = StandaloneExpressionContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 4, RULE_standaloneExpression);
        let mut _localctx: Rc<StandaloneExpressionContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule expression*/
			recog.base.set_state(322);
			recog.expression()?;

			recog.base.set_state(323);
			recog.base.match_token(EOF,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- standaloneQualifiedName ----------------
pub type StandaloneQualifiedNameContextAll<'input> = StandaloneQualifiedNameContext<'input>;


pub type StandaloneQualifiedNameContext<'input> = BaseParserRuleContext<'input,StandaloneQualifiedNameContextExt<'input>>;

#[derive(Clone)]
pub struct StandaloneQualifiedNameContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for StandaloneQualifiedNameContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for StandaloneQualifiedNameContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_standaloneQualifiedName(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_standaloneQualifiedName(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for StandaloneQualifiedNameContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_standaloneQualifiedName(self);
	}
}

impl<'input> CustomRuleContext<'input> for StandaloneQualifiedNameContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_standaloneQualifiedName }
	//fn type_rule_index() -> usize where Self: Sized { RULE_standaloneQualifiedName }
}
antlr_rust::tid!{StandaloneQualifiedNameContextExt<'a>}

impl<'input> StandaloneQualifiedNameContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<StandaloneQualifiedNameContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,StandaloneQualifiedNameContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait StandaloneQualifiedNameContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<StandaloneQualifiedNameContextExt<'input>>{

fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token EOF
/// Returns `None` if there is no child corresponding to token EOF
fn EOF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EOF, 0)
}

}

impl<'input> StandaloneQualifiedNameContextAttrs<'input> for StandaloneQualifiedNameContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn standaloneQualifiedName(&mut self,)
	-> Result<Rc<StandaloneQualifiedNameContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = StandaloneQualifiedNameContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 6, RULE_standaloneQualifiedName);
        let mut _localctx: Rc<StandaloneQualifiedNameContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule qualifiedName*/
			recog.base.set_state(325);
			recog.qualifiedName()?;

			recog.base.set_state(326);
			recog.base.match_token(EOF,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- standaloneType ----------------
pub type StandaloneTypeContextAll<'input> = StandaloneTypeContext<'input>;


pub type StandaloneTypeContext<'input> = BaseParserRuleContext<'input,StandaloneTypeContextExt<'input>>;

#[derive(Clone)]
pub struct StandaloneTypeContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for StandaloneTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for StandaloneTypeContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_standaloneType(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_standaloneType(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for StandaloneTypeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_standaloneType(self);
	}
}

impl<'input> CustomRuleContext<'input> for StandaloneTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_standaloneType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_standaloneType }
}
antlr_rust::tid!{StandaloneTypeContextExt<'a>}

impl<'input> StandaloneTypeContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<StandaloneTypeContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,StandaloneTypeContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait StandaloneTypeContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<StandaloneTypeContextExt<'input>>{

fn type_(&self) -> Option<Rc<Type_ContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token EOF
/// Returns `None` if there is no child corresponding to token EOF
fn EOF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EOF, 0)
}

}

impl<'input> StandaloneTypeContextAttrs<'input> for StandaloneTypeContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn standaloneType(&mut self,)
	-> Result<Rc<StandaloneTypeContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = StandaloneTypeContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 8, RULE_standaloneType);
        let mut _localctx: Rc<StandaloneTypeContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule type_*/
			recog.base.set_state(328);
			recog.type_()?;

			recog.base.set_state(329);
			recog.base.match_token(EOF,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- statement ----------------
#[derive(Debug)]
pub enum StatementContextAll<'input>{
	ExplainContext(ExplainContext<'input>),
	PrepareContext(PrepareContext<'input>),
	SetMaterializedViewPropertiesContext(SetMaterializedViewPropertiesContext<'input>),
	UseContext(UseContext<'input>),
	DeallocateContext(DeallocateContext<'input>),
	RenameTableContext(RenameTableContext<'input>),
	CommitContext(CommitContext<'input>),
	CreateRoleContext(CreateRoleContext<'input>),
	DropViewContext(DropViewContext<'input>),
	DropColumnContext(DropColumnContext<'input>),
	SetViewAuthorizationContext(SetViewAuthorizationContext<'input>),
	MergeContext(MergeContext<'input>),
	RenameColumnContext(RenameColumnContext<'input>),
	ShowColumnsContext(ShowColumnsContext<'input>),
	AddColumnContext(AddColumnContext<'input>),
	DenyContext(DenyContext<'input>),
	InsertIntoContext(InsertIntoContext<'input>),
	CreateSchemaContext(CreateSchemaContext<'input>),
	ExecuteContext(ExecuteContext<'input>),
	RenameSchemaContext(RenameSchemaContext<'input>),
	AnalyzeContext(AnalyzeContext<'input>),
	CreateFunctionContext(CreateFunctionContext<'input>),
	ResetContext(ResetContext<'input>),
	DropSchemaContext(DropSchemaContext<'input>),
	SetTableAuthorizationContext(SetTableAuthorizationContext<'input>),
	DropContext(DropContext<'input>),
	CreateTableContext(CreateTableContext<'input>),
	StartTransactionContext(StartTransactionContext<'input>),
	CreateTableAsSelectContext(CreateTableAsSelectContext<'input>),
	ShowContext(ShowContext<'input>),
	RevokeContext(RevokeContext<'input>),
	UpdateContext(UpdateContext<'input>),
	CreateRecursiveTableContext(CreateRecursiveTableContext<'input>),
	TableExecuteContext(TableExecuteContext<'input>),
	DeleteContext(DeleteContext<'input>),
	DescribeInputContext(DescribeInputContext<'input>),
	SetColumnTypeContext(SetColumnTypeContext<'input>),
	StatementDefaultContext(StatementDefaultContext<'input>),
	TruncateTableContext(TruncateTableContext<'input>),
	CreateMaterializedViewContext(CreateMaterializedViewContext<'input>),
	CreateViewContext(CreateViewContext<'input>),
	RenameMaterializedViewContext(RenameMaterializedViewContext<'input>),
	DropTableContext(DropTableContext<'input>),
	SetSchemaAuthorizationContext(SetSchemaAuthorizationContext<'input>),
	RollbackContext(RollbackContext<'input>),
	SetContext(SetContext<'input>),
	RenameViewContext(RenameViewContext<'input>),
	CallContext(CallContext<'input>),
	RefreshMaterializedViewContext(RefreshMaterializedViewContext<'input>),
	CommentContext(CommentContext<'input>),
	DescribeOutputContext(DescribeOutputContext<'input>),
	GrantContext(GrantContext<'input>),
	SetTablePropertiesContext(SetTablePropertiesContext<'input>),
Error(StatementContext<'input>)
}
antlr_rust::tid!{StatementContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for StatementContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for StatementContextAll<'input>{}

impl<'input> Deref for StatementContextAll<'input>{
	type Target = dyn StatementContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use StatementContextAll::*;
		match self{
			ExplainContext(inner) => inner,
			PrepareContext(inner) => inner,
			SetMaterializedViewPropertiesContext(inner) => inner,
			UseContext(inner) => inner,
			DeallocateContext(inner) => inner,
			RenameTableContext(inner) => inner,
			CommitContext(inner) => inner,
			CreateRoleContext(inner) => inner,
			DropViewContext(inner) => inner,
			DropColumnContext(inner) => inner,
			SetViewAuthorizationContext(inner) => inner,
			MergeContext(inner) => inner,
			RenameColumnContext(inner) => inner,
			ShowColumnsContext(inner) => inner,
			AddColumnContext(inner) => inner,
			DenyContext(inner) => inner,
			InsertIntoContext(inner) => inner,
			CreateSchemaContext(inner) => inner,
			ExecuteContext(inner) => inner,
			RenameSchemaContext(inner) => inner,
			AnalyzeContext(inner) => inner,
			CreateFunctionContext(inner) => inner,
			ResetContext(inner) => inner,
			DropSchemaContext(inner) => inner,
			SetTableAuthorizationContext(inner) => inner,
			DropContext(inner) => inner,
			CreateTableContext(inner) => inner,
			StartTransactionContext(inner) => inner,
			CreateTableAsSelectContext(inner) => inner,
			ShowContext(inner) => inner,
			RevokeContext(inner) => inner,
			UpdateContext(inner) => inner,
			CreateRecursiveTableContext(inner) => inner,
			TableExecuteContext(inner) => inner,
			DeleteContext(inner) => inner,
			DescribeInputContext(inner) => inner,
			SetColumnTypeContext(inner) => inner,
			StatementDefaultContext(inner) => inner,
			TruncateTableContext(inner) => inner,
			CreateMaterializedViewContext(inner) => inner,
			CreateViewContext(inner) => inner,
			RenameMaterializedViewContext(inner) => inner,
			DropTableContext(inner) => inner,
			SetSchemaAuthorizationContext(inner) => inner,
			RollbackContext(inner) => inner,
			SetContext(inner) => inner,
			RenameViewContext(inner) => inner,
			CallContext(inner) => inner,
			RefreshMaterializedViewContext(inner) => inner,
			CommentContext(inner) => inner,
			DescribeOutputContext(inner) => inner,
			GrantContext(inner) => inner,
			SetTablePropertiesContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for StatementContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for StatementContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type StatementContext<'input> = BaseParserRuleContext<'input,StatementContextExt<'input>>;

#[derive(Clone)]
pub struct StatementContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for StatementContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for StatementContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for StatementContext<'input>{
}

impl<'input> CustomRuleContext<'input> for StatementContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}
antlr_rust::tid!{StatementContextExt<'a>}

impl<'input> StatementContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<StatementContextAll<'input>> {
		Rc::new(
		StatementContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,StatementContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait StatementContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<StatementContextExt<'input>>{


}

impl<'input> StatementContextAttrs<'input> for StatementContext<'input>{}

pub type ExplainContext<'input> = BaseParserRuleContext<'input,ExplainContextExt<'input>>;

pub trait ExplainContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token EXPLAIN
	/// Returns `None` if there is no child corresponding to token EXPLAIN
	fn EXPLAIN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXPLAIN, 0)
	}
	fn statement(&self) -> Option<Rc<StatementContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn explainOption_all(&self) ->  Vec<Rc<ExplainOptionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn explainOption(&self, i: usize) -> Option<Rc<ExplainOptionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> ExplainContextAttrs<'input> for ExplainContext<'input>{}

pub struct ExplainContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ExplainContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ExplainContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ExplainContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_explain(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_explain(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ExplainContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_explain(self);
	}
}

impl<'input> CustomRuleContext<'input> for ExplainContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for ExplainContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for ExplainContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for ExplainContext<'input> {}

impl<'input> ExplainContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::ExplainContext(
				BaseParserRuleContext::copy_from(ctx,ExplainContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type PrepareContext<'input> = BaseParserRuleContext<'input,PrepareContextExt<'input>>;

pub trait PrepareContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token PREPARE
	/// Returns `None` if there is no child corresponding to token PREPARE
	fn PREPARE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(PREPARE, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> PrepareContextAttrs<'input> for PrepareContext<'input>{}

pub struct PrepareContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PrepareContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PrepareContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrepareContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_prepare(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_prepare(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrepareContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_prepare(self);
	}
}

impl<'input> CustomRuleContext<'input> for PrepareContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for PrepareContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for PrepareContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for PrepareContext<'input> {}

impl<'input> PrepareContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::PrepareContext(
				BaseParserRuleContext::copy_from(ctx,PrepareContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SetMaterializedViewPropertiesContext<'input> = BaseParserRuleContext<'input,SetMaterializedViewPropertiesContextExt<'input>>;

pub trait SetMaterializedViewPropertiesContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ALTER
	/// Returns `None` if there is no child corresponding to token ALTER
	fn ALTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ALTER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token MATERIALIZED
	/// Returns `None` if there is no child corresponding to token MATERIALIZED
	fn MATERIALIZED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(MATERIALIZED, 0)
	}
	/// Retrieves first TerminalNode corresponding to token VIEW
	/// Returns `None` if there is no child corresponding to token VIEW
	fn VIEW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(VIEW, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token SET
	/// Returns `None` if there is no child corresponding to token SET
	fn SET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SET, 0)
	}
	/// Retrieves first TerminalNode corresponding to token PROPERTIES
	/// Returns `None` if there is no child corresponding to token PROPERTIES
	fn PROPERTIES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(PROPERTIES, 0)
	}
	fn propertyAssignments(&self) -> Option<Rc<PropertyAssignmentsContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> SetMaterializedViewPropertiesContextAttrs<'input> for SetMaterializedViewPropertiesContext<'input>{}

pub struct SetMaterializedViewPropertiesContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SetMaterializedViewPropertiesContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SetMaterializedViewPropertiesContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SetMaterializedViewPropertiesContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_setMaterializedViewProperties(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_setMaterializedViewProperties(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SetMaterializedViewPropertiesContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_setMaterializedViewProperties(self);
	}
}

impl<'input> CustomRuleContext<'input> for SetMaterializedViewPropertiesContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for SetMaterializedViewPropertiesContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for SetMaterializedViewPropertiesContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for SetMaterializedViewPropertiesContext<'input> {}

impl<'input> SetMaterializedViewPropertiesContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::SetMaterializedViewPropertiesContext(
				BaseParserRuleContext::copy_from(ctx,SetMaterializedViewPropertiesContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type UseContext<'input> = BaseParserRuleContext<'input,UseContextExt<'input>>;

pub trait UseContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token USE
	/// Returns `None` if there is no child corresponding to token USE
	fn USE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(USE, 0)
	}
	fn identifier_all(&self) ->  Vec<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn identifier(&self, i: usize) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token DOT
	/// Returns `None` if there is no child corresponding to token DOT
	fn DOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DOT, 0)
	}
}

impl<'input> UseContextAttrs<'input> for UseContext<'input>{}

pub struct UseContextExt<'input>{
	base:StatementContextExt<'input>,
	pub schema: Option<Rc<IdentifierContextAll<'input>>>,
	pub catalog: Option<Rc<IdentifierContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{UseContextExt<'a>}

impl<'input> TrinoParserContext<'input> for UseContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for UseContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_use(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_use(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for UseContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_use(self);
	}
}

impl<'input> CustomRuleContext<'input> for UseContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for UseContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for UseContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for UseContext<'input> {}

impl<'input> UseContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::UseContext(
				BaseParserRuleContext::copy_from(ctx,UseContextExt{
        			schema:None, catalog:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type DeallocateContext<'input> = BaseParserRuleContext<'input,DeallocateContextExt<'input>>;

pub trait DeallocateContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DEALLOCATE
	/// Returns `None` if there is no child corresponding to token DEALLOCATE
	fn DEALLOCATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DEALLOCATE, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> DeallocateContextAttrs<'input> for DeallocateContext<'input>{}

pub struct DeallocateContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DeallocateContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DeallocateContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DeallocateContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_deallocate(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_deallocate(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DeallocateContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_deallocate(self);
	}
}

impl<'input> CustomRuleContext<'input> for DeallocateContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for DeallocateContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for DeallocateContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for DeallocateContext<'input> {}

impl<'input> DeallocateContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::DeallocateContext(
				BaseParserRuleContext::copy_from(ctx,DeallocateContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type RenameTableContext<'input> = BaseParserRuleContext<'input,RenameTableContextExt<'input>>;

pub trait RenameTableContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ALTER
	/// Returns `None` if there is no child corresponding to token ALTER
	fn ALTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ALTER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RENAME
	/// Returns `None` if there is no child corresponding to token RENAME
	fn RENAME(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RENAME, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TO
	/// Returns `None` if there is no child corresponding to token TO
	fn TO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TO, 0)
	}
	fn qualifiedName_all(&self) ->  Vec<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn qualifiedName(&self, i: usize) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token IF
	/// Returns `None` if there is no child corresponding to token IF
	fn IF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IF, 0)
	}
	/// Retrieves first TerminalNode corresponding to token EXISTS
	/// Returns `None` if there is no child corresponding to token EXISTS
	fn EXISTS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXISTS, 0)
	}
}

impl<'input> RenameTableContextAttrs<'input> for RenameTableContext<'input>{}

pub struct RenameTableContextExt<'input>{
	base:StatementContextExt<'input>,
	pub from: Option<Rc<QualifiedNameContextAll<'input>>>,
	pub to: Option<Rc<QualifiedNameContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{RenameTableContextExt<'a>}

impl<'input> TrinoParserContext<'input> for RenameTableContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RenameTableContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_renameTable(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_renameTable(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RenameTableContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_renameTable(self);
	}
}

impl<'input> CustomRuleContext<'input> for RenameTableContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for RenameTableContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for RenameTableContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for RenameTableContext<'input> {}

impl<'input> RenameTableContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::RenameTableContext(
				BaseParserRuleContext::copy_from(ctx,RenameTableContextExt{
        			from:None, to:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type CommitContext<'input> = BaseParserRuleContext<'input,CommitContextExt<'input>>;

pub trait CommitContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token COMMIT
	/// Returns `None` if there is no child corresponding to token COMMIT
	fn COMMIT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMIT, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> CommitContextAttrs<'input> for CommitContext<'input>{}

pub struct CommitContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{CommitContextExt<'a>}

impl<'input> TrinoParserContext<'input> for CommitContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CommitContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_commit(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_commit(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CommitContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_commit(self);
	}
}

impl<'input> CustomRuleContext<'input> for CommitContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for CommitContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for CommitContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for CommitContext<'input> {}

impl<'input> CommitContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::CommitContext(
				BaseParserRuleContext::copy_from(ctx,CommitContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type CreateRoleContext<'input> = BaseParserRuleContext<'input,CreateRoleContextExt<'input>>;

pub trait CreateRoleContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token CREATE
	/// Returns `None` if there is no child corresponding to token CREATE
	fn CREATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CREATE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ROLE
	/// Returns `None` if there is no child corresponding to token ROLE
	fn ROLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ROLE, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> CreateRoleContextAttrs<'input> for CreateRoleContext<'input>{}

pub struct CreateRoleContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{CreateRoleContextExt<'a>}

impl<'input> TrinoParserContext<'input> for CreateRoleContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CreateRoleContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_createRole(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_createRole(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CreateRoleContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_createRole(self);
	}
}

impl<'input> CustomRuleContext<'input> for CreateRoleContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for CreateRoleContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for CreateRoleContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for CreateRoleContext<'input> {}

impl<'input> CreateRoleContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::CreateRoleContext(
				BaseParserRuleContext::copy_from(ctx,CreateRoleContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type DropViewContext<'input> = BaseParserRuleContext<'input,DropViewContextExt<'input>>;

pub trait DropViewContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DROP
	/// Returns `None` if there is no child corresponding to token DROP
	fn DROP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DROP, 0)
	}
	/// Retrieves first TerminalNode corresponding to token VIEW
	/// Returns `None` if there is no child corresponding to token VIEW
	fn VIEW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(VIEW, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> DropViewContextAttrs<'input> for DropViewContext<'input>{}

pub struct DropViewContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DropViewContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DropViewContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DropViewContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_dropView(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_dropView(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DropViewContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_dropView(self);
	}
}

impl<'input> CustomRuleContext<'input> for DropViewContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for DropViewContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for DropViewContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for DropViewContext<'input> {}

impl<'input> DropViewContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::DropViewContext(
				BaseParserRuleContext::copy_from(ctx,DropViewContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type DropColumnContext<'input> = BaseParserRuleContext<'input,DropColumnContextExt<'input>>;

pub trait DropColumnContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ALTER
	/// Returns `None` if there is no child corresponding to token ALTER
	fn ALTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ALTER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token DROP
	/// Returns `None` if there is no child corresponding to token DROP
	fn DROP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DROP, 0)
	}
	/// Retrieves first TerminalNode corresponding to token COLUMN
	/// Returns `None` if there is no child corresponding to token COLUMN
	fn COLUMN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COLUMN, 0)
	}
	fn qualifiedName_all(&self) ->  Vec<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn qualifiedName(&self, i: usize) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves all `TerminalNode`s corresponding to token IF in current rule
	fn IF_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token IF, starting from 0.
	/// Returns `None` if number of children corresponding to token IF is less or equal than `i`.
	fn IF(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IF, i)
	}
	/// Retrieves all `TerminalNode`s corresponding to token EXISTS in current rule
	fn EXISTS_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token EXISTS, starting from 0.
	/// Returns `None` if number of children corresponding to token EXISTS is less or equal than `i`.
	fn EXISTS(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXISTS, i)
	}
}

impl<'input> DropColumnContextAttrs<'input> for DropColumnContext<'input>{}

pub struct DropColumnContextExt<'input>{
	base:StatementContextExt<'input>,
	pub tableName: Option<Rc<QualifiedNameContextAll<'input>>>,
	pub column: Option<Rc<QualifiedNameContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DropColumnContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DropColumnContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DropColumnContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_dropColumn(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_dropColumn(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DropColumnContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_dropColumn(self);
	}
}

impl<'input> CustomRuleContext<'input> for DropColumnContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for DropColumnContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for DropColumnContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for DropColumnContext<'input> {}

impl<'input> DropColumnContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::DropColumnContext(
				BaseParserRuleContext::copy_from(ctx,DropColumnContextExt{
        			tableName:None, column:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SetViewAuthorizationContext<'input> = BaseParserRuleContext<'input,SetViewAuthorizationContextExt<'input>>;

pub trait SetViewAuthorizationContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ALTER
	/// Returns `None` if there is no child corresponding to token ALTER
	fn ALTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ALTER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token VIEW
	/// Returns `None` if there is no child corresponding to token VIEW
	fn VIEW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(VIEW, 0)
	}
	/// Retrieves first TerminalNode corresponding to token SET
	/// Returns `None` if there is no child corresponding to token SET
	fn SET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SET, 0)
	}
	/// Retrieves first TerminalNode corresponding to token AUTHORIZATION
	/// Returns `None` if there is no child corresponding to token AUTHORIZATION
	fn AUTHORIZATION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(AUTHORIZATION, 0)
	}
	fn principal(&self) -> Option<Rc<PrincipalContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> SetViewAuthorizationContextAttrs<'input> for SetViewAuthorizationContext<'input>{}

pub struct SetViewAuthorizationContextExt<'input>{
	base:StatementContextExt<'input>,
	pub from: Option<Rc<QualifiedNameContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SetViewAuthorizationContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SetViewAuthorizationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SetViewAuthorizationContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_setViewAuthorization(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_setViewAuthorization(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SetViewAuthorizationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_setViewAuthorization(self);
	}
}

impl<'input> CustomRuleContext<'input> for SetViewAuthorizationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for SetViewAuthorizationContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for SetViewAuthorizationContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for SetViewAuthorizationContext<'input> {}

impl<'input> SetViewAuthorizationContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::SetViewAuthorizationContext(
				BaseParserRuleContext::copy_from(ctx,SetViewAuthorizationContextExt{
        			from:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type MergeContext<'input> = BaseParserRuleContext<'input,MergeContextExt<'input>>;

pub trait MergeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token MERGE
	/// Returns `None` if there is no child corresponding to token MERGE
	fn MERGE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(MERGE, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> MergeContextAttrs<'input> for MergeContext<'input>{}

pub struct MergeContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{MergeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for MergeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for MergeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_merge(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_merge(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for MergeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_merge(self);
	}
}

impl<'input> CustomRuleContext<'input> for MergeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for MergeContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for MergeContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for MergeContext<'input> {}

impl<'input> MergeContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::MergeContext(
				BaseParserRuleContext::copy_from(ctx,MergeContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type RenameColumnContext<'input> = BaseParserRuleContext<'input,RenameColumnContextExt<'input>>;

pub trait RenameColumnContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ALTER
	/// Returns `None` if there is no child corresponding to token ALTER
	fn ALTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ALTER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RENAME
	/// Returns `None` if there is no child corresponding to token RENAME
	fn RENAME(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RENAME, 0)
	}
	/// Retrieves first TerminalNode corresponding to token COLUMN
	/// Returns `None` if there is no child corresponding to token COLUMN
	fn COLUMN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COLUMN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TO
	/// Returns `None` if there is no child corresponding to token TO
	fn TO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TO, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn identifier_all(&self) ->  Vec<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn identifier(&self, i: usize) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves all `TerminalNode`s corresponding to token IF in current rule
	fn IF_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token IF, starting from 0.
	/// Returns `None` if number of children corresponding to token IF is less or equal than `i`.
	fn IF(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IF, i)
	}
	/// Retrieves all `TerminalNode`s corresponding to token EXISTS in current rule
	fn EXISTS_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token EXISTS, starting from 0.
	/// Returns `None` if number of children corresponding to token EXISTS is less or equal than `i`.
	fn EXISTS(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXISTS, i)
	}
}

impl<'input> RenameColumnContextAttrs<'input> for RenameColumnContext<'input>{}

pub struct RenameColumnContextExt<'input>{
	base:StatementContextExt<'input>,
	pub tableName: Option<Rc<QualifiedNameContextAll<'input>>>,
	pub from: Option<Rc<IdentifierContextAll<'input>>>,
	pub to: Option<Rc<IdentifierContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{RenameColumnContextExt<'a>}

impl<'input> TrinoParserContext<'input> for RenameColumnContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RenameColumnContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_renameColumn(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_renameColumn(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RenameColumnContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_renameColumn(self);
	}
}

impl<'input> CustomRuleContext<'input> for RenameColumnContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for RenameColumnContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for RenameColumnContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for RenameColumnContext<'input> {}

impl<'input> RenameColumnContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::RenameColumnContext(
				BaseParserRuleContext::copy_from(ctx,RenameColumnContextExt{
        			tableName:None, from:None, to:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ShowColumnsContext<'input> = BaseParserRuleContext<'input,ShowColumnsContextExt<'input>>;

pub trait ShowColumnsContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DESCRIBE
	/// Returns `None` if there is no child corresponding to token DESCRIBE
	fn DESCRIBE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DESCRIBE, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token SHOW
	/// Returns `None` if there is no child corresponding to token SHOW
	fn SHOW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SHOW, 0)
	}
	/// Retrieves first TerminalNode corresponding to token COLUMNS
	/// Returns `None` if there is no child corresponding to token COLUMNS
	fn COLUMNS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COLUMNS, 0)
	}
	/// Retrieves first TerminalNode corresponding to token FROM
	/// Returns `None` if there is no child corresponding to token FROM
	fn FROM(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(FROM, 0)
	}
}

impl<'input> ShowColumnsContextAttrs<'input> for ShowColumnsContext<'input>{}

pub struct ShowColumnsContextExt<'input>{
	base:StatementContextExt<'input>,
	pub tableName: Option<Rc<QualifiedNameContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ShowColumnsContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ShowColumnsContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ShowColumnsContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_showColumns(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_showColumns(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ShowColumnsContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_showColumns(self);
	}
}

impl<'input> CustomRuleContext<'input> for ShowColumnsContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for ShowColumnsContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for ShowColumnsContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for ShowColumnsContext<'input> {}

impl<'input> ShowColumnsContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::ShowColumnsContext(
				BaseParserRuleContext::copy_from(ctx,ShowColumnsContextExt{
        			tableName:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type AddColumnContext<'input> = BaseParserRuleContext<'input,AddColumnContextExt<'input>>;

pub trait AddColumnContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ALTER
	/// Returns `None` if there is no child corresponding to token ALTER
	fn ALTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ALTER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ADD
	/// Returns `None` if there is no child corresponding to token ADD
	fn ADD(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ADD, 0)
	}
	/// Retrieves first TerminalNode corresponding to token COLUMN
	/// Returns `None` if there is no child corresponding to token COLUMN
	fn COLUMN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COLUMN, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn columnDefinition(&self) -> Option<Rc<ColumnDefinitionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token IF in current rule
	fn IF_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token IF, starting from 0.
	/// Returns `None` if number of children corresponding to token IF is less or equal than `i`.
	fn IF(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IF, i)
	}
	/// Retrieves all `TerminalNode`s corresponding to token EXISTS in current rule
	fn EXISTS_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token EXISTS, starting from 0.
	/// Returns `None` if number of children corresponding to token EXISTS is less or equal than `i`.
	fn EXISTS(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXISTS, i)
	}
	/// Retrieves first TerminalNode corresponding to token NOT
	/// Returns `None` if there is no child corresponding to token NOT
	fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NOT, 0)
	}
}

impl<'input> AddColumnContextAttrs<'input> for AddColumnContext<'input>{}

pub struct AddColumnContextExt<'input>{
	base:StatementContextExt<'input>,
	pub tableName: Option<Rc<QualifiedNameContextAll<'input>>>,
	pub column: Option<Rc<ColumnDefinitionContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{AddColumnContextExt<'a>}

impl<'input> TrinoParserContext<'input> for AddColumnContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for AddColumnContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_addColumn(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_addColumn(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for AddColumnContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_addColumn(self);
	}
}

impl<'input> CustomRuleContext<'input> for AddColumnContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for AddColumnContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for AddColumnContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for AddColumnContext<'input> {}

impl<'input> AddColumnContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::AddColumnContext(
				BaseParserRuleContext::copy_from(ctx,AddColumnContextExt{
        			tableName:None, column:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type DenyContext<'input> = BaseParserRuleContext<'input,DenyContextExt<'input>>;

pub trait DenyContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DENY
	/// Returns `None` if there is no child corresponding to token DENY
	fn DENY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DENY, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ON
	/// Returns `None` if there is no child corresponding to token ON
	fn ON(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ON, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token TO
	/// Returns `None` if there is no child corresponding to token TO
	fn TO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TO, 0)
	}
	fn principal(&self) -> Option<Rc<PrincipalContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn privilege_all(&self) ->  Vec<Rc<PrivilegeContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn privilege(&self, i: usize) -> Option<Rc<PrivilegeContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token ALL
	/// Returns `None` if there is no child corresponding to token ALL
	fn ALL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ALL, 0)
	}
	/// Retrieves first TerminalNode corresponding to token PRIVILEGES
	/// Returns `None` if there is no child corresponding to token PRIVILEGES
	fn PRIVILEGES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(PRIVILEGES, 0)
	}
	/// Retrieves first TerminalNode corresponding to token SCHEMA
	/// Returns `None` if there is no child corresponding to token SCHEMA
	fn SCHEMA(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SCHEMA, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> DenyContextAttrs<'input> for DenyContext<'input>{}

pub struct DenyContextExt<'input>{
	base:StatementContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	pub grantee: Option<Rc<PrincipalContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DenyContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DenyContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DenyContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_deny(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_deny(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DenyContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_deny(self);
	}
}

impl<'input> CustomRuleContext<'input> for DenyContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for DenyContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for DenyContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for DenyContext<'input> {}

impl<'input> DenyContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::DenyContext(
				BaseParserRuleContext::copy_from(ctx,DenyContextExt{
					tail:None, 
        			grantee:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type InsertIntoContext<'input> = BaseParserRuleContext<'input,InsertIntoContextExt<'input>>;

pub trait InsertIntoContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token INSERT
	/// Returns `None` if there is no child corresponding to token INSERT
	fn INSERT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(INSERT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token INTO
	/// Returns `None` if there is no child corresponding to token INTO
	fn INTO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(INTO, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn query(&self) -> Option<Rc<QueryContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn columnAliases(&self) -> Option<Rc<ColumnAliasesContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> InsertIntoContextAttrs<'input> for InsertIntoContext<'input>{}

pub struct InsertIntoContextExt<'input>{
	base:StatementContextExt<'input>,
	pub dest: Option<Rc<QualifiedNameContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{InsertIntoContextExt<'a>}

impl<'input> TrinoParserContext<'input> for InsertIntoContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for InsertIntoContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_insertInto(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_insertInto(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for InsertIntoContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_insertInto(self);
	}
}

impl<'input> CustomRuleContext<'input> for InsertIntoContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for InsertIntoContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for InsertIntoContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for InsertIntoContext<'input> {}

impl<'input> InsertIntoContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::InsertIntoContext(
				BaseParserRuleContext::copy_from(ctx,InsertIntoContextExt{
        			dest:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type CreateSchemaContext<'input> = BaseParserRuleContext<'input,CreateSchemaContextExt<'input>>;

pub trait CreateSchemaContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token CREATE
	/// Returns `None` if there is no child corresponding to token CREATE
	fn CREATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CREATE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token SCHEMA
	/// Returns `None` if there is no child corresponding to token SCHEMA
	fn SCHEMA(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SCHEMA, 0)
	}
	/// Retrieves first TerminalNode corresponding to token OR
	/// Returns `None` if there is no child corresponding to token OR
	fn OR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(OR, 0)
	}
	/// Retrieves first TerminalNode corresponding to token REPLACE
	/// Returns `None` if there is no child corresponding to token REPLACE
	fn REPLACE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(REPLACE, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> CreateSchemaContextAttrs<'input> for CreateSchemaContext<'input>{}

pub struct CreateSchemaContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{CreateSchemaContextExt<'a>}

impl<'input> TrinoParserContext<'input> for CreateSchemaContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CreateSchemaContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_createSchema(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_createSchema(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CreateSchemaContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_createSchema(self);
	}
}

impl<'input> CustomRuleContext<'input> for CreateSchemaContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for CreateSchemaContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for CreateSchemaContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for CreateSchemaContext<'input> {}

impl<'input> CreateSchemaContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::CreateSchemaContext(
				BaseParserRuleContext::copy_from(ctx,CreateSchemaContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ExecuteContext<'input> = BaseParserRuleContext<'input,ExecuteContextExt<'input>>;

pub trait ExecuteContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token EXECUTE
	/// Returns `None` if there is no child corresponding to token EXECUTE
	fn EXECUTE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXECUTE, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> ExecuteContextAttrs<'input> for ExecuteContext<'input>{}

pub struct ExecuteContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ExecuteContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ExecuteContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ExecuteContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_execute(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_execute(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ExecuteContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_execute(self);
	}
}

impl<'input> CustomRuleContext<'input> for ExecuteContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for ExecuteContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for ExecuteContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for ExecuteContext<'input> {}

impl<'input> ExecuteContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::ExecuteContext(
				BaseParserRuleContext::copy_from(ctx,ExecuteContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type RenameSchemaContext<'input> = BaseParserRuleContext<'input,RenameSchemaContextExt<'input>>;

pub trait RenameSchemaContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ALTER
	/// Returns `None` if there is no child corresponding to token ALTER
	fn ALTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ALTER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token SCHEMA
	/// Returns `None` if there is no child corresponding to token SCHEMA
	fn SCHEMA(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SCHEMA, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RENAME
	/// Returns `None` if there is no child corresponding to token RENAME
	fn RENAME(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RENAME, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TO
	/// Returns `None` if there is no child corresponding to token TO
	fn TO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TO, 0)
	}
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> RenameSchemaContextAttrs<'input> for RenameSchemaContext<'input>{}

pub struct RenameSchemaContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{RenameSchemaContextExt<'a>}

impl<'input> TrinoParserContext<'input> for RenameSchemaContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RenameSchemaContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_renameSchema(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_renameSchema(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RenameSchemaContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_renameSchema(self);
	}
}

impl<'input> CustomRuleContext<'input> for RenameSchemaContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for RenameSchemaContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for RenameSchemaContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for RenameSchemaContext<'input> {}

impl<'input> RenameSchemaContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::RenameSchemaContext(
				BaseParserRuleContext::copy_from(ctx,RenameSchemaContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type AnalyzeContext<'input> = BaseParserRuleContext<'input,AnalyzeContextExt<'input>>;

pub trait AnalyzeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ANALYZE
	/// Returns `None` if there is no child corresponding to token ANALYZE
	fn ANALYZE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ANALYZE, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> AnalyzeContextAttrs<'input> for AnalyzeContext<'input>{}

pub struct AnalyzeContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{AnalyzeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for AnalyzeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for AnalyzeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_analyze(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_analyze(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for AnalyzeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_analyze(self);
	}
}

impl<'input> CustomRuleContext<'input> for AnalyzeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for AnalyzeContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for AnalyzeContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for AnalyzeContext<'input> {}

impl<'input> AnalyzeContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::AnalyzeContext(
				BaseParserRuleContext::copy_from(ctx,AnalyzeContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type CreateFunctionContext<'input> = BaseParserRuleContext<'input,CreateFunctionContextExt<'input>>;

pub trait CreateFunctionContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token CREATE
	/// Returns `None` if there is no child corresponding to token CREATE
	fn CREATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CREATE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token FUNCTION
	/// Returns `None` if there is no child corresponding to token FUNCTION
	fn FUNCTION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(FUNCTION, 0)
	}
	/// Retrieves first TerminalNode corresponding to token OR
	/// Returns `None` if there is no child corresponding to token OR
	fn OR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(OR, 0)
	}
	/// Retrieves first TerminalNode corresponding to token REPLACE
	/// Returns `None` if there is no child corresponding to token REPLACE
	fn REPLACE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(REPLACE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token EXTERNAL
	/// Returns `None` if there is no child corresponding to token EXTERNAL
	fn EXTERNAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXTERNAL, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> CreateFunctionContextAttrs<'input> for CreateFunctionContext<'input>{}

pub struct CreateFunctionContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{CreateFunctionContextExt<'a>}

impl<'input> TrinoParserContext<'input> for CreateFunctionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CreateFunctionContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_createFunction(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_createFunction(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CreateFunctionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_createFunction(self);
	}
}

impl<'input> CustomRuleContext<'input> for CreateFunctionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for CreateFunctionContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for CreateFunctionContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for CreateFunctionContext<'input> {}

impl<'input> CreateFunctionContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::CreateFunctionContext(
				BaseParserRuleContext::copy_from(ctx,CreateFunctionContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ResetContext<'input> = BaseParserRuleContext<'input,ResetContextExt<'input>>;

pub trait ResetContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token RESET
	/// Returns `None` if there is no child corresponding to token RESET
	fn RESET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RESET, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> ResetContextAttrs<'input> for ResetContext<'input>{}

pub struct ResetContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ResetContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ResetContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ResetContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_reset(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_reset(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ResetContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_reset(self);
	}
}

impl<'input> CustomRuleContext<'input> for ResetContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for ResetContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for ResetContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for ResetContext<'input> {}

impl<'input> ResetContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::ResetContext(
				BaseParserRuleContext::copy_from(ctx,ResetContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type DropSchemaContext<'input> = BaseParserRuleContext<'input,DropSchemaContextExt<'input>>;

pub trait DropSchemaContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DROP
	/// Returns `None` if there is no child corresponding to token DROP
	fn DROP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DROP, 0)
	}
	/// Retrieves first TerminalNode corresponding to token SCHEMA
	/// Returns `None` if there is no child corresponding to token SCHEMA
	fn SCHEMA(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SCHEMA, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token IF
	/// Returns `None` if there is no child corresponding to token IF
	fn IF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IF, 0)
	}
	/// Retrieves first TerminalNode corresponding to token EXISTS
	/// Returns `None` if there is no child corresponding to token EXISTS
	fn EXISTS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXISTS, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> DropSchemaContextAttrs<'input> for DropSchemaContext<'input>{}

pub struct DropSchemaContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DropSchemaContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DropSchemaContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DropSchemaContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_dropSchema(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_dropSchema(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DropSchemaContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_dropSchema(self);
	}
}

impl<'input> CustomRuleContext<'input> for DropSchemaContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for DropSchemaContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for DropSchemaContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for DropSchemaContext<'input> {}

impl<'input> DropSchemaContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::DropSchemaContext(
				BaseParserRuleContext::copy_from(ctx,DropSchemaContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SetTableAuthorizationContext<'input> = BaseParserRuleContext<'input,SetTableAuthorizationContextExt<'input>>;

pub trait SetTableAuthorizationContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ALTER
	/// Returns `None` if there is no child corresponding to token ALTER
	fn ALTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ALTER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token SET
	/// Returns `None` if there is no child corresponding to token SET
	fn SET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SET, 0)
	}
	/// Retrieves first TerminalNode corresponding to token AUTHORIZATION
	/// Returns `None` if there is no child corresponding to token AUTHORIZATION
	fn AUTHORIZATION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(AUTHORIZATION, 0)
	}
	fn principal(&self) -> Option<Rc<PrincipalContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> SetTableAuthorizationContextAttrs<'input> for SetTableAuthorizationContext<'input>{}

pub struct SetTableAuthorizationContextExt<'input>{
	base:StatementContextExt<'input>,
	pub tableName: Option<Rc<QualifiedNameContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SetTableAuthorizationContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SetTableAuthorizationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SetTableAuthorizationContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_setTableAuthorization(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_setTableAuthorization(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SetTableAuthorizationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_setTableAuthorization(self);
	}
}

impl<'input> CustomRuleContext<'input> for SetTableAuthorizationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for SetTableAuthorizationContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for SetTableAuthorizationContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for SetTableAuthorizationContext<'input> {}

impl<'input> SetTableAuthorizationContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::SetTableAuthorizationContext(
				BaseParserRuleContext::copy_from(ctx,SetTableAuthorizationContextExt{
        			tableName:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type DropContext<'input> = BaseParserRuleContext<'input,DropContextExt<'input>>;

pub trait DropContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DROP
	/// Returns `None` if there is no child corresponding to token DROP
	fn DROP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DROP, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> DropContextAttrs<'input> for DropContext<'input>{}

pub struct DropContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DropContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DropContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DropContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_drop(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_drop(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DropContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_drop(self);
	}
}

impl<'input> CustomRuleContext<'input> for DropContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for DropContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for DropContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for DropContext<'input> {}

impl<'input> DropContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::DropContext(
				BaseParserRuleContext::copy_from(ctx,DropContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type CreateTableContext<'input> = BaseParserRuleContext<'input,CreateTableContextExt<'input>>;

pub trait CreateTableContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token CREATE
	/// Returns `None` if there is no child corresponding to token CREATE
	fn CREATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CREATE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token OR
	/// Returns `None` if there is no child corresponding to token OR
	fn OR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(OR, 0)
	}
	/// Retrieves first TerminalNode corresponding to token REPLACE
	/// Returns `None` if there is no child corresponding to token REPLACE
	fn REPLACE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(REPLACE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token IF
	/// Returns `None` if there is no child corresponding to token IF
	fn IF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IF, 0)
	}
	/// Retrieves first TerminalNode corresponding to token NOT
	/// Returns `None` if there is no child corresponding to token NOT
	fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NOT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token EXISTS
	/// Returns `None` if there is no child corresponding to token EXISTS
	fn EXISTS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXISTS, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn tableElements(&self) -> Option<Rc<TableElementsContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token COMMENT
	/// Returns `None` if there is no child corresponding to token COMMENT
	fn COMMENT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMENT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token WITH
	/// Returns `None` if there is no child corresponding to token WITH
	fn WITH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(WITH, 0)
	}
	fn properties(&self) -> Option<Rc<PropertiesContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn string(&self) -> Option<Rc<StringContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token COMMA
	/// Returns `None` if there is no child corresponding to token COMMA
	fn COMMA(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, 0)
	}
}

impl<'input> CreateTableContextAttrs<'input> for CreateTableContext<'input>{}

pub struct CreateTableContextExt<'input>{
	base:StatementContextExt<'input>,
	pub dest: Option<Rc<QualifiedNameContextAll<'input>>>,
	pub tail: Option<TokenType<'input>>,
	pub comment: Option<Rc<StringContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{CreateTableContextExt<'a>}

impl<'input> TrinoParserContext<'input> for CreateTableContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CreateTableContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_createTable(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_createTable(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CreateTableContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_createTable(self);
	}
}

impl<'input> CustomRuleContext<'input> for CreateTableContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for CreateTableContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for CreateTableContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for CreateTableContext<'input> {}

impl<'input> CreateTableContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::CreateTableContext(
				BaseParserRuleContext::copy_from(ctx,CreateTableContextExt{
					tail:None, 
        			dest:None, comment:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type StartTransactionContext<'input> = BaseParserRuleContext<'input,StartTransactionContextExt<'input>>;

pub trait StartTransactionContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token START
	/// Returns `None` if there is no child corresponding to token START
	fn START(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(START, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TRANSACTION
	/// Returns `None` if there is no child corresponding to token TRANSACTION
	fn TRANSACTION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TRANSACTION, 0)
	}
	fn transactionMode_all(&self) ->  Vec<Rc<TransactionModeContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn transactionMode(&self, i: usize) -> Option<Rc<TransactionModeContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> StartTransactionContextAttrs<'input> for StartTransactionContext<'input>{}

pub struct StartTransactionContextExt<'input>{
	base:StatementContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{StartTransactionContextExt<'a>}

impl<'input> TrinoParserContext<'input> for StartTransactionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for StartTransactionContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_startTransaction(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_startTransaction(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for StartTransactionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_startTransaction(self);
	}
}

impl<'input> CustomRuleContext<'input> for StartTransactionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for StartTransactionContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for StartTransactionContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for StartTransactionContext<'input> {}

impl<'input> StartTransactionContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::StartTransactionContext(
				BaseParserRuleContext::copy_from(ctx,StartTransactionContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type CreateTableAsSelectContext<'input> = BaseParserRuleContext<'input,CreateTableAsSelectContextExt<'input>>;

pub trait CreateTableAsSelectContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token CREATE
	/// Returns `None` if there is no child corresponding to token CREATE
	fn CREATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CREATE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token AS
	/// Returns `None` if there is no child corresponding to token AS
	fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(AS, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn query(&self) -> Option<Rc<QueryContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token OR
	/// Returns `None` if there is no child corresponding to token OR
	fn OR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(OR, 0)
	}
	/// Retrieves first TerminalNode corresponding to token REPLACE
	/// Returns `None` if there is no child corresponding to token REPLACE
	fn REPLACE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(REPLACE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token IF
	/// Returns `None` if there is no child corresponding to token IF
	fn IF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IF, 0)
	}
	/// Retrieves first TerminalNode corresponding to token NOT
	/// Returns `None` if there is no child corresponding to token NOT
	fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NOT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token EXISTS
	/// Returns `None` if there is no child corresponding to token EXISTS
	fn EXISTS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXISTS, 0)
	}
	fn columnAliases(&self) -> Option<Rc<ColumnAliasesContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token COMMENT
	/// Returns `None` if there is no child corresponding to token COMMENT
	fn COMMENT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMENT, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token WITH in current rule
	fn WITH_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token WITH, starting from 0.
	/// Returns `None` if number of children corresponding to token WITH is less or equal than `i`.
	fn WITH(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(WITH, i)
	}
	fn properties(&self) -> Option<Rc<PropertiesContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token DATA
	/// Returns `None` if there is no child corresponding to token DATA
	fn DATA(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DATA, 0)
	}
	fn string(&self) -> Option<Rc<StringContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token NO
	/// Returns `None` if there is no child corresponding to token NO
	fn NO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NO, 0)
	}
}

impl<'input> CreateTableAsSelectContextAttrs<'input> for CreateTableAsSelectContext<'input>{}

pub struct CreateTableAsSelectContextExt<'input>{
	base:StatementContextExt<'input>,
	pub dest: Option<Rc<QualifiedNameContextAll<'input>>>,
	pub comment: Option<Rc<StringContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{CreateTableAsSelectContextExt<'a>}

impl<'input> TrinoParserContext<'input> for CreateTableAsSelectContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CreateTableAsSelectContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_createTableAsSelect(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_createTableAsSelect(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CreateTableAsSelectContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_createTableAsSelect(self);
	}
}

impl<'input> CustomRuleContext<'input> for CreateTableAsSelectContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for CreateTableAsSelectContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for CreateTableAsSelectContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for CreateTableAsSelectContext<'input> {}

impl<'input> CreateTableAsSelectContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::CreateTableAsSelectContext(
				BaseParserRuleContext::copy_from(ctx,CreateTableAsSelectContextExt{
        			dest:None, comment:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ShowContext<'input> = BaseParserRuleContext<'input,ShowContextExt<'input>>;

pub trait ShowContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token SHOW
	/// Returns `None` if there is no child corresponding to token SHOW
	fn SHOW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SHOW, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> ShowContextAttrs<'input> for ShowContext<'input>{}

pub struct ShowContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ShowContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ShowContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ShowContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_show(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_show(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ShowContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_show(self);
	}
}

impl<'input> CustomRuleContext<'input> for ShowContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for ShowContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for ShowContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for ShowContext<'input> {}

impl<'input> ShowContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::ShowContext(
				BaseParserRuleContext::copy_from(ctx,ShowContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type RevokeContext<'input> = BaseParserRuleContext<'input,RevokeContextExt<'input>>;

pub trait RevokeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token REVOKE
	/// Returns `None` if there is no child corresponding to token REVOKE
	fn REVOKE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(REVOKE, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> RevokeContextAttrs<'input> for RevokeContext<'input>{}

pub struct RevokeContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{RevokeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for RevokeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RevokeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_revoke(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_revoke(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RevokeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_revoke(self);
	}
}

impl<'input> CustomRuleContext<'input> for RevokeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for RevokeContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for RevokeContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for RevokeContext<'input> {}

impl<'input> RevokeContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::RevokeContext(
				BaseParserRuleContext::copy_from(ctx,RevokeContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type UpdateContext<'input> = BaseParserRuleContext<'input,UpdateContextExt<'input>>;

pub trait UpdateContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token UPDATE
	/// Returns `None` if there is no child corresponding to token UPDATE
	fn UPDATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(UPDATE, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> UpdateContextAttrs<'input> for UpdateContext<'input>{}

pub struct UpdateContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{UpdateContextExt<'a>}

impl<'input> TrinoParserContext<'input> for UpdateContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for UpdateContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_update(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_update(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for UpdateContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_update(self);
	}
}

impl<'input> CustomRuleContext<'input> for UpdateContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for UpdateContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for UpdateContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for UpdateContext<'input> {}

impl<'input> UpdateContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::UpdateContext(
				BaseParserRuleContext::copy_from(ctx,UpdateContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type CreateRecursiveTableContext<'input> = BaseParserRuleContext<'input,CreateRecursiveTableContextExt<'input>>;

pub trait CreateRecursiveTableContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token CREATE
	/// Returns `None` if there is no child corresponding to token CREATE
	fn CREATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CREATE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RECURSIVE
	/// Returns `None` if there is no child corresponding to token RECURSIVE
	fn RECURSIVE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RECURSIVE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token AS
	/// Returns `None` if there is no child corresponding to token AS
	fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(AS, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn query(&self) -> Option<Rc<QueryContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token IF
	/// Returns `None` if there is no child corresponding to token IF
	fn IF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IF, 0)
	}
	/// Retrieves first TerminalNode corresponding to token NOT
	/// Returns `None` if there is no child corresponding to token NOT
	fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NOT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token EXISTS
	/// Returns `None` if there is no child corresponding to token EXISTS
	fn EXISTS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXISTS, 0)
	}
	fn columnAliases(&self) -> Option<Rc<ColumnAliasesContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token COMMENT
	/// Returns `None` if there is no child corresponding to token COMMENT
	fn COMMENT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMENT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token WITH
	/// Returns `None` if there is no child corresponding to token WITH
	fn WITH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(WITH, 0)
	}
	fn properties(&self) -> Option<Rc<PropertiesContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn string(&self) -> Option<Rc<StringContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> CreateRecursiveTableContextAttrs<'input> for CreateRecursiveTableContext<'input>{}

pub struct CreateRecursiveTableContextExt<'input>{
	base:StatementContextExt<'input>,
	pub dest: Option<Rc<QualifiedNameContextAll<'input>>>,
	pub comment: Option<Rc<StringContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{CreateRecursiveTableContextExt<'a>}

impl<'input> TrinoParserContext<'input> for CreateRecursiveTableContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CreateRecursiveTableContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_createRecursiveTable(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_createRecursiveTable(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CreateRecursiveTableContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_createRecursiveTable(self);
	}
}

impl<'input> CustomRuleContext<'input> for CreateRecursiveTableContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for CreateRecursiveTableContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for CreateRecursiveTableContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for CreateRecursiveTableContext<'input> {}

impl<'input> CreateRecursiveTableContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::CreateRecursiveTableContext(
				BaseParserRuleContext::copy_from(ctx,CreateRecursiveTableContextExt{
        			dest:None, comment:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type TableExecuteContext<'input> = BaseParserRuleContext<'input,TableExecuteContextExt<'input>>;

pub trait TableExecuteContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ALTER
	/// Returns `None` if there is no child corresponding to token ALTER
	fn ALTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ALTER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token EXECUTE
	/// Returns `None` if there is no child corresponding to token EXECUTE
	fn EXECUTE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXECUTE, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token WHERE
	/// Returns `None` if there is no child corresponding to token WHERE
	fn WHERE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(WHERE, 0)
	}
	fn booleanExpression(&self) -> Option<Rc<BooleanExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn callArgument_all(&self) ->  Vec<Rc<CallArgumentContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn callArgument(&self, i: usize) -> Option<Rc<CallArgumentContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> TableExecuteContextAttrs<'input> for TableExecuteContext<'input>{}

pub struct TableExecuteContextExt<'input>{
	base:StatementContextExt<'input>,
	pub tableName: Option<Rc<QualifiedNameContextAll<'input>>>,
	pub procedureName: Option<Rc<IdentifierContextAll<'input>>>,
	pub tail: Option<TokenType<'input>>,
	pub where_: Option<Rc<BooleanExpressionContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{TableExecuteContextExt<'a>}

impl<'input> TrinoParserContext<'input> for TableExecuteContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableExecuteContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_tableExecute(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_tableExecute(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableExecuteContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_tableExecute(self);
	}
}

impl<'input> CustomRuleContext<'input> for TableExecuteContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for TableExecuteContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for TableExecuteContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for TableExecuteContext<'input> {}

impl<'input> TableExecuteContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::TableExecuteContext(
				BaseParserRuleContext::copy_from(ctx,TableExecuteContextExt{
					tail:None, 
        			tableName:None, procedureName:None, where_:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type DeleteContext<'input> = BaseParserRuleContext<'input,DeleteContextExt<'input>>;

pub trait DeleteContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DELETE
	/// Returns `None` if there is no child corresponding to token DELETE
	fn DELETE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DELETE, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> DeleteContextAttrs<'input> for DeleteContext<'input>{}

pub struct DeleteContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DeleteContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DeleteContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DeleteContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_delete(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_delete(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DeleteContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_delete(self);
	}
}

impl<'input> CustomRuleContext<'input> for DeleteContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for DeleteContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for DeleteContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for DeleteContext<'input> {}

impl<'input> DeleteContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::DeleteContext(
				BaseParserRuleContext::copy_from(ctx,DeleteContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type DescribeInputContext<'input> = BaseParserRuleContext<'input,DescribeInputContextExt<'input>>;

pub trait DescribeInputContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DESCRIBE
	/// Returns `None` if there is no child corresponding to token DESCRIBE
	fn DESCRIBE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DESCRIBE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token INPUT
	/// Returns `None` if there is no child corresponding to token INPUT
	fn INPUT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(INPUT, 0)
	}
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> DescribeInputContextAttrs<'input> for DescribeInputContext<'input>{}

pub struct DescribeInputContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DescribeInputContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DescribeInputContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DescribeInputContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_describeInput(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_describeInput(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DescribeInputContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_describeInput(self);
	}
}

impl<'input> CustomRuleContext<'input> for DescribeInputContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for DescribeInputContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for DescribeInputContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for DescribeInputContext<'input> {}

impl<'input> DescribeInputContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::DescribeInputContext(
				BaseParserRuleContext::copy_from(ctx,DescribeInputContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SetColumnTypeContext<'input> = BaseParserRuleContext<'input,SetColumnTypeContextExt<'input>>;

pub trait SetColumnTypeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves all `TerminalNode`s corresponding to token ALTER in current rule
	fn ALTER_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token ALTER, starting from 0.
	/// Returns `None` if number of children corresponding to token ALTER is less or equal than `i`.
	fn ALTER(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ALTER, i)
	}
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token COLUMN
	/// Returns `None` if there is no child corresponding to token COLUMN
	fn COLUMN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COLUMN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token SET
	/// Returns `None` if there is no child corresponding to token SET
	fn SET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SET, 0)
	}
	/// Retrieves first TerminalNode corresponding to token DATA
	/// Returns `None` if there is no child corresponding to token DATA
	fn DATA(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DATA, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TYPE
	/// Returns `None` if there is no child corresponding to token TYPE
	fn TYPE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TYPE, 0)
	}
	fn type_(&self) -> Option<Rc<Type_ContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token IF
	/// Returns `None` if there is no child corresponding to token IF
	fn IF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IF, 0)
	}
	/// Retrieves first TerminalNode corresponding to token EXISTS
	/// Returns `None` if there is no child corresponding to token EXISTS
	fn EXISTS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXISTS, 0)
	}
}

impl<'input> SetColumnTypeContextAttrs<'input> for SetColumnTypeContext<'input>{}

pub struct SetColumnTypeContextExt<'input>{
	base:StatementContextExt<'input>,
	pub tableName: Option<Rc<QualifiedNameContextAll<'input>>>,
	pub setColumnName: Option<Rc<IdentifierContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SetColumnTypeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SetColumnTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SetColumnTypeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_setColumnType(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_setColumnType(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SetColumnTypeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_setColumnType(self);
	}
}

impl<'input> CustomRuleContext<'input> for SetColumnTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for SetColumnTypeContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for SetColumnTypeContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for SetColumnTypeContext<'input> {}

impl<'input> SetColumnTypeContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::SetColumnTypeContext(
				BaseParserRuleContext::copy_from(ctx,SetColumnTypeContextExt{
        			tableName:None, setColumnName:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type StatementDefaultContext<'input> = BaseParserRuleContext<'input,StatementDefaultContextExt<'input>>;

pub trait StatementDefaultContextAttrs<'input>: TrinoParserContext<'input>{
	fn query(&self) -> Option<Rc<QueryContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> StatementDefaultContextAttrs<'input> for StatementDefaultContext<'input>{}

pub struct StatementDefaultContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{StatementDefaultContextExt<'a>}

impl<'input> TrinoParserContext<'input> for StatementDefaultContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for StatementDefaultContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_statementDefault(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_statementDefault(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for StatementDefaultContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_statementDefault(self);
	}
}

impl<'input> CustomRuleContext<'input> for StatementDefaultContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for StatementDefaultContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for StatementDefaultContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for StatementDefaultContext<'input> {}

impl<'input> StatementDefaultContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::StatementDefaultContext(
				BaseParserRuleContext::copy_from(ctx,StatementDefaultContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type TruncateTableContext<'input> = BaseParserRuleContext<'input,TruncateTableContextExt<'input>>;

pub trait TruncateTableContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token TRUNCATE
	/// Returns `None` if there is no child corresponding to token TRUNCATE
	fn TRUNCATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TRUNCATE, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> TruncateTableContextAttrs<'input> for TruncateTableContext<'input>{}

pub struct TruncateTableContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{TruncateTableContextExt<'a>}

impl<'input> TrinoParserContext<'input> for TruncateTableContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TruncateTableContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_truncateTable(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_truncateTable(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TruncateTableContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_truncateTable(self);
	}
}

impl<'input> CustomRuleContext<'input> for TruncateTableContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for TruncateTableContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for TruncateTableContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for TruncateTableContext<'input> {}

impl<'input> TruncateTableContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::TruncateTableContext(
				BaseParserRuleContext::copy_from(ctx,TruncateTableContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type CreateMaterializedViewContext<'input> = BaseParserRuleContext<'input,CreateMaterializedViewContextExt<'input>>;

pub trait CreateMaterializedViewContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token CREATE
	/// Returns `None` if there is no child corresponding to token CREATE
	fn CREATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CREATE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token MATERIALIZED
	/// Returns `None` if there is no child corresponding to token MATERIALIZED
	fn MATERIALIZED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(MATERIALIZED, 0)
	}
	/// Retrieves first TerminalNode corresponding to token VIEW
	/// Returns `None` if there is no child corresponding to token VIEW
	fn VIEW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(VIEW, 0)
	}
	/// Retrieves first TerminalNode corresponding to token AS
	/// Returns `None` if there is no child corresponding to token AS
	fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(AS, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn query(&self) -> Option<Rc<QueryContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token OR
	/// Returns `None` if there is no child corresponding to token OR
	fn OR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(OR, 0)
	}
	/// Retrieves first TerminalNode corresponding to token REPLACE
	/// Returns `None` if there is no child corresponding to token REPLACE
	fn REPLACE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(REPLACE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token IF
	/// Returns `None` if there is no child corresponding to token IF
	fn IF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IF, 0)
	}
	/// Retrieves first TerminalNode corresponding to token NOT
	/// Returns `None` if there is no child corresponding to token NOT
	fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NOT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token EXISTS
	/// Returns `None` if there is no child corresponding to token EXISTS
	fn EXISTS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXISTS, 0)
	}
	/// Retrieves first TerminalNode corresponding to token GRACE
	/// Returns `None` if there is no child corresponding to token GRACE
	fn GRACE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(GRACE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token PERIOD
	/// Returns `None` if there is no child corresponding to token PERIOD
	fn PERIOD(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(PERIOD, 0)
	}
	fn interval(&self) -> Option<Rc<IntervalContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token COMMENT
	/// Returns `None` if there is no child corresponding to token COMMENT
	fn COMMENT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMENT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token WITH
	/// Returns `None` if there is no child corresponding to token WITH
	fn WITH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(WITH, 0)
	}
	fn properties(&self) -> Option<Rc<PropertiesContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn string(&self) -> Option<Rc<StringContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> CreateMaterializedViewContextAttrs<'input> for CreateMaterializedViewContext<'input>{}

pub struct CreateMaterializedViewContextExt<'input>{
	base:StatementContextExt<'input>,
	pub dest: Option<Rc<QualifiedNameContextAll<'input>>>,
	pub comment: Option<Rc<StringContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{CreateMaterializedViewContextExt<'a>}

impl<'input> TrinoParserContext<'input> for CreateMaterializedViewContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CreateMaterializedViewContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_createMaterializedView(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_createMaterializedView(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CreateMaterializedViewContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_createMaterializedView(self);
	}
}

impl<'input> CustomRuleContext<'input> for CreateMaterializedViewContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for CreateMaterializedViewContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for CreateMaterializedViewContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for CreateMaterializedViewContext<'input> {}

impl<'input> CreateMaterializedViewContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::CreateMaterializedViewContext(
				BaseParserRuleContext::copy_from(ctx,CreateMaterializedViewContextExt{
        			dest:None, comment:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type CreateViewContext<'input> = BaseParserRuleContext<'input,CreateViewContextExt<'input>>;

pub trait CreateViewContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token CREATE
	/// Returns `None` if there is no child corresponding to token CREATE
	fn CREATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CREATE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token VIEW
	/// Returns `None` if there is no child corresponding to token VIEW
	fn VIEW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(VIEW, 0)
	}
	/// Retrieves first TerminalNode corresponding to token AS
	/// Returns `None` if there is no child corresponding to token AS
	fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(AS, 0)
	}
	fn query(&self) -> Option<Rc<QueryContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token OR
	/// Returns `None` if there is no child corresponding to token OR
	fn OR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(OR, 0)
	}
	/// Retrieves first TerminalNode corresponding to token REPLACE
	/// Returns `None` if there is no child corresponding to token REPLACE
	fn REPLACE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(REPLACE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token COMMENT
	/// Returns `None` if there is no child corresponding to token COMMENT
	fn COMMENT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMENT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token SECURITY
	/// Returns `None` if there is no child corresponding to token SECURITY
	fn SECURITY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SECURITY, 0)
	}
	fn string(&self) -> Option<Rc<StringContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token DEFINER
	/// Returns `None` if there is no child corresponding to token DEFINER
	fn DEFINER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DEFINER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token INVOKER
	/// Returns `None` if there is no child corresponding to token INVOKER
	fn INVOKER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(INVOKER, 0)
	}
}

impl<'input> CreateViewContextAttrs<'input> for CreateViewContext<'input>{}

pub struct CreateViewContextExt<'input>{
	base:StatementContextExt<'input>,
	pub dest: Option<Rc<QualifiedNameContextAll<'input>>>,
	pub comment: Option<Rc<StringContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{CreateViewContextExt<'a>}

impl<'input> TrinoParserContext<'input> for CreateViewContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CreateViewContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_createView(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_createView(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CreateViewContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_createView(self);
	}
}

impl<'input> CustomRuleContext<'input> for CreateViewContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for CreateViewContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for CreateViewContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for CreateViewContext<'input> {}

impl<'input> CreateViewContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::CreateViewContext(
				BaseParserRuleContext::copy_from(ctx,CreateViewContextExt{
        			dest:None, comment:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type RenameMaterializedViewContext<'input> = BaseParserRuleContext<'input,RenameMaterializedViewContextExt<'input>>;

pub trait RenameMaterializedViewContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ALTER
	/// Returns `None` if there is no child corresponding to token ALTER
	fn ALTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ALTER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token MATERIALIZED
	/// Returns `None` if there is no child corresponding to token MATERIALIZED
	fn MATERIALIZED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(MATERIALIZED, 0)
	}
	/// Retrieves first TerminalNode corresponding to token VIEW
	/// Returns `None` if there is no child corresponding to token VIEW
	fn VIEW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(VIEW, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RENAME
	/// Returns `None` if there is no child corresponding to token RENAME
	fn RENAME(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RENAME, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TO
	/// Returns `None` if there is no child corresponding to token TO
	fn TO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TO, 0)
	}
	fn qualifiedName_all(&self) ->  Vec<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn qualifiedName(&self, i: usize) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token IF
	/// Returns `None` if there is no child corresponding to token IF
	fn IF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IF, 0)
	}
	/// Retrieves first TerminalNode corresponding to token EXISTS
	/// Returns `None` if there is no child corresponding to token EXISTS
	fn EXISTS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXISTS, 0)
	}
}

impl<'input> RenameMaterializedViewContextAttrs<'input> for RenameMaterializedViewContext<'input>{}

pub struct RenameMaterializedViewContextExt<'input>{
	base:StatementContextExt<'input>,
	pub from: Option<Rc<QualifiedNameContextAll<'input>>>,
	pub to: Option<Rc<QualifiedNameContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{RenameMaterializedViewContextExt<'a>}

impl<'input> TrinoParserContext<'input> for RenameMaterializedViewContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RenameMaterializedViewContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_renameMaterializedView(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_renameMaterializedView(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RenameMaterializedViewContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_renameMaterializedView(self);
	}
}

impl<'input> CustomRuleContext<'input> for RenameMaterializedViewContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for RenameMaterializedViewContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for RenameMaterializedViewContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for RenameMaterializedViewContext<'input> {}

impl<'input> RenameMaterializedViewContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::RenameMaterializedViewContext(
				BaseParserRuleContext::copy_from(ctx,RenameMaterializedViewContextExt{
        			from:None, to:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type DropTableContext<'input> = BaseParserRuleContext<'input,DropTableContextExt<'input>>;

pub trait DropTableContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DROP
	/// Returns `None` if there is no child corresponding to token DROP
	fn DROP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DROP, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> DropTableContextAttrs<'input> for DropTableContext<'input>{}

pub struct DropTableContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DropTableContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DropTableContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DropTableContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_dropTable(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_dropTable(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DropTableContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_dropTable(self);
	}
}

impl<'input> CustomRuleContext<'input> for DropTableContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for DropTableContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for DropTableContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for DropTableContext<'input> {}

impl<'input> DropTableContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::DropTableContext(
				BaseParserRuleContext::copy_from(ctx,DropTableContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SetSchemaAuthorizationContext<'input> = BaseParserRuleContext<'input,SetSchemaAuthorizationContextExt<'input>>;

pub trait SetSchemaAuthorizationContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ALTER
	/// Returns `None` if there is no child corresponding to token ALTER
	fn ALTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ALTER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token SCHEMA
	/// Returns `None` if there is no child corresponding to token SCHEMA
	fn SCHEMA(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SCHEMA, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token SET
	/// Returns `None` if there is no child corresponding to token SET
	fn SET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SET, 0)
	}
	/// Retrieves first TerminalNode corresponding to token AUTHORIZATION
	/// Returns `None` if there is no child corresponding to token AUTHORIZATION
	fn AUTHORIZATION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(AUTHORIZATION, 0)
	}
	fn principal(&self) -> Option<Rc<PrincipalContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> SetSchemaAuthorizationContextAttrs<'input> for SetSchemaAuthorizationContext<'input>{}

pub struct SetSchemaAuthorizationContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SetSchemaAuthorizationContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SetSchemaAuthorizationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SetSchemaAuthorizationContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_setSchemaAuthorization(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_setSchemaAuthorization(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SetSchemaAuthorizationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_setSchemaAuthorization(self);
	}
}

impl<'input> CustomRuleContext<'input> for SetSchemaAuthorizationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for SetSchemaAuthorizationContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for SetSchemaAuthorizationContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for SetSchemaAuthorizationContext<'input> {}

impl<'input> SetSchemaAuthorizationContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::SetSchemaAuthorizationContext(
				BaseParserRuleContext::copy_from(ctx,SetSchemaAuthorizationContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type RollbackContext<'input> = BaseParserRuleContext<'input,RollbackContextExt<'input>>;

pub trait RollbackContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ROLLBACK
	/// Returns `None` if there is no child corresponding to token ROLLBACK
	fn ROLLBACK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ROLLBACK, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> RollbackContextAttrs<'input> for RollbackContext<'input>{}

pub struct RollbackContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{RollbackContextExt<'a>}

impl<'input> TrinoParserContext<'input> for RollbackContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RollbackContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_rollback(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_rollback(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RollbackContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_rollback(self);
	}
}

impl<'input> CustomRuleContext<'input> for RollbackContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for RollbackContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for RollbackContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for RollbackContext<'input> {}

impl<'input> RollbackContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::RollbackContext(
				BaseParserRuleContext::copy_from(ctx,RollbackContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SetContext<'input> = BaseParserRuleContext<'input,SetContextExt<'input>>;

pub trait SetContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token SET
	/// Returns `None` if there is no child corresponding to token SET
	fn SET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SET, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> SetContextAttrs<'input> for SetContext<'input>{}

pub struct SetContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SetContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SetContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SetContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_set(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_set(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SetContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_set(self);
	}
}

impl<'input> CustomRuleContext<'input> for SetContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for SetContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for SetContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for SetContext<'input> {}

impl<'input> SetContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::SetContext(
				BaseParserRuleContext::copy_from(ctx,SetContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type RenameViewContext<'input> = BaseParserRuleContext<'input,RenameViewContextExt<'input>>;

pub trait RenameViewContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ALTER
	/// Returns `None` if there is no child corresponding to token ALTER
	fn ALTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ALTER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token VIEW
	/// Returns `None` if there is no child corresponding to token VIEW
	fn VIEW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(VIEW, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RENAME
	/// Returns `None` if there is no child corresponding to token RENAME
	fn RENAME(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RENAME, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TO
	/// Returns `None` if there is no child corresponding to token TO
	fn TO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TO, 0)
	}
	fn qualifiedName_all(&self) ->  Vec<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn qualifiedName(&self, i: usize) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
}

impl<'input> RenameViewContextAttrs<'input> for RenameViewContext<'input>{}

pub struct RenameViewContextExt<'input>{
	base:StatementContextExt<'input>,
	pub from: Option<Rc<QualifiedNameContextAll<'input>>>,
	pub to: Option<Rc<QualifiedNameContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{RenameViewContextExt<'a>}

impl<'input> TrinoParserContext<'input> for RenameViewContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RenameViewContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_renameView(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_renameView(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RenameViewContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_renameView(self);
	}
}

impl<'input> CustomRuleContext<'input> for RenameViewContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for RenameViewContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for RenameViewContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for RenameViewContext<'input> {}

impl<'input> RenameViewContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::RenameViewContext(
				BaseParserRuleContext::copy_from(ctx,RenameViewContextExt{
        			from:None, to:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type CallContext<'input> = BaseParserRuleContext<'input,CallContextExt<'input>>;

pub trait CallContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token CALL
	/// Returns `None` if there is no child corresponding to token CALL
	fn CALL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CALL, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> CallContextAttrs<'input> for CallContext<'input>{}

pub struct CallContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{CallContextExt<'a>}

impl<'input> TrinoParserContext<'input> for CallContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CallContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_call(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_call(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CallContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_call(self);
	}
}

impl<'input> CustomRuleContext<'input> for CallContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for CallContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for CallContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for CallContext<'input> {}

impl<'input> CallContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::CallContext(
				BaseParserRuleContext::copy_from(ctx,CallContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type RefreshMaterializedViewContext<'input> = BaseParserRuleContext<'input,RefreshMaterializedViewContextExt<'input>>;

pub trait RefreshMaterializedViewContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token REFRESH
	/// Returns `None` if there is no child corresponding to token REFRESH
	fn REFRESH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(REFRESH, 0)
	}
	/// Retrieves first TerminalNode corresponding to token MATERIALIZED
	/// Returns `None` if there is no child corresponding to token MATERIALIZED
	fn MATERIALIZED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(MATERIALIZED, 0)
	}
	/// Retrieves first TerminalNode corresponding to token VIEW
	/// Returns `None` if there is no child corresponding to token VIEW
	fn VIEW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(VIEW, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> RefreshMaterializedViewContextAttrs<'input> for RefreshMaterializedViewContext<'input>{}

pub struct RefreshMaterializedViewContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{RefreshMaterializedViewContextExt<'a>}

impl<'input> TrinoParserContext<'input> for RefreshMaterializedViewContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RefreshMaterializedViewContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_refreshMaterializedView(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_refreshMaterializedView(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RefreshMaterializedViewContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_refreshMaterializedView(self);
	}
}

impl<'input> CustomRuleContext<'input> for RefreshMaterializedViewContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for RefreshMaterializedViewContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for RefreshMaterializedViewContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for RefreshMaterializedViewContext<'input> {}

impl<'input> RefreshMaterializedViewContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::RefreshMaterializedViewContext(
				BaseParserRuleContext::copy_from(ctx,RefreshMaterializedViewContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type CommentContext<'input> = BaseParserRuleContext<'input,CommentContextExt<'input>>;

pub trait CommentContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token COMMENT
	/// Returns `None` if there is no child corresponding to token COMMENT
	fn COMMENT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMENT, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> CommentContextAttrs<'input> for CommentContext<'input>{}

pub struct CommentContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{CommentContextExt<'a>}

impl<'input> TrinoParserContext<'input> for CommentContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CommentContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_comment(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_comment(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CommentContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_comment(self);
	}
}

impl<'input> CustomRuleContext<'input> for CommentContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for CommentContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for CommentContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for CommentContext<'input> {}

impl<'input> CommentContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::CommentContext(
				BaseParserRuleContext::copy_from(ctx,CommentContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type DescribeOutputContext<'input> = BaseParserRuleContext<'input,DescribeOutputContextExt<'input>>;

pub trait DescribeOutputContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DESCRIBE
	/// Returns `None` if there is no child corresponding to token DESCRIBE
	fn DESCRIBE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DESCRIBE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token OUTPUT
	/// Returns `None` if there is no child corresponding to token OUTPUT
	fn OUTPUT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(OUTPUT, 0)
	}
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> DescribeOutputContextAttrs<'input> for DescribeOutputContext<'input>{}

pub struct DescribeOutputContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DescribeOutputContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DescribeOutputContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DescribeOutputContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_describeOutput(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_describeOutput(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DescribeOutputContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_describeOutput(self);
	}
}

impl<'input> CustomRuleContext<'input> for DescribeOutputContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for DescribeOutputContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for DescribeOutputContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for DescribeOutputContext<'input> {}

impl<'input> DescribeOutputContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::DescribeOutputContext(
				BaseParserRuleContext::copy_from(ctx,DescribeOutputContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type GrantContext<'input> = BaseParserRuleContext<'input,GrantContextExt<'input>>;

pub trait GrantContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token GRANT
	/// Returns `None` if there is no child corresponding to token GRANT
	fn GRANT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(GRANT, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token SEMI_COLON in current rule
	fn SEMI_COLON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token SEMI_COLON, starting from 0.
	/// Returns `None` if number of children corresponding to token SEMI_COLON is less or equal than `i`.
	fn SEMI_COLON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SEMI_COLON, i)
	}
}

impl<'input> GrantContextAttrs<'input> for GrantContext<'input>{}

pub struct GrantContextExt<'input>{
	base:StatementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{GrantContextExt<'a>}

impl<'input> TrinoParserContext<'input> for GrantContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for GrantContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_grant(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_grant(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for GrantContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_grant(self);
	}
}

impl<'input> CustomRuleContext<'input> for GrantContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for GrantContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for GrantContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for GrantContext<'input> {}

impl<'input> GrantContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::GrantContext(
				BaseParserRuleContext::copy_from(ctx,GrantContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SetTablePropertiesContext<'input> = BaseParserRuleContext<'input,SetTablePropertiesContextExt<'input>>;

pub trait SetTablePropertiesContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ALTER
	/// Returns `None` if there is no child corresponding to token ALTER
	fn ALTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ALTER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token SET
	/// Returns `None` if there is no child corresponding to token SET
	fn SET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SET, 0)
	}
	/// Retrieves first TerminalNode corresponding to token PROPERTIES
	/// Returns `None` if there is no child corresponding to token PROPERTIES
	fn PROPERTIES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(PROPERTIES, 0)
	}
	fn propertyAssignments(&self) -> Option<Rc<PropertyAssignmentsContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> SetTablePropertiesContextAttrs<'input> for SetTablePropertiesContext<'input>{}

pub struct SetTablePropertiesContextExt<'input>{
	base:StatementContextExt<'input>,
	pub tableName: Option<Rc<QualifiedNameContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SetTablePropertiesContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SetTablePropertiesContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SetTablePropertiesContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_setTableProperties(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_setTableProperties(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SetTablePropertiesContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_setTableProperties(self);
	}
}

impl<'input> CustomRuleContext<'input> for SetTablePropertiesContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_statement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_statement }
}

impl<'input> Borrow<StatementContextExt<'input>> for SetTablePropertiesContext<'input>{
	fn borrow(&self) -> &StatementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StatementContextExt<'input>> for SetTablePropertiesContext<'input>{
	fn borrow_mut(&mut self) -> &mut StatementContextExt<'input> { &mut self.base }
}

impl<'input> StatementContextAttrs<'input> for SetTablePropertiesContext<'input> {}

impl<'input> SetTablePropertiesContextExt<'input>{
	fn new(ctx: &dyn StatementContextAttrs<'input>) -> Rc<StatementContextAll<'input>>  {
		Rc::new(
			StatementContextAll::SetTablePropertiesContext(
				BaseParserRuleContext::copy_from(ctx,SetTablePropertiesContextExt{
        			tableName:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn statement(&mut self,)
	-> Result<Rc<StatementContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = StatementContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 10, RULE_statement);
        let mut _localctx: Rc<StatementContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			recog.base.set_state(911);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(84,&mut recog.base)? {
				1 =>{
					let tmp = StatementDefaultContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					/*InvokeRule query*/
					recog.base.set_state(331);
					recog.query()?;

					}
				}
			,
				2 =>{
					let tmp = UseContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(332);
					recog.base.match_token(USE,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(333);
					let tmp = recog.identifier()?;
					if let StatementContextAll::UseContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.schema = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					}
				}
			,
				3 =>{
					let tmp = UseContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 3);
					_localctx = tmp;
					{
					recog.base.set_state(334);
					recog.base.match_token(USE,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(335);
					let tmp = recog.identifier()?;
					if let StatementContextAll::UseContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.catalog = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(336);
					recog.base.match_token(DOT,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(337);
					let tmp = recog.identifier()?;
					if let StatementContextAll::UseContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.schema = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					}
				}
			,
				4 =>{
					let tmp = DropSchemaContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 4);
					_localctx = tmp;
					{
					recog.base.set_state(339);
					recog.base.match_token(DROP,&mut recog.err_handler)?;

					recog.base.set_state(340);
					recog.base.match_token(SCHEMA,&mut recog.err_handler)?;

					recog.base.set_state(343);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(5,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(341);
							recog.base.match_token(IF,&mut recog.err_handler)?;

							recog.base.set_state(342);
							recog.base.match_token(EXISTS,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule qualifiedName*/
					recog.base.set_state(345);
					recog.qualifiedName()?;

					recog.base.set_state(349);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(346);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(351);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				5 =>{
					let tmp = RenameSchemaContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 5);
					_localctx = tmp;
					{
					recog.base.set_state(352);
					recog.base.match_token(ALTER,&mut recog.err_handler)?;

					recog.base.set_state(353);
					recog.base.match_token(SCHEMA,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(354);
					recog.qualifiedName()?;

					recog.base.set_state(355);
					recog.base.match_token(RENAME,&mut recog.err_handler)?;

					recog.base.set_state(356);
					recog.base.match_token(TO,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(357);
					recog.identifier()?;

					}
				}
			,
				6 =>{
					let tmp = SetSchemaAuthorizationContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 6);
					_localctx = tmp;
					{
					recog.base.set_state(359);
					recog.base.match_token(ALTER,&mut recog.err_handler)?;

					recog.base.set_state(360);
					recog.base.match_token(SCHEMA,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(361);
					recog.qualifiedName()?;

					recog.base.set_state(362);
					recog.base.match_token(SET,&mut recog.err_handler)?;

					recog.base.set_state(363);
					recog.base.match_token(AUTHORIZATION,&mut recog.err_handler)?;

					/*InvokeRule principal*/
					recog.base.set_state(364);
					recog.principal()?;

					}
				}
			,
				7 =>{
					let tmp = DropTableContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 7);
					_localctx = tmp;
					{
					recog.base.set_state(366);
					recog.base.match_token(DROP,&mut recog.err_handler)?;

					recog.base.set_state(367);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(368);
					recog.qualifiedName()?;

					}
				}
			,
				8 =>{
					let tmp = DropViewContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 8);
					_localctx = tmp;
					{
					recog.base.set_state(369);
					recog.base.match_token(DROP,&mut recog.err_handler)?;

					recog.base.set_state(370);
					recog.base.match_token(VIEW,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(371);
					recog.qualifiedName()?;

					}
				}
			,
				9 =>{
					let tmp = CreateTableAsSelectContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 9);
					_localctx = tmp;
					{
					recog.base.set_state(372);
					recog.base.match_token(CREATE,&mut recog.err_handler)?;

					recog.base.set_state(375);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==OR {
						{
						recog.base.set_state(373);
						recog.base.match_token(OR,&mut recog.err_handler)?;

						recog.base.set_state(374);
						recog.base.match_token(REPLACE,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(377);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					recog.base.set_state(381);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(8,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(378);
							recog.base.match_token(IF,&mut recog.err_handler)?;

							recog.base.set_state(379);
							recog.base.match_token(NOT,&mut recog.err_handler)?;

							recog.base.set_state(380);
							recog.base.match_token(EXISTS,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule qualifiedName*/
					recog.base.set_state(383);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::CreateTableAsSelectContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.dest = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(385);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==LPAREN {
						{
						/*InvokeRule columnAliases*/
						recog.base.set_state(384);
						recog.columnAliases()?;

						}
					}

					recog.base.set_state(389);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMENT {
						{
						recog.base.set_state(387);
						recog.base.match_token(COMMENT,&mut recog.err_handler)?;

						/*InvokeRule string*/
						recog.base.set_state(388);
						let tmp = recog.string()?;
						if let StatementContextAll::CreateTableAsSelectContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
						ctx.comment = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(393);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==WITH {
						{
						recog.base.set_state(391);
						recog.base.match_token(WITH,&mut recog.err_handler)?;

						/*InvokeRule properties*/
						recog.base.set_state(392);
						recog.properties()?;

						}
					}

					recog.base.set_state(395);
					recog.base.match_token(AS,&mut recog.err_handler)?;

					recog.base.set_state(401);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(12,&mut recog.base)? {
						1 =>{
							{
							/*InvokeRule query*/
							recog.base.set_state(396);
							recog.query()?;

							}
						}
					,
						2 =>{
							{
							recog.base.set_state(397);
							recog.base.match_token(LPAREN,&mut recog.err_handler)?;

							/*InvokeRule query*/
							recog.base.set_state(398);
							recog.query()?;

							recog.base.set_state(399);
							recog.base.match_token(RPAREN,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					recog.base.set_state(408);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==WITH {
						{
						recog.base.set_state(403);
						recog.base.match_token(WITH,&mut recog.err_handler)?;

						recog.base.set_state(405);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==NO {
							{
							recog.base.set_state(404);
							recog.base.match_token(NO,&mut recog.err_handler)?;

							}
						}

						recog.base.set_state(407);
						recog.base.match_token(DATA,&mut recog.err_handler)?;

						}
					}

					}
				}
			,
				10 =>{
					let tmp = CreateRecursiveTableContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 10);
					_localctx = tmp;
					{
					recog.base.set_state(410);
					recog.base.match_token(CREATE,&mut recog.err_handler)?;

					recog.base.set_state(411);
					recog.base.match_token(RECURSIVE,&mut recog.err_handler)?;

					recog.base.set_state(412);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					recog.base.set_state(416);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(15,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(413);
							recog.base.match_token(IF,&mut recog.err_handler)?;

							recog.base.set_state(414);
							recog.base.match_token(NOT,&mut recog.err_handler)?;

							recog.base.set_state(415);
							recog.base.match_token(EXISTS,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule qualifiedName*/
					recog.base.set_state(418);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::CreateRecursiveTableContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.dest = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(420);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==LPAREN {
						{
						/*InvokeRule columnAliases*/
						recog.base.set_state(419);
						recog.columnAliases()?;

						}
					}

					recog.base.set_state(424);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMENT {
						{
						recog.base.set_state(422);
						recog.base.match_token(COMMENT,&mut recog.err_handler)?;

						/*InvokeRule string*/
						recog.base.set_state(423);
						let tmp = recog.string()?;
						if let StatementContextAll::CreateRecursiveTableContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
						ctx.comment = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(428);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==WITH {
						{
						recog.base.set_state(426);
						recog.base.match_token(WITH,&mut recog.err_handler)?;

						/*InvokeRule properties*/
						recog.base.set_state(427);
						recog.properties()?;

						}
					}

					recog.base.set_state(430);
					recog.base.match_token(AS,&mut recog.err_handler)?;

					recog.base.set_state(436);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(19,&mut recog.base)? {
						1 =>{
							{
							/*InvokeRule query*/
							recog.base.set_state(431);
							recog.query()?;

							}
						}
					,
						2 =>{
							{
							recog.base.set_state(432);
							recog.base.match_token(LPAREN,&mut recog.err_handler)?;

							/*InvokeRule query*/
							recog.base.set_state(433);
							recog.query()?;

							recog.base.set_state(434);
							recog.base.match_token(RPAREN,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					}
				}
			,
				11 =>{
					let tmp = CreateTableContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 11);
					_localctx = tmp;
					{
					recog.base.set_state(438);
					recog.base.match_token(CREATE,&mut recog.err_handler)?;

					recog.base.set_state(441);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==OR {
						{
						recog.base.set_state(439);
						recog.base.match_token(OR,&mut recog.err_handler)?;

						recog.base.set_state(440);
						recog.base.match_token(REPLACE,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(443);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					recog.base.set_state(447);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(21,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(444);
							recog.base.match_token(IF,&mut recog.err_handler)?;

							recog.base.set_state(445);
							recog.base.match_token(NOT,&mut recog.err_handler)?;

							recog.base.set_state(446);
							recog.base.match_token(EXISTS,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule qualifiedName*/
					recog.base.set_state(449);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::CreateTableContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.dest = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(457);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==LPAREN {
						{
						recog.base.set_state(450);
						recog.base.match_token(LPAREN,&mut recog.err_handler)?;

						/*InvokeRule tableElements*/
						recog.base.set_state(451);
						recog.tableElements()?;

						recog.base.set_state(453);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==COMMA {
							{
							recog.base.set_state(452);
							let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
							if let StatementContextAll::CreateTableContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
							ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

							}
						}

						recog.base.set_state(455);
						recog.base.match_token(RPAREN,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(461);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMENT {
						{
						recog.base.set_state(459);
						recog.base.match_token(COMMENT,&mut recog.err_handler)?;

						/*InvokeRule string*/
						recog.base.set_state(460);
						let tmp = recog.string()?;
						if let StatementContextAll::CreateTableContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
						ctx.comment = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(465);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==WITH {
						{
						recog.base.set_state(463);
						recog.base.match_token(WITH,&mut recog.err_handler)?;

						/*InvokeRule properties*/
						recog.base.set_state(464);
						recog.properties()?;

						}
					}

					}
				}
			,
				12 =>{
					let tmp = InsertIntoContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 12);
					_localctx = tmp;
					{
					recog.base.set_state(467);
					recog.base.match_token(INSERT,&mut recog.err_handler)?;

					recog.base.set_state(468);
					recog.base.match_token(INTO,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(469);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::InsertIntoContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.dest = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(471);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(26,&mut recog.base)? {
						x if x == 1=>{
							{
							/*InvokeRule columnAliases*/
							recog.base.set_state(470);
							recog.columnAliases()?;

							}
						}

						_ => {}
					}
					recog.base.set_state(478);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(27,&mut recog.base)? {
						1 =>{
							{
							/*InvokeRule query*/
							recog.base.set_state(473);
							recog.query()?;

							}
						}
					,
						2 =>{
							{
							recog.base.set_state(474);
							recog.base.match_token(LPAREN,&mut recog.err_handler)?;

							/*InvokeRule query*/
							recog.base.set_state(475);
							recog.query()?;

							recog.base.set_state(476);
							recog.base.match_token(RPAREN,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					}
				}
			,
				13 =>{
					let tmp = CreateMaterializedViewContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 13);
					_localctx = tmp;
					{
					recog.base.set_state(480);
					recog.base.match_token(CREATE,&mut recog.err_handler)?;

					recog.base.set_state(483);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==OR {
						{
						recog.base.set_state(481);
						recog.base.match_token(OR,&mut recog.err_handler)?;

						recog.base.set_state(482);
						recog.base.match_token(REPLACE,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(485);
					recog.base.match_token(MATERIALIZED,&mut recog.err_handler)?;

					recog.base.set_state(486);
					recog.base.match_token(VIEW,&mut recog.err_handler)?;

					recog.base.set_state(490);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(29,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(487);
							recog.base.match_token(IF,&mut recog.err_handler)?;

							recog.base.set_state(488);
							recog.base.match_token(NOT,&mut recog.err_handler)?;

							recog.base.set_state(489);
							recog.base.match_token(EXISTS,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule qualifiedName*/
					recog.base.set_state(492);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::CreateMaterializedViewContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.dest = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(496);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==GRACE {
						{
						recog.base.set_state(493);
						recog.base.match_token(GRACE,&mut recog.err_handler)?;

						recog.base.set_state(494);
						recog.base.match_token(PERIOD,&mut recog.err_handler)?;

						/*InvokeRule interval*/
						recog.base.set_state(495);
						recog.interval()?;

						}
					}

					recog.base.set_state(500);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMENT {
						{
						recog.base.set_state(498);
						recog.base.match_token(COMMENT,&mut recog.err_handler)?;

						/*InvokeRule string*/
						recog.base.set_state(499);
						let tmp = recog.string()?;
						if let StatementContextAll::CreateMaterializedViewContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
						ctx.comment = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(504);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==WITH {
						{
						recog.base.set_state(502);
						recog.base.match_token(WITH,&mut recog.err_handler)?;

						/*InvokeRule properties*/
						recog.base.set_state(503);
						recog.properties()?;

						}
					}

					recog.base.set_state(506);
					recog.base.match_token(AS,&mut recog.err_handler)?;

					recog.base.set_state(512);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(33,&mut recog.base)? {
						1 =>{
							{
							recog.base.set_state(507);
							recog.base.match_token(LPAREN,&mut recog.err_handler)?;

							/*InvokeRule query*/
							recog.base.set_state(508);
							recog.query()?;

							recog.base.set_state(509);
							recog.base.match_token(RPAREN,&mut recog.err_handler)?;

							}
						}
					,
						2 =>{
							{
							/*InvokeRule query*/
							recog.base.set_state(511);
							recog.query()?;

							}
						}

						_ => {}
					}
					}
				}
			,
				14 =>{
					let tmp = CreateViewContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 14);
					_localctx = tmp;
					{
					recog.base.set_state(514);
					recog.base.match_token(CREATE,&mut recog.err_handler)?;

					recog.base.set_state(517);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==OR {
						{
						recog.base.set_state(515);
						recog.base.match_token(OR,&mut recog.err_handler)?;

						recog.base.set_state(516);
						recog.base.match_token(REPLACE,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(519);
					recog.base.match_token(VIEW,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(520);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::CreateViewContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.dest = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(523);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMENT {
						{
						recog.base.set_state(521);
						recog.base.match_token(COMMENT,&mut recog.err_handler)?;

						/*InvokeRule string*/
						recog.base.set_state(522);
						let tmp = recog.string()?;
						if let StatementContextAll::CreateViewContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
						ctx.comment = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(527);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==SECURITY {
						{
						recog.base.set_state(525);
						recog.base.match_token(SECURITY,&mut recog.err_handler)?;

						recog.base.set_state(526);
						_la = recog.base.input.la(1);
						if { !(_la==DEFINER || _la==INVOKER) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
					}

					recog.base.set_state(529);
					recog.base.match_token(AS,&mut recog.err_handler)?;

					/*InvokeRule query*/
					recog.base.set_state(530);
					recog.query()?;

					}
				}
			,
				15 =>{
					let tmp = ShowColumnsContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 15);
					_localctx = tmp;
					{
					recog.base.set_state(532);
					recog.base.match_token(DESCRIBE,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(533);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::ShowColumnsContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.tableName = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					}
				}
			,
				16 =>{
					let tmp = ShowColumnsContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 16);
					_localctx = tmp;
					{
					recog.base.set_state(534);
					recog.base.match_token(SHOW,&mut recog.err_handler)?;

					recog.base.set_state(535);
					recog.base.match_token(COLUMNS,&mut recog.err_handler)?;

					recog.base.set_state(536);
					recog.base.match_token(FROM,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(537);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::ShowColumnsContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.tableName = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					}
				}
			,
				17 =>{
					let tmp = CreateFunctionContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 17);
					_localctx = tmp;
					{
					recog.base.set_state(538);
					recog.base.match_token(CREATE,&mut recog.err_handler)?;

					recog.base.set_state(541);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==OR {
						{
						recog.base.set_state(539);
						recog.base.match_token(OR,&mut recog.err_handler)?;

						recog.base.set_state(540);
						recog.base.match_token(REPLACE,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(544);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==EXTERNAL {
						{
						recog.base.set_state(543);
						recog.base.match_token(EXTERNAL,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(546);
					recog.base.match_token(FUNCTION,&mut recog.err_handler)?;

					recog.base.set_state(550);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(547);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(552);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				18 =>{
					let tmp = MergeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 18);
					_localctx = tmp;
					{
					recog.base.set_state(553);
					recog.base.match_token(MERGE,&mut recog.err_handler)?;

					recog.base.set_state(557);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(554);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(559);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				19 =>{
					let tmp = SetContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 19);
					_localctx = tmp;
					{
					recog.base.set_state(560);
					recog.base.match_token(SET,&mut recog.err_handler)?;

					recog.base.set_state(564);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(561);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(566);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				20 =>{
					let tmp = CreateSchemaContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 20);
					_localctx = tmp;
					{
					recog.base.set_state(567);
					recog.base.match_token(CREATE,&mut recog.err_handler)?;

					recog.base.set_state(570);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==OR {
						{
						recog.base.set_state(568);
						recog.base.match_token(OR,&mut recog.err_handler)?;

						recog.base.set_state(569);
						recog.base.match_token(REPLACE,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(572);
					recog.base.match_token(SCHEMA,&mut recog.err_handler)?;

					recog.base.set_state(576);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(573);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(578);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				21 =>{
					let tmp = DropContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 21);
					_localctx = tmp;
					{
					recog.base.set_state(579);
					recog.base.match_token(DROP,&mut recog.err_handler)?;

					recog.base.set_state(583);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(580);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(585);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				22 =>{
					let tmp = DeleteContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 22);
					_localctx = tmp;
					{
					recog.base.set_state(586);
					recog.base.match_token(DELETE,&mut recog.err_handler)?;

					recog.base.set_state(590);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(587);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(592);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				23 =>{
					let tmp = TruncateTableContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 23);
					_localctx = tmp;
					{
					recog.base.set_state(593);
					recog.base.match_token(TRUNCATE,&mut recog.err_handler)?;

					recog.base.set_state(597);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(594);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(599);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				24 =>{
					let tmp = CommentContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 24);
					_localctx = tmp;
					{
					recog.base.set_state(600);
					recog.base.match_token(COMMENT,&mut recog.err_handler)?;

					recog.base.set_state(604);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(601);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(606);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				25 =>{
					let tmp = RenameTableContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 25);
					_localctx = tmp;
					{
					recog.base.set_state(607);
					recog.base.match_token(ALTER,&mut recog.err_handler)?;

					recog.base.set_state(608);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					recog.base.set_state(611);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(48,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(609);
							recog.base.match_token(IF,&mut recog.err_handler)?;

							recog.base.set_state(610);
							recog.base.match_token(EXISTS,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule qualifiedName*/
					recog.base.set_state(613);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::RenameTableContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.from = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(614);
					recog.base.match_token(RENAME,&mut recog.err_handler)?;

					recog.base.set_state(615);
					recog.base.match_token(TO,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(616);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::RenameTableContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.to = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					}
				}
			,
				26 =>{
					let tmp = AddColumnContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 26);
					_localctx = tmp;
					{
					recog.base.set_state(618);
					recog.base.match_token(ALTER,&mut recog.err_handler)?;

					recog.base.set_state(619);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					recog.base.set_state(622);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(49,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(620);
							recog.base.match_token(IF,&mut recog.err_handler)?;

							recog.base.set_state(621);
							recog.base.match_token(EXISTS,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule qualifiedName*/
					recog.base.set_state(624);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::AddColumnContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.tableName = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(625);
					recog.base.match_token(ADD,&mut recog.err_handler)?;

					recog.base.set_state(626);
					recog.base.match_token(COLUMN,&mut recog.err_handler)?;

					recog.base.set_state(630);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(50,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(627);
							recog.base.match_token(IF,&mut recog.err_handler)?;

							recog.base.set_state(628);
							recog.base.match_token(NOT,&mut recog.err_handler)?;

							recog.base.set_state(629);
							recog.base.match_token(EXISTS,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule columnDefinition*/
					recog.base.set_state(632);
					let tmp = recog.columnDefinition()?;
					if let StatementContextAll::AddColumnContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.column = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					}
				}
			,
				27 =>{
					let tmp = RenameColumnContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 27);
					_localctx = tmp;
					{
					recog.base.set_state(634);
					recog.base.match_token(ALTER,&mut recog.err_handler)?;

					recog.base.set_state(635);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					recog.base.set_state(638);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(51,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(636);
							recog.base.match_token(IF,&mut recog.err_handler)?;

							recog.base.set_state(637);
							recog.base.match_token(EXISTS,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule qualifiedName*/
					recog.base.set_state(640);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::RenameColumnContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.tableName = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(641);
					recog.base.match_token(RENAME,&mut recog.err_handler)?;

					recog.base.set_state(642);
					recog.base.match_token(COLUMN,&mut recog.err_handler)?;

					recog.base.set_state(645);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(52,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(643);
							recog.base.match_token(IF,&mut recog.err_handler)?;

							recog.base.set_state(644);
							recog.base.match_token(EXISTS,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule identifier*/
					recog.base.set_state(647);
					let tmp = recog.identifier()?;
					if let StatementContextAll::RenameColumnContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.from = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(648);
					recog.base.match_token(TO,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(649);
					let tmp = recog.identifier()?;
					if let StatementContextAll::RenameColumnContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.to = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					}
				}
			,
				28 =>{
					let tmp = DropColumnContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 28);
					_localctx = tmp;
					{
					recog.base.set_state(651);
					recog.base.match_token(ALTER,&mut recog.err_handler)?;

					recog.base.set_state(652);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					recog.base.set_state(655);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(53,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(653);
							recog.base.match_token(IF,&mut recog.err_handler)?;

							recog.base.set_state(654);
							recog.base.match_token(EXISTS,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule qualifiedName*/
					recog.base.set_state(657);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::DropColumnContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.tableName = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(658);
					recog.base.match_token(DROP,&mut recog.err_handler)?;

					recog.base.set_state(659);
					recog.base.match_token(COLUMN,&mut recog.err_handler)?;

					recog.base.set_state(662);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(54,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(660);
							recog.base.match_token(IF,&mut recog.err_handler)?;

							recog.base.set_state(661);
							recog.base.match_token(EXISTS,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule qualifiedName*/
					recog.base.set_state(664);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::DropColumnContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.column = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					}
				}
			,
				29 =>{
					let tmp = SetColumnTypeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 29);
					_localctx = tmp;
					{
					recog.base.set_state(666);
					recog.base.match_token(ALTER,&mut recog.err_handler)?;

					recog.base.set_state(667);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					recog.base.set_state(670);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(55,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(668);
							recog.base.match_token(IF,&mut recog.err_handler)?;

							recog.base.set_state(669);
							recog.base.match_token(EXISTS,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule qualifiedName*/
					recog.base.set_state(672);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::SetColumnTypeContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.tableName = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(673);
					recog.base.match_token(ALTER,&mut recog.err_handler)?;

					recog.base.set_state(674);
					recog.base.match_token(COLUMN,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(675);
					let tmp = recog.identifier()?;
					if let StatementContextAll::SetColumnTypeContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.setColumnName = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(676);
					recog.base.match_token(SET,&mut recog.err_handler)?;

					recog.base.set_state(677);
					recog.base.match_token(DATA,&mut recog.err_handler)?;

					recog.base.set_state(678);
					recog.base.match_token(TYPE,&mut recog.err_handler)?;

					/*InvokeRule type_*/
					recog.base.set_state(679);
					recog.type_()?;

					}
				}
			,
				30 =>{
					let tmp = SetTableAuthorizationContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 30);
					_localctx = tmp;
					{
					recog.base.set_state(681);
					recog.base.match_token(ALTER,&mut recog.err_handler)?;

					recog.base.set_state(682);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(683);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::SetTableAuthorizationContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.tableName = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(684);
					recog.base.match_token(SET,&mut recog.err_handler)?;

					recog.base.set_state(685);
					recog.base.match_token(AUTHORIZATION,&mut recog.err_handler)?;

					/*InvokeRule principal*/
					recog.base.set_state(686);
					recog.principal()?;

					}
				}
			,
				31 =>{
					let tmp = SetTablePropertiesContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 31);
					_localctx = tmp;
					{
					recog.base.set_state(688);
					recog.base.match_token(ALTER,&mut recog.err_handler)?;

					recog.base.set_state(689);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(690);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::SetTablePropertiesContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.tableName = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(691);
					recog.base.match_token(SET,&mut recog.err_handler)?;

					recog.base.set_state(692);
					recog.base.match_token(PROPERTIES,&mut recog.err_handler)?;

					/*InvokeRule propertyAssignments*/
					recog.base.set_state(693);
					recog.propertyAssignments()?;

					}
				}
			,
				32 =>{
					let tmp = TableExecuteContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 32);
					_localctx = tmp;
					{
					recog.base.set_state(695);
					recog.base.match_token(ALTER,&mut recog.err_handler)?;

					recog.base.set_state(696);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(697);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::TableExecuteContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.tableName = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(698);
					recog.base.match_token(EXECUTE,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(699);
					let tmp = recog.identifier()?;
					if let StatementContextAll::TableExecuteContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.procedureName = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(715);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==LPAREN {
						{
						recog.base.set_state(700);
						recog.base.match_token(LPAREN,&mut recog.err_handler)?;

						recog.base.set_state(709);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if ((((_la - 9)) & !0x3f) == 0 && ((1usize << (_la - 9)) & ((1usize << (ABORT - 9)) | (1usize << (ABSENT - 9)) | (1usize << (ADD - 9)) | (1usize << (ADMIN - 9)) | (1usize << (AFTER - 9)) | (1usize << (ALL - 9)) | (1usize << (ANALYZE - 9)) | (1usize << (ANTI - 9)) | (1usize << (ANY - 9)) | (1usize << (ARRAY - 9)) | (1usize << (ASC - 9)) | (1usize << (AT - 9)) | (1usize << (ATTACH - 9)) | (1usize << (AUTHORIZATION - 9)) | (1usize << (BEGIN - 9)) | (1usize << (BERNOULLI - 9)) | (1usize << (BOTH - 9)) | (1usize << (BZIP2 - 9)) | (1usize << (CALL - 9)) | (1usize << (CANCEL - 9)) | (1usize << (CASCADE - 9)) | (1usize << (CASE - 9)) | (1usize << (CAST - 9)))) != 0) || ((((_la - 41)) & !0x3f) == 0 && ((1usize << (_la - 41)) & ((1usize << (CATALOGS - 41)) | (1usize << (CHARACTER - 41)) | (1usize << (CLONE - 41)) | (1usize << (CLOSE - 41)) | (1usize << (CLUSTER - 41)) | (1usize << (COLUMN - 41)) | (1usize << (COLUMNS - 41)) | (1usize << (COMMENT - 41)) | (1usize << (COMMIT - 41)) | (1usize << (COMMITTED - 41)) | (1usize << (COMPRESSION - 41)) | (1usize << (CONDITIONAL - 41)) | (1usize << (CONNECTION - 41)) | (1usize << (COPARTITION - 41)) | (1usize << (COPY - 41)) | (1usize << (COUNT - 41)) | (1usize << (CURRENT - 41)) | (1usize << (DATA - 41)) | (1usize << (DATABASE - 41)) | (1usize << (DATASHARE - 41)) | (1usize << (DATE - 41)) | (1usize << (DAY - 41)) | (1usize << (DAYS - 41)))) != 0) || ((((_la - 74)) & !0x3f) == 0 && ((1usize << (_la - 74)) & ((1usize << (DECLARE - 74)) | (1usize << (DEFAULT - 74)) | (1usize << (DEFINE - 74)) | (1usize << (DEFINER - 74)) | (1usize << (DELIMITER - 74)) | (1usize << (DENY - 74)) | (1usize << (DESC - 74)) | (1usize << (DESCRIBE - 74)) | (1usize << (DESCRIPTOR - 74)) | (1usize << (DISTRIBUTED - 74)) | (1usize << (DETACH - 74)) | (1usize << (DOUBLE - 74)) | (1usize << (EMPTY - 74)) | (1usize << (ENCODING - 74)) | (1usize << (END - 74)) | (1usize << (ERROR - 74)) | (1usize << (EXCLUDING - 74)) | (1usize << (EXECUTE - 74)) | (1usize << (EXISTS - 74)) | (1usize << (EXPLAIN - 74)))) != 0) || ((((_la - 106)) & !0x3f) == 0 && ((1usize << (_la - 106)) & ((1usize << (EXTERNAL - 106)) | (1usize << (EXTRACT - 106)) | (1usize << (FALSE - 106)) | (1usize << (FETCH - 106)) | (1usize << (FILTER - 106)) | (1usize << (FINAL - 106)) | (1usize << (FIRST - 106)) | (1usize << (FOLLOWING - 106)) | (1usize << (FORMAT - 106)) | (1usize << (FUNCTIONS - 106)) | (1usize << (GRACE - 106)) | (1usize << (GRANT - 106)) | (1usize << (GRANTED - 106)) | (1usize << (GRANTS - 106)) | (1usize << (GRAPHVIZ - 106)) | (1usize << (GROUPING - 106)) | (1usize << (GROUPS - 106)) | (1usize << (GZIP - 106)) | (1usize << (HOUR - 106)) | (1usize << (HOURS - 106)) | (1usize << (IF - 106)) | (1usize << (IGNORE - 106)))) != 0) || ((((_la - 138)) & !0x3f) == 0 && ((1usize << (_la - 138)) & ((1usize << (INCLUDING - 138)) | (1usize << (INITIAL - 138)) | (1usize << (INPUT - 138)) | (1usize << (INTEGER - 138)) | (1usize << (INTERVAL - 138)) | (1usize << (INVOKER - 138)) | (1usize << (IO - 138)) | (1usize << (ISOLATION - 138)) | (1usize << (JSON - 138)) | (1usize << (JSON_ARRAY - 138)) | (1usize << (JSON_EXISTS - 138)) | (1usize << (JSON_OBJECT - 138)) | (1usize << (JSON_QUERY - 138)) | (1usize << (JSON_VALUE - 138)) | (1usize << (KEEP - 138)) | (1usize << (KEY - 138)) | (1usize << (KEYS - 138)) | (1usize << (LAMBDA - 138)) | (1usize << (LAST - 138)) | (1usize << (LATERAL - 138)) | (1usize << (LEADING - 138)) | (1usize << (LEFT - 138)) | (1usize << (LEVEL - 138)))) != 0) || ((((_la - 170)) & !0x3f) == 0 && ((1usize << (_la - 170)) & ((1usize << (LIBRARY - 170)) | (1usize << (LIMIT - 170)) | (1usize << (LISTAGG - 170)) | (1usize << (LOCAL - 170)) | (1usize << (LOCATION - 170)) | (1usize << (LOCK - 170)) | (1usize << (LOGICAL - 170)) | (1usize << (M - 170)) | (1usize << (MAP - 170)) | (1usize << (MASKING - 170)) | (1usize << (MATCH - 170)) | (1usize << (MATCHED - 170)) | (1usize << (MATCHES - 170)) | (1usize << (MATCH_RECOGNIZE - 170)) | (1usize << (MATERIALIZED - 170)) | (1usize << (MAX - 170)) | (1usize << (MEASURES - 170)) | (1usize << (MERGE - 170)) | (1usize << (MIN - 170)) | (1usize << (MINUS_KW - 170)) | (1usize << (MINUTE - 170)) | (1usize << (MINUTES - 170)) | (1usize << (MODEL - 170)) | (1usize << (MONTH - 170)) | (1usize << (MONTHS - 170)) | (1usize << (NEXT - 170)) | (1usize << (NFC - 170)) | (1usize << (NFD - 170)) | (1usize << (NFKC - 170)) | (1usize << (NFKD - 170)))) != 0) || ((((_la - 202)) & !0x3f) == 0 && ((1usize << (_la - 202)) & ((1usize << (NO - 202)) | (1usize << (NONE - 202)) | (1usize << (NORMALIZE - 202)) | (1usize << (NOT - 202)) | (1usize << (NULL - 202)) | (1usize << (NULLS - 202)) | (1usize << (OBJECT - 202)) | (1usize << (OF - 202)) | (1usize << (OFFSET - 202)) | (1usize << (OMIT - 202)) | (1usize << (ONE - 202)) | (1usize << (ONLY - 202)) | (1usize << (OPTION - 202)) | (1usize << (ORDINALITY - 202)) | (1usize << (OUTPUT - 202)) | (1usize << (OVER - 202)) | (1usize << (OVERFLOW - 202)) | (1usize << (PARTITION - 202)) | (1usize << (PARTITIONS - 202)) | (1usize << (PASSING - 202)) | (1usize << (PAST - 202)) | (1usize << (PATH - 202)) | (1usize << (PATTERN - 202)) | (1usize << (PER - 202)) | (1usize << (PERIOD - 202)))) != 0) || ((((_la - 234)) & !0x3f) == 0 && ((1usize << (_la - 234)) & ((1usize << (PERMUTE - 234)) | (1usize << (POSITION - 234)) | (1usize << (PRECEDING - 234)) | (1usize << (PRECISION - 234)) | (1usize << (PROCEDURE - 234)) | (1usize << (PRIVILEGES - 234)) | (1usize << (PROPERTIES - 234)) | (1usize << (PRUNE - 234)) | (1usize << (QUOTES - 234)) | (1usize << (RANGE - 234)) | (1usize << (READ - 234)) | (1usize << (REFRESH - 234)) | (1usize << (RENAME - 234)) | (1usize << (REPEATABLE - 234)) | (1usize << (REPLACE - 234)) | (1usize << (RESET - 234)) | (1usize << (RESPECT - 234)) | (1usize << (RESTRICT - 234)) | (1usize << (RETURNING - 234)) | (1usize << (REVOKE - 234)) | (1usize << (RIGHT - 234)) | (1usize << (RLS - 234)) | (1usize << (ROLE - 234)) | (1usize << (ROLES - 234)) | (1usize << (ROLLBACK - 234)) | (1usize << (ROLLUP - 234)) | (1usize << (ROW - 234)) | (1usize << (ROWS - 234)) | (1usize << (RUNNING - 234)))) != 0) || ((((_la - 266)) & !0x3f) == 0 && ((1usize << (_la - 266)) & ((1usize << (S - 266)) | (1usize << (SCALAR - 266)) | (1usize << (SEC - 266)) | (1usize << (SECOND - 266)) | (1usize << (SECONDS - 266)) | (1usize << (SCHEMA - 266)) | (1usize << (SCHEMAS - 266)) | (1usize << (SECURITY - 266)) | (1usize << (SEEK - 266)) | (1usize << (SEMI - 266)) | (1usize << (SERIALIZABLE - 266)) | (1usize << (SESSION - 266)) | (1usize << (SET - 266)) | (1usize << (SETS - 266)) | (1usize << (SHOW - 266)) | (1usize << (SNAPSHOT - 266)) | (1usize << (SOME - 266)) | (1usize << (START - 266)) | (1usize << (STATS - 266)) | (1usize << (STRUCT - 266)) | (1usize << (SUBSET - 266)) | (1usize << (SUBSTRING - 266)) | (1usize << (SYSTEM - 266)) | (1usize << (SYSTEM_TIME - 266)))) != 0) || ((((_la - 298)) & !0x3f) == 0 && ((1usize << (_la - 298)) & ((1usize << (TABLES - 298)) | (1usize << (TABLESAMPLE - 298)) | (1usize << (TEMP - 298)) | (1usize << (TEMPORARY - 298)) | (1usize << (TEXT - 298)) | (1usize << (STRING_KW - 298)) | (1usize << (TIES - 298)) | (1usize << (TIME - 298)) | (1usize << (TIMESTAMP - 298)) | (1usize << (TO - 298)) | (1usize << (TRAILING - 298)) | (1usize << (TRANSACTION - 298)) | (1usize << (TRIM - 298)) | (1usize << (TRUE - 298)) | (1usize << (TRUNCATE - 298)) | (1usize << (TRY_CAST - 298)) | (1usize << (TUPLE - 298)) | (1usize << (TYPE - 298)) | (1usize << (UNBOUNDED - 298)) | (1usize << (UNCOMMITTED - 298)) | (1usize << (UNCONDITIONAL - 298)) | (1usize << (UNIQUE - 298)) | (1usize << (UNKNOWN - 298)) | (1usize << (UNLOAD - 298)) | (1usize << (UNMATCHED - 298)))) != 0) || ((((_la - 330)) & !0x3f) == 0 && ((1usize << (_la - 330)) & ((1usize << (UPDATE - 330)) | (1usize << (USE - 330)) | (1usize << (USER - 330)) | (1usize << (UTF16 - 330)) | (1usize << (UTF32 - 330)) | (1usize << (UTF8 - 330)) | (1usize << (VACUUM - 330)) | (1usize << (VALIDATE - 330)) | (1usize << (VALUE - 330)) | (1usize << (VARYING - 330)) | (1usize << (VERBOSE - 330)) | (1usize << (VERSION - 330)) | (1usize << (VIEW - 330)) | (1usize << (WEEK - 330)) | (1usize << (WINDOW - 330)) | (1usize << (WITHIN - 330)) | (1usize << (WITHOUT - 330)) | (1usize << (WORK - 330)) | (1usize << (WRAPPER - 330)) | (1usize << (WRITE - 330)) | (1usize << (XZ - 330)) | (1usize << (YEAR - 330)) | (1usize << (YEARS - 330)) | (1usize << (ZONE - 330)) | (1usize << (ZSTD - 330)) | (1usize << (LPAREN - 330)))) != 0) || ((((_la - 363)) & !0x3f) == 0 && ((1usize << (_la - 363)) & ((1usize << (LBRACKET - 363)) | (1usize << (PLUS - 363)) | (1usize << (MINUS - 363)) | (1usize << (POSIX - 363)) | (1usize << (STRING - 363)) | (1usize << (UNICODE_STRING - 363)) | (1usize << (BINARY_LITERAL - 363)) | (1usize << (INTEGER_VALUE - 363)) | (1usize << (DECIMAL_VALUE - 363)) | (1usize << (DOUBLE_VALUE - 363)) | (1usize << (IDENTIFIER - 363)) | (1usize << (QUOTED_IDENTIFIER - 363)) | (1usize << (VARIABLE - 363)))) != 0) {
							{
							/*InvokeRule callArgument*/
							recog.base.set_state(701);
							recog.callArgument()?;

							recog.base.set_state(706);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(56,&mut recog.base)?;
							while { _alt!=2 && _alt!=INVALID_ALT } {
								if _alt==1 {
									{
									{
									recog.base.set_state(702);
									recog.base.match_token(COMMA,&mut recog.err_handler)?;

									/*InvokeRule callArgument*/
									recog.base.set_state(703);
									recog.callArgument()?;

									}
									} 
								}
								recog.base.set_state(708);
								recog.err_handler.sync(&mut recog.base)?;
								_alt = recog.interpreter.adaptive_predict(56,&mut recog.base)?;
							}
							}
						}

						recog.base.set_state(712);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==COMMA {
							{
							recog.base.set_state(711);
							let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
							if let StatementContextAll::TableExecuteContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
							ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

							}
						}

						recog.base.set_state(714);
						recog.base.match_token(RPAREN,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(719);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==WHERE {
						{
						recog.base.set_state(717);
						recog.base.match_token(WHERE,&mut recog.err_handler)?;

						/*InvokeRule booleanExpression*/
						recog.base.set_state(718);
						let tmp = recog.booleanExpression_rec(0)?;
						if let StatementContextAll::TableExecuteContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
						ctx.where_ = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						}
					}

					}
				}
			,
				33 =>{
					let tmp = AnalyzeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 33);
					_localctx = tmp;
					{
					recog.base.set_state(721);
					recog.base.match_token(ANALYZE,&mut recog.err_handler)?;

					recog.base.set_state(725);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(722);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(727);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				34 =>{
					let tmp = RefreshMaterializedViewContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 34);
					_localctx = tmp;
					{
					recog.base.set_state(728);
					recog.base.match_token(REFRESH,&mut recog.err_handler)?;

					recog.base.set_state(729);
					recog.base.match_token(MATERIALIZED,&mut recog.err_handler)?;

					recog.base.set_state(730);
					recog.base.match_token(VIEW,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(731);
					recog.qualifiedName()?;

					}
				}
			,
				35 =>{
					let tmp = RenameMaterializedViewContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 35);
					_localctx = tmp;
					{
					recog.base.set_state(732);
					recog.base.match_token(ALTER,&mut recog.err_handler)?;

					recog.base.set_state(733);
					recog.base.match_token(MATERIALIZED,&mut recog.err_handler)?;

					recog.base.set_state(734);
					recog.base.match_token(VIEW,&mut recog.err_handler)?;

					recog.base.set_state(737);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(62,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(735);
							recog.base.match_token(IF,&mut recog.err_handler)?;

							recog.base.set_state(736);
							recog.base.match_token(EXISTS,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule qualifiedName*/
					recog.base.set_state(739);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::RenameMaterializedViewContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.from = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(740);
					recog.base.match_token(RENAME,&mut recog.err_handler)?;

					recog.base.set_state(741);
					recog.base.match_token(TO,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(742);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::RenameMaterializedViewContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.to = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					}
				}
			,
				36 =>{
					let tmp = SetMaterializedViewPropertiesContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 36);
					_localctx = tmp;
					{
					recog.base.set_state(744);
					recog.base.match_token(ALTER,&mut recog.err_handler)?;

					recog.base.set_state(745);
					recog.base.match_token(MATERIALIZED,&mut recog.err_handler)?;

					recog.base.set_state(746);
					recog.base.match_token(VIEW,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(747);
					recog.qualifiedName()?;

					recog.base.set_state(748);
					recog.base.match_token(SET,&mut recog.err_handler)?;

					recog.base.set_state(749);
					recog.base.match_token(PROPERTIES,&mut recog.err_handler)?;

					/*InvokeRule propertyAssignments*/
					recog.base.set_state(750);
					recog.propertyAssignments()?;

					}
				}
			,
				37 =>{
					let tmp = RenameViewContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 37);
					_localctx = tmp;
					{
					recog.base.set_state(752);
					recog.base.match_token(ALTER,&mut recog.err_handler)?;

					recog.base.set_state(753);
					recog.base.match_token(VIEW,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(754);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::RenameViewContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.from = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(755);
					recog.base.match_token(RENAME,&mut recog.err_handler)?;

					recog.base.set_state(756);
					recog.base.match_token(TO,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(757);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::RenameViewContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.to = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					}
				}
			,
				38 =>{
					let tmp = SetViewAuthorizationContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 38);
					_localctx = tmp;
					{
					recog.base.set_state(759);
					recog.base.match_token(ALTER,&mut recog.err_handler)?;

					recog.base.set_state(760);
					recog.base.match_token(VIEW,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(761);
					let tmp = recog.qualifiedName()?;
					if let StatementContextAll::SetViewAuthorizationContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.from = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(762);
					recog.base.match_token(SET,&mut recog.err_handler)?;

					recog.base.set_state(763);
					recog.base.match_token(AUTHORIZATION,&mut recog.err_handler)?;

					/*InvokeRule principal*/
					recog.base.set_state(764);
					recog.principal()?;

					}
				}
			,
				39 =>{
					let tmp = CallContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 39);
					_localctx = tmp;
					{
					recog.base.set_state(766);
					recog.base.match_token(CALL,&mut recog.err_handler)?;

					recog.base.set_state(770);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(767);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(772);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				40 =>{
					let tmp = CreateRoleContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 40);
					_localctx = tmp;
					{
					recog.base.set_state(773);
					recog.base.match_token(CREATE,&mut recog.err_handler)?;

					recog.base.set_state(774);
					recog.base.match_token(ROLE,&mut recog.err_handler)?;

					recog.base.set_state(778);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(775);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(780);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				41 =>{
					let tmp = GrantContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 41);
					_localctx = tmp;
					{
					recog.base.set_state(781);
					recog.base.match_token(GRANT,&mut recog.err_handler)?;

					recog.base.set_state(785);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(782);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(787);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				42 =>{
					let tmp = RevokeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 42);
					_localctx = tmp;
					{
					recog.base.set_state(788);
					recog.base.match_token(REVOKE,&mut recog.err_handler)?;

					recog.base.set_state(792);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(789);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(794);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				43 =>{
					let tmp = DenyContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 43);
					_localctx = tmp;
					{
					recog.base.set_state(795);
					recog.base.match_token(DENY,&mut recog.err_handler)?;

					recog.base.set_state(809);
					recog.err_handler.sync(&mut recog.base)?;
					match recog.base.input.la(1) {
					 CREATE | DELETE | INSERT | SELECT | UPDATE 
						=> {
							{
							/*InvokeRule privilege*/
							recog.base.set_state(796);
							recog.privilege()?;

							recog.base.set_state(801);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(67,&mut recog.base)?;
							while { _alt!=2 && _alt!=INVALID_ALT } {
								if _alt==1 {
									{
									{
									recog.base.set_state(797);
									recog.base.match_token(COMMA,&mut recog.err_handler)?;

									/*InvokeRule privilege*/
									recog.base.set_state(798);
									recog.privilege()?;

									}
									} 
								}
								recog.base.set_state(803);
								recog.err_handler.sync(&mut recog.base)?;
								_alt = recog.interpreter.adaptive_predict(67,&mut recog.base)?;
							}
							recog.base.set_state(805);
							recog.err_handler.sync(&mut recog.base)?;
							_la = recog.base.input.la(1);
							if _la==COMMA {
								{
								recog.base.set_state(804);
								let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
								if let StatementContextAll::DenyContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
								ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

								}
							}

							}
						}

					 ALL 
						=> {
							{
							recog.base.set_state(807);
							recog.base.match_token(ALL,&mut recog.err_handler)?;

							recog.base.set_state(808);
							recog.base.match_token(PRIVILEGES,&mut recog.err_handler)?;

							}
						}

						_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
					}
					recog.base.set_state(811);
					recog.base.match_token(ON,&mut recog.err_handler)?;

					recog.base.set_state(813);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(70,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(812);
							_la = recog.base.input.la(1);
							if { !(_la==SCHEMA || _la==TABLE) } {
								recog.err_handler.recover_inline(&mut recog.base)?;

							}
							else {
								if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
								recog.err_handler.report_match(&mut recog.base);
								recog.base.consume(&mut recog.err_handler);
							}
							}
						}

						_ => {}
					}
					/*InvokeRule qualifiedName*/
					recog.base.set_state(815);
					recog.qualifiedName()?;

					recog.base.set_state(816);
					recog.base.match_token(TO,&mut recog.err_handler)?;

					/*InvokeRule principal*/
					recog.base.set_state(817);
					let tmp = recog.principal()?;
					if let StatementContextAll::DenyContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
					ctx.grantee = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					}
				}
			,
				44 =>{
					let tmp = ExplainContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 44);
					_localctx = tmp;
					{
					recog.base.set_state(819);
					recog.base.match_token(EXPLAIN,&mut recog.err_handler)?;

					recog.base.set_state(831);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(72,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(820);
							recog.base.match_token(LPAREN,&mut recog.err_handler)?;

							/*InvokeRule explainOption*/
							recog.base.set_state(821);
							recog.explainOption()?;

							recog.base.set_state(826);
							recog.err_handler.sync(&mut recog.base)?;
							_la = recog.base.input.la(1);
							while _la==COMMA {
								{
								{
								recog.base.set_state(822);
								recog.base.match_token(COMMA,&mut recog.err_handler)?;

								/*InvokeRule explainOption*/
								recog.base.set_state(823);
								recog.explainOption()?;

								}
								}
								recog.base.set_state(828);
								recog.err_handler.sync(&mut recog.base)?;
								_la = recog.base.input.la(1);
							}
							recog.base.set_state(829);
							recog.base.match_token(RPAREN,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule statement*/
					recog.base.set_state(833);
					recog.statement()?;

					}
				}
			,
				45 =>{
					let tmp = ShowContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 45);
					_localctx = tmp;
					{
					recog.base.set_state(834);
					recog.base.match_token(SHOW,&mut recog.err_handler)?;

					recog.base.set_state(838);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(835);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(840);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				46 =>{
					let tmp = ResetContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 46);
					_localctx = tmp;
					{
					recog.base.set_state(841);
					recog.base.match_token(RESET,&mut recog.err_handler)?;

					recog.base.set_state(845);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(842);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(847);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				47 =>{
					let tmp = StartTransactionContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 47);
					_localctx = tmp;
					{
					recog.base.set_state(848);
					recog.base.match_token(START,&mut recog.err_handler)?;

					recog.base.set_state(849);
					recog.base.match_token(TRANSACTION,&mut recog.err_handler)?;

					recog.base.set_state(861);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==ISOLATION || _la==READ {
						{
						/*InvokeRule transactionMode*/
						recog.base.set_state(850);
						recog.transactionMode()?;

						recog.base.set_state(855);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(75,&mut recog.base)?;
						while { _alt!=2 && _alt!=INVALID_ALT } {
							if _alt==1 {
								{
								{
								recog.base.set_state(851);
								recog.base.match_token(COMMA,&mut recog.err_handler)?;

								/*InvokeRule transactionMode*/
								recog.base.set_state(852);
								recog.transactionMode()?;

								}
								} 
							}
							recog.base.set_state(857);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(75,&mut recog.base)?;
						}
						recog.base.set_state(859);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==COMMA {
							{
							recog.base.set_state(858);
							let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
							if let StatementContextAll::StartTransactionContext(ctx) = cast_mut::<_,StatementContextAll >(&mut _localctx){
							ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

							}
						}

						}
					}

					}
				}
			,
				48 =>{
					let tmp = CommitContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 48);
					_localctx = tmp;
					{
					recog.base.set_state(863);
					recog.base.match_token(COMMIT,&mut recog.err_handler)?;

					recog.base.set_state(867);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(864);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(869);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				49 =>{
					let tmp = RollbackContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 49);
					_localctx = tmp;
					{
					recog.base.set_state(870);
					recog.base.match_token(ROLLBACK,&mut recog.err_handler)?;

					recog.base.set_state(874);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(871);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(876);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				50 =>{
					let tmp = PrepareContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 50);
					_localctx = tmp;
					{
					recog.base.set_state(877);
					recog.base.match_token(PREPARE,&mut recog.err_handler)?;

					recog.base.set_state(881);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(878);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(883);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				51 =>{
					let tmp = DeallocateContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 51);
					_localctx = tmp;
					{
					recog.base.set_state(884);
					recog.base.match_token(DEALLOCATE,&mut recog.err_handler)?;

					recog.base.set_state(888);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(885);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(890);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				52 =>{
					let tmp = ExecuteContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 52);
					_localctx = tmp;
					{
					recog.base.set_state(891);
					recog.base.match_token(EXECUTE,&mut recog.err_handler)?;

					recog.base.set_state(895);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(892);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(897);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}
			,
				53 =>{
					let tmp = DescribeInputContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 53);
					_localctx = tmp;
					{
					recog.base.set_state(898);
					recog.base.match_token(DESCRIBE,&mut recog.err_handler)?;

					recog.base.set_state(899);
					recog.base.match_token(INPUT,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(900);
					recog.identifier()?;

					}
				}
			,
				54 =>{
					let tmp = DescribeOutputContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 54);
					_localctx = tmp;
					{
					recog.base.set_state(901);
					recog.base.match_token(DESCRIBE,&mut recog.err_handler)?;

					recog.base.set_state(902);
					recog.base.match_token(OUTPUT,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(903);
					recog.identifier()?;

					}
				}
			,
				55 =>{
					let tmp = UpdateContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 55);
					_localctx = tmp;
					{
					recog.base.set_state(904);
					recog.base.match_token(UPDATE,&mut recog.err_handler)?;

					recog.base.set_state(908);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while (((_la) & !0x3f) == 0 && ((1usize << _la) & ((1usize << T__0) | (1usize << T__1) | (1usize << T__2) | (1usize << T__3) | (1usize << T__4) | (1usize << T__5) | (1usize << T__6) | (1usize << T__7) | (1usize << ABORT) | (1usize << ABSENT) | (1usize << ADD) | (1usize << ADMIN) | (1usize << AFTER) | (1usize << ALL) | (1usize << ALTER) | (1usize << ANALYZE) | (1usize << AND) | (1usize << ANTI) | (1usize << ANY) | (1usize << ARRAY) | (1usize << AS) | (1usize << ASC) | (1usize << AT) | (1usize << ATTACH) | (1usize << AUTHORIZATION) | (1usize << AUTO) | (1usize << BACKUP) | (1usize << BEGIN) | (1usize << BERNOULLI) | (1usize << BETWEEN) | (1usize << BOTH))) != 0) || ((((_la - 32)) & !0x3f) == 0 && ((1usize << (_la - 32)) & ((1usize << (BY - 32)) | (1usize << (BZIP2 - 32)) | (1usize << (CALL - 32)) | (1usize << (CANCEL - 32)) | (1usize << (CASCADE - 32)) | (1usize << (CASE - 32)) | (1usize << (CASE_SENSITIVE - 32)) | (1usize << (CASE_INSENSITIVE - 32)) | (1usize << (CAST - 32)) | (1usize << (CATALOGS - 32)) | (1usize << (CHARACTER - 32)) | (1usize << (CLONE - 32)) | (1usize << (CLOSE - 32)) | (1usize << (CLUSTER - 32)) | (1usize << (COLLATE - 32)) | (1usize << (COLUMN - 32)) | (1usize << (COLUMNS - 32)) | (1usize << (COMMA - 32)) | (1usize << (COMMENT - 32)) | (1usize << (COMMIT - 32)) | (1usize << (COMMITTED - 32)) | (1usize << (COMPOUND - 32)) | (1usize << (COMPRESSION - 32)) | (1usize << (CONDITIONAL - 32)) | (1usize << (CONNECT - 32)) | (1usize << (CONNECTION - 32)) | (1usize << (CONSTRAINT - 32)) | (1usize << (COPARTITION - 32)) | (1usize << (COPY - 32)) | (1usize << (COUNT - 32)) | (1usize << (CREATE - 32)) | (1usize << (CROSS - 32)))) != 0) || ((((_la - 64)) & !0x3f) == 0 && ((1usize << (_la - 64)) & ((1usize << (CUBE - 64)) | (1usize << (CURRENT - 64)) | (1usize << (CURRENT_ROLE - 64)) | (1usize << (DATA - 64)) | (1usize << (DATABASE - 64)) | (1usize << (DATASHARE - 64)) | (1usize << (DATE - 64)) | (1usize << (DAY - 64)) | (1usize << (DAYS - 64)) | (1usize << (DEALLOCATE - 64)) | (1usize << (DECLARE - 64)) | (1usize << (DEFAULT - 64)) | (1usize << (DEFAULTS - 64)) | (1usize << (DEFINE - 64)) | (1usize << (DEFINER - 64)) | (1usize << (DELETE - 64)) | (1usize << (DELIMITED - 64)) | (1usize << (DELIMITER - 64)) | (1usize << (DENY - 64)) | (1usize << (DESC - 64)) | (1usize << (DESCRIBE - 64)) | (1usize << (DESCRIPTOR - 64)) | (1usize << (DISTINCT - 64)) | (1usize << (DISTKEY - 64)) | (1usize << (DISTRIBUTED - 64)) | (1usize << (DISTSTYLE - 64)) | (1usize << (DETACH - 64)) | (1usize << (DOUBLE - 64)) | (1usize << (DROP - 64)) | (1usize << (ELSE - 64)) | (1usize << (EMPTY - 64)) | (1usize << (ENCODE - 64)))) != 0) || ((((_la - 96)) & !0x3f) == 0 && ((1usize << (_la - 96)) & ((1usize << (ENCODING - 96)) | (1usize << (END - 96)) | (1usize << (ERROR - 96)) | (1usize << (ESCAPE - 96)) | (1usize << (EVEN - 96)) | (1usize << (EXCEPT - 96)) | (1usize << (EXCLUDING - 96)) | (1usize << (EXECUTE - 96)) | (1usize << (EXISTS - 96)) | (1usize << (EXPLAIN - 96)) | (1usize << (EXTERNAL - 96)) | (1usize << (EXTRACT - 96)) | (1usize << (FALSE - 96)) | (1usize << (FETCH - 96)) | (1usize << (FILTER - 96)) | (1usize << (FINAL - 96)) | (1usize << (FIRST - 96)) | (1usize << (FOLLOWING - 96)) | (1usize << (FOR - 96)) | (1usize << (FORMAT - 96)) | (1usize << (FROM - 96)) | (1usize << (FULL - 96)) | (1usize << (FUNCTION - 96)) | (1usize << (FUNCTIONS - 96)) | (1usize << (GENERATED - 96)) | (1usize << (GRACE - 96)) | (1usize << (GRANT - 96)) | (1usize << (GRANTED - 96)) | (1usize << (GRANTS - 96)) | (1usize << (GRAPHVIZ - 96)) | (1usize << (GROUP - 96)) | (1usize << (GROUPING - 96)))) != 0) || ((((_la - 128)) & !0x3f) == 0 && ((1usize << (_la - 128)) & ((1usize << (GROUPS - 128)) | (1usize << (GZIP - 128)) | (1usize << (HAVING - 128)) | (1usize << (HEADER - 128)) | (1usize << (HOUR - 128)) | (1usize << (HOURS - 128)) | (1usize << (IDENTITY - 128)) | (1usize << (IF - 128)) | (1usize << (IGNORE - 128)) | (1usize << (IN - 128)) | (1usize << (INCLUDING - 128)) | (1usize << (INITIAL - 128)) | (1usize << (INNER - 128)) | (1usize << (INPUT - 128)) | (1usize << (INPUTFORMAT - 128)) | (1usize << (INTEGER - 128)) | (1usize << (INTERLEAVED - 128)) | (1usize << (INSERT - 128)) | (1usize << (INTERSECT - 128)) | (1usize << (INTERVAL - 128)) | (1usize << (INTO - 128)) | (1usize << (INVOKER - 128)) | (1usize << (IO - 128)) | (1usize << (IS - 128)) | (1usize << (ISOLATION - 128)) | (1usize << (ILIKE - 128)) | (1usize << (JOIN - 128)) | (1usize << (JSON - 128)) | (1usize << (JSON_ARRAY - 128)) | (1usize << (JSON_EXISTS - 128)) | (1usize << (JSON_OBJECT - 128)) | (1usize << (JSON_QUERY - 128)))) != 0) || ((((_la - 160)) & !0x3f) == 0 && ((1usize << (_la - 160)) & ((1usize << (JSON_VALUE - 160)) | (1usize << (KEEP - 160)) | (1usize << (KEY - 160)) | (1usize << (KEYS - 160)) | (1usize << (LAMBDA - 160)) | (1usize << (LAST - 160)) | (1usize << (LATERAL - 160)) | (1usize << (LEADING - 160)) | (1usize << (LEFT - 160)) | (1usize << (LEVEL - 160)) | (1usize << (LIBRARY - 160)) | (1usize << (LIKE - 160)) | (1usize << (LIMIT - 160)) | (1usize << (LISTAGG - 160)) | (1usize << (LOCAL - 160)) | (1usize << (LOCATION - 160)) | (1usize << (LOCK - 160)) | (1usize << (LOGICAL - 160)) | (1usize << (M - 160)) | (1usize << (MAP - 160)) | (1usize << (MASKING - 160)) | (1usize << (MATCH - 160)) | (1usize << (MATCHED - 160)) | (1usize << (MATCHES - 160)) | (1usize << (MATCH_RECOGNIZE - 160)) | (1usize << (MATERIALIZED - 160)) | (1usize << (MAX - 160)) | (1usize << (MEASURES - 160)) | (1usize << (MERGE - 160)) | (1usize << (MIN - 160)) | (1usize << (MINUS_KW - 160)) | (1usize << (MINUTE - 160)))) != 0) || ((((_la - 192)) & !0x3f) == 0 && ((1usize << (_la - 192)) & ((1usize << (MINUTES - 192)) | (1usize << (MODEL - 192)) | (1usize << (MONTH - 192)) | (1usize << (MONTHS - 192)) | (1usize << (NATURAL - 192)) | (1usize << (NEXT - 192)) | (1usize << (NFC - 192)) | (1usize << (NFD - 192)) | (1usize << (NFKC - 192)) | (1usize << (NFKD - 192)) | (1usize << (NO - 192)) | (1usize << (NONE - 192)) | (1usize << (NORMALIZE - 192)) | (1usize << (NOT - 192)) | (1usize << (NULL - 192)) | (1usize << (NULLS - 192)) | (1usize << (OBJECT - 192)) | (1usize << (OF - 192)) | (1usize << (OFFSET - 192)) | (1usize << (OMIT - 192)) | (1usize << (ON - 192)) | (1usize << (ONE - 192)) | (1usize << (ONLY - 192)) | (1usize << (OPTION - 192)) | (1usize << (OPTIONS - 192)) | (1usize << (OR - 192)) | (1usize << (ORDER - 192)) | (1usize << (ORDINALITY - 192)) | (1usize << (OUTER - 192)) | (1usize << (OUTPUT - 192)) | (1usize << (OUTPUTFORMAT - 192)) | (1usize << (OVER - 192)))) != 0) || ((((_la - 224)) & !0x3f) == 0 && ((1usize << (_la - 224)) & ((1usize << (OVERFLOW - 224)) | (1usize << (PARTITION - 224)) | (1usize << (PARTITIONED - 224)) | (1usize << (PARTITIONS - 224)) | (1usize << (PASSING - 224)) | (1usize << (PAST - 224)) | (1usize << (PATH - 224)) | (1usize << (PATTERN - 224)) | (1usize << (PER - 224)) | (1usize << (PERIOD - 224)) | (1usize << (PERMUTE - 224)) | (1usize << (POSITION - 224)) | (1usize << (PRECEDING - 224)) | (1usize << (PRECISION - 224)) | (1usize << (PREPARE - 224)) | (1usize << (PRIOR - 224)) | (1usize << (PROCEDURE - 224)) | (1usize << (PRIVILEGES - 224)) | (1usize << (PROPERTIES - 224)) | (1usize << (PRUNE - 224)) | (1usize << (QUOTES - 224)) | (1usize << (RANGE - 224)) | (1usize << (READ - 224)) | (1usize << (RECURSIVE - 224)) | (1usize << (REFRESH - 224)) | (1usize << (RENAME - 224)) | (1usize << (REPEATABLE - 224)) | (1usize << (REPLACE - 224)) | (1usize << (RESET - 224)) | (1usize << (RESPECT - 224)) | (1usize << (RESTRICT - 224)) | (1usize << (RETURNING - 224)))) != 0) || ((((_la - 256)) & !0x3f) == 0 && ((1usize << (_la - 256)) & ((1usize << (REVOKE - 256)) | (1usize << (RIGHT - 256)) | (1usize << (RLS - 256)) | (1usize << (ROLE - 256)) | (1usize << (ROLES - 256)) | (1usize << (ROLLBACK - 256)) | (1usize << (ROLLUP - 256)) | (1usize << (ROW - 256)) | (1usize << (ROWS - 256)) | (1usize << (RUNNING - 256)) | (1usize << (S - 256)) | (1usize << (SCALAR - 256)) | (1usize << (SEC - 256)) | (1usize << (SECOND - 256)) | (1usize << (SECONDS - 256)) | (1usize << (SCHEMA - 256)) | (1usize << (SCHEMAS - 256)) | (1usize << (SECURITY - 256)) | (1usize << (SEEK - 256)) | (1usize << (SELECT - 256)) | (1usize << (SEMI - 256)) | (1usize << (SERDE - 256)) | (1usize << (SERDEPROPERTIES - 256)) | (1usize << (SERIALIZABLE - 256)) | (1usize << (SESSION - 256)) | (1usize << (SET - 256)) | (1usize << (SETS - 256)) | (1usize << (SHOW - 256)) | (1usize << (SIMILAR - 256)) | (1usize << (SKIP_KW - 256)) | (1usize << (SNAPSHOT - 256)) | (1usize << (SOME - 256)))) != 0) || ((((_la - 288)) & !0x3f) == 0 && ((1usize << (_la - 288)) & ((1usize << (SORTKEY - 288)) | (1usize << (START - 288)) | (1usize << (STATS - 288)) | (1usize << (STORED - 288)) | (1usize << (STRUCT - 288)) | (1usize << (SUBSET - 288)) | (1usize << (SUBSTRING - 288)) | (1usize << (SYSTEM - 288)) | (1usize << (SYSTEM_TIME - 288)) | (1usize << (TABLE - 288)) | (1usize << (TABLES - 288)) | (1usize << (TABLESAMPLE - 288)) | (1usize << (TEMP - 288)) | (1usize << (TEMPORARY - 288)) | (1usize << (TERMINATED - 288)) | (1usize << (TEXT - 288)) | (1usize << (STRING_KW - 288)) | (1usize << (THEN - 288)) | (1usize << (TIES - 288)) | (1usize << (TIME - 288)) | (1usize << (TIMESTAMP - 288)) | (1usize << (TO - 288)) | (1usize << (TOP - 288)) | (1usize << (TRAILING - 288)) | (1usize << (TRANSACTION - 288)) | (1usize << (TRIM - 288)) | (1usize << (TRUE - 288)) | (1usize << (TRUNCATE - 288)) | (1usize << (TRY_CAST - 288)) | (1usize << (TUPLE - 288)) | (1usize << (TYPE - 288)) | (1usize << (UESCAPE - 288)))) != 0) || ((((_la - 320)) & !0x3f) == 0 && ((1usize << (_la - 320)) & ((1usize << (UNBOUNDED - 320)) | (1usize << (UNCOMMITTED - 320)) | (1usize << (UNCONDITIONAL - 320)) | (1usize << (UNION - 320)) | (1usize << (UNIQUE - 320)) | (1usize << (UNKNOWN - 320)) | (1usize << (UNLOAD - 320)) | (1usize << (UNMATCHED - 320)) | (1usize << (UNNEST - 320)) | (1usize << (UNSIGNED - 320)) | (1usize << (UPDATE - 320)) | (1usize << (USE - 320)) | (1usize << (USER - 320)) | (1usize << (USING - 320)) | (1usize << (UTF16 - 320)) | (1usize << (UTF32 - 320)) | (1usize << (UTF8 - 320)) | (1usize << (VACUUM - 320)) | (1usize << (VALIDATE - 320)) | (1usize << (VALUE - 320)) | (1usize << (VALUES - 320)) | (1usize << (VARYING - 320)) | (1usize << (VERBOSE - 320)) | (1usize << (VERSION - 320)) | (1usize << (VIEW - 320)) | (1usize << (WEEK - 320)) | (1usize << (WHEN - 320)) | (1usize << (WHERE - 320)) | (1usize << (WINDOW - 320)) | (1usize << (WITH - 320)) | (1usize << (WITHIN - 320)) | (1usize << (WITHOUT - 320)))) != 0) || ((((_la - 352)) & !0x3f) == 0 && ((1usize << (_la - 352)) & ((1usize << (WORK - 352)) | (1usize << (WRAPPER - 352)) | (1usize << (WRITE - 352)) | (1usize << (XZ - 352)) | (1usize << (YEAR - 352)) | (1usize << (YEARS - 352)) | (1usize << (YES - 352)) | (1usize << (ZONE - 352)) | (1usize << (ZSTD - 352)) | (1usize << (LPAREN - 352)) | (1usize << (RPAREN - 352)) | (1usize << (LBRACKET - 352)) | (1usize << (RBRACKET - 352)) | (1usize << (DOT - 352)) | (1usize << (EQ - 352)) | (1usize << (NEQ - 352)) | (1usize << (LT - 352)) | (1usize << (LTE - 352)) | (1usize << (GT - 352)) | (1usize << (GTE - 352)) | (1usize << (PLUS - 352)) | (1usize << (MINUS - 352)) | (1usize << (ASTERISK - 352)) | (1usize << (SLASH - 352)) | (1usize << (PERCENT - 352)) | (1usize << (CONCAT - 352)) | (1usize << (QUESTION_MARK - 352)) | (1usize << (COLON - 352)) | (1usize << (DOLLAR - 352)) | (1usize << (BITWISE_SHIFT_LEFT - 352)) | (1usize << (POSIX - 352)))) != 0) || ((((_la - 384)) & !0x3f) == 0 && ((1usize << (_la - 384)) & ((1usize << (STRING - 384)) | (1usize << (UNICODE_STRING - 384)) | (1usize << (BINARY_LITERAL - 384)) | (1usize << (INTEGER_VALUE - 384)) | (1usize << (DECIMAL_VALUE - 384)) | (1usize << (DOUBLE_VALUE - 384)) | (1usize << (IDENTIFIER - 384)) | (1usize << (DIGIT_IDENTIFIER - 384)) | (1usize << (QUOTED_IDENTIFIER - 384)) | (1usize << (VARIABLE - 384)) | (1usize << (SIMPLE_COMMENT - 384)) | (1usize << (BRACKETED_COMMENT - 384)) | (1usize << (WS - 384)) | (1usize << (UNPAIRED_TOKEN - 384)) | (1usize << (UNRECOGNIZED - 384)))) != 0) {
						{
						{
						recog.base.set_state(905);
						_la = recog.base.input.la(1);
						if { _la <= 0 || (_la==SEMI_COLON) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
						}
						recog.base.set_state(910);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- tableElements ----------------
pub type TableElementsContextAll<'input> = TableElementsContext<'input>;


pub type TableElementsContext<'input> = BaseParserRuleContext<'input,TableElementsContextExt<'input>>;

#[derive(Clone)]
pub struct TableElementsContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for TableElementsContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableElementsContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_tableElements(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_tableElements(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableElementsContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_tableElements(self);
	}
}

impl<'input> CustomRuleContext<'input> for TableElementsContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_tableElements }
	//fn type_rule_index() -> usize where Self: Sized { RULE_tableElements }
}
antlr_rust::tid!{TableElementsContextExt<'a>}

impl<'input> TableElementsContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<TableElementsContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,TableElementsContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait TableElementsContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<TableElementsContextExt<'input>>{

fn tableElement_all(&self) ->  Vec<Rc<TableElementContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn tableElement(&self, i: usize) -> Option<Rc<TableElementContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> TableElementsContextAttrs<'input> for TableElementsContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn tableElements(&mut self,)
	-> Result<Rc<TableElementsContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = TableElementsContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 12, RULE_tableElements);
        let mut _localctx: Rc<TableElementsContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule tableElement*/
			recog.base.set_state(913);
			recog.tableElement()?;

			recog.base.set_state(918);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(85,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					{
					{
					recog.base.set_state(914);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule tableElement*/
					recog.base.set_state(915);
					recog.tableElement()?;

					}
					} 
				}
				recog.base.set_state(920);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(85,&mut recog.base)?;
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- query ----------------
pub type QueryContextAll<'input> = QueryContext<'input>;


pub type QueryContext<'input> = BaseParserRuleContext<'input,QueryContextExt<'input>>;

#[derive(Clone)]
pub struct QueryContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for QueryContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QueryContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_query(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_query(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QueryContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_query(self);
	}
}

impl<'input> CustomRuleContext<'input> for QueryContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_query }
	//fn type_rule_index() -> usize where Self: Sized { RULE_query }
}
antlr_rust::tid!{QueryContextExt<'a>}

impl<'input> QueryContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<QueryContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,QueryContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait QueryContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<QueryContextExt<'input>>{

fn queryNoWith(&self) -> Option<Rc<QueryNoWithContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn with(&self) -> Option<Rc<WithContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> QueryContextAttrs<'input> for QueryContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn query(&mut self,)
	-> Result<Rc<QueryContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = QueryContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 14, RULE_query);
        let mut _localctx: Rc<QueryContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(922);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==WITH {
				{
				/*InvokeRule with*/
				recog.base.set_state(921);
				recog.with()?;

				}
			}

			/*InvokeRule queryNoWith*/
			recog.base.set_state(924);
			recog.queryNoWith()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- with ----------------
pub type WithContextAll<'input> = WithContext<'input>;


pub type WithContext<'input> = BaseParserRuleContext<'input,WithContextExt<'input>>;

#[derive(Clone)]
pub struct WithContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for WithContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for WithContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_with(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_with(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for WithContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_with(self);
	}
}

impl<'input> CustomRuleContext<'input> for WithContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_with }
	//fn type_rule_index() -> usize where Self: Sized { RULE_with }
}
antlr_rust::tid!{WithContextExt<'a>}

impl<'input> WithContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<WithContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,WithContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait WithContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<WithContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token WITH
/// Returns `None` if there is no child corresponding to token WITH
fn WITH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WITH, 0)
}
fn namedQuery_all(&self) ->  Vec<Rc<NamedQueryContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn namedQuery(&self, i: usize) -> Option<Rc<NamedQueryContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves first TerminalNode corresponding to token RECURSIVE
/// Returns `None` if there is no child corresponding to token RECURSIVE
fn RECURSIVE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RECURSIVE, 0)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> WithContextAttrs<'input> for WithContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn with(&mut self,)
	-> Result<Rc<WithContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = WithContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 16, RULE_with);
        let mut _localctx: Rc<WithContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(926);
			recog.base.match_token(WITH,&mut recog.err_handler)?;

			recog.base.set_state(928);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==RECURSIVE {
				{
				recog.base.set_state(927);
				recog.base.match_token(RECURSIVE,&mut recog.err_handler)?;

				}
			}

			/*InvokeRule namedQuery*/
			recog.base.set_state(930);
			recog.namedQuery()?;

			recog.base.set_state(935);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			while _la==COMMA {
				{
				{
				recog.base.set_state(931);
				recog.base.match_token(COMMA,&mut recog.err_handler)?;

				/*InvokeRule namedQuery*/
				recog.base.set_state(932);
				recog.namedQuery()?;

				}
				}
				recog.base.set_state(937);
				recog.err_handler.sync(&mut recog.base)?;
				_la = recog.base.input.la(1);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- tableElement ----------------
pub type TableElementContextAll<'input> = TableElementContext<'input>;


pub type TableElementContext<'input> = BaseParserRuleContext<'input,TableElementContextExt<'input>>;

#[derive(Clone)]
pub struct TableElementContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for TableElementContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableElementContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_tableElement(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_tableElement(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableElementContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_tableElement(self);
	}
}

impl<'input> CustomRuleContext<'input> for TableElementContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_tableElement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_tableElement }
}
antlr_rust::tid!{TableElementContextExt<'a>}

impl<'input> TableElementContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<TableElementContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,TableElementContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait TableElementContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<TableElementContextExt<'input>>{

fn columnDefinition(&self) -> Option<Rc<ColumnDefinitionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> TableElementContextAttrs<'input> for TableElementContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn tableElement(&mut self,)
	-> Result<Rc<TableElementContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = TableElementContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 18, RULE_tableElement);
        let mut _localctx: Rc<TableElementContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule columnDefinition*/
			recog.base.set_state(938);
			recog.columnDefinition()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- columnDefinition ----------------
pub type ColumnDefinitionContextAll<'input> = ColumnDefinitionContext<'input>;


pub type ColumnDefinitionContext<'input> = BaseParserRuleContext<'input,ColumnDefinitionContextExt<'input>>;

#[derive(Clone)]
pub struct ColumnDefinitionContextExt<'input>{
	pub comment: Option<Rc<StringContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ColumnDefinitionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ColumnDefinitionContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_columnDefinition(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_columnDefinition(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ColumnDefinitionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_columnDefinition(self);
	}
}

impl<'input> CustomRuleContext<'input> for ColumnDefinitionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_columnDefinition }
	//fn type_rule_index() -> usize where Self: Sized { RULE_columnDefinition }
}
antlr_rust::tid!{ColumnDefinitionContextExt<'a>}

impl<'input> ColumnDefinitionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ColumnDefinitionContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ColumnDefinitionContextExt{
				comment: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait ColumnDefinitionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ColumnDefinitionContextExt<'input>>{

fn fieldDefinition(&self) -> Option<Rc<FieldDefinitionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token COMMENT
/// Returns `None` if there is no child corresponding to token COMMENT
fn COMMENT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMENT, 0)
}
fn string(&self) -> Option<Rc<StringContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> ColumnDefinitionContextAttrs<'input> for ColumnDefinitionContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn columnDefinition(&mut self,)
	-> Result<Rc<ColumnDefinitionContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = ColumnDefinitionContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 20, RULE_columnDefinition);
        let mut _localctx: Rc<ColumnDefinitionContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule fieldDefinition*/
			recog.base.set_state(940);
			recog.fieldDefinition()?;

			recog.base.set_state(943);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==COMMENT {
				{
				recog.base.set_state(941);
				recog.base.match_token(COMMENT,&mut recog.err_handler)?;

				/*InvokeRule string*/
				recog.base.set_state(942);
				let tmp = recog.string()?;
				 cast_mut::<_,ColumnDefinitionContext >(&mut _localctx).comment = Some(tmp.clone());
				  

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- fieldDefinition ----------------
pub type FieldDefinitionContextAll<'input> = FieldDefinitionContext<'input>;


pub type FieldDefinitionContext<'input> = BaseParserRuleContext<'input,FieldDefinitionContextExt<'input>>;

#[derive(Clone)]
pub struct FieldDefinitionContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for FieldDefinitionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for FieldDefinitionContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_fieldDefinition(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_fieldDefinition(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for FieldDefinitionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_fieldDefinition(self);
	}
}

impl<'input> CustomRuleContext<'input> for FieldDefinitionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_fieldDefinition }
	//fn type_rule_index() -> usize where Self: Sized { RULE_fieldDefinition }
}
antlr_rust::tid!{FieldDefinitionContextExt<'a>}

impl<'input> FieldDefinitionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<FieldDefinitionContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,FieldDefinitionContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait FieldDefinitionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<FieldDefinitionContextExt<'input>>{

fn columnName(&self) -> Option<Rc<ColumnNameContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn columnSchemaWithMetadata(&self) -> Option<Rc<ColumnSchemaWithMetadataContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> FieldDefinitionContextAttrs<'input> for FieldDefinitionContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn fieldDefinition(&mut self,)
	-> Result<Rc<FieldDefinitionContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = FieldDefinitionContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 22, RULE_fieldDefinition);
        let mut _localctx: Rc<FieldDefinitionContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule columnName*/
			recog.base.set_state(945);
			recog.columnName()?;

			/*InvokeRule columnSchemaWithMetadata*/
			recog.base.set_state(946);
			recog.columnSchemaWithMetadata()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- columnName ----------------
pub type ColumnNameContextAll<'input> = ColumnNameContext<'input>;


pub type ColumnNameContext<'input> = BaseParserRuleContext<'input,ColumnNameContextExt<'input>>;

#[derive(Clone)]
pub struct ColumnNameContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ColumnNameContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ColumnNameContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_columnName(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_columnName(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ColumnNameContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_columnName(self);
	}
}

impl<'input> CustomRuleContext<'input> for ColumnNameContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_columnName }
	//fn type_rule_index() -> usize where Self: Sized { RULE_columnName }
}
antlr_rust::tid!{ColumnNameContextExt<'a>}

impl<'input> ColumnNameContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ColumnNameContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ColumnNameContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait ColumnNameContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ColumnNameContextExt<'input>>{

fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> ColumnNameContextAttrs<'input> for ColumnNameContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn columnName(&mut self,)
	-> Result<Rc<ColumnNameContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = ColumnNameContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 24, RULE_columnName);
        let mut _localctx: Rc<ColumnNameContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule identifier*/
			recog.base.set_state(948);
			recog.identifier()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- columnNameComponent ----------------
pub type ColumnNameComponentContextAll<'input> = ColumnNameComponentContext<'input>;


pub type ColumnNameComponentContext<'input> = BaseParserRuleContext<'input,ColumnNameComponentContextExt<'input>>;

#[derive(Clone)]
pub struct ColumnNameComponentContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ColumnNameComponentContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ColumnNameComponentContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_columnNameComponent(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_columnNameComponent(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ColumnNameComponentContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_columnNameComponent(self);
	}
}

impl<'input> CustomRuleContext<'input> for ColumnNameComponentContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_columnNameComponent }
	//fn type_rule_index() -> usize where Self: Sized { RULE_columnNameComponent }
}
antlr_rust::tid!{ColumnNameComponentContextExt<'a>}

impl<'input> ColumnNameComponentContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ColumnNameComponentContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ColumnNameComponentContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait ColumnNameComponentContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ColumnNameComponentContextExt<'input>>{

fn columnName(&self) -> Option<Rc<ColumnNameContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> ColumnNameComponentContextAttrs<'input> for ColumnNameComponentContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn columnNameComponent(&mut self,)
	-> Result<Rc<ColumnNameComponentContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = ColumnNameComponentContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 26, RULE_columnNameComponent);
        let mut _localctx: Rc<ColumnNameComponentContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule columnName*/
			recog.base.set_state(950);
			recog.columnName()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- columnSchemaWithMetadata ----------------
pub type ColumnSchemaWithMetadataContextAll<'input> = ColumnSchemaWithMetadataContext<'input>;


pub type ColumnSchemaWithMetadataContext<'input> = BaseParserRuleContext<'input,ColumnSchemaWithMetadataContextExt<'input>>;

#[derive(Clone)]
pub struct ColumnSchemaWithMetadataContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ColumnSchemaWithMetadataContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ColumnSchemaWithMetadataContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_columnSchemaWithMetadata(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_columnSchemaWithMetadata(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ColumnSchemaWithMetadataContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_columnSchemaWithMetadata(self);
	}
}

impl<'input> CustomRuleContext<'input> for ColumnSchemaWithMetadataContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_columnSchemaWithMetadata }
	//fn type_rule_index() -> usize where Self: Sized { RULE_columnSchemaWithMetadata }
}
antlr_rust::tid!{ColumnSchemaWithMetadataContextExt<'a>}

impl<'input> ColumnSchemaWithMetadataContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ColumnSchemaWithMetadataContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ColumnSchemaWithMetadataContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait ColumnSchemaWithMetadataContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ColumnSchemaWithMetadataContextExt<'input>>{

fn columnSchema(&self) -> Option<Rc<ColumnSchemaContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token NULL
/// Returns `None` if there is no child corresponding to token NULL
fn NULL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NULL, 0)
}
/// Retrieves first TerminalNode corresponding to token NOT
/// Returns `None` if there is no child corresponding to token NOT
fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NOT, 0)
}

}

impl<'input> ColumnSchemaWithMetadataContextAttrs<'input> for ColumnSchemaWithMetadataContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn columnSchemaWithMetadata(&mut self,)
	-> Result<Rc<ColumnSchemaWithMetadataContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = ColumnSchemaWithMetadataContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 28, RULE_columnSchemaWithMetadata);
        let mut _localctx: Rc<ColumnSchemaWithMetadataContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule columnSchema*/
			recog.base.set_state(952);
			recog.columnSchema()?;

			recog.base.set_state(957);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==NOT || _la==NULL {
				{
				recog.base.set_state(954);
				recog.err_handler.sync(&mut recog.base)?;
				_la = recog.base.input.la(1);
				if _la==NOT {
					{
					recog.base.set_state(953);
					recog.base.match_token(NOT,&mut recog.err_handler)?;

					}
				}

				recog.base.set_state(956);
				recog.base.match_token(NULL,&mut recog.err_handler)?;

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- columnOptionList ----------------
pub type ColumnOptionListContextAll<'input> = ColumnOptionListContext<'input>;


pub type ColumnOptionListContext<'input> = BaseParserRuleContext<'input,ColumnOptionListContextExt<'input>>;

#[derive(Clone)]
pub struct ColumnOptionListContextExt<'input>{
	pub tail: Option<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ColumnOptionListContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ColumnOptionListContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_columnOptionList(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_columnOptionList(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ColumnOptionListContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_columnOptionList(self);
	}
}

impl<'input> CustomRuleContext<'input> for ColumnOptionListContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_columnOptionList }
	//fn type_rule_index() -> usize where Self: Sized { RULE_columnOptionList }
}
antlr_rust::tid!{ColumnOptionListContextExt<'a>}

impl<'input> ColumnOptionListContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ColumnOptionListContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ColumnOptionListContextExt{
				tail: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait ColumnOptionListContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ColumnOptionListContextExt<'input>>{

fn columnOption_all(&self) ->  Vec<Rc<ColumnOptionContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn columnOption(&self, i: usize) -> Option<Rc<ColumnOptionContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> ColumnOptionListContextAttrs<'input> for ColumnOptionListContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn columnOptionList(&mut self,)
	-> Result<Rc<ColumnOptionListContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = ColumnOptionListContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 30, RULE_columnOptionList);
        let mut _localctx: Rc<ColumnOptionListContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule columnOption*/
			recog.base.set_state(959);
			recog.columnOption()?;

			recog.base.set_state(964);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(92,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					{
					{
					recog.base.set_state(960);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule columnOption*/
					recog.base.set_state(961);
					recog.columnOption()?;

					}
					} 
				}
				recog.base.set_state(966);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(92,&mut recog.base)?;
			}
			recog.base.set_state(968);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==COMMA {
				{
				recog.base.set_state(967);
				let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
				 cast_mut::<_,ColumnOptionListContext >(&mut _localctx).tail = Some(tmp);
				  

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- columnOption ----------------
pub type ColumnOptionContextAll<'input> = ColumnOptionContext<'input>;


pub type ColumnOptionContext<'input> = BaseParserRuleContext<'input,ColumnOptionContextExt<'input>>;

#[derive(Clone)]
pub struct ColumnOptionContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ColumnOptionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ColumnOptionContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_columnOption(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_columnOption(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ColumnOptionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_columnOption(self);
	}
}

impl<'input> CustomRuleContext<'input> for ColumnOptionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_columnOption }
	//fn type_rule_index() -> usize where Self: Sized { RULE_columnOption }
}
antlr_rust::tid!{ColumnOptionContextExt<'a>}

impl<'input> ColumnOptionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ColumnOptionContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ColumnOptionContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait ColumnOptionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ColumnOptionContextExt<'input>>{

fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token EQ
/// Returns `None` if there is no child corresponding to token EQ
fn EQ(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EQ, 0)
}
fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> ColumnOptionContextAttrs<'input> for ColumnOptionContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn columnOption(&mut self,)
	-> Result<Rc<ColumnOptionContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = ColumnOptionContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 32, RULE_columnOption);
        let mut _localctx: Rc<ColumnOptionContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule identifier*/
			recog.base.set_state(970);
			recog.identifier()?;

			recog.base.set_state(971);
			recog.base.match_token(EQ,&mut recog.err_handler)?;

			/*InvokeRule expression*/
			recog.base.set_state(972);
			recog.expression()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- columnSchema ----------------
#[derive(Debug)]
pub enum ColumnSchemaContextAll<'input>{
	ColumnSchemaSimpleTypeContext(ColumnSchemaSimpleTypeContext<'input>),
Error(ColumnSchemaContext<'input>)
}
antlr_rust::tid!{ColumnSchemaContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for ColumnSchemaContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for ColumnSchemaContextAll<'input>{}

impl<'input> Deref for ColumnSchemaContextAll<'input>{
	type Target = dyn ColumnSchemaContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use ColumnSchemaContextAll::*;
		match self{
			ColumnSchemaSimpleTypeContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ColumnSchemaContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ColumnSchemaContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type ColumnSchemaContext<'input> = BaseParserRuleContext<'input,ColumnSchemaContextExt<'input>>;

#[derive(Clone)]
pub struct ColumnSchemaContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ColumnSchemaContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ColumnSchemaContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ColumnSchemaContext<'input>{
}

impl<'input> CustomRuleContext<'input> for ColumnSchemaContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_columnSchema }
	//fn type_rule_index() -> usize where Self: Sized { RULE_columnSchema }
}
antlr_rust::tid!{ColumnSchemaContextExt<'a>}

impl<'input> ColumnSchemaContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ColumnSchemaContextAll<'input>> {
		Rc::new(
		ColumnSchemaContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ColumnSchemaContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait ColumnSchemaContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ColumnSchemaContextExt<'input>>{


}

impl<'input> ColumnSchemaContextAttrs<'input> for ColumnSchemaContext<'input>{}

pub type ColumnSchemaSimpleTypeContext<'input> = BaseParserRuleContext<'input,ColumnSchemaSimpleTypeContextExt<'input>>;

pub trait ColumnSchemaSimpleTypeContextAttrs<'input>: TrinoParserContext<'input>{
	fn type_(&self) -> Option<Rc<Type_ContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> ColumnSchemaSimpleTypeContextAttrs<'input> for ColumnSchemaSimpleTypeContext<'input>{}

pub struct ColumnSchemaSimpleTypeContextExt<'input>{
	base:ColumnSchemaContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ColumnSchemaSimpleTypeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ColumnSchemaSimpleTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ColumnSchemaSimpleTypeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_columnSchemaSimpleType(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_columnSchemaSimpleType(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ColumnSchemaSimpleTypeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_columnSchemaSimpleType(self);
	}
}

impl<'input> CustomRuleContext<'input> for ColumnSchemaSimpleTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_columnSchema }
	//fn type_rule_index() -> usize where Self: Sized { RULE_columnSchema }
}

impl<'input> Borrow<ColumnSchemaContextExt<'input>> for ColumnSchemaSimpleTypeContext<'input>{
	fn borrow(&self) -> &ColumnSchemaContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<ColumnSchemaContextExt<'input>> for ColumnSchemaSimpleTypeContext<'input>{
	fn borrow_mut(&mut self) -> &mut ColumnSchemaContextExt<'input> { &mut self.base }
}

impl<'input> ColumnSchemaContextAttrs<'input> for ColumnSchemaSimpleTypeContext<'input> {}

impl<'input> ColumnSchemaSimpleTypeContextExt<'input>{
	fn new(ctx: &dyn ColumnSchemaContextAttrs<'input>) -> Rc<ColumnSchemaContextAll<'input>>  {
		Rc::new(
			ColumnSchemaContextAll::ColumnSchemaSimpleTypeContext(
				BaseParserRuleContext::copy_from(ctx,ColumnSchemaSimpleTypeContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn columnSchema(&mut self,)
	-> Result<Rc<ColumnSchemaContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = ColumnSchemaContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 34, RULE_columnSchema);
        let mut _localctx: Rc<ColumnSchemaContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			let tmp = ColumnSchemaSimpleTypeContextExt::new(&**_localctx);
			recog.base.enter_outer_alt(Some(tmp.clone()), 1);
			_localctx = tmp;
			{
			/*InvokeRule type_*/
			recog.base.set_state(974);
			recog.type_()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- properties ----------------
pub type PropertiesContextAll<'input> = PropertiesContext<'input>;


pub type PropertiesContext<'input> = BaseParserRuleContext<'input,PropertiesContextExt<'input>>;

#[derive(Clone)]
pub struct PropertiesContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PropertiesContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PropertiesContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_properties(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_properties(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PropertiesContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_properties(self);
	}
}

impl<'input> CustomRuleContext<'input> for PropertiesContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_properties }
	//fn type_rule_index() -> usize where Self: Sized { RULE_properties }
}
antlr_rust::tid!{PropertiesContextExt<'a>}

impl<'input> PropertiesContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PropertiesContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PropertiesContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait PropertiesContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PropertiesContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token LPAREN
/// Returns `None` if there is no child corresponding to token LPAREN
fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, 0)
}
/// Retrieves first TerminalNode corresponding to token RPAREN
/// Returns `None` if there is no child corresponding to token RPAREN
fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, 0)
}
fn propertyAssignments(&self) -> Option<Rc<PropertyAssignmentsContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> PropertiesContextAttrs<'input> for PropertiesContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn properties(&mut self,)
	-> Result<Rc<PropertiesContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PropertiesContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 36, RULE_properties);
        let mut _localctx: Rc<PropertiesContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(976);
			recog.base.match_token(LPAREN,&mut recog.err_handler)?;

			recog.base.set_state(978);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if ((((_la - 9)) & !0x3f) == 0 && ((1usize << (_la - 9)) & ((1usize << (ABORT - 9)) | (1usize << (ABSENT - 9)) | (1usize << (ADD - 9)) | (1usize << (ADMIN - 9)) | (1usize << (AFTER - 9)) | (1usize << (ALL - 9)) | (1usize << (ANALYZE - 9)) | (1usize << (ANTI - 9)) | (1usize << (ANY - 9)) | (1usize << (ARRAY - 9)) | (1usize << (ASC - 9)) | (1usize << (AT - 9)) | (1usize << (ATTACH - 9)) | (1usize << (AUTHORIZATION - 9)) | (1usize << (BEGIN - 9)) | (1usize << (BERNOULLI - 9)) | (1usize << (BOTH - 9)) | (1usize << (BZIP2 - 9)) | (1usize << (CALL - 9)) | (1usize << (CANCEL - 9)) | (1usize << (CASCADE - 9)))) != 0) || ((((_la - 41)) & !0x3f) == 0 && ((1usize << (_la - 41)) & ((1usize << (CATALOGS - 41)) | (1usize << (CHARACTER - 41)) | (1usize << (CLONE - 41)) | (1usize << (CLOSE - 41)) | (1usize << (CLUSTER - 41)) | (1usize << (COLUMN - 41)) | (1usize << (COLUMNS - 41)) | (1usize << (COMMENT - 41)) | (1usize << (COMMIT - 41)) | (1usize << (COMMITTED - 41)) | (1usize << (COMPRESSION - 41)) | (1usize << (CONDITIONAL - 41)) | (1usize << (CONNECTION - 41)) | (1usize << (COPARTITION - 41)) | (1usize << (COPY - 41)) | (1usize << (COUNT - 41)) | (1usize << (CURRENT - 41)) | (1usize << (DATA - 41)) | (1usize << (DATABASE - 41)) | (1usize << (DATASHARE - 41)) | (1usize << (DATE - 41)) | (1usize << (DAY - 41)) | (1usize << (DAYS - 41)))) != 0) || ((((_la - 74)) & !0x3f) == 0 && ((1usize << (_la - 74)) & ((1usize << (DECLARE - 74)) | (1usize << (DEFAULT - 74)) | (1usize << (DEFINE - 74)) | (1usize << (DEFINER - 74)) | (1usize << (DELIMITER - 74)) | (1usize << (DENY - 74)) | (1usize << (DESC - 74)) | (1usize << (DESCRIBE - 74)) | (1usize << (DESCRIPTOR - 74)) | (1usize << (DISTRIBUTED - 74)) | (1usize << (DETACH - 74)) | (1usize << (DOUBLE - 74)) | (1usize << (EMPTY - 74)) | (1usize << (ENCODING - 74)) | (1usize << (END - 74)) | (1usize << (ERROR - 74)) | (1usize << (EXCLUDING - 74)) | (1usize << (EXECUTE - 74)) | (1usize << (EXPLAIN - 74)))) != 0) || ((((_la - 106)) & !0x3f) == 0 && ((1usize << (_la - 106)) & ((1usize << (EXTERNAL - 106)) | (1usize << (FETCH - 106)) | (1usize << (FILTER - 106)) | (1usize << (FINAL - 106)) | (1usize << (FIRST - 106)) | (1usize << (FOLLOWING - 106)) | (1usize << (FORMAT - 106)) | (1usize << (FUNCTIONS - 106)) | (1usize << (GRACE - 106)) | (1usize << (GRANT - 106)) | (1usize << (GRANTED - 106)) | (1usize << (GRANTS - 106)) | (1usize << (GRAPHVIZ - 106)) | (1usize << (GROUPS - 106)) | (1usize << (GZIP - 106)) | (1usize << (HOUR - 106)) | (1usize << (HOURS - 106)) | (1usize << (IF - 106)) | (1usize << (IGNORE - 106)))) != 0) || ((((_la - 138)) & !0x3f) == 0 && ((1usize << (_la - 138)) & ((1usize << (INCLUDING - 138)) | (1usize << (INITIAL - 138)) | (1usize << (INPUT - 138)) | (1usize << (INTEGER - 138)) | (1usize << (INTERVAL - 138)) | (1usize << (INVOKER - 138)) | (1usize << (IO - 138)) | (1usize << (ISOLATION - 138)) | (1usize << (JSON - 138)) | (1usize << (KEEP - 138)) | (1usize << (KEY - 138)) | (1usize << (KEYS - 138)) | (1usize << (LAMBDA - 138)) | (1usize << (LAST - 138)) | (1usize << (LATERAL - 138)) | (1usize << (LEADING - 138)) | (1usize << (LEVEL - 138)))) != 0) || ((((_la - 170)) & !0x3f) == 0 && ((1usize << (_la - 170)) & ((1usize << (LIBRARY - 170)) | (1usize << (LIMIT - 170)) | (1usize << (LOCAL - 170)) | (1usize << (LOCATION - 170)) | (1usize << (LOCK - 170)) | (1usize << (LOGICAL - 170)) | (1usize << (M - 170)) | (1usize << (MAP - 170)) | (1usize << (MASKING - 170)) | (1usize << (MATCH - 170)) | (1usize << (MATCHED - 170)) | (1usize << (MATCHES - 170)) | (1usize << (MATCH_RECOGNIZE - 170)) | (1usize << (MATERIALIZED - 170)) | (1usize << (MAX - 170)) | (1usize << (MEASURES - 170)) | (1usize << (MERGE - 170)) | (1usize << (MIN - 170)) | (1usize << (MINUS_KW - 170)) | (1usize << (MINUTE - 170)) | (1usize << (MINUTES - 170)) | (1usize << (MODEL - 170)) | (1usize << (MONTH - 170)) | (1usize << (MONTHS - 170)) | (1usize << (NEXT - 170)) | (1usize << (NFC - 170)) | (1usize << (NFD - 170)) | (1usize << (NFKC - 170)) | (1usize << (NFKD - 170)))) != 0) || ((((_la - 202)) & !0x3f) == 0 && ((1usize << (_la - 202)) & ((1usize << (NO - 202)) | (1usize << (NONE - 202)) | (1usize << (NULLS - 202)) | (1usize << (OBJECT - 202)) | (1usize << (OF - 202)) | (1usize << (OFFSET - 202)) | (1usize << (OMIT - 202)) | (1usize << (ONE - 202)) | (1usize << (ONLY - 202)) | (1usize << (OPTION - 202)) | (1usize << (ORDINALITY - 202)) | (1usize << (OUTPUT - 202)) | (1usize << (OVER - 202)) | (1usize << (OVERFLOW - 202)) | (1usize << (PARTITION - 202)) | (1usize << (PARTITIONS - 202)) | (1usize << (PASSING - 202)) | (1usize << (PAST - 202)) | (1usize << (PATH - 202)) | (1usize << (PATTERN - 202)) | (1usize << (PER - 202)) | (1usize << (PERIOD - 202)))) != 0) || ((((_la - 234)) & !0x3f) == 0 && ((1usize << (_la - 234)) & ((1usize << (PERMUTE - 234)) | (1usize << (POSITION - 234)) | (1usize << (PRECEDING - 234)) | (1usize << (PRECISION - 234)) | (1usize << (PROCEDURE - 234)) | (1usize << (PRIVILEGES - 234)) | (1usize << (PROPERTIES - 234)) | (1usize << (PRUNE - 234)) | (1usize << (QUOTES - 234)) | (1usize << (RANGE - 234)) | (1usize << (READ - 234)) | (1usize << (REFRESH - 234)) | (1usize << (RENAME - 234)) | (1usize << (REPEATABLE - 234)) | (1usize << (REPLACE - 234)) | (1usize << (RESET - 234)) | (1usize << (RESPECT - 234)) | (1usize << (RESTRICT - 234)) | (1usize << (RETURNING - 234)) | (1usize << (REVOKE - 234)) | (1usize << (RLS - 234)) | (1usize << (ROLE - 234)) | (1usize << (ROLES - 234)) | (1usize << (ROLLBACK - 234)) | (1usize << (ROLLUP - 234)) | (1usize << (ROW - 234)) | (1usize << (ROWS - 234)) | (1usize << (RUNNING - 234)))) != 0) || ((((_la - 266)) & !0x3f) == 0 && ((1usize << (_la - 266)) & ((1usize << (S - 266)) | (1usize << (SCALAR - 266)) | (1usize << (SEC - 266)) | (1usize << (SECOND - 266)) | (1usize << (SECONDS - 266)) | (1usize << (SCHEMA - 266)) | (1usize << (SCHEMAS - 266)) | (1usize << (SECURITY - 266)) | (1usize << (SEEK - 266)) | (1usize << (SEMI - 266)) | (1usize << (SERIALIZABLE - 266)) | (1usize << (SESSION - 266)) | (1usize << (SET - 266)) | (1usize << (SETS - 266)) | (1usize << (SHOW - 266)) | (1usize << (SNAPSHOT - 266)) | (1usize << (SOME - 266)) | (1usize << (START - 266)) | (1usize << (STATS - 266)) | (1usize << (STRUCT - 266)) | (1usize << (SUBSET - 266)) | (1usize << (SUBSTRING - 266)) | (1usize << (SYSTEM - 266)) | (1usize << (SYSTEM_TIME - 266)))) != 0) || ((((_la - 298)) & !0x3f) == 0 && ((1usize << (_la - 298)) & ((1usize << (TABLES - 298)) | (1usize << (TABLESAMPLE - 298)) | (1usize << (TEMP - 298)) | (1usize << (TEMPORARY - 298)) | (1usize << (TEXT - 298)) | (1usize << (STRING_KW - 298)) | (1usize << (TIES - 298)) | (1usize << (TIME - 298)) | (1usize << (TIMESTAMP - 298)) | (1usize << (TO - 298)) | (1usize << (TRAILING - 298)) | (1usize << (TRANSACTION - 298)) | (1usize << (TRUNCATE - 298)) | (1usize << (TRY_CAST - 298)) | (1usize << (TUPLE - 298)) | (1usize << (TYPE - 298)) | (1usize << (UNBOUNDED - 298)) | (1usize << (UNCOMMITTED - 298)) | (1usize << (UNCONDITIONAL - 298)) | (1usize << (UNIQUE - 298)) | (1usize << (UNKNOWN - 298)) | (1usize << (UNLOAD - 298)) | (1usize << (UNMATCHED - 298)))) != 0) || ((((_la - 330)) & !0x3f) == 0 && ((1usize << (_la - 330)) & ((1usize << (UPDATE - 330)) | (1usize << (USE - 330)) | (1usize << (USER - 330)) | (1usize << (UTF16 - 330)) | (1usize << (UTF32 - 330)) | (1usize << (UTF8 - 330)) | (1usize << (VACUUM - 330)) | (1usize << (VALIDATE - 330)) | (1usize << (VALUE - 330)) | (1usize << (VARYING - 330)) | (1usize << (VERBOSE - 330)) | (1usize << (VERSION - 330)) | (1usize << (VIEW - 330)) | (1usize << (WEEK - 330)) | (1usize << (WINDOW - 330)) | (1usize << (WITHIN - 330)) | (1usize << (WITHOUT - 330)) | (1usize << (WORK - 330)) | (1usize << (WRAPPER - 330)) | (1usize << (WRITE - 330)) | (1usize << (XZ - 330)) | (1usize << (YEAR - 330)) | (1usize << (YEARS - 330)) | (1usize << (ZONE - 330)) | (1usize << (ZSTD - 330)))) != 0) || _la==IDENTIFIER || _la==QUOTED_IDENTIFIER {
				{
				/*InvokeRule propertyAssignments*/
				recog.base.set_state(977);
				recog.propertyAssignments()?;

				}
			}

			recog.base.set_state(980);
			recog.base.match_token(RPAREN,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- propertyAssignments ----------------
pub type PropertyAssignmentsContextAll<'input> = PropertyAssignmentsContext<'input>;


pub type PropertyAssignmentsContext<'input> = BaseParserRuleContext<'input,PropertyAssignmentsContextExt<'input>>;

#[derive(Clone)]
pub struct PropertyAssignmentsContextExt<'input>{
	pub tail: Option<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PropertyAssignmentsContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PropertyAssignmentsContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_propertyAssignments(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_propertyAssignments(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PropertyAssignmentsContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_propertyAssignments(self);
	}
}

impl<'input> CustomRuleContext<'input> for PropertyAssignmentsContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_propertyAssignments }
	//fn type_rule_index() -> usize where Self: Sized { RULE_propertyAssignments }
}
antlr_rust::tid!{PropertyAssignmentsContextExt<'a>}

impl<'input> PropertyAssignmentsContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PropertyAssignmentsContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PropertyAssignmentsContextExt{
				tail: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait PropertyAssignmentsContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PropertyAssignmentsContextExt<'input>>{

fn property_all(&self) ->  Vec<Rc<PropertyContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn property(&self, i: usize) -> Option<Rc<PropertyContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> PropertyAssignmentsContextAttrs<'input> for PropertyAssignmentsContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn propertyAssignments(&mut self,)
	-> Result<Rc<PropertyAssignmentsContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PropertyAssignmentsContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 38, RULE_propertyAssignments);
        let mut _localctx: Rc<PropertyAssignmentsContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule property*/
			recog.base.set_state(982);
			recog.property()?;

			recog.base.set_state(987);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(95,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					{
					{
					recog.base.set_state(983);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule property*/
					recog.base.set_state(984);
					recog.property()?;

					}
					} 
				}
				recog.base.set_state(989);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(95,&mut recog.base)?;
			}
			recog.base.set_state(991);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==COMMA {
				{
				recog.base.set_state(990);
				let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
				 cast_mut::<_,PropertyAssignmentsContext >(&mut _localctx).tail = Some(tmp);
				  

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- property ----------------
#[derive(Debug)]
pub enum PropertyContextAll<'input>{
	DefaultPropertyContext(DefaultPropertyContext<'input>),
	NestedPropertyContext(NestedPropertyContext<'input>),
Error(PropertyContext<'input>)
}
antlr_rust::tid!{PropertyContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for PropertyContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for PropertyContextAll<'input>{}

impl<'input> Deref for PropertyContextAll<'input>{
	type Target = dyn PropertyContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use PropertyContextAll::*;
		match self{
			DefaultPropertyContext(inner) => inner,
			NestedPropertyContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PropertyContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PropertyContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type PropertyContext<'input> = BaseParserRuleContext<'input,PropertyContextExt<'input>>;

#[derive(Clone)]
pub struct PropertyContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PropertyContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PropertyContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PropertyContext<'input>{
}

impl<'input> CustomRuleContext<'input> for PropertyContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_property }
	//fn type_rule_index() -> usize where Self: Sized { RULE_property }
}
antlr_rust::tid!{PropertyContextExt<'a>}

impl<'input> PropertyContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PropertyContextAll<'input>> {
		Rc::new(
		PropertyContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PropertyContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait PropertyContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PropertyContextExt<'input>>{


}

impl<'input> PropertyContextAttrs<'input> for PropertyContext<'input>{}

pub type DefaultPropertyContext<'input> = BaseParserRuleContext<'input,DefaultPropertyContextExt<'input>>;

pub trait DefaultPropertyContextAttrs<'input>: TrinoParserContext<'input>{
	fn propertyKey(&self) -> Option<Rc<PropertyKeyContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token EQ
	/// Returns `None` if there is no child corresponding to token EQ
	fn EQ(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EQ, 0)
	}
	fn propertyValue(&self) -> Option<Rc<PropertyValueContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> DefaultPropertyContextAttrs<'input> for DefaultPropertyContext<'input>{}

pub struct DefaultPropertyContextExt<'input>{
	base:PropertyContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DefaultPropertyContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DefaultPropertyContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DefaultPropertyContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_defaultProperty(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_defaultProperty(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DefaultPropertyContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_defaultProperty(self);
	}
}

impl<'input> CustomRuleContext<'input> for DefaultPropertyContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_property }
	//fn type_rule_index() -> usize where Self: Sized { RULE_property }
}

impl<'input> Borrow<PropertyContextExt<'input>> for DefaultPropertyContext<'input>{
	fn borrow(&self) -> &PropertyContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PropertyContextExt<'input>> for DefaultPropertyContext<'input>{
	fn borrow_mut(&mut self) -> &mut PropertyContextExt<'input> { &mut self.base }
}

impl<'input> PropertyContextAttrs<'input> for DefaultPropertyContext<'input> {}

impl<'input> DefaultPropertyContextExt<'input>{
	fn new(ctx: &dyn PropertyContextAttrs<'input>) -> Rc<PropertyContextAll<'input>>  {
		Rc::new(
			PropertyContextAll::DefaultPropertyContext(
				BaseParserRuleContext::copy_from(ctx,DefaultPropertyContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type NestedPropertyContext<'input> = BaseParserRuleContext<'input,NestedPropertyContextExt<'input>>;

pub trait NestedPropertyContextAttrs<'input>: TrinoParserContext<'input>{
	fn propertyKey(&self) -> Option<Rc<PropertyKeyContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token EQ
	/// Returns `None` if there is no child corresponding to token EQ
	fn EQ(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EQ, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn property_all(&self) ->  Vec<Rc<PropertyContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn property(&self, i: usize) -> Option<Rc<PropertyContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
}

impl<'input> NestedPropertyContextAttrs<'input> for NestedPropertyContext<'input>{}

pub struct NestedPropertyContextExt<'input>{
	base:PropertyContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{NestedPropertyContextExt<'a>}

impl<'input> TrinoParserContext<'input> for NestedPropertyContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for NestedPropertyContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_nestedProperty(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_nestedProperty(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for NestedPropertyContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_nestedProperty(self);
	}
}

impl<'input> CustomRuleContext<'input> for NestedPropertyContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_property }
	//fn type_rule_index() -> usize where Self: Sized { RULE_property }
}

impl<'input> Borrow<PropertyContextExt<'input>> for NestedPropertyContext<'input>{
	fn borrow(&self) -> &PropertyContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PropertyContextExt<'input>> for NestedPropertyContext<'input>{
	fn borrow_mut(&mut self) -> &mut PropertyContextExt<'input> { &mut self.base }
}

impl<'input> PropertyContextAttrs<'input> for NestedPropertyContext<'input> {}

impl<'input> NestedPropertyContextExt<'input>{
	fn new(ctx: &dyn PropertyContextAttrs<'input>) -> Rc<PropertyContextAll<'input>>  {
		Rc::new(
			PropertyContextAll::NestedPropertyContext(
				BaseParserRuleContext::copy_from(ctx,NestedPropertyContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn property(&mut self,)
	-> Result<Rc<PropertyContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PropertyContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 40, RULE_property);
        let mut _localctx: Rc<PropertyContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(1008);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(98,&mut recog.base)? {
				1 =>{
					let tmp = NestedPropertyContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					/*InvokeRule propertyKey*/
					recog.base.set_state(993);
					recog.propertyKey()?;

					recog.base.set_state(994);
					recog.base.match_token(EQ,&mut recog.err_handler)?;

					recog.base.set_state(995);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					recog.base.set_state(999);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while ((((_la - 9)) & !0x3f) == 0 && ((1usize << (_la - 9)) & ((1usize << (ABORT - 9)) | (1usize << (ABSENT - 9)) | (1usize << (ADD - 9)) | (1usize << (ADMIN - 9)) | (1usize << (AFTER - 9)) | (1usize << (ALL - 9)) | (1usize << (ANALYZE - 9)) | (1usize << (ANTI - 9)) | (1usize << (ANY - 9)) | (1usize << (ARRAY - 9)) | (1usize << (ASC - 9)) | (1usize << (AT - 9)) | (1usize << (ATTACH - 9)) | (1usize << (AUTHORIZATION - 9)) | (1usize << (BEGIN - 9)) | (1usize << (BERNOULLI - 9)) | (1usize << (BOTH - 9)) | (1usize << (BZIP2 - 9)) | (1usize << (CALL - 9)) | (1usize << (CANCEL - 9)) | (1usize << (CASCADE - 9)))) != 0) || ((((_la - 41)) & !0x3f) == 0 && ((1usize << (_la - 41)) & ((1usize << (CATALOGS - 41)) | (1usize << (CHARACTER - 41)) | (1usize << (CLONE - 41)) | (1usize << (CLOSE - 41)) | (1usize << (CLUSTER - 41)) | (1usize << (COLUMN - 41)) | (1usize << (COLUMNS - 41)) | (1usize << (COMMENT - 41)) | (1usize << (COMMIT - 41)) | (1usize << (COMMITTED - 41)) | (1usize << (COMPRESSION - 41)) | (1usize << (CONDITIONAL - 41)) | (1usize << (CONNECTION - 41)) | (1usize << (COPARTITION - 41)) | (1usize << (COPY - 41)) | (1usize << (COUNT - 41)) | (1usize << (CURRENT - 41)) | (1usize << (DATA - 41)) | (1usize << (DATABASE - 41)) | (1usize << (DATASHARE - 41)) | (1usize << (DATE - 41)) | (1usize << (DAY - 41)) | (1usize << (DAYS - 41)))) != 0) || ((((_la - 74)) & !0x3f) == 0 && ((1usize << (_la - 74)) & ((1usize << (DECLARE - 74)) | (1usize << (DEFAULT - 74)) | (1usize << (DEFINE - 74)) | (1usize << (DEFINER - 74)) | (1usize << (DELIMITER - 74)) | (1usize << (DENY - 74)) | (1usize << (DESC - 74)) | (1usize << (DESCRIBE - 74)) | (1usize << (DESCRIPTOR - 74)) | (1usize << (DISTRIBUTED - 74)) | (1usize << (DETACH - 74)) | (1usize << (DOUBLE - 74)) | (1usize << (EMPTY - 74)) | (1usize << (ENCODING - 74)) | (1usize << (END - 74)) | (1usize << (ERROR - 74)) | (1usize << (EXCLUDING - 74)) | (1usize << (EXECUTE - 74)) | (1usize << (EXPLAIN - 74)))) != 0) || ((((_la - 106)) & !0x3f) == 0 && ((1usize << (_la - 106)) & ((1usize << (EXTERNAL - 106)) | (1usize << (FETCH - 106)) | (1usize << (FILTER - 106)) | (1usize << (FINAL - 106)) | (1usize << (FIRST - 106)) | (1usize << (FOLLOWING - 106)) | (1usize << (FORMAT - 106)) | (1usize << (FUNCTIONS - 106)) | (1usize << (GRACE - 106)) | (1usize << (GRANT - 106)) | (1usize << (GRANTED - 106)) | (1usize << (GRANTS - 106)) | (1usize << (GRAPHVIZ - 106)) | (1usize << (GROUPS - 106)) | (1usize << (GZIP - 106)) | (1usize << (HOUR - 106)) | (1usize << (HOURS - 106)) | (1usize << (IF - 106)) | (1usize << (IGNORE - 106)))) != 0) || ((((_la - 138)) & !0x3f) == 0 && ((1usize << (_la - 138)) & ((1usize << (INCLUDING - 138)) | (1usize << (INITIAL - 138)) | (1usize << (INPUT - 138)) | (1usize << (INTEGER - 138)) | (1usize << (INTERVAL - 138)) | (1usize << (INVOKER - 138)) | (1usize << (IO - 138)) | (1usize << (ISOLATION - 138)) | (1usize << (JSON - 138)) | (1usize << (KEEP - 138)) | (1usize << (KEY - 138)) | (1usize << (KEYS - 138)) | (1usize << (LAMBDA - 138)) | (1usize << (LAST - 138)) | (1usize << (LATERAL - 138)) | (1usize << (LEADING - 138)) | (1usize << (LEVEL - 138)))) != 0) || ((((_la - 170)) & !0x3f) == 0 && ((1usize << (_la - 170)) & ((1usize << (LIBRARY - 170)) | (1usize << (LIMIT - 170)) | (1usize << (LOCAL - 170)) | (1usize << (LOCATION - 170)) | (1usize << (LOCK - 170)) | (1usize << (LOGICAL - 170)) | (1usize << (M - 170)) | (1usize << (MAP - 170)) | (1usize << (MASKING - 170)) | (1usize << (MATCH - 170)) | (1usize << (MATCHED - 170)) | (1usize << (MATCHES - 170)) | (1usize << (MATCH_RECOGNIZE - 170)) | (1usize << (MATERIALIZED - 170)) | (1usize << (MAX - 170)) | (1usize << (MEASURES - 170)) | (1usize << (MERGE - 170)) | (1usize << (MIN - 170)) | (1usize << (MINUS_KW - 170)) | (1usize << (MINUTE - 170)) | (1usize << (MINUTES - 170)) | (1usize << (MODEL - 170)) | (1usize << (MONTH - 170)) | (1usize << (MONTHS - 170)) | (1usize << (NEXT - 170)) | (1usize << (NFC - 170)) | (1usize << (NFD - 170)) | (1usize << (NFKC - 170)) | (1usize << (NFKD - 170)))) != 0) || ((((_la - 202)) & !0x3f) == 0 && ((1usize << (_la - 202)) & ((1usize << (NO - 202)) | (1usize << (NONE - 202)) | (1usize << (NULLS - 202)) | (1usize << (OBJECT - 202)) | (1usize << (OF - 202)) | (1usize << (OFFSET - 202)) | (1usize << (OMIT - 202)) | (1usize << (ONE - 202)) | (1usize << (ONLY - 202)) | (1usize << (OPTION - 202)) | (1usize << (ORDINALITY - 202)) | (1usize << (OUTPUT - 202)) | (1usize << (OVER - 202)) | (1usize << (OVERFLOW - 202)) | (1usize << (PARTITION - 202)) | (1usize << (PARTITIONS - 202)) | (1usize << (PASSING - 202)) | (1usize << (PAST - 202)) | (1usize << (PATH - 202)) | (1usize << (PATTERN - 202)) | (1usize << (PER - 202)) | (1usize << (PERIOD - 202)))) != 0) || ((((_la - 234)) & !0x3f) == 0 && ((1usize << (_la - 234)) & ((1usize << (PERMUTE - 234)) | (1usize << (POSITION - 234)) | (1usize << (PRECEDING - 234)) | (1usize << (PRECISION - 234)) | (1usize << (PROCEDURE - 234)) | (1usize << (PRIVILEGES - 234)) | (1usize << (PROPERTIES - 234)) | (1usize << (PRUNE - 234)) | (1usize << (QUOTES - 234)) | (1usize << (RANGE - 234)) | (1usize << (READ - 234)) | (1usize << (REFRESH - 234)) | (1usize << (RENAME - 234)) | (1usize << (REPEATABLE - 234)) | (1usize << (REPLACE - 234)) | (1usize << (RESET - 234)) | (1usize << (RESPECT - 234)) | (1usize << (RESTRICT - 234)) | (1usize << (RETURNING - 234)) | (1usize << (REVOKE - 234)) | (1usize << (RLS - 234)) | (1usize << (ROLE - 234)) | (1usize << (ROLES - 234)) | (1usize << (ROLLBACK - 234)) | (1usize << (ROLLUP - 234)) | (1usize << (ROW - 234)) | (1usize << (ROWS - 234)) | (1usize << (RUNNING - 234)))) != 0) || ((((_la - 266)) & !0x3f) == 0 && ((1usize << (_la - 266)) & ((1usize << (S - 266)) | (1usize << (SCALAR - 266)) | (1usize << (SEC - 266)) | (1usize << (SECOND - 266)) | (1usize << (SECONDS - 266)) | (1usize << (SCHEMA - 266)) | (1usize << (SCHEMAS - 266)) | (1usize << (SECURITY - 266)) | (1usize << (SEEK - 266)) | (1usize << (SEMI - 266)) | (1usize << (SERIALIZABLE - 266)) | (1usize << (SESSION - 266)) | (1usize << (SET - 266)) | (1usize << (SETS - 266)) | (1usize << (SHOW - 266)) | (1usize << (SNAPSHOT - 266)) | (1usize << (SOME - 266)) | (1usize << (START - 266)) | (1usize << (STATS - 266)) | (1usize << (STRUCT - 266)) | (1usize << (SUBSET - 266)) | (1usize << (SUBSTRING - 266)) | (1usize << (SYSTEM - 266)) | (1usize << (SYSTEM_TIME - 266)))) != 0) || ((((_la - 298)) & !0x3f) == 0 && ((1usize << (_la - 298)) & ((1usize << (TABLES - 298)) | (1usize << (TABLESAMPLE - 298)) | (1usize << (TEMP - 298)) | (1usize << (TEMPORARY - 298)) | (1usize << (TEXT - 298)) | (1usize << (STRING_KW - 298)) | (1usize << (TIES - 298)) | (1usize << (TIME - 298)) | (1usize << (TIMESTAMP - 298)) | (1usize << (TO - 298)) | (1usize << (TRAILING - 298)) | (1usize << (TRANSACTION - 298)) | (1usize << (TRUNCATE - 298)) | (1usize << (TRY_CAST - 298)) | (1usize << (TUPLE - 298)) | (1usize << (TYPE - 298)) | (1usize << (UNBOUNDED - 298)) | (1usize << (UNCOMMITTED - 298)) | (1usize << (UNCONDITIONAL - 298)) | (1usize << (UNIQUE - 298)) | (1usize << (UNKNOWN - 298)) | (1usize << (UNLOAD - 298)) | (1usize << (UNMATCHED - 298)))) != 0) || ((((_la - 330)) & !0x3f) == 0 && ((1usize << (_la - 330)) & ((1usize << (UPDATE - 330)) | (1usize << (USE - 330)) | (1usize << (USER - 330)) | (1usize << (UTF16 - 330)) | (1usize << (UTF32 - 330)) | (1usize << (UTF8 - 330)) | (1usize << (VACUUM - 330)) | (1usize << (VALIDATE - 330)) | (1usize << (VALUE - 330)) | (1usize << (VARYING - 330)) | (1usize << (VERBOSE - 330)) | (1usize << (VERSION - 330)) | (1usize << (VIEW - 330)) | (1usize << (WEEK - 330)) | (1usize << (WINDOW - 330)) | (1usize << (WITHIN - 330)) | (1usize << (WITHOUT - 330)) | (1usize << (WORK - 330)) | (1usize << (WRAPPER - 330)) | (1usize << (WRITE - 330)) | (1usize << (XZ - 330)) | (1usize << (YEAR - 330)) | (1usize << (YEARS - 330)) | (1usize << (ZONE - 330)) | (1usize << (ZSTD - 330)))) != 0) || _la==IDENTIFIER || _la==QUOTED_IDENTIFIER {
						{
						{
						/*InvokeRule property*/
						recog.base.set_state(996);
						recog.property()?;

						}
						}
						recog.base.set_state(1001);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					recog.base.set_state(1002);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				2 =>{
					let tmp = DefaultPropertyContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					/*InvokeRule propertyKey*/
					recog.base.set_state(1004);
					recog.propertyKey()?;

					recog.base.set_state(1005);
					recog.base.match_token(EQ,&mut recog.err_handler)?;

					/*InvokeRule propertyValue*/
					recog.base.set_state(1006);
					recog.propertyValue()?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- propertyKey ----------------
pub type PropertyKeyContextAll<'input> = PropertyKeyContext<'input>;


pub type PropertyKeyContext<'input> = BaseParserRuleContext<'input,PropertyKeyContextExt<'input>>;

#[derive(Clone)]
pub struct PropertyKeyContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PropertyKeyContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PropertyKeyContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_propertyKey(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_propertyKey(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PropertyKeyContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_propertyKey(self);
	}
}

impl<'input> CustomRuleContext<'input> for PropertyKeyContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_propertyKey }
	//fn type_rule_index() -> usize where Self: Sized { RULE_propertyKey }
}
antlr_rust::tid!{PropertyKeyContextExt<'a>}

impl<'input> PropertyKeyContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PropertyKeyContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PropertyKeyContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait PropertyKeyContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PropertyKeyContextExt<'input>>{

fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> PropertyKeyContextAttrs<'input> for PropertyKeyContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn propertyKey(&mut self,)
	-> Result<Rc<PropertyKeyContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PropertyKeyContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 42, RULE_propertyKey);
        let mut _localctx: Rc<PropertyKeyContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule identifier*/
			recog.base.set_state(1010);
			recog.identifier()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- propertyValue ----------------
#[derive(Debug)]
pub enum PropertyValueContextAll<'input>{
	ExpressionPropertyValueContext(ExpressionPropertyValueContext<'input>),
	DefaultPropertyValueContext(DefaultPropertyValueContext<'input>),
	IdentifierPropertyValueContext(IdentifierPropertyValueContext<'input>),
Error(PropertyValueContext<'input>)
}
antlr_rust::tid!{PropertyValueContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for PropertyValueContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for PropertyValueContextAll<'input>{}

impl<'input> Deref for PropertyValueContextAll<'input>{
	type Target = dyn PropertyValueContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use PropertyValueContextAll::*;
		match self{
			ExpressionPropertyValueContext(inner) => inner,
			DefaultPropertyValueContext(inner) => inner,
			IdentifierPropertyValueContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PropertyValueContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PropertyValueContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type PropertyValueContext<'input> = BaseParserRuleContext<'input,PropertyValueContextExt<'input>>;

#[derive(Clone)]
pub struct PropertyValueContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PropertyValueContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PropertyValueContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PropertyValueContext<'input>{
}

impl<'input> CustomRuleContext<'input> for PropertyValueContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_propertyValue }
	//fn type_rule_index() -> usize where Self: Sized { RULE_propertyValue }
}
antlr_rust::tid!{PropertyValueContextExt<'a>}

impl<'input> PropertyValueContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PropertyValueContextAll<'input>> {
		Rc::new(
		PropertyValueContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PropertyValueContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait PropertyValueContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PropertyValueContextExt<'input>>{


}

impl<'input> PropertyValueContextAttrs<'input> for PropertyValueContext<'input>{}

pub type ExpressionPropertyValueContext<'input> = BaseParserRuleContext<'input,ExpressionPropertyValueContextExt<'input>>;

pub trait ExpressionPropertyValueContextAttrs<'input>: TrinoParserContext<'input>{
	fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> ExpressionPropertyValueContextAttrs<'input> for ExpressionPropertyValueContext<'input>{}

pub struct ExpressionPropertyValueContextExt<'input>{
	base:PropertyValueContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ExpressionPropertyValueContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ExpressionPropertyValueContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ExpressionPropertyValueContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_expressionPropertyValue(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_expressionPropertyValue(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ExpressionPropertyValueContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_expressionPropertyValue(self);
	}
}

impl<'input> CustomRuleContext<'input> for ExpressionPropertyValueContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_propertyValue }
	//fn type_rule_index() -> usize where Self: Sized { RULE_propertyValue }
}

impl<'input> Borrow<PropertyValueContextExt<'input>> for ExpressionPropertyValueContext<'input>{
	fn borrow(&self) -> &PropertyValueContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PropertyValueContextExt<'input>> for ExpressionPropertyValueContext<'input>{
	fn borrow_mut(&mut self) -> &mut PropertyValueContextExt<'input> { &mut self.base }
}

impl<'input> PropertyValueContextAttrs<'input> for ExpressionPropertyValueContext<'input> {}

impl<'input> ExpressionPropertyValueContextExt<'input>{
	fn new(ctx: &dyn PropertyValueContextAttrs<'input>) -> Rc<PropertyValueContextAll<'input>>  {
		Rc::new(
			PropertyValueContextAll::ExpressionPropertyValueContext(
				BaseParserRuleContext::copy_from(ctx,ExpressionPropertyValueContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type DefaultPropertyValueContext<'input> = BaseParserRuleContext<'input,DefaultPropertyValueContextExt<'input>>;

pub trait DefaultPropertyValueContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DEFAULT
	/// Returns `None` if there is no child corresponding to token DEFAULT
	fn DEFAULT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DEFAULT, 0)
	}
}

impl<'input> DefaultPropertyValueContextAttrs<'input> for DefaultPropertyValueContext<'input>{}

pub struct DefaultPropertyValueContextExt<'input>{
	base:PropertyValueContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DefaultPropertyValueContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DefaultPropertyValueContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DefaultPropertyValueContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_defaultPropertyValue(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_defaultPropertyValue(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DefaultPropertyValueContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_defaultPropertyValue(self);
	}
}

impl<'input> CustomRuleContext<'input> for DefaultPropertyValueContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_propertyValue }
	//fn type_rule_index() -> usize where Self: Sized { RULE_propertyValue }
}

impl<'input> Borrow<PropertyValueContextExt<'input>> for DefaultPropertyValueContext<'input>{
	fn borrow(&self) -> &PropertyValueContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PropertyValueContextExt<'input>> for DefaultPropertyValueContext<'input>{
	fn borrow_mut(&mut self) -> &mut PropertyValueContextExt<'input> { &mut self.base }
}

impl<'input> PropertyValueContextAttrs<'input> for DefaultPropertyValueContext<'input> {}

impl<'input> DefaultPropertyValueContextExt<'input>{
	fn new(ctx: &dyn PropertyValueContextAttrs<'input>) -> Rc<PropertyValueContextAll<'input>>  {
		Rc::new(
			PropertyValueContextAll::DefaultPropertyValueContext(
				BaseParserRuleContext::copy_from(ctx,DefaultPropertyValueContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type IdentifierPropertyValueContext<'input> = BaseParserRuleContext<'input,IdentifierPropertyValueContextExt<'input>>;

pub trait IdentifierPropertyValueContextAttrs<'input>: TrinoParserContext<'input>{
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> IdentifierPropertyValueContextAttrs<'input> for IdentifierPropertyValueContext<'input>{}

pub struct IdentifierPropertyValueContextExt<'input>{
	base:PropertyValueContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{IdentifierPropertyValueContextExt<'a>}

impl<'input> TrinoParserContext<'input> for IdentifierPropertyValueContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for IdentifierPropertyValueContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_identifierPropertyValue(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_identifierPropertyValue(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for IdentifierPropertyValueContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_identifierPropertyValue(self);
	}
}

impl<'input> CustomRuleContext<'input> for IdentifierPropertyValueContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_propertyValue }
	//fn type_rule_index() -> usize where Self: Sized { RULE_propertyValue }
}

impl<'input> Borrow<PropertyValueContextExt<'input>> for IdentifierPropertyValueContext<'input>{
	fn borrow(&self) -> &PropertyValueContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PropertyValueContextExt<'input>> for IdentifierPropertyValueContext<'input>{
	fn borrow_mut(&mut self) -> &mut PropertyValueContextExt<'input> { &mut self.base }
}

impl<'input> PropertyValueContextAttrs<'input> for IdentifierPropertyValueContext<'input> {}

impl<'input> IdentifierPropertyValueContextExt<'input>{
	fn new(ctx: &dyn PropertyValueContextAttrs<'input>) -> Rc<PropertyValueContextAll<'input>>  {
		Rc::new(
			PropertyValueContextAll::IdentifierPropertyValueContext(
				BaseParserRuleContext::copy_from(ctx,IdentifierPropertyValueContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn propertyValue(&mut self,)
	-> Result<Rc<PropertyValueContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PropertyValueContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 44, RULE_propertyValue);
        let mut _localctx: Rc<PropertyValueContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(1015);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(99,&mut recog.base)? {
				1 =>{
					let tmp = DefaultPropertyValueContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					recog.base.set_state(1012);
					recog.base.match_token(DEFAULT,&mut recog.err_handler)?;

					}
				}
			,
				2 =>{
					let tmp = IdentifierPropertyValueContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					/*InvokeRule identifier*/
					recog.base.set_state(1013);
					recog.identifier()?;

					}
				}
			,
				3 =>{
					let tmp = ExpressionPropertyValueContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 3);
					_localctx = tmp;
					{
					/*InvokeRule expression*/
					recog.base.set_state(1014);
					recog.expression()?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- queryNoWith ----------------
pub type QueryNoWithContextAll<'input> = QueryNoWithContext<'input>;


pub type QueryNoWithContext<'input> = BaseParserRuleContext<'input,QueryNoWithContextExt<'input>>;

#[derive(Clone)]
pub struct QueryNoWithContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for QueryNoWithContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QueryNoWithContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_queryNoWith(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_queryNoWith(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QueryNoWithContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_queryNoWith(self);
	}
}

impl<'input> CustomRuleContext<'input> for QueryNoWithContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_queryNoWith }
	//fn type_rule_index() -> usize where Self: Sized { RULE_queryNoWith }
}
antlr_rust::tid!{QueryNoWithContextExt<'a>}

impl<'input> QueryNoWithContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<QueryNoWithContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,QueryNoWithContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait QueryNoWithContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<QueryNoWithContextExt<'input>>{

fn queryLimit(&self) -> Option<Rc<QueryLimitContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> QueryNoWithContextAttrs<'input> for QueryNoWithContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn queryNoWith(&mut self,)
	-> Result<Rc<QueryNoWithContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = QueryNoWithContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 46, RULE_queryNoWith);
        let mut _localctx: Rc<QueryNoWithContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule queryLimit*/
			recog.base.set_state(1017);
			recog.queryLimit()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- queryLimit ----------------
pub type QueryLimitContextAll<'input> = QueryLimitContext<'input>;


pub type QueryLimitContext<'input> = BaseParserRuleContext<'input,QueryLimitContextExt<'input>>;

#[derive(Clone)]
pub struct QueryLimitContextExt<'input>{
	pub offset: Option<Rc<RowCountContextAll<'input>>>,
	pub limit: Option<Rc<LimitRowCountContextAll<'input>>>,
	pub fetchFirst: Option<Rc<RowCountContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for QueryLimitContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QueryLimitContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_queryLimit(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_queryLimit(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QueryLimitContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_queryLimit(self);
	}
}

impl<'input> CustomRuleContext<'input> for QueryLimitContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_queryLimit }
	//fn type_rule_index() -> usize where Self: Sized { RULE_queryLimit }
}
antlr_rust::tid!{QueryLimitContextExt<'a>}

impl<'input> QueryLimitContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<QueryLimitContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,QueryLimitContextExt{
				offset: None, limit: None, fetchFirst: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait QueryLimitContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<QueryLimitContextExt<'input>>{

fn queryLimitTarget(&self) -> Option<Rc<QueryLimitTargetContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token OFFSET
/// Returns `None` if there is no child corresponding to token OFFSET
fn OFFSET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(OFFSET, 0)
}
fn rowCount_all(&self) ->  Vec<Rc<RowCountContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn rowCount(&self, i: usize) -> Option<Rc<RowCountContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves first TerminalNode corresponding to token LIMIT
/// Returns `None` if there is no child corresponding to token LIMIT
fn LIMIT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LIMIT, 0)
}
/// Retrieves first TerminalNode corresponding to token FETCH
/// Returns `None` if there is no child corresponding to token FETCH
fn FETCH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FETCH, 0)
}
/// Retrieves first TerminalNode corresponding to token FIRST
/// Returns `None` if there is no child corresponding to token FIRST
fn FIRST(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FIRST, 0)
}
/// Retrieves first TerminalNode corresponding to token ROWS
/// Returns `None` if there is no child corresponding to token ROWS
fn ROWS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ROWS, 0)
}
/// Retrieves first TerminalNode corresponding to token ONLY
/// Returns `None` if there is no child corresponding to token ONLY
fn ONLY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ONLY, 0)
}
fn rowOrRows(&self) -> Option<Rc<RowOrRowsContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn limitRowCount(&self) -> Option<Rc<LimitRowCountContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> QueryLimitContextAttrs<'input> for QueryLimitContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn queryLimit(&mut self,)
	-> Result<Rc<QueryLimitContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = QueryLimitContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 48, RULE_queryLimit);
        let mut _localctx: Rc<QueryLimitContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule queryLimitTarget*/
			recog.base.set_state(1019);
			recog.queryLimitTarget()?;

			recog.base.set_state(1025);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==OFFSET {
				{
				recog.base.set_state(1020);
				recog.base.match_token(OFFSET,&mut recog.err_handler)?;

				/*InvokeRule rowCount*/
				recog.base.set_state(1021);
				let tmp = recog.rowCount()?;
				 cast_mut::<_,QueryLimitContext >(&mut _localctx).offset = Some(tmp.clone());
				  

				recog.base.set_state(1023);
				recog.err_handler.sync(&mut recog.base)?;
				_la = recog.base.input.la(1);
				if _la==ROW || _la==ROWS {
					{
					/*InvokeRule rowOrRows*/
					recog.base.set_state(1022);
					recog.rowOrRows()?;

					}
				}

				}
			}

			recog.base.set_state(1035);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 LIMIT 
				=> {
			    	{
			    	{
			    	recog.base.set_state(1027);
			    	recog.base.match_token(LIMIT,&mut recog.err_handler)?;

			    	/*InvokeRule limitRowCount*/
			    	recog.base.set_state(1028);
			    	let tmp = recog.limitRowCount()?;
			    	 cast_mut::<_,QueryLimitContext >(&mut _localctx).limit = Some(tmp.clone());
			    	  

			    	}
			    	}
			    }

			 FETCH 
				=> {
			    	{
			    	{
			    	recog.base.set_state(1029);
			    	recog.base.match_token(FETCH,&mut recog.err_handler)?;

			    	recog.base.set_state(1030);
			    	recog.base.match_token(FIRST,&mut recog.err_handler)?;

			    	/*InvokeRule rowCount*/
			    	recog.base.set_state(1031);
			    	let tmp = recog.rowCount()?;
			    	 cast_mut::<_,QueryLimitContext >(&mut _localctx).fetchFirst = Some(tmp.clone());
			    	  

			    	recog.base.set_state(1032);
			    	recog.base.match_token(ROWS,&mut recog.err_handler)?;

			    	recog.base.set_state(1033);
			    	recog.base.match_token(ONLY,&mut recog.err_handler)?;

			    	}
			    	}
			    }

			 EOF | WITH | RPAREN | SEMI_COLON 
				=> {
			    }

				_ => {}
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- queryLimitTarget ----------------
#[derive(Debug)]
pub enum QueryLimitTargetContextAll<'input>{
	QueryLimitTargetDefaultContext(QueryLimitTargetDefaultContext<'input>),
Error(QueryLimitTargetContext<'input>)
}
antlr_rust::tid!{QueryLimitTargetContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for QueryLimitTargetContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for QueryLimitTargetContextAll<'input>{}

impl<'input> Deref for QueryLimitTargetContextAll<'input>{
	type Target = dyn QueryLimitTargetContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use QueryLimitTargetContextAll::*;
		match self{
			QueryLimitTargetDefaultContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QueryLimitTargetContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QueryLimitTargetContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type QueryLimitTargetContext<'input> = BaseParserRuleContext<'input,QueryLimitTargetContextExt<'input>>;

#[derive(Clone)]
pub struct QueryLimitTargetContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for QueryLimitTargetContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QueryLimitTargetContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QueryLimitTargetContext<'input>{
}

impl<'input> CustomRuleContext<'input> for QueryLimitTargetContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_queryLimitTarget }
	//fn type_rule_index() -> usize where Self: Sized { RULE_queryLimitTarget }
}
antlr_rust::tid!{QueryLimitTargetContextExt<'a>}

impl<'input> QueryLimitTargetContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<QueryLimitTargetContextAll<'input>> {
		Rc::new(
		QueryLimitTargetContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,QueryLimitTargetContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait QueryLimitTargetContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<QueryLimitTargetContextExt<'input>>{


}

impl<'input> QueryLimitTargetContextAttrs<'input> for QueryLimitTargetContext<'input>{}

pub type QueryLimitTargetDefaultContext<'input> = BaseParserRuleContext<'input,QueryLimitTargetDefaultContextExt<'input>>;

pub trait QueryLimitTargetDefaultContextAttrs<'input>: TrinoParserContext<'input>{
	fn queryTerm(&self) -> Option<Rc<QueryTermContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn orderBy(&self) -> Option<Rc<OrderByContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> QueryLimitTargetDefaultContextAttrs<'input> for QueryLimitTargetDefaultContext<'input>{}

pub struct QueryLimitTargetDefaultContextExt<'input>{
	base:QueryLimitTargetContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{QueryLimitTargetDefaultContextExt<'a>}

impl<'input> TrinoParserContext<'input> for QueryLimitTargetDefaultContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QueryLimitTargetDefaultContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_queryLimitTargetDefault(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_queryLimitTargetDefault(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QueryLimitTargetDefaultContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_queryLimitTargetDefault(self);
	}
}

impl<'input> CustomRuleContext<'input> for QueryLimitTargetDefaultContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_queryLimitTarget }
	//fn type_rule_index() -> usize where Self: Sized { RULE_queryLimitTarget }
}

impl<'input> Borrow<QueryLimitTargetContextExt<'input>> for QueryLimitTargetDefaultContext<'input>{
	fn borrow(&self) -> &QueryLimitTargetContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<QueryLimitTargetContextExt<'input>> for QueryLimitTargetDefaultContext<'input>{
	fn borrow_mut(&mut self) -> &mut QueryLimitTargetContextExt<'input> { &mut self.base }
}

impl<'input> QueryLimitTargetContextAttrs<'input> for QueryLimitTargetDefaultContext<'input> {}

impl<'input> QueryLimitTargetDefaultContextExt<'input>{
	fn new(ctx: &dyn QueryLimitTargetContextAttrs<'input>) -> Rc<QueryLimitTargetContextAll<'input>>  {
		Rc::new(
			QueryLimitTargetContextAll::QueryLimitTargetDefaultContext(
				BaseParserRuleContext::copy_from(ctx,QueryLimitTargetDefaultContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn queryLimitTarget(&mut self,)
	-> Result<Rc<QueryLimitTargetContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = QueryLimitTargetContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 50, RULE_queryLimitTarget);
        let mut _localctx: Rc<QueryLimitTargetContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let tmp = QueryLimitTargetDefaultContextExt::new(&**_localctx);
			recog.base.enter_outer_alt(Some(tmp.clone()), 1);
			_localctx = tmp;
			{
			/*InvokeRule queryTerm*/
			recog.base.set_state(1037);
			recog.queryTerm()?;

			recog.base.set_state(1039);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==ORDER {
				{
				/*InvokeRule orderBy*/
				recog.base.set_state(1038);
				recog.orderBy()?;

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- rowOrRows ----------------
pub type RowOrRowsContextAll<'input> = RowOrRowsContext<'input>;


pub type RowOrRowsContext<'input> = BaseParserRuleContext<'input,RowOrRowsContextExt<'input>>;

#[derive(Clone)]
pub struct RowOrRowsContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for RowOrRowsContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RowOrRowsContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_rowOrRows(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_rowOrRows(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RowOrRowsContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_rowOrRows(self);
	}
}

impl<'input> CustomRuleContext<'input> for RowOrRowsContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_rowOrRows }
	//fn type_rule_index() -> usize where Self: Sized { RULE_rowOrRows }
}
antlr_rust::tid!{RowOrRowsContextExt<'a>}

impl<'input> RowOrRowsContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<RowOrRowsContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,RowOrRowsContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait RowOrRowsContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<RowOrRowsContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token ROW
/// Returns `None` if there is no child corresponding to token ROW
fn ROW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ROW, 0)
}
/// Retrieves first TerminalNode corresponding to token ROWS
/// Returns `None` if there is no child corresponding to token ROWS
fn ROWS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ROWS, 0)
}

}

impl<'input> RowOrRowsContextAttrs<'input> for RowOrRowsContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn rowOrRows(&mut self,)
	-> Result<Rc<RowOrRowsContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = RowOrRowsContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 52, RULE_rowOrRows);
        let mut _localctx: Rc<RowOrRowsContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1041);
			_la = recog.base.input.la(1);
			if { !(_la==ROW || _la==ROWS) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- limitRowCount ----------------
pub type LimitRowCountContextAll<'input> = LimitRowCountContext<'input>;


pub type LimitRowCountContext<'input> = BaseParserRuleContext<'input,LimitRowCountContextExt<'input>>;

#[derive(Clone)]
pub struct LimitRowCountContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for LimitRowCountContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for LimitRowCountContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_limitRowCount(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_limitRowCount(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for LimitRowCountContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_limitRowCount(self);
	}
}

impl<'input> CustomRuleContext<'input> for LimitRowCountContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_limitRowCount }
	//fn type_rule_index() -> usize where Self: Sized { RULE_limitRowCount }
}
antlr_rust::tid!{LimitRowCountContextExt<'a>}

impl<'input> LimitRowCountContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<LimitRowCountContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,LimitRowCountContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait LimitRowCountContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<LimitRowCountContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token ALL
/// Returns `None` if there is no child corresponding to token ALL
fn ALL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ALL, 0)
}
fn rowCount(&self) -> Option<Rc<RowCountContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> LimitRowCountContextAttrs<'input> for LimitRowCountContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn limitRowCount(&mut self,)
	-> Result<Rc<LimitRowCountContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = LimitRowCountContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 54, RULE_limitRowCount);
        let mut _localctx: Rc<LimitRowCountContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(1045);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 ALL 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(1043);
					recog.base.match_token(ALL,&mut recog.err_handler)?;

					}
				}

			 QUESTION_MARK | INTEGER_VALUE 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					/*InvokeRule rowCount*/
					recog.base.set_state(1044);
					recog.rowCount()?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- rowCount ----------------
pub type RowCountContextAll<'input> = RowCountContext<'input>;


pub type RowCountContext<'input> = BaseParserRuleContext<'input,RowCountContextExt<'input>>;

#[derive(Clone)]
pub struct RowCountContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for RowCountContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RowCountContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_rowCount(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_rowCount(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RowCountContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_rowCount(self);
	}
}

impl<'input> CustomRuleContext<'input> for RowCountContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_rowCount }
	//fn type_rule_index() -> usize where Self: Sized { RULE_rowCount }
}
antlr_rust::tid!{RowCountContextExt<'a>}

impl<'input> RowCountContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<RowCountContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,RowCountContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait RowCountContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<RowCountContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token INTEGER_VALUE
/// Returns `None` if there is no child corresponding to token INTEGER_VALUE
fn INTEGER_VALUE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(INTEGER_VALUE, 0)
}
/// Retrieves first TerminalNode corresponding to token QUESTION_MARK
/// Returns `None` if there is no child corresponding to token QUESTION_MARK
fn QUESTION_MARK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(QUESTION_MARK, 0)
}

}

impl<'input> RowCountContextAttrs<'input> for RowCountContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn rowCount(&mut self,)
	-> Result<Rc<RowCountContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = RowCountContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 56, RULE_rowCount);
        let mut _localctx: Rc<RowCountContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1047);
			_la = recog.base.input.la(1);
			if { !(_la==QUESTION_MARK || _la==INTEGER_VALUE) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- queryTerm ----------------
pub type QueryTermContextAll<'input> = QueryTermContext<'input>;


pub type QueryTermContext<'input> = BaseParserRuleContext<'input,QueryTermContextExt<'input>>;

#[derive(Clone)]
pub struct QueryTermContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for QueryTermContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QueryTermContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_queryTerm(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_queryTerm(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QueryTermContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_queryTerm(self);
	}
}

impl<'input> CustomRuleContext<'input> for QueryTermContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_queryTerm }
	//fn type_rule_index() -> usize where Self: Sized { RULE_queryTerm }
}
antlr_rust::tid!{QueryTermContextExt<'a>}

impl<'input> QueryTermContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<QueryTermContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,QueryTermContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait QueryTermContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<QueryTermContextExt<'input>>{

fn setOperation(&self) -> Option<Rc<SetOperationContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> QueryTermContextAttrs<'input> for QueryTermContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn queryTerm(&mut self,)
	-> Result<Rc<QueryTermContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = QueryTermContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 58, RULE_queryTerm);
        let mut _localctx: Rc<QueryTermContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule setOperation*/
			recog.base.set_state(1049);
			recog.setOperation()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- setOperation ----------------
pub type SetOperationContextAll<'input> = SetOperationContext<'input>;


pub type SetOperationContext<'input> = BaseParserRuleContext<'input,SetOperationContextExt<'input>>;

#[derive(Clone)]
pub struct SetOperationContextExt<'input>{
	pub left: Option<Rc<SetOperationIntersectContextAll<'input>>>,
	pub setOperationIntersect: Option<Rc<SetOperationIntersectContextAll<'input>>>,
	pub right:Vec<Rc<SetOperationIntersectContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SetOperationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SetOperationContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_setOperation(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_setOperation(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SetOperationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_setOperation(self);
	}
}

impl<'input> CustomRuleContext<'input> for SetOperationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_setOperation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_setOperation }
}
antlr_rust::tid!{SetOperationContextExt<'a>}

impl<'input> SetOperationContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SetOperationContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SetOperationContextExt{
				left: None, setOperationIntersect: None, 
				right: Vec::new(), 
				ph:PhantomData
			}),
		)
	}
}

pub trait SetOperationContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SetOperationContextExt<'input>>{

fn setOperationIntersect_all(&self) ->  Vec<Rc<SetOperationIntersectContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn setOperationIntersect(&self, i: usize) -> Option<Rc<SetOperationIntersectContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
fn setOperator_all(&self) ->  Vec<Rc<SetOperatorContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn setOperator(&self, i: usize) -> Option<Rc<SetOperatorContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}

}

impl<'input> SetOperationContextAttrs<'input> for SetOperationContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn setOperation(&mut self,)
	-> Result<Rc<SetOperationContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SetOperationContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 60, RULE_setOperation);
        let mut _localctx: Rc<SetOperationContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule setOperationIntersect*/
			recog.base.set_state(1051);
			let tmp = recog.setOperationIntersect()?;
			 cast_mut::<_,SetOperationContext >(&mut _localctx).left = Some(tmp.clone());
			  

			recog.base.set_state(1057);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			while _la==EXCEPT || _la==MINUS_KW || _la==UNION {
				{
				{
				/*InvokeRule setOperator*/
				recog.base.set_state(1052);
				recog.setOperator()?;

				/*InvokeRule setOperationIntersect*/
				recog.base.set_state(1053);
				let tmp = recog.setOperationIntersect()?;
				 cast_mut::<_,SetOperationContext >(&mut _localctx).setOperationIntersect = Some(tmp.clone());
				  

				let temp =  cast_mut::<_,SetOperationContext >(&mut _localctx).setOperationIntersect.clone().unwrap()
				 ;
				 cast_mut::<_,SetOperationContext >(&mut _localctx).right.push(temp);
				  
				}
				}
				recog.base.set_state(1059);
				recog.err_handler.sync(&mut recog.base)?;
				_la = recog.base.input.la(1);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- setOperator ----------------
pub type SetOperatorContextAll<'input> = SetOperatorContext<'input>;


pub type SetOperatorContext<'input> = BaseParserRuleContext<'input,SetOperatorContextExt<'input>>;

#[derive(Clone)]
pub struct SetOperatorContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SetOperatorContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SetOperatorContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_setOperator(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_setOperator(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SetOperatorContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_setOperator(self);
	}
}

impl<'input> CustomRuleContext<'input> for SetOperatorContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_setOperator }
	//fn type_rule_index() -> usize where Self: Sized { RULE_setOperator }
}
antlr_rust::tid!{SetOperatorContextExt<'a>}

impl<'input> SetOperatorContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SetOperatorContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SetOperatorContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait SetOperatorContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SetOperatorContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token UNION
/// Returns `None` if there is no child corresponding to token UNION
fn UNION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UNION, 0)
}
/// Retrieves first TerminalNode corresponding to token EXCEPT
/// Returns `None` if there is no child corresponding to token EXCEPT
fn EXCEPT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EXCEPT, 0)
}
/// Retrieves first TerminalNode corresponding to token MINUS_KW
/// Returns `None` if there is no child corresponding to token MINUS_KW
fn MINUS_KW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MINUS_KW, 0)
}
fn setQuantifier(&self) -> Option<Rc<SetQuantifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> SetOperatorContextAttrs<'input> for SetOperatorContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn setOperator(&mut self,)
	-> Result<Rc<SetOperatorContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SetOperatorContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 62, RULE_setOperator);
        let mut _localctx: Rc<SetOperatorContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1060);
			_la = recog.base.input.la(1);
			if { !(_la==EXCEPT || _la==MINUS_KW || _la==UNION) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			recog.base.set_state(1062);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==ALL || _la==DISTINCT {
				{
				/*InvokeRule setQuantifier*/
				recog.base.set_state(1061);
				recog.setQuantifier()?;

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- setOperationIntersect ----------------
pub type SetOperationIntersectContextAll<'input> = SetOperationIntersectContext<'input>;


pub type SetOperationIntersectContext<'input> = BaseParserRuleContext<'input,SetOperationIntersectContextExt<'input>>;

#[derive(Clone)]
pub struct SetOperationIntersectContextExt<'input>{
	pub left: Option<Rc<QueryPrimaryContextAll<'input>>>,
	pub queryPrimary: Option<Rc<QueryPrimaryContextAll<'input>>>,
	pub right:Vec<Rc<QueryPrimaryContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SetOperationIntersectContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SetOperationIntersectContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_setOperationIntersect(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_setOperationIntersect(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SetOperationIntersectContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_setOperationIntersect(self);
	}
}

impl<'input> CustomRuleContext<'input> for SetOperationIntersectContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_setOperationIntersect }
	//fn type_rule_index() -> usize where Self: Sized { RULE_setOperationIntersect }
}
antlr_rust::tid!{SetOperationIntersectContextExt<'a>}

impl<'input> SetOperationIntersectContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SetOperationIntersectContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SetOperationIntersectContextExt{
				left: None, queryPrimary: None, 
				right: Vec::new(), 
				ph:PhantomData
			}),
		)
	}
}

pub trait SetOperationIntersectContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SetOperationIntersectContextExt<'input>>{

fn queryPrimary_all(&self) ->  Vec<Rc<QueryPrimaryContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn queryPrimary(&self, i: usize) -> Option<Rc<QueryPrimaryContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
fn setIntersectOperator_all(&self) ->  Vec<Rc<SetIntersectOperatorContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn setIntersectOperator(&self, i: usize) -> Option<Rc<SetIntersectOperatorContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}

}

impl<'input> SetOperationIntersectContextAttrs<'input> for SetOperationIntersectContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn setOperationIntersect(&mut self,)
	-> Result<Rc<SetOperationIntersectContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SetOperationIntersectContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 64, RULE_setOperationIntersect);
        let mut _localctx: Rc<SetOperationIntersectContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule queryPrimary*/
			recog.base.set_state(1064);
			let tmp = recog.queryPrimary()?;
			 cast_mut::<_,SetOperationIntersectContext >(&mut _localctx).left = Some(tmp.clone());
			  

			recog.base.set_state(1070);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			while _la==INTERSECT {
				{
				{
				/*InvokeRule setIntersectOperator*/
				recog.base.set_state(1065);
				recog.setIntersectOperator()?;

				/*InvokeRule queryPrimary*/
				recog.base.set_state(1066);
				let tmp = recog.queryPrimary()?;
				 cast_mut::<_,SetOperationIntersectContext >(&mut _localctx).queryPrimary = Some(tmp.clone());
				  

				let temp =  cast_mut::<_,SetOperationIntersectContext >(&mut _localctx).queryPrimary.clone().unwrap()
				 ;
				 cast_mut::<_,SetOperationIntersectContext >(&mut _localctx).right.push(temp);
				  
				}
				}
				recog.base.set_state(1072);
				recog.err_handler.sync(&mut recog.base)?;
				_la = recog.base.input.la(1);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- setIntersectOperator ----------------
pub type SetIntersectOperatorContextAll<'input> = SetIntersectOperatorContext<'input>;


pub type SetIntersectOperatorContext<'input> = BaseParserRuleContext<'input,SetIntersectOperatorContextExt<'input>>;

#[derive(Clone)]
pub struct SetIntersectOperatorContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SetIntersectOperatorContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SetIntersectOperatorContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_setIntersectOperator(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_setIntersectOperator(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SetIntersectOperatorContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_setIntersectOperator(self);
	}
}

impl<'input> CustomRuleContext<'input> for SetIntersectOperatorContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_setIntersectOperator }
	//fn type_rule_index() -> usize where Self: Sized { RULE_setIntersectOperator }
}
antlr_rust::tid!{SetIntersectOperatorContextExt<'a>}

impl<'input> SetIntersectOperatorContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SetIntersectOperatorContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SetIntersectOperatorContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait SetIntersectOperatorContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SetIntersectOperatorContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token INTERSECT
/// Returns `None` if there is no child corresponding to token INTERSECT
fn INTERSECT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(INTERSECT, 0)
}
fn setQuantifier(&self) -> Option<Rc<SetQuantifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> SetIntersectOperatorContextAttrs<'input> for SetIntersectOperatorContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn setIntersectOperator(&mut self,)
	-> Result<Rc<SetIntersectOperatorContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SetIntersectOperatorContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 66, RULE_setIntersectOperator);
        let mut _localctx: Rc<SetIntersectOperatorContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1073);
			recog.base.match_token(INTERSECT,&mut recog.err_handler)?;

			recog.base.set_state(1075);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==ALL || _la==DISTINCT {
				{
				/*InvokeRule setQuantifier*/
				recog.base.set_state(1074);
				recog.setQuantifier()?;

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- setQuantifier ----------------
pub type SetQuantifierContextAll<'input> = SetQuantifierContext<'input>;


pub type SetQuantifierContext<'input> = BaseParserRuleContext<'input,SetQuantifierContextExt<'input>>;

#[derive(Clone)]
pub struct SetQuantifierContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SetQuantifierContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SetQuantifierContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_setQuantifier(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_setQuantifier(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SetQuantifierContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_setQuantifier(self);
	}
}

impl<'input> CustomRuleContext<'input> for SetQuantifierContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_setQuantifier }
	//fn type_rule_index() -> usize where Self: Sized { RULE_setQuantifier }
}
antlr_rust::tid!{SetQuantifierContextExt<'a>}

impl<'input> SetQuantifierContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SetQuantifierContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SetQuantifierContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait SetQuantifierContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SetQuantifierContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token DISTINCT
/// Returns `None` if there is no child corresponding to token DISTINCT
fn DISTINCT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DISTINCT, 0)
}
/// Retrieves first TerminalNode corresponding to token ALL
/// Returns `None` if there is no child corresponding to token ALL
fn ALL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ALL, 0)
}

}

impl<'input> SetQuantifierContextAttrs<'input> for SetQuantifierContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn setQuantifier(&mut self,)
	-> Result<Rc<SetQuantifierContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SetQuantifierContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 68, RULE_setQuantifier);
        let mut _localctx: Rc<SetQuantifierContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1077);
			_la = recog.base.input.la(1);
			if { !(_la==ALL || _la==DISTINCT) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- inlineTable ----------------
pub type InlineTableContextAll<'input> = InlineTableContext<'input>;


pub type InlineTableContext<'input> = BaseParserRuleContext<'input,InlineTableContextExt<'input>>;

#[derive(Clone)]
pub struct InlineTableContextExt<'input>{
	pub tail: Option<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for InlineTableContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for InlineTableContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_inlineTable(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_inlineTable(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for InlineTableContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_inlineTable(self);
	}
}

impl<'input> CustomRuleContext<'input> for InlineTableContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_inlineTable }
	//fn type_rule_index() -> usize where Self: Sized { RULE_inlineTable }
}
antlr_rust::tid!{InlineTableContextExt<'a>}

impl<'input> InlineTableContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<InlineTableContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,InlineTableContextExt{
				tail: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait InlineTableContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<InlineTableContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token VALUES
/// Returns `None` if there is no child corresponding to token VALUES
fn VALUES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(VALUES, 0)
}
fn expression_all(&self) ->  Vec<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn expression(&self, i: usize) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> InlineTableContextAttrs<'input> for InlineTableContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn inlineTable(&mut self,)
	-> Result<Rc<InlineTableContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = InlineTableContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 70, RULE_inlineTable);
        let mut _localctx: Rc<InlineTableContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1079);
			recog.base.match_token(VALUES,&mut recog.err_handler)?;

			/*InvokeRule expression*/
			recog.base.set_state(1080);
			recog.expression()?;

			recog.base.set_state(1085);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(109,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					{
					{
					recog.base.set_state(1081);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule expression*/
					recog.base.set_state(1082);
					recog.expression()?;

					}
					} 
				}
				recog.base.set_state(1087);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(109,&mut recog.base)?;
			}
			recog.base.set_state(1089);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==COMMA {
				{
				recog.base.set_state(1088);
				let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
				 cast_mut::<_,InlineTableContext >(&mut _localctx).tail = Some(tmp);
				  

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- queryPrimary ----------------
#[derive(Debug)]
pub enum QueryPrimaryContextAll<'input>{
	SubqueryContext(SubqueryContext<'input>),
	QueryPrimaryDefaultContext(QueryPrimaryDefaultContext<'input>),
	InlineTableDefault1Context(InlineTableDefault1Context<'input>),
	TableContext(TableContext<'input>),
Error(QueryPrimaryContext<'input>)
}
antlr_rust::tid!{QueryPrimaryContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for QueryPrimaryContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for QueryPrimaryContextAll<'input>{}

impl<'input> Deref for QueryPrimaryContextAll<'input>{
	type Target = dyn QueryPrimaryContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use QueryPrimaryContextAll::*;
		match self{
			SubqueryContext(inner) => inner,
			QueryPrimaryDefaultContext(inner) => inner,
			InlineTableDefault1Context(inner) => inner,
			TableContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QueryPrimaryContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QueryPrimaryContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type QueryPrimaryContext<'input> = BaseParserRuleContext<'input,QueryPrimaryContextExt<'input>>;

#[derive(Clone)]
pub struct QueryPrimaryContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for QueryPrimaryContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QueryPrimaryContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QueryPrimaryContext<'input>{
}

impl<'input> CustomRuleContext<'input> for QueryPrimaryContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_queryPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_queryPrimary }
}
antlr_rust::tid!{QueryPrimaryContextExt<'a>}

impl<'input> QueryPrimaryContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<QueryPrimaryContextAll<'input>> {
		Rc::new(
		QueryPrimaryContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,QueryPrimaryContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait QueryPrimaryContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<QueryPrimaryContextExt<'input>>{


}

impl<'input> QueryPrimaryContextAttrs<'input> for QueryPrimaryContext<'input>{}

pub type SubqueryContext<'input> = BaseParserRuleContext<'input,SubqueryContextExt<'input>>;

pub trait SubqueryContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn queryNoWith(&self) -> Option<Rc<QueryNoWithContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> SubqueryContextAttrs<'input> for SubqueryContext<'input>{}

pub struct SubqueryContextExt<'input>{
	base:QueryPrimaryContextExt<'input>,
	pub query_: Option<Rc<QueryNoWithContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SubqueryContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SubqueryContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SubqueryContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_subquery(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_subquery(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SubqueryContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_subquery(self);
	}
}

impl<'input> CustomRuleContext<'input> for SubqueryContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_queryPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_queryPrimary }
}

impl<'input> Borrow<QueryPrimaryContextExt<'input>> for SubqueryContext<'input>{
	fn borrow(&self) -> &QueryPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<QueryPrimaryContextExt<'input>> for SubqueryContext<'input>{
	fn borrow_mut(&mut self) -> &mut QueryPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> QueryPrimaryContextAttrs<'input> for SubqueryContext<'input> {}

impl<'input> SubqueryContextExt<'input>{
	fn new(ctx: &dyn QueryPrimaryContextAttrs<'input>) -> Rc<QueryPrimaryContextAll<'input>>  {
		Rc::new(
			QueryPrimaryContextAll::SubqueryContext(
				BaseParserRuleContext::copy_from(ctx,SubqueryContextExt{
        			query_:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type QueryPrimaryDefaultContext<'input> = BaseParserRuleContext<'input,QueryPrimaryDefaultContextExt<'input>>;

pub trait QueryPrimaryDefaultContextAttrs<'input>: TrinoParserContext<'input>{
	fn querySpecification(&self) -> Option<Rc<QuerySpecificationContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> QueryPrimaryDefaultContextAttrs<'input> for QueryPrimaryDefaultContext<'input>{}

pub struct QueryPrimaryDefaultContextExt<'input>{
	base:QueryPrimaryContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{QueryPrimaryDefaultContextExt<'a>}

impl<'input> TrinoParserContext<'input> for QueryPrimaryDefaultContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QueryPrimaryDefaultContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_queryPrimaryDefault(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_queryPrimaryDefault(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QueryPrimaryDefaultContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_queryPrimaryDefault(self);
	}
}

impl<'input> CustomRuleContext<'input> for QueryPrimaryDefaultContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_queryPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_queryPrimary }
}

impl<'input> Borrow<QueryPrimaryContextExt<'input>> for QueryPrimaryDefaultContext<'input>{
	fn borrow(&self) -> &QueryPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<QueryPrimaryContextExt<'input>> for QueryPrimaryDefaultContext<'input>{
	fn borrow_mut(&mut self) -> &mut QueryPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> QueryPrimaryContextAttrs<'input> for QueryPrimaryDefaultContext<'input> {}

impl<'input> QueryPrimaryDefaultContextExt<'input>{
	fn new(ctx: &dyn QueryPrimaryContextAttrs<'input>) -> Rc<QueryPrimaryContextAll<'input>>  {
		Rc::new(
			QueryPrimaryContextAll::QueryPrimaryDefaultContext(
				BaseParserRuleContext::copy_from(ctx,QueryPrimaryDefaultContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type InlineTableDefault1Context<'input> = BaseParserRuleContext<'input,InlineTableDefault1ContextExt<'input>>;

pub trait InlineTableDefault1ContextAttrs<'input>: TrinoParserContext<'input>{
	fn inlineTable(&self) -> Option<Rc<InlineTableContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> InlineTableDefault1ContextAttrs<'input> for InlineTableDefault1Context<'input>{}

pub struct InlineTableDefault1ContextExt<'input>{
	base:QueryPrimaryContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{InlineTableDefault1ContextExt<'a>}

impl<'input> TrinoParserContext<'input> for InlineTableDefault1Context<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for InlineTableDefault1Context<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_inlineTableDefault1(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_inlineTableDefault1(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for InlineTableDefault1Context<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_inlineTableDefault1(self);
	}
}

impl<'input> CustomRuleContext<'input> for InlineTableDefault1ContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_queryPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_queryPrimary }
}

impl<'input> Borrow<QueryPrimaryContextExt<'input>> for InlineTableDefault1Context<'input>{
	fn borrow(&self) -> &QueryPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<QueryPrimaryContextExt<'input>> for InlineTableDefault1Context<'input>{
	fn borrow_mut(&mut self) -> &mut QueryPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> QueryPrimaryContextAttrs<'input> for InlineTableDefault1Context<'input> {}

impl<'input> InlineTableDefault1ContextExt<'input>{
	fn new(ctx: &dyn QueryPrimaryContextAttrs<'input>) -> Rc<QueryPrimaryContextAll<'input>>  {
		Rc::new(
			QueryPrimaryContextAll::InlineTableDefault1Context(
				BaseParserRuleContext::copy_from(ctx,InlineTableDefault1ContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type TableContext<'input> = BaseParserRuleContext<'input,TableContextExt<'input>>;

pub trait TableContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	fn pathExpression(&self) -> Option<Rc<PathExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> TableContextAttrs<'input> for TableContext<'input>{}

pub struct TableContextExt<'input>{
	base:QueryPrimaryContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{TableContextExt<'a>}

impl<'input> TrinoParserContext<'input> for TableContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_table(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_table(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_table(self);
	}
}

impl<'input> CustomRuleContext<'input> for TableContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_queryPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_queryPrimary }
}

impl<'input> Borrow<QueryPrimaryContextExt<'input>> for TableContext<'input>{
	fn borrow(&self) -> &QueryPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<QueryPrimaryContextExt<'input>> for TableContext<'input>{
	fn borrow_mut(&mut self) -> &mut QueryPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> QueryPrimaryContextAttrs<'input> for TableContext<'input> {}

impl<'input> TableContextExt<'input>{
	fn new(ctx: &dyn QueryPrimaryContextAttrs<'input>) -> Rc<QueryPrimaryContextAll<'input>>  {
		Rc::new(
			QueryPrimaryContextAll::TableContext(
				BaseParserRuleContext::copy_from(ctx,TableContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn queryPrimary(&mut self,)
	-> Result<Rc<QueryPrimaryContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = QueryPrimaryContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 72, RULE_queryPrimary);
        let mut _localctx: Rc<QueryPrimaryContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(1099);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 SELECT 
				=> {
					let tmp = QueryPrimaryDefaultContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					/*InvokeRule querySpecification*/
					recog.base.set_state(1091);
					recog.querySpecification()?;

					}
				}

			 TABLE 
				=> {
					let tmp = TableContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(1092);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					/*InvokeRule pathExpression*/
					recog.base.set_state(1093);
					recog.pathExpression()?;

					}
				}

			 VALUES 
				=> {
					let tmp = InlineTableDefault1ContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 3);
					_localctx = tmp;
					{
					/*InvokeRule inlineTable*/
					recog.base.set_state(1094);
					recog.inlineTable()?;

					}
				}

			 LPAREN 
				=> {
					let tmp = SubqueryContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 4);
					_localctx = tmp;
					{
					recog.base.set_state(1095);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule queryNoWith*/
					recog.base.set_state(1096);
					let tmp = recog.queryNoWith()?;
					if let QueryPrimaryContextAll::SubqueryContext(ctx) = cast_mut::<_,QueryPrimaryContextAll >(&mut _localctx){
					ctx.query_ = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(1097);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- sortItem ----------------
pub type SortItemContextAll<'input> = SortItemContext<'input>;


pub type SortItemContext<'input> = BaseParserRuleContext<'input,SortItemContextExt<'input>>;

#[derive(Clone)]
pub struct SortItemContextExt<'input>{
	pub ordering: Option<TokenType<'input>>,
	pub nullOrdering: Option<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SortItemContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SortItemContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_sortItem(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_sortItem(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SortItemContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_sortItem(self);
	}
}

impl<'input> CustomRuleContext<'input> for SortItemContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_sortItem }
	//fn type_rule_index() -> usize where Self: Sized { RULE_sortItem }
}
antlr_rust::tid!{SortItemContextExt<'a>}

impl<'input> SortItemContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SortItemContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SortItemContextExt{
				ordering: None, nullOrdering: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait SortItemContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SortItemContextExt<'input>>{

fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token NULLS
/// Returns `None` if there is no child corresponding to token NULLS
fn NULLS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NULLS, 0)
}
/// Retrieves first TerminalNode corresponding to token ASC
/// Returns `None` if there is no child corresponding to token ASC
fn ASC(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ASC, 0)
}
/// Retrieves first TerminalNode corresponding to token DESC
/// Returns `None` if there is no child corresponding to token DESC
fn DESC(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DESC, 0)
}
/// Retrieves first TerminalNode corresponding to token FIRST
/// Returns `None` if there is no child corresponding to token FIRST
fn FIRST(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FIRST, 0)
}
/// Retrieves first TerminalNode corresponding to token LAST
/// Returns `None` if there is no child corresponding to token LAST
fn LAST(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LAST, 0)
}

}

impl<'input> SortItemContextAttrs<'input> for SortItemContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn sortItem(&mut self,)
	-> Result<Rc<SortItemContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SortItemContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 74, RULE_sortItem);
        let mut _localctx: Rc<SortItemContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule expression*/
			recog.base.set_state(1101);
			recog.expression()?;

			recog.base.set_state(1103);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==ASC || _la==DESC {
				{
				recog.base.set_state(1102);
				 cast_mut::<_,SortItemContext >(&mut _localctx).ordering = recog.base.input.lt(1).cloned();
				 
				_la = recog.base.input.la(1);
				if { !(_la==ASC || _la==DESC) } {
					let tmp = recog.err_handler.recover_inline(&mut recog.base)?;
					 cast_mut::<_,SortItemContext >(&mut _localctx).ordering = Some(tmp);
					  

				}
				else {
					if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
					recog.err_handler.report_match(&mut recog.base);
					recog.base.consume(&mut recog.err_handler);
				}
				}
			}

			recog.base.set_state(1107);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==NULLS {
				{
				recog.base.set_state(1105);
				recog.base.match_token(NULLS,&mut recog.err_handler)?;

				recog.base.set_state(1106);
				 cast_mut::<_,SortItemContext >(&mut _localctx).nullOrdering = recog.base.input.lt(1).cloned();
				 
				_la = recog.base.input.la(1);
				if { !(_la==FIRST || _la==LAST) } {
					let tmp = recog.err_handler.recover_inline(&mut recog.base)?;
					 cast_mut::<_,SortItemContext >(&mut _localctx).nullOrdering = Some(tmp);
					  

				}
				else {
					if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
					recog.err_handler.report_match(&mut recog.base);
					recog.base.consume(&mut recog.err_handler);
				}
				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- querySpecification ----------------
pub type QuerySpecificationContextAll<'input> = QuerySpecificationContext<'input>;


pub type QuerySpecificationContext<'input> = BaseParserRuleContext<'input,QuerySpecificationContextExt<'input>>;

#[derive(Clone)]
pub struct QuerySpecificationContextExt<'input>{
	pub COMMA: Option<TokenType<'input>>,
	pub tail:Vec<TokenType<'input>>,
	pub where_: Option<Rc<BooleanExpressionContextAll<'input>>>,
	pub having: Option<Rc<BooleanExpressionContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for QuerySpecificationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QuerySpecificationContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_querySpecification(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_querySpecification(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QuerySpecificationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_querySpecification(self);
	}
}

impl<'input> CustomRuleContext<'input> for QuerySpecificationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_querySpecification }
	//fn type_rule_index() -> usize where Self: Sized { RULE_querySpecification }
}
antlr_rust::tid!{QuerySpecificationContextExt<'a>}

impl<'input> QuerySpecificationContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<QuerySpecificationContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,QuerySpecificationContextExt{
				COMMA: None, 
				tail: Vec::new(), 
				where_: None, having: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait QuerySpecificationContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<QuerySpecificationContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token SELECT
/// Returns `None` if there is no child corresponding to token SELECT
fn SELECT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SELECT, 0)
}
fn querySelectItems(&self) -> Option<Rc<QuerySelectItemsContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn setQuantifier(&self) -> Option<Rc<SetQuantifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token FROM
/// Returns `None` if there is no child corresponding to token FROM
fn FROM(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FROM, 0)
}
fn relation_all(&self) ->  Vec<Rc<RelationContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn relation(&self, i: usize) -> Option<Rc<RelationContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves first TerminalNode corresponding to token WHERE
/// Returns `None` if there is no child corresponding to token WHERE
fn WHERE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WHERE, 0)
}
fn aggregationClause(&self) -> Option<Rc<AggregationClauseContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token HAVING
/// Returns `None` if there is no child corresponding to token HAVING
fn HAVING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(HAVING, 0)
}
/// Retrieves first TerminalNode corresponding to token WINDOW
/// Returns `None` if there is no child corresponding to token WINDOW
fn WINDOW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WINDOW, 0)
}
fn windowDefinition_all(&self) ->  Vec<Rc<WindowDefinitionContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn windowDefinition(&self, i: usize) -> Option<Rc<WindowDefinitionContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
fn booleanExpression_all(&self) ->  Vec<Rc<BooleanExpressionContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn booleanExpression(&self, i: usize) -> Option<Rc<BooleanExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> QuerySpecificationContextAttrs<'input> for QuerySpecificationContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn querySpecification(&mut self,)
	-> Result<Rc<QuerySpecificationContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = QuerySpecificationContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 76, RULE_querySpecification);
        let mut _localctx: Rc<QuerySpecificationContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1109);
			recog.base.match_token(SELECT,&mut recog.err_handler)?;

			recog.base.set_state(1111);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(114,&mut recog.base)? {
				x if x == 1=>{
					{
					/*InvokeRule setQuantifier*/
					recog.base.set_state(1110);
					recog.setQuantifier()?;

					}
				}

				_ => {}
			}
			/*InvokeRule querySelectItems*/
			recog.base.set_state(1113);
			recog.querySelectItems()?;

			recog.base.set_state(1126);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==FROM {
				{
				recog.base.set_state(1114);
				recog.base.match_token(FROM,&mut recog.err_handler)?;

				/*InvokeRule relation*/
				recog.base.set_state(1115);
				recog.relation()?;

				recog.base.set_state(1120);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(115,&mut recog.base)?;
				while { _alt!=2 && _alt!=INVALID_ALT } {
					if _alt==1 {
						{
						{
						recog.base.set_state(1116);
						recog.base.match_token(COMMA,&mut recog.err_handler)?;

						/*InvokeRule relation*/
						recog.base.set_state(1117);
						recog.relation()?;

						}
						} 
					}
					recog.base.set_state(1122);
					recog.err_handler.sync(&mut recog.base)?;
					_alt = recog.interpreter.adaptive_predict(115,&mut recog.base)?;
				}
				recog.base.set_state(1124);
				recog.err_handler.sync(&mut recog.base)?;
				_la = recog.base.input.la(1);
				if _la==COMMA {
					{
					recog.base.set_state(1123);
					let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
					 cast_mut::<_,QuerySpecificationContext >(&mut _localctx).COMMA = Some(tmp);
					  

					let temp =  cast_mut::<_,QuerySpecificationContext >(&mut _localctx).COMMA.clone().unwrap()
					 ;
					 cast_mut::<_,QuerySpecificationContext >(&mut _localctx).tail.push(temp);
					  
					}
				}

				}
			}

			recog.base.set_state(1130);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==WHERE {
				{
				recog.base.set_state(1128);
				recog.base.match_token(WHERE,&mut recog.err_handler)?;

				/*InvokeRule booleanExpression*/
				recog.base.set_state(1129);
				let tmp = recog.booleanExpression_rec(0)?;
				 cast_mut::<_,QuerySpecificationContext >(&mut _localctx).where_ = Some(tmp.clone());
				  

				}
			}

			recog.base.set_state(1133);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==GROUP {
				{
				/*InvokeRule aggregationClause*/
				recog.base.set_state(1132);
				recog.aggregationClause()?;

				}
			}

			recog.base.set_state(1137);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==HAVING {
				{
				recog.base.set_state(1135);
				recog.base.match_token(HAVING,&mut recog.err_handler)?;

				/*InvokeRule booleanExpression*/
				recog.base.set_state(1136);
				let tmp = recog.booleanExpression_rec(0)?;
				 cast_mut::<_,QuerySpecificationContext >(&mut _localctx).having = Some(tmp.clone());
				  

				}
			}

			recog.base.set_state(1151);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==WINDOW {
				{
				recog.base.set_state(1139);
				recog.base.match_token(WINDOW,&mut recog.err_handler)?;

				/*InvokeRule windowDefinition*/
				recog.base.set_state(1140);
				recog.windowDefinition()?;

				recog.base.set_state(1145);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(121,&mut recog.base)?;
				while { _alt!=2 && _alt!=INVALID_ALT } {
					if _alt==1 {
						{
						{
						recog.base.set_state(1141);
						recog.base.match_token(COMMA,&mut recog.err_handler)?;

						/*InvokeRule windowDefinition*/
						recog.base.set_state(1142);
						recog.windowDefinition()?;

						}
						} 
					}
					recog.base.set_state(1147);
					recog.err_handler.sync(&mut recog.base)?;
					_alt = recog.interpreter.adaptive_predict(121,&mut recog.base)?;
				}
				recog.base.set_state(1149);
				recog.err_handler.sync(&mut recog.base)?;
				_la = recog.base.input.la(1);
				if _la==COMMA {
					{
					recog.base.set_state(1148);
					let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
					 cast_mut::<_,QuerySpecificationContext >(&mut _localctx).COMMA = Some(tmp);
					  

					let temp =  cast_mut::<_,QuerySpecificationContext >(&mut _localctx).COMMA.clone().unwrap()
					 ;
					 cast_mut::<_,QuerySpecificationContext >(&mut _localctx).tail.push(temp);
					  
					}
				}

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- querySelectItems ----------------
pub type QuerySelectItemsContextAll<'input> = QuerySelectItemsContext<'input>;


pub type QuerySelectItemsContext<'input> = BaseParserRuleContext<'input,QuerySelectItemsContextExt<'input>>;

#[derive(Clone)]
pub struct QuerySelectItemsContextExt<'input>{
	pub tail: Option<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for QuerySelectItemsContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QuerySelectItemsContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_querySelectItems(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_querySelectItems(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QuerySelectItemsContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_querySelectItems(self);
	}
}

impl<'input> CustomRuleContext<'input> for QuerySelectItemsContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_querySelectItems }
	//fn type_rule_index() -> usize where Self: Sized { RULE_querySelectItems }
}
antlr_rust::tid!{QuerySelectItemsContextExt<'a>}

impl<'input> QuerySelectItemsContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<QuerySelectItemsContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,QuerySelectItemsContextExt{
				tail: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait QuerySelectItemsContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<QuerySelectItemsContextExt<'input>>{

fn selectItem_all(&self) ->  Vec<Rc<SelectItemContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn selectItem(&self, i: usize) -> Option<Rc<SelectItemContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> QuerySelectItemsContextAttrs<'input> for QuerySelectItemsContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn querySelectItems(&mut self,)
	-> Result<Rc<QuerySelectItemsContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = QuerySelectItemsContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 78, RULE_querySelectItems);
        let mut _localctx: Rc<QuerySelectItemsContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule selectItem*/
			recog.base.set_state(1153);
			recog.selectItem()?;

			recog.base.set_state(1158);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(124,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					{
					{
					recog.base.set_state(1154);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule selectItem*/
					recog.base.set_state(1155);
					recog.selectItem()?;

					}
					} 
				}
				recog.base.set_state(1160);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(124,&mut recog.base)?;
			}
			recog.base.set_state(1162);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==COMMA {
				{
				recog.base.set_state(1161);
				let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
				 cast_mut::<_,QuerySelectItemsContext >(&mut _localctx).tail = Some(tmp);
				  

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- aggregationClause ----------------
pub type AggregationClauseContextAll<'input> = AggregationClauseContext<'input>;


pub type AggregationClauseContext<'input> = BaseParserRuleContext<'input,AggregationClauseContextExt<'input>>;

#[derive(Clone)]
pub struct AggregationClauseContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for AggregationClauseContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for AggregationClauseContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_aggregationClause(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_aggregationClause(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for AggregationClauseContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_aggregationClause(self);
	}
}

impl<'input> CustomRuleContext<'input> for AggregationClauseContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_aggregationClause }
	//fn type_rule_index() -> usize where Self: Sized { RULE_aggregationClause }
}
antlr_rust::tid!{AggregationClauseContextExt<'a>}

impl<'input> AggregationClauseContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<AggregationClauseContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,AggregationClauseContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait AggregationClauseContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<AggregationClauseContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token GROUP
/// Returns `None` if there is no child corresponding to token GROUP
fn GROUP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(GROUP, 0)
}
/// Retrieves first TerminalNode corresponding to token BY
/// Returns `None` if there is no child corresponding to token BY
fn BY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(BY, 0)
}
fn groupBy(&self) -> Option<Rc<GroupByContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> AggregationClauseContextAttrs<'input> for AggregationClauseContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn aggregationClause(&mut self,)
	-> Result<Rc<AggregationClauseContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = AggregationClauseContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 80, RULE_aggregationClause);
        let mut _localctx: Rc<AggregationClauseContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1164);
			recog.base.match_token(GROUP,&mut recog.err_handler)?;

			recog.base.set_state(1165);
			recog.base.match_token(BY,&mut recog.err_handler)?;

			/*InvokeRule groupBy*/
			recog.base.set_state(1166);
			recog.groupBy()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- groupBy ----------------
#[derive(Debug)]
pub enum GroupByContextAll<'input>{
	GroupByDefaultContext(GroupByDefaultContext<'input>),
Error(GroupByContext<'input>)
}
antlr_rust::tid!{GroupByContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for GroupByContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for GroupByContextAll<'input>{}

impl<'input> Deref for GroupByContextAll<'input>{
	type Target = dyn GroupByContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use GroupByContextAll::*;
		match self{
			GroupByDefaultContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for GroupByContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for GroupByContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type GroupByContext<'input> = BaseParserRuleContext<'input,GroupByContextExt<'input>>;

#[derive(Clone)]
pub struct GroupByContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for GroupByContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for GroupByContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for GroupByContext<'input>{
}

impl<'input> CustomRuleContext<'input> for GroupByContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_groupBy }
	//fn type_rule_index() -> usize where Self: Sized { RULE_groupBy }
}
antlr_rust::tid!{GroupByContextExt<'a>}

impl<'input> GroupByContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<GroupByContextAll<'input>> {
		Rc::new(
		GroupByContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,GroupByContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait GroupByContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<GroupByContextExt<'input>>{


}

impl<'input> GroupByContextAttrs<'input> for GroupByContext<'input>{}

pub type GroupByDefaultContext<'input> = BaseParserRuleContext<'input,GroupByDefaultContextExt<'input>>;

pub trait GroupByDefaultContextAttrs<'input>: TrinoParserContext<'input>{
	fn groupingElement_all(&self) ->  Vec<Rc<GroupingElementContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn groupingElement(&self, i: usize) -> Option<Rc<GroupingElementContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	fn setQuantifier(&self) -> Option<Rc<SetQuantifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> GroupByDefaultContextAttrs<'input> for GroupByDefaultContext<'input>{}

pub struct GroupByDefaultContextExt<'input>{
	base:GroupByContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{GroupByDefaultContextExt<'a>}

impl<'input> TrinoParserContext<'input> for GroupByDefaultContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for GroupByDefaultContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_groupByDefault(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_groupByDefault(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for GroupByDefaultContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_groupByDefault(self);
	}
}

impl<'input> CustomRuleContext<'input> for GroupByDefaultContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_groupBy }
	//fn type_rule_index() -> usize where Self: Sized { RULE_groupBy }
}

impl<'input> Borrow<GroupByContextExt<'input>> for GroupByDefaultContext<'input>{
	fn borrow(&self) -> &GroupByContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<GroupByContextExt<'input>> for GroupByDefaultContext<'input>{
	fn borrow_mut(&mut self) -> &mut GroupByContextExt<'input> { &mut self.base }
}

impl<'input> GroupByContextAttrs<'input> for GroupByDefaultContext<'input> {}

impl<'input> GroupByDefaultContextExt<'input>{
	fn new(ctx: &dyn GroupByContextAttrs<'input>) -> Rc<GroupByContextAll<'input>>  {
		Rc::new(
			GroupByContextAll::GroupByDefaultContext(
				BaseParserRuleContext::copy_from(ctx,GroupByDefaultContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn groupBy(&mut self,)
	-> Result<Rc<GroupByContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = GroupByContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 82, RULE_groupBy);
        let mut _localctx: Rc<GroupByContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			let tmp = GroupByDefaultContextExt::new(&**_localctx);
			recog.base.enter_outer_alt(Some(tmp.clone()), 1);
			_localctx = tmp;
			{
			recog.base.set_state(1169);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(126,&mut recog.base)? {
				x if x == 1=>{
					{
					/*InvokeRule setQuantifier*/
					recog.base.set_state(1168);
					recog.setQuantifier()?;

					}
				}

				_ => {}
			}
			/*InvokeRule groupingElement*/
			recog.base.set_state(1171);
			recog.groupingElement()?;

			recog.base.set_state(1176);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(127,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					{
					{
					recog.base.set_state(1172);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule groupingElement*/
					recog.base.set_state(1173);
					recog.groupingElement()?;

					}
					} 
				}
				recog.base.set_state(1178);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(127,&mut recog.base)?;
			}
			recog.base.set_state(1180);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==COMMA {
				{
				recog.base.set_state(1179);
				let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
				if let GroupByContextAll::GroupByDefaultContext(ctx) = cast_mut::<_,GroupByContextAll >(&mut _localctx){
				ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- groupingElement ----------------
#[derive(Debug)]
pub enum GroupingElementContextAll<'input>{
	MultipleGroupingSetsContext(MultipleGroupingSetsContext<'input>),
	SingleGroupingSetContext(SingleGroupingSetContext<'input>),
	CubeContext(CubeContext<'input>),
	RollupContext(RollupContext<'input>),
Error(GroupingElementContext<'input>)
}
antlr_rust::tid!{GroupingElementContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for GroupingElementContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for GroupingElementContextAll<'input>{}

impl<'input> Deref for GroupingElementContextAll<'input>{
	type Target = dyn GroupingElementContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use GroupingElementContextAll::*;
		match self{
			MultipleGroupingSetsContext(inner) => inner,
			SingleGroupingSetContext(inner) => inner,
			CubeContext(inner) => inner,
			RollupContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for GroupingElementContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for GroupingElementContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type GroupingElementContext<'input> = BaseParserRuleContext<'input,GroupingElementContextExt<'input>>;

#[derive(Clone)]
pub struct GroupingElementContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for GroupingElementContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for GroupingElementContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for GroupingElementContext<'input>{
}

impl<'input> CustomRuleContext<'input> for GroupingElementContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_groupingElement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_groupingElement }
}
antlr_rust::tid!{GroupingElementContextExt<'a>}

impl<'input> GroupingElementContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<GroupingElementContextAll<'input>> {
		Rc::new(
		GroupingElementContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,GroupingElementContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait GroupingElementContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<GroupingElementContextExt<'input>>{


}

impl<'input> GroupingElementContextAttrs<'input> for GroupingElementContext<'input>{}

pub type MultipleGroupingSetsContext<'input> = BaseParserRuleContext<'input,MultipleGroupingSetsContextExt<'input>>;

pub trait MultipleGroupingSetsContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token GROUPING
	/// Returns `None` if there is no child corresponding to token GROUPING
	fn GROUPING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(GROUPING, 0)
	}
	/// Retrieves first TerminalNode corresponding to token SETS
	/// Returns `None` if there is no child corresponding to token SETS
	fn SETS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SETS, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn groupingSet_all(&self) ->  Vec<Rc<GroupingSetContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn groupingSet(&self, i: usize) -> Option<Rc<GroupingSetContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> MultipleGroupingSetsContextAttrs<'input> for MultipleGroupingSetsContext<'input>{}

pub struct MultipleGroupingSetsContextExt<'input>{
	base:GroupingElementContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{MultipleGroupingSetsContextExt<'a>}

impl<'input> TrinoParserContext<'input> for MultipleGroupingSetsContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for MultipleGroupingSetsContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_multipleGroupingSets(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_multipleGroupingSets(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for MultipleGroupingSetsContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_multipleGroupingSets(self);
	}
}

impl<'input> CustomRuleContext<'input> for MultipleGroupingSetsContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_groupingElement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_groupingElement }
}

impl<'input> Borrow<GroupingElementContextExt<'input>> for MultipleGroupingSetsContext<'input>{
	fn borrow(&self) -> &GroupingElementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<GroupingElementContextExt<'input>> for MultipleGroupingSetsContext<'input>{
	fn borrow_mut(&mut self) -> &mut GroupingElementContextExt<'input> { &mut self.base }
}

impl<'input> GroupingElementContextAttrs<'input> for MultipleGroupingSetsContext<'input> {}

impl<'input> MultipleGroupingSetsContextExt<'input>{
	fn new(ctx: &dyn GroupingElementContextAttrs<'input>) -> Rc<GroupingElementContextAll<'input>>  {
		Rc::new(
			GroupingElementContextAll::MultipleGroupingSetsContext(
				BaseParserRuleContext::copy_from(ctx,MultipleGroupingSetsContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SingleGroupingSetContext<'input> = BaseParserRuleContext<'input,SingleGroupingSetContextExt<'input>>;

pub trait SingleGroupingSetContextAttrs<'input>: TrinoParserContext<'input>{
	fn groupingSet(&self) -> Option<Rc<GroupingSetContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> SingleGroupingSetContextAttrs<'input> for SingleGroupingSetContext<'input>{}

pub struct SingleGroupingSetContextExt<'input>{
	base:GroupingElementContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SingleGroupingSetContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SingleGroupingSetContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SingleGroupingSetContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_singleGroupingSet(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_singleGroupingSet(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SingleGroupingSetContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_singleGroupingSet(self);
	}
}

impl<'input> CustomRuleContext<'input> for SingleGroupingSetContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_groupingElement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_groupingElement }
}

impl<'input> Borrow<GroupingElementContextExt<'input>> for SingleGroupingSetContext<'input>{
	fn borrow(&self) -> &GroupingElementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<GroupingElementContextExt<'input>> for SingleGroupingSetContext<'input>{
	fn borrow_mut(&mut self) -> &mut GroupingElementContextExt<'input> { &mut self.base }
}

impl<'input> GroupingElementContextAttrs<'input> for SingleGroupingSetContext<'input> {}

impl<'input> SingleGroupingSetContextExt<'input>{
	fn new(ctx: &dyn GroupingElementContextAttrs<'input>) -> Rc<GroupingElementContextAll<'input>>  {
		Rc::new(
			GroupingElementContextAll::SingleGroupingSetContext(
				BaseParserRuleContext::copy_from(ctx,SingleGroupingSetContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type CubeContext<'input> = BaseParserRuleContext<'input,CubeContextExt<'input>>;

pub trait CubeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token CUBE
	/// Returns `None` if there is no child corresponding to token CUBE
	fn CUBE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CUBE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn expression_all(&self) ->  Vec<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn expression(&self, i: usize) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> CubeContextAttrs<'input> for CubeContext<'input>{}

pub struct CubeContextExt<'input>{
	base:GroupingElementContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{CubeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for CubeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CubeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_cube(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_cube(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CubeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_cube(self);
	}
}

impl<'input> CustomRuleContext<'input> for CubeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_groupingElement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_groupingElement }
}

impl<'input> Borrow<GroupingElementContextExt<'input>> for CubeContext<'input>{
	fn borrow(&self) -> &GroupingElementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<GroupingElementContextExt<'input>> for CubeContext<'input>{
	fn borrow_mut(&mut self) -> &mut GroupingElementContextExt<'input> { &mut self.base }
}

impl<'input> GroupingElementContextAttrs<'input> for CubeContext<'input> {}

impl<'input> CubeContextExt<'input>{
	fn new(ctx: &dyn GroupingElementContextAttrs<'input>) -> Rc<GroupingElementContextAll<'input>>  {
		Rc::new(
			GroupingElementContextAll::CubeContext(
				BaseParserRuleContext::copy_from(ctx,CubeContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type RollupContext<'input> = BaseParserRuleContext<'input,RollupContextExt<'input>>;

pub trait RollupContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ROLLUP
	/// Returns `None` if there is no child corresponding to token ROLLUP
	fn ROLLUP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ROLLUP, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn expression_all(&self) ->  Vec<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn expression(&self, i: usize) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> RollupContextAttrs<'input> for RollupContext<'input>{}

pub struct RollupContextExt<'input>{
	base:GroupingElementContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{RollupContextExt<'a>}

impl<'input> TrinoParserContext<'input> for RollupContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RollupContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_rollup(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_rollup(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RollupContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_rollup(self);
	}
}

impl<'input> CustomRuleContext<'input> for RollupContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_groupingElement }
	//fn type_rule_index() -> usize where Self: Sized { RULE_groupingElement }
}

impl<'input> Borrow<GroupingElementContextExt<'input>> for RollupContext<'input>{
	fn borrow(&self) -> &GroupingElementContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<GroupingElementContextExt<'input>> for RollupContext<'input>{
	fn borrow_mut(&mut self) -> &mut GroupingElementContextExt<'input> { &mut self.base }
}

impl<'input> GroupingElementContextAttrs<'input> for RollupContext<'input> {}

impl<'input> RollupContextExt<'input>{
	fn new(ctx: &dyn GroupingElementContextAttrs<'input>) -> Rc<GroupingElementContextAll<'input>>  {
		Rc::new(
			GroupingElementContextAll::RollupContext(
				BaseParserRuleContext::copy_from(ctx,RollupContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn groupingElement(&mut self,)
	-> Result<Rc<GroupingElementContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = GroupingElementContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 84, RULE_groupingElement);
        let mut _localctx: Rc<GroupingElementContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			recog.base.set_state(1231);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(137,&mut recog.base)? {
				1 =>{
					let tmp = RollupContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					recog.base.set_state(1182);
					recog.base.match_token(ROLLUP,&mut recog.err_handler)?;

					recog.base.set_state(1183);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					recog.base.set_state(1195);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if ((((_la - 9)) & !0x3f) == 0 && ((1usize << (_la - 9)) & ((1usize << (ABORT - 9)) | (1usize << (ABSENT - 9)) | (1usize << (ADD - 9)) | (1usize << (ADMIN - 9)) | (1usize << (AFTER - 9)) | (1usize << (ALL - 9)) | (1usize << (ANALYZE - 9)) | (1usize << (ANTI - 9)) | (1usize << (ANY - 9)) | (1usize << (ARRAY - 9)) | (1usize << (ASC - 9)) | (1usize << (AT - 9)) | (1usize << (ATTACH - 9)) | (1usize << (AUTHORIZATION - 9)) | (1usize << (BEGIN - 9)) | (1usize << (BERNOULLI - 9)) | (1usize << (BOTH - 9)) | (1usize << (BZIP2 - 9)) | (1usize << (CALL - 9)) | (1usize << (CANCEL - 9)) | (1usize << (CASCADE - 9)) | (1usize << (CASE - 9)) | (1usize << (CAST - 9)))) != 0) || ((((_la - 41)) & !0x3f) == 0 && ((1usize << (_la - 41)) & ((1usize << (CATALOGS - 41)) | (1usize << (CHARACTER - 41)) | (1usize << (CLONE - 41)) | (1usize << (CLOSE - 41)) | (1usize << (CLUSTER - 41)) | (1usize << (COLUMN - 41)) | (1usize << (COLUMNS - 41)) | (1usize << (COMMENT - 41)) | (1usize << (COMMIT - 41)) | (1usize << (COMMITTED - 41)) | (1usize << (COMPRESSION - 41)) | (1usize << (CONDITIONAL - 41)) | (1usize << (CONNECTION - 41)) | (1usize << (COPARTITION - 41)) | (1usize << (COPY - 41)) | (1usize << (COUNT - 41)) | (1usize << (CURRENT - 41)) | (1usize << (DATA - 41)) | (1usize << (DATABASE - 41)) | (1usize << (DATASHARE - 41)) | (1usize << (DATE - 41)) | (1usize << (DAY - 41)) | (1usize << (DAYS - 41)))) != 0) || ((((_la - 74)) & !0x3f) == 0 && ((1usize << (_la - 74)) & ((1usize << (DECLARE - 74)) | (1usize << (DEFAULT - 74)) | (1usize << (DEFINE - 74)) | (1usize << (DEFINER - 74)) | (1usize << (DELIMITER - 74)) | (1usize << (DENY - 74)) | (1usize << (DESC - 74)) | (1usize << (DESCRIBE - 74)) | (1usize << (DESCRIPTOR - 74)) | (1usize << (DISTRIBUTED - 74)) | (1usize << (DETACH - 74)) | (1usize << (DOUBLE - 74)) | (1usize << (EMPTY - 74)) | (1usize << (ENCODING - 74)) | (1usize << (END - 74)) | (1usize << (ERROR - 74)) | (1usize << (EXCLUDING - 74)) | (1usize << (EXECUTE - 74)) | (1usize << (EXISTS - 74)) | (1usize << (EXPLAIN - 74)))) != 0) || ((((_la - 106)) & !0x3f) == 0 && ((1usize << (_la - 106)) & ((1usize << (EXTERNAL - 106)) | (1usize << (EXTRACT - 106)) | (1usize << (FALSE - 106)) | (1usize << (FETCH - 106)) | (1usize << (FILTER - 106)) | (1usize << (FINAL - 106)) | (1usize << (FIRST - 106)) | (1usize << (FOLLOWING - 106)) | (1usize << (FORMAT - 106)) | (1usize << (FUNCTIONS - 106)) | (1usize << (GRACE - 106)) | (1usize << (GRANT - 106)) | (1usize << (GRANTED - 106)) | (1usize << (GRANTS - 106)) | (1usize << (GRAPHVIZ - 106)) | (1usize << (GROUPING - 106)) | (1usize << (GROUPS - 106)) | (1usize << (GZIP - 106)) | (1usize << (HOUR - 106)) | (1usize << (HOURS - 106)) | (1usize << (IF - 106)) | (1usize << (IGNORE - 106)))) != 0) || ((((_la - 138)) & !0x3f) == 0 && ((1usize << (_la - 138)) & ((1usize << (INCLUDING - 138)) | (1usize << (INITIAL - 138)) | (1usize << (INPUT - 138)) | (1usize << (INTEGER - 138)) | (1usize << (INTERVAL - 138)) | (1usize << (INVOKER - 138)) | (1usize << (IO - 138)) | (1usize << (ISOLATION - 138)) | (1usize << (JSON - 138)) | (1usize << (JSON_ARRAY - 138)) | (1usize << (JSON_EXISTS - 138)) | (1usize << (JSON_OBJECT - 138)) | (1usize << (JSON_QUERY - 138)) | (1usize << (JSON_VALUE - 138)) | (1usize << (KEEP - 138)) | (1usize << (KEY - 138)) | (1usize << (KEYS - 138)) | (1usize << (LAMBDA - 138)) | (1usize << (LAST - 138)) | (1usize << (LATERAL - 138)) | (1usize << (LEADING - 138)) | (1usize << (LEFT - 138)) | (1usize << (LEVEL - 138)))) != 0) || ((((_la - 170)) & !0x3f) == 0 && ((1usize << (_la - 170)) & ((1usize << (LIBRARY - 170)) | (1usize << (LIMIT - 170)) | (1usize << (LISTAGG - 170)) | (1usize << (LOCAL - 170)) | (1usize << (LOCATION - 170)) | (1usize << (LOCK - 170)) | (1usize << (LOGICAL - 170)) | (1usize << (M - 170)) | (1usize << (MAP - 170)) | (1usize << (MASKING - 170)) | (1usize << (MATCH - 170)) | (1usize << (MATCHED - 170)) | (1usize << (MATCHES - 170)) | (1usize << (MATCH_RECOGNIZE - 170)) | (1usize << (MATERIALIZED - 170)) | (1usize << (MAX - 170)) | (1usize << (MEASURES - 170)) | (1usize << (MERGE - 170)) | (1usize << (MIN - 170)) | (1usize << (MINUS_KW - 170)) | (1usize << (MINUTE - 170)) | (1usize << (MINUTES - 170)) | (1usize << (MODEL - 170)) | (1usize << (MONTH - 170)) | (1usize << (MONTHS - 170)) | (1usize << (NEXT - 170)) | (1usize << (NFC - 170)) | (1usize << (NFD - 170)) | (1usize << (NFKC - 170)) | (1usize << (NFKD - 170)))) != 0) || ((((_la - 202)) & !0x3f) == 0 && ((1usize << (_la - 202)) & ((1usize << (NO - 202)) | (1usize << (NONE - 202)) | (1usize << (NORMALIZE - 202)) | (1usize << (NOT - 202)) | (1usize << (NULL - 202)) | (1usize << (NULLS - 202)) | (1usize << (OBJECT - 202)) | (1usize << (OF - 202)) | (1usize << (OFFSET - 202)) | (1usize << (OMIT - 202)) | (1usize << (ONE - 202)) | (1usize << (ONLY - 202)) | (1usize << (OPTION - 202)) | (1usize << (ORDINALITY - 202)) | (1usize << (OUTPUT - 202)) | (1usize << (OVER - 202)) | (1usize << (OVERFLOW - 202)) | (1usize << (PARTITION - 202)) | (1usize << (PARTITIONS - 202)) | (1usize << (PASSING - 202)) | (1usize << (PAST - 202)) | (1usize << (PATH - 202)) | (1usize << (PATTERN - 202)) | (1usize << (PER - 202)) | (1usize << (PERIOD - 202)))) != 0) || ((((_la - 234)) & !0x3f) == 0 && ((1usize << (_la - 234)) & ((1usize << (PERMUTE - 234)) | (1usize << (POSITION - 234)) | (1usize << (PRECEDING - 234)) | (1usize << (PRECISION - 234)) | (1usize << (PROCEDURE - 234)) | (1usize << (PRIVILEGES - 234)) | (1usize << (PROPERTIES - 234)) | (1usize << (PRUNE - 234)) | (1usize << (QUOTES - 234)) | (1usize << (RANGE - 234)) | (1usize << (READ - 234)) | (1usize << (REFRESH - 234)) | (1usize << (RENAME - 234)) | (1usize << (REPEATABLE - 234)) | (1usize << (REPLACE - 234)) | (1usize << (RESET - 234)) | (1usize << (RESPECT - 234)) | (1usize << (RESTRICT - 234)) | (1usize << (RETURNING - 234)) | (1usize << (REVOKE - 234)) | (1usize << (RIGHT - 234)) | (1usize << (RLS - 234)) | (1usize << (ROLE - 234)) | (1usize << (ROLES - 234)) | (1usize << (ROLLBACK - 234)) | (1usize << (ROLLUP - 234)) | (1usize << (ROW - 234)) | (1usize << (ROWS - 234)) | (1usize << (RUNNING - 234)))) != 0) || ((((_la - 266)) & !0x3f) == 0 && ((1usize << (_la - 266)) & ((1usize << (S - 266)) | (1usize << (SCALAR - 266)) | (1usize << (SEC - 266)) | (1usize << (SECOND - 266)) | (1usize << (SECONDS - 266)) | (1usize << (SCHEMA - 266)) | (1usize << (SCHEMAS - 266)) | (1usize << (SECURITY - 266)) | (1usize << (SEEK - 266)) | (1usize << (SEMI - 266)) | (1usize << (SERIALIZABLE - 266)) | (1usize << (SESSION - 266)) | (1usize << (SET - 266)) | (1usize << (SETS - 266)) | (1usize << (SHOW - 266)) | (1usize << (SNAPSHOT - 266)) | (1usize << (SOME - 266)) | (1usize << (START - 266)) | (1usize << (STATS - 266)) | (1usize << (STRUCT - 266)) | (1usize << (SUBSET - 266)) | (1usize << (SUBSTRING - 266)) | (1usize << (SYSTEM - 266)) | (1usize << (SYSTEM_TIME - 266)))) != 0) || ((((_la - 298)) & !0x3f) == 0 && ((1usize << (_la - 298)) & ((1usize << (TABLES - 298)) | (1usize << (TABLESAMPLE - 298)) | (1usize << (TEMP - 298)) | (1usize << (TEMPORARY - 298)) | (1usize << (TEXT - 298)) | (1usize << (STRING_KW - 298)) | (1usize << (TIES - 298)) | (1usize << (TIME - 298)) | (1usize << (TIMESTAMP - 298)) | (1usize << (TO - 298)) | (1usize << (TRAILING - 298)) | (1usize << (TRANSACTION - 298)) | (1usize << (TRIM - 298)) | (1usize << (TRUE - 298)) | (1usize << (TRUNCATE - 298)) | (1usize << (TRY_CAST - 298)) | (1usize << (TUPLE - 298)) | (1usize << (TYPE - 298)) | (1usize << (UNBOUNDED - 298)) | (1usize << (UNCOMMITTED - 298)) | (1usize << (UNCONDITIONAL - 298)) | (1usize << (UNIQUE - 298)) | (1usize << (UNKNOWN - 298)) | (1usize << (UNLOAD - 298)) | (1usize << (UNMATCHED - 298)))) != 0) || ((((_la - 330)) & !0x3f) == 0 && ((1usize << (_la - 330)) & ((1usize << (UPDATE - 330)) | (1usize << (USE - 330)) | (1usize << (USER - 330)) | (1usize << (UTF16 - 330)) | (1usize << (UTF32 - 330)) | (1usize << (UTF8 - 330)) | (1usize << (VACUUM - 330)) | (1usize << (VALIDATE - 330)) | (1usize << (VALUE - 330)) | (1usize << (VARYING - 330)) | (1usize << (VERBOSE - 330)) | (1usize << (VERSION - 330)) | (1usize << (VIEW - 330)) | (1usize << (WEEK - 330)) | (1usize << (WINDOW - 330)) | (1usize << (WITHIN - 330)) | (1usize << (WITHOUT - 330)) | (1usize << (WORK - 330)) | (1usize << (WRAPPER - 330)) | (1usize << (WRITE - 330)) | (1usize << (XZ - 330)) | (1usize << (YEAR - 330)) | (1usize << (YEARS - 330)) | (1usize << (ZONE - 330)) | (1usize << (ZSTD - 330)) | (1usize << (LPAREN - 330)))) != 0) || ((((_la - 363)) & !0x3f) == 0 && ((1usize << (_la - 363)) & ((1usize << (LBRACKET - 363)) | (1usize << (PLUS - 363)) | (1usize << (MINUS - 363)) | (1usize << (POSIX - 363)) | (1usize << (STRING - 363)) | (1usize << (UNICODE_STRING - 363)) | (1usize << (BINARY_LITERAL - 363)) | (1usize << (INTEGER_VALUE - 363)) | (1usize << (DECIMAL_VALUE - 363)) | (1usize << (DOUBLE_VALUE - 363)) | (1usize << (IDENTIFIER - 363)) | (1usize << (QUOTED_IDENTIFIER - 363)) | (1usize << (VARIABLE - 363)))) != 0) {
						{
						/*InvokeRule expression*/
						recog.base.set_state(1184);
						recog.expression()?;

						recog.base.set_state(1189);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(129,&mut recog.base)?;
						while { _alt!=2 && _alt!=INVALID_ALT } {
							if _alt==1 {
								{
								{
								recog.base.set_state(1185);
								recog.base.match_token(COMMA,&mut recog.err_handler)?;

								/*InvokeRule expression*/
								recog.base.set_state(1186);
								recog.expression()?;

								}
								} 
							}
							recog.base.set_state(1191);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(129,&mut recog.base)?;
						}
						recog.base.set_state(1193);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==COMMA {
							{
							recog.base.set_state(1192);
							let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
							if let GroupingElementContextAll::RollupContext(ctx) = cast_mut::<_,GroupingElementContextAll >(&mut _localctx){
							ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

							}
						}

						}
					}

					recog.base.set_state(1197);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				2 =>{
					let tmp = CubeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(1198);
					recog.base.match_token(CUBE,&mut recog.err_handler)?;

					recog.base.set_state(1199);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					recog.base.set_state(1211);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if ((((_la - 9)) & !0x3f) == 0 && ((1usize << (_la - 9)) & ((1usize << (ABORT - 9)) | (1usize << (ABSENT - 9)) | (1usize << (ADD - 9)) | (1usize << (ADMIN - 9)) | (1usize << (AFTER - 9)) | (1usize << (ALL - 9)) | (1usize << (ANALYZE - 9)) | (1usize << (ANTI - 9)) | (1usize << (ANY - 9)) | (1usize << (ARRAY - 9)) | (1usize << (ASC - 9)) | (1usize << (AT - 9)) | (1usize << (ATTACH - 9)) | (1usize << (AUTHORIZATION - 9)) | (1usize << (BEGIN - 9)) | (1usize << (BERNOULLI - 9)) | (1usize << (BOTH - 9)) | (1usize << (BZIP2 - 9)) | (1usize << (CALL - 9)) | (1usize << (CANCEL - 9)) | (1usize << (CASCADE - 9)) | (1usize << (CASE - 9)) | (1usize << (CAST - 9)))) != 0) || ((((_la - 41)) & !0x3f) == 0 && ((1usize << (_la - 41)) & ((1usize << (CATALOGS - 41)) | (1usize << (CHARACTER - 41)) | (1usize << (CLONE - 41)) | (1usize << (CLOSE - 41)) | (1usize << (CLUSTER - 41)) | (1usize << (COLUMN - 41)) | (1usize << (COLUMNS - 41)) | (1usize << (COMMENT - 41)) | (1usize << (COMMIT - 41)) | (1usize << (COMMITTED - 41)) | (1usize << (COMPRESSION - 41)) | (1usize << (CONDITIONAL - 41)) | (1usize << (CONNECTION - 41)) | (1usize << (COPARTITION - 41)) | (1usize << (COPY - 41)) | (1usize << (COUNT - 41)) | (1usize << (CURRENT - 41)) | (1usize << (DATA - 41)) | (1usize << (DATABASE - 41)) | (1usize << (DATASHARE - 41)) | (1usize << (DATE - 41)) | (1usize << (DAY - 41)) | (1usize << (DAYS - 41)))) != 0) || ((((_la - 74)) & !0x3f) == 0 && ((1usize << (_la - 74)) & ((1usize << (DECLARE - 74)) | (1usize << (DEFAULT - 74)) | (1usize << (DEFINE - 74)) | (1usize << (DEFINER - 74)) | (1usize << (DELIMITER - 74)) | (1usize << (DENY - 74)) | (1usize << (DESC - 74)) | (1usize << (DESCRIBE - 74)) | (1usize << (DESCRIPTOR - 74)) | (1usize << (DISTRIBUTED - 74)) | (1usize << (DETACH - 74)) | (1usize << (DOUBLE - 74)) | (1usize << (EMPTY - 74)) | (1usize << (ENCODING - 74)) | (1usize << (END - 74)) | (1usize << (ERROR - 74)) | (1usize << (EXCLUDING - 74)) | (1usize << (EXECUTE - 74)) | (1usize << (EXISTS - 74)) | (1usize << (EXPLAIN - 74)))) != 0) || ((((_la - 106)) & !0x3f) == 0 && ((1usize << (_la - 106)) & ((1usize << (EXTERNAL - 106)) | (1usize << (EXTRACT - 106)) | (1usize << (FALSE - 106)) | (1usize << (FETCH - 106)) | (1usize << (FILTER - 106)) | (1usize << (FINAL - 106)) | (1usize << (FIRST - 106)) | (1usize << (FOLLOWING - 106)) | (1usize << (FORMAT - 106)) | (1usize << (FUNCTIONS - 106)) | (1usize << (GRACE - 106)) | (1usize << (GRANT - 106)) | (1usize << (GRANTED - 106)) | (1usize << (GRANTS - 106)) | (1usize << (GRAPHVIZ - 106)) | (1usize << (GROUPING - 106)) | (1usize << (GROUPS - 106)) | (1usize << (GZIP - 106)) | (1usize << (HOUR - 106)) | (1usize << (HOURS - 106)) | (1usize << (IF - 106)) | (1usize << (IGNORE - 106)))) != 0) || ((((_la - 138)) & !0x3f) == 0 && ((1usize << (_la - 138)) & ((1usize << (INCLUDING - 138)) | (1usize << (INITIAL - 138)) | (1usize << (INPUT - 138)) | (1usize << (INTEGER - 138)) | (1usize << (INTERVAL - 138)) | (1usize << (INVOKER - 138)) | (1usize << (IO - 138)) | (1usize << (ISOLATION - 138)) | (1usize << (JSON - 138)) | (1usize << (JSON_ARRAY - 138)) | (1usize << (JSON_EXISTS - 138)) | (1usize << (JSON_OBJECT - 138)) | (1usize << (JSON_QUERY - 138)) | (1usize << (JSON_VALUE - 138)) | (1usize << (KEEP - 138)) | (1usize << (KEY - 138)) | (1usize << (KEYS - 138)) | (1usize << (LAMBDA - 138)) | (1usize << (LAST - 138)) | (1usize << (LATERAL - 138)) | (1usize << (LEADING - 138)) | (1usize << (LEFT - 138)) | (1usize << (LEVEL - 138)))) != 0) || ((((_la - 170)) & !0x3f) == 0 && ((1usize << (_la - 170)) & ((1usize << (LIBRARY - 170)) | (1usize << (LIMIT - 170)) | (1usize << (LISTAGG - 170)) | (1usize << (LOCAL - 170)) | (1usize << (LOCATION - 170)) | (1usize << (LOCK - 170)) | (1usize << (LOGICAL - 170)) | (1usize << (M - 170)) | (1usize << (MAP - 170)) | (1usize << (MASKING - 170)) | (1usize << (MATCH - 170)) | (1usize << (MATCHED - 170)) | (1usize << (MATCHES - 170)) | (1usize << (MATCH_RECOGNIZE - 170)) | (1usize << (MATERIALIZED - 170)) | (1usize << (MAX - 170)) | (1usize << (MEASURES - 170)) | (1usize << (MERGE - 170)) | (1usize << (MIN - 170)) | (1usize << (MINUS_KW - 170)) | (1usize << (MINUTE - 170)) | (1usize << (MINUTES - 170)) | (1usize << (MODEL - 170)) | (1usize << (MONTH - 170)) | (1usize << (MONTHS - 170)) | (1usize << (NEXT - 170)) | (1usize << (NFC - 170)) | (1usize << (NFD - 170)) | (1usize << (NFKC - 170)) | (1usize << (NFKD - 170)))) != 0) || ((((_la - 202)) & !0x3f) == 0 && ((1usize << (_la - 202)) & ((1usize << (NO - 202)) | (1usize << (NONE - 202)) | (1usize << (NORMALIZE - 202)) | (1usize << (NOT - 202)) | (1usize << (NULL - 202)) | (1usize << (NULLS - 202)) | (1usize << (OBJECT - 202)) | (1usize << (OF - 202)) | (1usize << (OFFSET - 202)) | (1usize << (OMIT - 202)) | (1usize << (ONE - 202)) | (1usize << (ONLY - 202)) | (1usize << (OPTION - 202)) | (1usize << (ORDINALITY - 202)) | (1usize << (OUTPUT - 202)) | (1usize << (OVER - 202)) | (1usize << (OVERFLOW - 202)) | (1usize << (PARTITION - 202)) | (1usize << (PARTITIONS - 202)) | (1usize << (PASSING - 202)) | (1usize << (PAST - 202)) | (1usize << (PATH - 202)) | (1usize << (PATTERN - 202)) | (1usize << (PER - 202)) | (1usize << (PERIOD - 202)))) != 0) || ((((_la - 234)) & !0x3f) == 0 && ((1usize << (_la - 234)) & ((1usize << (PERMUTE - 234)) | (1usize << (POSITION - 234)) | (1usize << (PRECEDING - 234)) | (1usize << (PRECISION - 234)) | (1usize << (PROCEDURE - 234)) | (1usize << (PRIVILEGES - 234)) | (1usize << (PROPERTIES - 234)) | (1usize << (PRUNE - 234)) | (1usize << (QUOTES - 234)) | (1usize << (RANGE - 234)) | (1usize << (READ - 234)) | (1usize << (REFRESH - 234)) | (1usize << (RENAME - 234)) | (1usize << (REPEATABLE - 234)) | (1usize << (REPLACE - 234)) | (1usize << (RESET - 234)) | (1usize << (RESPECT - 234)) | (1usize << (RESTRICT - 234)) | (1usize << (RETURNING - 234)) | (1usize << (REVOKE - 234)) | (1usize << (RIGHT - 234)) | (1usize << (RLS - 234)) | (1usize << (ROLE - 234)) | (1usize << (ROLES - 234)) | (1usize << (ROLLBACK - 234)) | (1usize << (ROLLUP - 234)) | (1usize << (ROW - 234)) | (1usize << (ROWS - 234)) | (1usize << (RUNNING - 234)))) != 0) || ((((_la - 266)) & !0x3f) == 0 && ((1usize << (_la - 266)) & ((1usize << (S - 266)) | (1usize << (SCALAR - 266)) | (1usize << (SEC - 266)) | (1usize << (SECOND - 266)) | (1usize << (SECONDS - 266)) | (1usize << (SCHEMA - 266)) | (1usize << (SCHEMAS - 266)) | (1usize << (SECURITY - 266)) | (1usize << (SEEK - 266)) | (1usize << (SEMI - 266)) | (1usize << (SERIALIZABLE - 266)) | (1usize << (SESSION - 266)) | (1usize << (SET - 266)) | (1usize << (SETS - 266)) | (1usize << (SHOW - 266)) | (1usize << (SNAPSHOT - 266)) | (1usize << (SOME - 266)) | (1usize << (START - 266)) | (1usize << (STATS - 266)) | (1usize << (STRUCT - 266)) | (1usize << (SUBSET - 266)) | (1usize << (SUBSTRING - 266)) | (1usize << (SYSTEM - 266)) | (1usize << (SYSTEM_TIME - 266)))) != 0) || ((((_la - 298)) & !0x3f) == 0 && ((1usize << (_la - 298)) & ((1usize << (TABLES - 298)) | (1usize << (TABLESAMPLE - 298)) | (1usize << (TEMP - 298)) | (1usize << (TEMPORARY - 298)) | (1usize << (TEXT - 298)) | (1usize << (STRING_KW - 298)) | (1usize << (TIES - 298)) | (1usize << (TIME - 298)) | (1usize << (TIMESTAMP - 298)) | (1usize << (TO - 298)) | (1usize << (TRAILING - 298)) | (1usize << (TRANSACTION - 298)) | (1usize << (TRIM - 298)) | (1usize << (TRUE - 298)) | (1usize << (TRUNCATE - 298)) | (1usize << (TRY_CAST - 298)) | (1usize << (TUPLE - 298)) | (1usize << (TYPE - 298)) | (1usize << (UNBOUNDED - 298)) | (1usize << (UNCOMMITTED - 298)) | (1usize << (UNCONDITIONAL - 298)) | (1usize << (UNIQUE - 298)) | (1usize << (UNKNOWN - 298)) | (1usize << (UNLOAD - 298)) | (1usize << (UNMATCHED - 298)))) != 0) || ((((_la - 330)) & !0x3f) == 0 && ((1usize << (_la - 330)) & ((1usize << (UPDATE - 330)) | (1usize << (USE - 330)) | (1usize << (USER - 330)) | (1usize << (UTF16 - 330)) | (1usize << (UTF32 - 330)) | (1usize << (UTF8 - 330)) | (1usize << (VACUUM - 330)) | (1usize << (VALIDATE - 330)) | (1usize << (VALUE - 330)) | (1usize << (VARYING - 330)) | (1usize << (VERBOSE - 330)) | (1usize << (VERSION - 330)) | (1usize << (VIEW - 330)) | (1usize << (WEEK - 330)) | (1usize << (WINDOW - 330)) | (1usize << (WITHIN - 330)) | (1usize << (WITHOUT - 330)) | (1usize << (WORK - 330)) | (1usize << (WRAPPER - 330)) | (1usize << (WRITE - 330)) | (1usize << (XZ - 330)) | (1usize << (YEAR - 330)) | (1usize << (YEARS - 330)) | (1usize << (ZONE - 330)) | (1usize << (ZSTD - 330)) | (1usize << (LPAREN - 330)))) != 0) || ((((_la - 363)) & !0x3f) == 0 && ((1usize << (_la - 363)) & ((1usize << (LBRACKET - 363)) | (1usize << (PLUS - 363)) | (1usize << (MINUS - 363)) | (1usize << (POSIX - 363)) | (1usize << (STRING - 363)) | (1usize << (UNICODE_STRING - 363)) | (1usize << (BINARY_LITERAL - 363)) | (1usize << (INTEGER_VALUE - 363)) | (1usize << (DECIMAL_VALUE - 363)) | (1usize << (DOUBLE_VALUE - 363)) | (1usize << (IDENTIFIER - 363)) | (1usize << (QUOTED_IDENTIFIER - 363)) | (1usize << (VARIABLE - 363)))) != 0) {
						{
						/*InvokeRule expression*/
						recog.base.set_state(1200);
						recog.expression()?;

						recog.base.set_state(1205);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(132,&mut recog.base)?;
						while { _alt!=2 && _alt!=INVALID_ALT } {
							if _alt==1 {
								{
								{
								recog.base.set_state(1201);
								recog.base.match_token(COMMA,&mut recog.err_handler)?;

								/*InvokeRule expression*/
								recog.base.set_state(1202);
								recog.expression()?;

								}
								} 
							}
							recog.base.set_state(1207);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(132,&mut recog.base)?;
						}
						recog.base.set_state(1209);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==COMMA {
							{
							recog.base.set_state(1208);
							let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
							if let GroupingElementContextAll::CubeContext(ctx) = cast_mut::<_,GroupingElementContextAll >(&mut _localctx){
							ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

							}
						}

						}
					}

					recog.base.set_state(1213);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				3 =>{
					let tmp = MultipleGroupingSetsContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 3);
					_localctx = tmp;
					{
					recog.base.set_state(1214);
					recog.base.match_token(GROUPING,&mut recog.err_handler)?;

					recog.base.set_state(1215);
					recog.base.match_token(SETS,&mut recog.err_handler)?;

					recog.base.set_state(1216);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule groupingSet*/
					recog.base.set_state(1217);
					recog.groupingSet()?;

					recog.base.set_state(1222);
					recog.err_handler.sync(&mut recog.base)?;
					_alt = recog.interpreter.adaptive_predict(135,&mut recog.base)?;
					while { _alt!=2 && _alt!=INVALID_ALT } {
						if _alt==1 {
							{
							{
							recog.base.set_state(1218);
							recog.base.match_token(COMMA,&mut recog.err_handler)?;

							/*InvokeRule groupingSet*/
							recog.base.set_state(1219);
							recog.groupingSet()?;

							}
							} 
						}
						recog.base.set_state(1224);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(135,&mut recog.base)?;
					}
					recog.base.set_state(1226);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(1225);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						if let GroupingElementContextAll::MultipleGroupingSetsContext(ctx) = cast_mut::<_,GroupingElementContextAll >(&mut _localctx){
						ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(1228);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				4 =>{
					let tmp = SingleGroupingSetContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 4);
					_localctx = tmp;
					{
					/*InvokeRule groupingSet*/
					recog.base.set_state(1230);
					recog.groupingSet()?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- groupingSet ----------------
pub type GroupingSetContextAll<'input> = GroupingSetContext<'input>;


pub type GroupingSetContext<'input> = BaseParserRuleContext<'input,GroupingSetContextExt<'input>>;

#[derive(Clone)]
pub struct GroupingSetContextExt<'input>{
	pub tail: Option<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for GroupingSetContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for GroupingSetContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_groupingSet(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_groupingSet(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for GroupingSetContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_groupingSet(self);
	}
}

impl<'input> CustomRuleContext<'input> for GroupingSetContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_groupingSet }
	//fn type_rule_index() -> usize where Self: Sized { RULE_groupingSet }
}
antlr_rust::tid!{GroupingSetContextExt<'a>}

impl<'input> GroupingSetContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<GroupingSetContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,GroupingSetContextExt{
				tail: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait GroupingSetContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<GroupingSetContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token LPAREN
/// Returns `None` if there is no child corresponding to token LPAREN
fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, 0)
}
/// Retrieves first TerminalNode corresponding to token RPAREN
/// Returns `None` if there is no child corresponding to token RPAREN
fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, 0)
}
fn expression_all(&self) ->  Vec<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn expression(&self, i: usize) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> GroupingSetContextAttrs<'input> for GroupingSetContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn groupingSet(&mut self,)
	-> Result<Rc<GroupingSetContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = GroupingSetContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 86, RULE_groupingSet);
        let mut _localctx: Rc<GroupingSetContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			recog.base.set_state(1249);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(141,&mut recog.base)? {
				1 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(1233);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					recog.base.set_state(1242);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if ((((_la - 9)) & !0x3f) == 0 && ((1usize << (_la - 9)) & ((1usize << (ABORT - 9)) | (1usize << (ABSENT - 9)) | (1usize << (ADD - 9)) | (1usize << (ADMIN - 9)) | (1usize << (AFTER - 9)) | (1usize << (ALL - 9)) | (1usize << (ANALYZE - 9)) | (1usize << (ANTI - 9)) | (1usize << (ANY - 9)) | (1usize << (ARRAY - 9)) | (1usize << (ASC - 9)) | (1usize << (AT - 9)) | (1usize << (ATTACH - 9)) | (1usize << (AUTHORIZATION - 9)) | (1usize << (BEGIN - 9)) | (1usize << (BERNOULLI - 9)) | (1usize << (BOTH - 9)) | (1usize << (BZIP2 - 9)) | (1usize << (CALL - 9)) | (1usize << (CANCEL - 9)) | (1usize << (CASCADE - 9)) | (1usize << (CASE - 9)) | (1usize << (CAST - 9)))) != 0) || ((((_la - 41)) & !0x3f) == 0 && ((1usize << (_la - 41)) & ((1usize << (CATALOGS - 41)) | (1usize << (CHARACTER - 41)) | (1usize << (CLONE - 41)) | (1usize << (CLOSE - 41)) | (1usize << (CLUSTER - 41)) | (1usize << (COLUMN - 41)) | (1usize << (COLUMNS - 41)) | (1usize << (COMMENT - 41)) | (1usize << (COMMIT - 41)) | (1usize << (COMMITTED - 41)) | (1usize << (COMPRESSION - 41)) | (1usize << (CONDITIONAL - 41)) | (1usize << (CONNECTION - 41)) | (1usize << (COPARTITION - 41)) | (1usize << (COPY - 41)) | (1usize << (COUNT - 41)) | (1usize << (CURRENT - 41)) | (1usize << (DATA - 41)) | (1usize << (DATABASE - 41)) | (1usize << (DATASHARE - 41)) | (1usize << (DATE - 41)) | (1usize << (DAY - 41)) | (1usize << (DAYS - 41)))) != 0) || ((((_la - 74)) & !0x3f) == 0 && ((1usize << (_la - 74)) & ((1usize << (DECLARE - 74)) | (1usize << (DEFAULT - 74)) | (1usize << (DEFINE - 74)) | (1usize << (DEFINER - 74)) | (1usize << (DELIMITER - 74)) | (1usize << (DENY - 74)) | (1usize << (DESC - 74)) | (1usize << (DESCRIBE - 74)) | (1usize << (DESCRIPTOR - 74)) | (1usize << (DISTRIBUTED - 74)) | (1usize << (DETACH - 74)) | (1usize << (DOUBLE - 74)) | (1usize << (EMPTY - 74)) | (1usize << (ENCODING - 74)) | (1usize << (END - 74)) | (1usize << (ERROR - 74)) | (1usize << (EXCLUDING - 74)) | (1usize << (EXECUTE - 74)) | (1usize << (EXISTS - 74)) | (1usize << (EXPLAIN - 74)))) != 0) || ((((_la - 106)) & !0x3f) == 0 && ((1usize << (_la - 106)) & ((1usize << (EXTERNAL - 106)) | (1usize << (EXTRACT - 106)) | (1usize << (FALSE - 106)) | (1usize << (FETCH - 106)) | (1usize << (FILTER - 106)) | (1usize << (FINAL - 106)) | (1usize << (FIRST - 106)) | (1usize << (FOLLOWING - 106)) | (1usize << (FORMAT - 106)) | (1usize << (FUNCTIONS - 106)) | (1usize << (GRACE - 106)) | (1usize << (GRANT - 106)) | (1usize << (GRANTED - 106)) | (1usize << (GRANTS - 106)) | (1usize << (GRAPHVIZ - 106)) | (1usize << (GROUPING - 106)) | (1usize << (GROUPS - 106)) | (1usize << (GZIP - 106)) | (1usize << (HOUR - 106)) | (1usize << (HOURS - 106)) | (1usize << (IF - 106)) | (1usize << (IGNORE - 106)))) != 0) || ((((_la - 138)) & !0x3f) == 0 && ((1usize << (_la - 138)) & ((1usize << (INCLUDING - 138)) | (1usize << (INITIAL - 138)) | (1usize << (INPUT - 138)) | (1usize << (INTEGER - 138)) | (1usize << (INTERVAL - 138)) | (1usize << (INVOKER - 138)) | (1usize << (IO - 138)) | (1usize << (ISOLATION - 138)) | (1usize << (JSON - 138)) | (1usize << (JSON_ARRAY - 138)) | (1usize << (JSON_EXISTS - 138)) | (1usize << (JSON_OBJECT - 138)) | (1usize << (JSON_QUERY - 138)) | (1usize << (JSON_VALUE - 138)) | (1usize << (KEEP - 138)) | (1usize << (KEY - 138)) | (1usize << (KEYS - 138)) | (1usize << (LAMBDA - 138)) | (1usize << (LAST - 138)) | (1usize << (LATERAL - 138)) | (1usize << (LEADING - 138)) | (1usize << (LEFT - 138)) | (1usize << (LEVEL - 138)))) != 0) || ((((_la - 170)) & !0x3f) == 0 && ((1usize << (_la - 170)) & ((1usize << (LIBRARY - 170)) | (1usize << (LIMIT - 170)) | (1usize << (LISTAGG - 170)) | (1usize << (LOCAL - 170)) | (1usize << (LOCATION - 170)) | (1usize << (LOCK - 170)) | (1usize << (LOGICAL - 170)) | (1usize << (M - 170)) | (1usize << (MAP - 170)) | (1usize << (MASKING - 170)) | (1usize << (MATCH - 170)) | (1usize << (MATCHED - 170)) | (1usize << (MATCHES - 170)) | (1usize << (MATCH_RECOGNIZE - 170)) | (1usize << (MATERIALIZED - 170)) | (1usize << (MAX - 170)) | (1usize << (MEASURES - 170)) | (1usize << (MERGE - 170)) | (1usize << (MIN - 170)) | (1usize << (MINUS_KW - 170)) | (1usize << (MINUTE - 170)) | (1usize << (MINUTES - 170)) | (1usize << (MODEL - 170)) | (1usize << (MONTH - 170)) | (1usize << (MONTHS - 170)) | (1usize << (NEXT - 170)) | (1usize << (NFC - 170)) | (1usize << (NFD - 170)) | (1usize << (NFKC - 170)) | (1usize << (NFKD - 170)))) != 0) || ((((_la - 202)) & !0x3f) == 0 && ((1usize << (_la - 202)) & ((1usize << (NO - 202)) | (1usize << (NONE - 202)) | (1usize << (NORMALIZE - 202)) | (1usize << (NOT - 202)) | (1usize << (NULL - 202)) | (1usize << (NULLS - 202)) | (1usize << (OBJECT - 202)) | (1usize << (OF - 202)) | (1usize << (OFFSET - 202)) | (1usize << (OMIT - 202)) | (1usize << (ONE - 202)) | (1usize << (ONLY - 202)) | (1usize << (OPTION - 202)) | (1usize << (ORDINALITY - 202)) | (1usize << (OUTPUT - 202)) | (1usize << (OVER - 202)) | (1usize << (OVERFLOW - 202)) | (1usize << (PARTITION - 202)) | (1usize << (PARTITIONS - 202)) | (1usize << (PASSING - 202)) | (1usize << (PAST - 202)) | (1usize << (PATH - 202)) | (1usize << (PATTERN - 202)) | (1usize << (PER - 202)) | (1usize << (PERIOD - 202)))) != 0) || ((((_la - 234)) & !0x3f) == 0 && ((1usize << (_la - 234)) & ((1usize << (PERMUTE - 234)) | (1usize << (POSITION - 234)) | (1usize << (PRECEDING - 234)) | (1usize << (PRECISION - 234)) | (1usize << (PROCEDURE - 234)) | (1usize << (PRIVILEGES - 234)) | (1usize << (PROPERTIES - 234)) | (1usize << (PRUNE - 234)) | (1usize << (QUOTES - 234)) | (1usize << (RANGE - 234)) | (1usize << (READ - 234)) | (1usize << (REFRESH - 234)) | (1usize << (RENAME - 234)) | (1usize << (REPEATABLE - 234)) | (1usize << (REPLACE - 234)) | (1usize << (RESET - 234)) | (1usize << (RESPECT - 234)) | (1usize << (RESTRICT - 234)) | (1usize << (RETURNING - 234)) | (1usize << (REVOKE - 234)) | (1usize << (RIGHT - 234)) | (1usize << (RLS - 234)) | (1usize << (ROLE - 234)) | (1usize << (ROLES - 234)) | (1usize << (ROLLBACK - 234)) | (1usize << (ROLLUP - 234)) | (1usize << (ROW - 234)) | (1usize << (ROWS - 234)) | (1usize << (RUNNING - 234)))) != 0) || ((((_la - 266)) & !0x3f) == 0 && ((1usize << (_la - 266)) & ((1usize << (S - 266)) | (1usize << (SCALAR - 266)) | (1usize << (SEC - 266)) | (1usize << (SECOND - 266)) | (1usize << (SECONDS - 266)) | (1usize << (SCHEMA - 266)) | (1usize << (SCHEMAS - 266)) | (1usize << (SECURITY - 266)) | (1usize << (SEEK - 266)) | (1usize << (SEMI - 266)) | (1usize << (SERIALIZABLE - 266)) | (1usize << (SESSION - 266)) | (1usize << (SET - 266)) | (1usize << (SETS - 266)) | (1usize << (SHOW - 266)) | (1usize << (SNAPSHOT - 266)) | (1usize << (SOME - 266)) | (1usize << (START - 266)) | (1usize << (STATS - 266)) | (1usize << (STRUCT - 266)) | (1usize << (SUBSET - 266)) | (1usize << (SUBSTRING - 266)) | (1usize << (SYSTEM - 266)) | (1usize << (SYSTEM_TIME - 266)))) != 0) || ((((_la - 298)) & !0x3f) == 0 && ((1usize << (_la - 298)) & ((1usize << (TABLES - 298)) | (1usize << (TABLESAMPLE - 298)) | (1usize << (TEMP - 298)) | (1usize << (TEMPORARY - 298)) | (1usize << (TEXT - 298)) | (1usize << (STRING_KW - 298)) | (1usize << (TIES - 298)) | (1usize << (TIME - 298)) | (1usize << (TIMESTAMP - 298)) | (1usize << (TO - 298)) | (1usize << (TRAILING - 298)) | (1usize << (TRANSACTION - 298)) | (1usize << (TRIM - 298)) | (1usize << (TRUE - 298)) | (1usize << (TRUNCATE - 298)) | (1usize << (TRY_CAST - 298)) | (1usize << (TUPLE - 298)) | (1usize << (TYPE - 298)) | (1usize << (UNBOUNDED - 298)) | (1usize << (UNCOMMITTED - 298)) | (1usize << (UNCONDITIONAL - 298)) | (1usize << (UNIQUE - 298)) | (1usize << (UNKNOWN - 298)) | (1usize << (UNLOAD - 298)) | (1usize << (UNMATCHED - 298)))) != 0) || ((((_la - 330)) & !0x3f) == 0 && ((1usize << (_la - 330)) & ((1usize << (UPDATE - 330)) | (1usize << (USE - 330)) | (1usize << (USER - 330)) | (1usize << (UTF16 - 330)) | (1usize << (UTF32 - 330)) | (1usize << (UTF8 - 330)) | (1usize << (VACUUM - 330)) | (1usize << (VALIDATE - 330)) | (1usize << (VALUE - 330)) | (1usize << (VARYING - 330)) | (1usize << (VERBOSE - 330)) | (1usize << (VERSION - 330)) | (1usize << (VIEW - 330)) | (1usize << (WEEK - 330)) | (1usize << (WINDOW - 330)) | (1usize << (WITHIN - 330)) | (1usize << (WITHOUT - 330)) | (1usize << (WORK - 330)) | (1usize << (WRAPPER - 330)) | (1usize << (WRITE - 330)) | (1usize << (XZ - 330)) | (1usize << (YEAR - 330)) | (1usize << (YEARS - 330)) | (1usize << (ZONE - 330)) | (1usize << (ZSTD - 330)) | (1usize << (LPAREN - 330)))) != 0) || ((((_la - 363)) & !0x3f) == 0 && ((1usize << (_la - 363)) & ((1usize << (LBRACKET - 363)) | (1usize << (PLUS - 363)) | (1usize << (MINUS - 363)) | (1usize << (POSIX - 363)) | (1usize << (STRING - 363)) | (1usize << (UNICODE_STRING - 363)) | (1usize << (BINARY_LITERAL - 363)) | (1usize << (INTEGER_VALUE - 363)) | (1usize << (DECIMAL_VALUE - 363)) | (1usize << (DOUBLE_VALUE - 363)) | (1usize << (IDENTIFIER - 363)) | (1usize << (QUOTED_IDENTIFIER - 363)) | (1usize << (VARIABLE - 363)))) != 0) {
						{
						/*InvokeRule expression*/
						recog.base.set_state(1234);
						recog.expression()?;

						recog.base.set_state(1239);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(138,&mut recog.base)?;
						while { _alt!=2 && _alt!=INVALID_ALT } {
							if _alt==1 {
								{
								{
								recog.base.set_state(1235);
								recog.base.match_token(COMMA,&mut recog.err_handler)?;

								/*InvokeRule expression*/
								recog.base.set_state(1236);
								recog.expression()?;

								}
								} 
							}
							recog.base.set_state(1241);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(138,&mut recog.base)?;
						}
						}
					}

					recog.base.set_state(1245);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(1244);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						 cast_mut::<_,GroupingSetContext >(&mut _localctx).tail = Some(tmp);
						  

						}
					}

					recog.base.set_state(1247);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				2 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					/*InvokeRule expression*/
					recog.base.set_state(1248);
					recog.expression()?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- windowDefinition ----------------
pub type WindowDefinitionContextAll<'input> = WindowDefinitionContext<'input>;


pub type WindowDefinitionContext<'input> = BaseParserRuleContext<'input,WindowDefinitionContextExt<'input>>;

#[derive(Clone)]
pub struct WindowDefinitionContextExt<'input>{
	pub name: Option<Rc<IdentifierContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for WindowDefinitionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for WindowDefinitionContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_windowDefinition(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_windowDefinition(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for WindowDefinitionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_windowDefinition(self);
	}
}

impl<'input> CustomRuleContext<'input> for WindowDefinitionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_windowDefinition }
	//fn type_rule_index() -> usize where Self: Sized { RULE_windowDefinition }
}
antlr_rust::tid!{WindowDefinitionContextExt<'a>}

impl<'input> WindowDefinitionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<WindowDefinitionContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,WindowDefinitionContextExt{
				name: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait WindowDefinitionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<WindowDefinitionContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token AS
/// Returns `None` if there is no child corresponding to token AS
fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(AS, 0)
}
/// Retrieves first TerminalNode corresponding to token LPAREN
/// Returns `None` if there is no child corresponding to token LPAREN
fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, 0)
}
fn windowSpecification(&self) -> Option<Rc<WindowSpecificationContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token RPAREN
/// Returns `None` if there is no child corresponding to token RPAREN
fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, 0)
}
fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> WindowDefinitionContextAttrs<'input> for WindowDefinitionContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn windowDefinition(&mut self,)
	-> Result<Rc<WindowDefinitionContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = WindowDefinitionContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 88, RULE_windowDefinition);
        let mut _localctx: Rc<WindowDefinitionContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule identifier*/
			recog.base.set_state(1251);
			let tmp = recog.identifier()?;
			 cast_mut::<_,WindowDefinitionContext >(&mut _localctx).name = Some(tmp.clone());
			  

			recog.base.set_state(1252);
			recog.base.match_token(AS,&mut recog.err_handler)?;

			recog.base.set_state(1253);
			recog.base.match_token(LPAREN,&mut recog.err_handler)?;

			/*InvokeRule windowSpecification*/
			recog.base.set_state(1254);
			recog.windowSpecification()?;

			recog.base.set_state(1255);
			recog.base.match_token(RPAREN,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- windowSpecification ----------------
pub type WindowSpecificationContextAll<'input> = WindowSpecificationContext<'input>;


pub type WindowSpecificationContext<'input> = BaseParserRuleContext<'input,WindowSpecificationContextExt<'input>>;

#[derive(Clone)]
pub struct WindowSpecificationContextExt<'input>{
	pub existingWindowName: Option<Rc<IdentifierContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for WindowSpecificationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for WindowSpecificationContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_windowSpecification(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_windowSpecification(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for WindowSpecificationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_windowSpecification(self);
	}
}

impl<'input> CustomRuleContext<'input> for WindowSpecificationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_windowSpecification }
	//fn type_rule_index() -> usize where Self: Sized { RULE_windowSpecification }
}
antlr_rust::tid!{WindowSpecificationContextExt<'a>}

impl<'input> WindowSpecificationContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<WindowSpecificationContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,WindowSpecificationContextExt{
				existingWindowName: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait WindowSpecificationContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<WindowSpecificationContextExt<'input>>{

fn windowSpecificationPartitionBy(&self) -> Option<Rc<WindowSpecificationPartitionByContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn orderBy(&self) -> Option<Rc<OrderByContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn windowFrame(&self) -> Option<Rc<WindowFrameContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> WindowSpecificationContextAttrs<'input> for WindowSpecificationContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn windowSpecification(&mut self,)
	-> Result<Rc<WindowSpecificationContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = WindowSpecificationContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 90, RULE_windowSpecification);
        let mut _localctx: Rc<WindowSpecificationContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1258);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(142,&mut recog.base)? {
				x if x == 1=>{
					{
					/*InvokeRule identifier*/
					recog.base.set_state(1257);
					let tmp = recog.identifier()?;
					 cast_mut::<_,WindowSpecificationContext >(&mut _localctx).existingWindowName = Some(tmp.clone());
					  

					}
				}

				_ => {}
			}
			recog.base.set_state(1261);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==PARTITION {
				{
				/*InvokeRule windowSpecificationPartitionBy*/
				recog.base.set_state(1260);
				recog.windowSpecificationPartitionBy()?;

				}
			}

			recog.base.set_state(1264);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==ORDER {
				{
				/*InvokeRule orderBy*/
				recog.base.set_state(1263);
				recog.orderBy()?;

				}
			}

			recog.base.set_state(1267);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==GROUPS || _la==MEASURES || _la==RANGE || _la==ROWS {
				{
				/*InvokeRule windowFrame*/
				recog.base.set_state(1266);
				recog.windowFrame()?;

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- windowSpecificationPartitionBy ----------------
pub type WindowSpecificationPartitionByContextAll<'input> = WindowSpecificationPartitionByContext<'input>;


pub type WindowSpecificationPartitionByContext<'input> = BaseParserRuleContext<'input,WindowSpecificationPartitionByContextExt<'input>>;

#[derive(Clone)]
pub struct WindowSpecificationPartitionByContextExt<'input>{
	pub expression: Option<Rc<ExpressionContextAll<'input>>>,
	pub partition:Vec<Rc<ExpressionContextAll<'input>>>,
	pub COMMA: Option<TokenType<'input>>,
	pub tail:Vec<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for WindowSpecificationPartitionByContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for WindowSpecificationPartitionByContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_windowSpecificationPartitionBy(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_windowSpecificationPartitionBy(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for WindowSpecificationPartitionByContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_windowSpecificationPartitionBy(self);
	}
}

impl<'input> CustomRuleContext<'input> for WindowSpecificationPartitionByContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_windowSpecificationPartitionBy }
	//fn type_rule_index() -> usize where Self: Sized { RULE_windowSpecificationPartitionBy }
}
antlr_rust::tid!{WindowSpecificationPartitionByContextExt<'a>}

impl<'input> WindowSpecificationPartitionByContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<WindowSpecificationPartitionByContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,WindowSpecificationPartitionByContextExt{
				COMMA: None, 
				tail: Vec::new(), 
				expression: None, 
				partition: Vec::new(), 
				ph:PhantomData
			}),
		)
	}
}

pub trait WindowSpecificationPartitionByContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<WindowSpecificationPartitionByContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token PARTITION
/// Returns `None` if there is no child corresponding to token PARTITION
fn PARTITION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PARTITION, 0)
}
/// Retrieves first TerminalNode corresponding to token BY
/// Returns `None` if there is no child corresponding to token BY
fn BY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(BY, 0)
}
fn expression_all(&self) ->  Vec<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn expression(&self, i: usize) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> WindowSpecificationPartitionByContextAttrs<'input> for WindowSpecificationPartitionByContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn windowSpecificationPartitionBy(&mut self,)
	-> Result<Rc<WindowSpecificationPartitionByContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = WindowSpecificationPartitionByContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 92, RULE_windowSpecificationPartitionBy);
        let mut _localctx: Rc<WindowSpecificationPartitionByContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1269);
			recog.base.match_token(PARTITION,&mut recog.err_handler)?;

			recog.base.set_state(1270);
			recog.base.match_token(BY,&mut recog.err_handler)?;

			/*InvokeRule expression*/
			recog.base.set_state(1271);
			let tmp = recog.expression()?;
			 cast_mut::<_,WindowSpecificationPartitionByContext >(&mut _localctx).expression = Some(tmp.clone());
			  

			let temp =  cast_mut::<_,WindowSpecificationPartitionByContext >(&mut _localctx).expression.clone().unwrap()
			 ;
			 cast_mut::<_,WindowSpecificationPartitionByContext >(&mut _localctx).partition.push(temp);
			  
			recog.base.set_state(1276);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(146,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					{
					{
					recog.base.set_state(1272);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule expression*/
					recog.base.set_state(1273);
					let tmp = recog.expression()?;
					 cast_mut::<_,WindowSpecificationPartitionByContext >(&mut _localctx).expression = Some(tmp.clone());
					  

					let temp =  cast_mut::<_,WindowSpecificationPartitionByContext >(&mut _localctx).expression.clone().unwrap()
					 ;
					 cast_mut::<_,WindowSpecificationPartitionByContext >(&mut _localctx).partition.push(temp);
					  
					}
					} 
				}
				recog.base.set_state(1278);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(146,&mut recog.base)?;
			}
			recog.base.set_state(1280);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==COMMA {
				{
				recog.base.set_state(1279);
				let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
				 cast_mut::<_,WindowSpecificationPartitionByContext >(&mut _localctx).COMMA = Some(tmp);
				  

				let temp =  cast_mut::<_,WindowSpecificationPartitionByContext >(&mut _localctx).COMMA.clone().unwrap()
				 ;
				 cast_mut::<_,WindowSpecificationPartitionByContext >(&mut _localctx).tail.push(temp);
				  
				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- orderBy ----------------
pub type OrderByContextAll<'input> = OrderByContext<'input>;


pub type OrderByContext<'input> = BaseParserRuleContext<'input,OrderByContextExt<'input>>;

#[derive(Clone)]
pub struct OrderByContextExt<'input>{
	pub COMMA: Option<TokenType<'input>>,
	pub tail:Vec<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for OrderByContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for OrderByContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_orderBy(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_orderBy(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for OrderByContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_orderBy(self);
	}
}

impl<'input> CustomRuleContext<'input> for OrderByContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_orderBy }
	//fn type_rule_index() -> usize where Self: Sized { RULE_orderBy }
}
antlr_rust::tid!{OrderByContextExt<'a>}

impl<'input> OrderByContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<OrderByContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,OrderByContextExt{
				COMMA: None, 
				tail: Vec::new(), 
				ph:PhantomData
			}),
		)
	}
}

pub trait OrderByContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<OrderByContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token ORDER
/// Returns `None` if there is no child corresponding to token ORDER
fn ORDER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ORDER, 0)
}
/// Retrieves first TerminalNode corresponding to token BY
/// Returns `None` if there is no child corresponding to token BY
fn BY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(BY, 0)
}
fn sortItem_all(&self) ->  Vec<Rc<SortItemContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn sortItem(&self, i: usize) -> Option<Rc<SortItemContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> OrderByContextAttrs<'input> for OrderByContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn orderBy(&mut self,)
	-> Result<Rc<OrderByContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = OrderByContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 94, RULE_orderBy);
        let mut _localctx: Rc<OrderByContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1282);
			recog.base.match_token(ORDER,&mut recog.err_handler)?;

			recog.base.set_state(1283);
			recog.base.match_token(BY,&mut recog.err_handler)?;

			/*InvokeRule sortItem*/
			recog.base.set_state(1284);
			recog.sortItem()?;

			recog.base.set_state(1289);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(148,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					{
					{
					recog.base.set_state(1285);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule sortItem*/
					recog.base.set_state(1286);
					recog.sortItem()?;

					}
					} 
				}
				recog.base.set_state(1291);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(148,&mut recog.base)?;
			}
			recog.base.set_state(1293);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==COMMA {
				{
				recog.base.set_state(1292);
				let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
				 cast_mut::<_,OrderByContext >(&mut _localctx).COMMA = Some(tmp);
				  

				let temp =  cast_mut::<_,OrderByContext >(&mut _localctx).COMMA.clone().unwrap()
				 ;
				 cast_mut::<_,OrderByContext >(&mut _localctx).tail.push(temp);
				  
				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- namedQuery ----------------
pub type NamedQueryContextAll<'input> = NamedQueryContext<'input>;


pub type NamedQueryContext<'input> = BaseParserRuleContext<'input,NamedQueryContextExt<'input>>;

#[derive(Clone)]
pub struct NamedQueryContextExt<'input>{
	pub name: Option<Rc<IdentifierContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for NamedQueryContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for NamedQueryContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_namedQuery(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_namedQuery(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for NamedQueryContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_namedQuery(self);
	}
}

impl<'input> CustomRuleContext<'input> for NamedQueryContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_namedQuery }
	//fn type_rule_index() -> usize where Self: Sized { RULE_namedQuery }
}
antlr_rust::tid!{NamedQueryContextExt<'a>}

impl<'input> NamedQueryContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<NamedQueryContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,NamedQueryContextExt{
				name: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait NamedQueryContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<NamedQueryContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token AS
/// Returns `None` if there is no child corresponding to token AS
fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(AS, 0)
}
/// Retrieves first TerminalNode corresponding to token LPAREN
/// Returns `None` if there is no child corresponding to token LPAREN
fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, 0)
}
fn query(&self) -> Option<Rc<QueryContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token RPAREN
/// Returns `None` if there is no child corresponding to token RPAREN
fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, 0)
}
fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn columnAliases(&self) -> Option<Rc<ColumnAliasesContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> NamedQueryContextAttrs<'input> for NamedQueryContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn namedQuery(&mut self,)
	-> Result<Rc<NamedQueryContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = NamedQueryContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 96, RULE_namedQuery);
        let mut _localctx: Rc<NamedQueryContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule identifier*/
			recog.base.set_state(1295);
			let tmp = recog.identifier()?;
			 cast_mut::<_,NamedQueryContext >(&mut _localctx).name = Some(tmp.clone());
			  

			recog.base.set_state(1297);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==LPAREN {
				{
				/*InvokeRule columnAliases*/
				recog.base.set_state(1296);
				recog.columnAliases()?;

				}
			}

			recog.base.set_state(1299);
			recog.base.match_token(AS,&mut recog.err_handler)?;

			recog.base.set_state(1300);
			recog.base.match_token(LPAREN,&mut recog.err_handler)?;

			/*InvokeRule query*/
			recog.base.set_state(1301);
			recog.query()?;

			recog.base.set_state(1302);
			recog.base.match_token(RPAREN,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- selectItemAlias ----------------
pub type SelectItemAliasContextAll<'input> = SelectItemAliasContext<'input>;


pub type SelectItemAliasContext<'input> = BaseParserRuleContext<'input,SelectItemAliasContextExt<'input>>;

#[derive(Clone)]
pub struct SelectItemAliasContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SelectItemAliasContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SelectItemAliasContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_selectItemAlias(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_selectItemAlias(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SelectItemAliasContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_selectItemAlias(self);
	}
}

impl<'input> CustomRuleContext<'input> for SelectItemAliasContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_selectItemAlias }
	//fn type_rule_index() -> usize where Self: Sized { RULE_selectItemAlias }
}
antlr_rust::tid!{SelectItemAliasContextExt<'a>}

impl<'input> SelectItemAliasContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SelectItemAliasContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SelectItemAliasContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait SelectItemAliasContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SelectItemAliasContextExt<'input>>{

fn columnName(&self) -> Option<Rc<ColumnNameContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> SelectItemAliasContextAttrs<'input> for SelectItemAliasContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn selectItemAlias(&mut self,)
	-> Result<Rc<SelectItemAliasContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SelectItemAliasContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 98, RULE_selectItemAlias);
        let mut _localctx: Rc<SelectItemAliasContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule columnName*/
			recog.base.set_state(1304);
			recog.columnName()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- selectItem ----------------
#[derive(Debug)]
pub enum SelectItemContextAll<'input>{
	SelectSingleContext(SelectSingleContext<'input>),
	SelectMultiContext(SelectMultiContext<'input>),
Error(SelectItemContext<'input>)
}
antlr_rust::tid!{SelectItemContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for SelectItemContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for SelectItemContextAll<'input>{}

impl<'input> Deref for SelectItemContextAll<'input>{
	type Target = dyn SelectItemContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use SelectItemContextAll::*;
		match self{
			SelectSingleContext(inner) => inner,
			SelectMultiContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SelectItemContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SelectItemContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type SelectItemContext<'input> = BaseParserRuleContext<'input,SelectItemContextExt<'input>>;

#[derive(Clone)]
pub struct SelectItemContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SelectItemContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SelectItemContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SelectItemContext<'input>{
}

impl<'input> CustomRuleContext<'input> for SelectItemContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_selectItem }
	//fn type_rule_index() -> usize where Self: Sized { RULE_selectItem }
}
antlr_rust::tid!{SelectItemContextExt<'a>}

impl<'input> SelectItemContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SelectItemContextAll<'input>> {
		Rc::new(
		SelectItemContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SelectItemContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait SelectItemContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SelectItemContextExt<'input>>{


}

impl<'input> SelectItemContextAttrs<'input> for SelectItemContext<'input>{}

pub type SelectSingleContext<'input> = BaseParserRuleContext<'input,SelectSingleContextExt<'input>>;

pub trait SelectSingleContextAttrs<'input>: TrinoParserContext<'input>{
	fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn selectItemAlias(&self) -> Option<Rc<SelectItemAliasContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token AS
	/// Returns `None` if there is no child corresponding to token AS
	fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(AS, 0)
	}
}

impl<'input> SelectSingleContextAttrs<'input> for SelectSingleContext<'input>{}

pub struct SelectSingleContextExt<'input>{
	base:SelectItemContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SelectSingleContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SelectSingleContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SelectSingleContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_selectSingle(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_selectSingle(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SelectSingleContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_selectSingle(self);
	}
}

impl<'input> CustomRuleContext<'input> for SelectSingleContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_selectItem }
	//fn type_rule_index() -> usize where Self: Sized { RULE_selectItem }
}

impl<'input> Borrow<SelectItemContextExt<'input>> for SelectSingleContext<'input>{
	fn borrow(&self) -> &SelectItemContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<SelectItemContextExt<'input>> for SelectSingleContext<'input>{
	fn borrow_mut(&mut self) -> &mut SelectItemContextExt<'input> { &mut self.base }
}

impl<'input> SelectItemContextAttrs<'input> for SelectSingleContext<'input> {}

impl<'input> SelectSingleContextExt<'input>{
	fn new(ctx: &dyn SelectItemContextAttrs<'input>) -> Rc<SelectItemContextAll<'input>>  {
		Rc::new(
			SelectItemContextAll::SelectSingleContext(
				BaseParserRuleContext::copy_from(ctx,SelectSingleContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SelectMultiContext<'input> = BaseParserRuleContext<'input,SelectMultiContextExt<'input>>;

pub trait SelectMultiContextAttrs<'input>: TrinoParserContext<'input>{
	fn multiSelect(&self) -> Option<Rc<MultiSelectContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> SelectMultiContextAttrs<'input> for SelectMultiContext<'input>{}

pub struct SelectMultiContextExt<'input>{
	base:SelectItemContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SelectMultiContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SelectMultiContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SelectMultiContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_selectMulti(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_selectMulti(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SelectMultiContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_selectMulti(self);
	}
}

impl<'input> CustomRuleContext<'input> for SelectMultiContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_selectItem }
	//fn type_rule_index() -> usize where Self: Sized { RULE_selectItem }
}

impl<'input> Borrow<SelectItemContextExt<'input>> for SelectMultiContext<'input>{
	fn borrow(&self) -> &SelectItemContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<SelectItemContextExt<'input>> for SelectMultiContext<'input>{
	fn borrow_mut(&mut self) -> &mut SelectItemContextExt<'input> { &mut self.base }
}

impl<'input> SelectItemContextAttrs<'input> for SelectMultiContext<'input> {}

impl<'input> SelectMultiContextExt<'input>{
	fn new(ctx: &dyn SelectItemContextAttrs<'input>) -> Rc<SelectItemContextAll<'input>>  {
		Rc::new(
			SelectItemContextAll::SelectMultiContext(
				BaseParserRuleContext::copy_from(ctx,SelectMultiContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn selectItem(&mut self,)
	-> Result<Rc<SelectItemContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SelectItemContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 100, RULE_selectItem);
        let mut _localctx: Rc<SelectItemContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(1314);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(153,&mut recog.base)? {
				1 =>{
					let tmp = SelectSingleContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					/*InvokeRule expression*/
					recog.base.set_state(1306);
					recog.expression()?;

					recog.base.set_state(1311);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(152,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(1308);
							recog.err_handler.sync(&mut recog.base)?;
							_la = recog.base.input.la(1);
							if _la==AS {
								{
								recog.base.set_state(1307);
								recog.base.match_token(AS,&mut recog.err_handler)?;

								}
							}

							/*InvokeRule selectItemAlias*/
							recog.base.set_state(1310);
							recog.selectItemAlias()?;

							}
						}

						_ => {}
					}
					}
				}
			,
				2 =>{
					let tmp = SelectMultiContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					/*InvokeRule multiSelect*/
					recog.base.set_state(1313);
					recog.multiSelect()?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- multiSelect ----------------
pub type MultiSelectContextAll<'input> = MultiSelectContext<'input>;


pub type MultiSelectContext<'input> = BaseParserRuleContext<'input,MultiSelectContextExt<'input>>;

#[derive(Clone)]
pub struct MultiSelectContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for MultiSelectContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for MultiSelectContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_multiSelect(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_multiSelect(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for MultiSelectContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_multiSelect(self);
	}
}

impl<'input> CustomRuleContext<'input> for MultiSelectContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_multiSelect }
	//fn type_rule_index() -> usize where Self: Sized { RULE_multiSelect }
}
antlr_rust::tid!{MultiSelectContextExt<'a>}

impl<'input> MultiSelectContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<MultiSelectContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,MultiSelectContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait MultiSelectContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<MultiSelectContextExt<'input>>{

fn selectStar(&self) -> Option<Rc<SelectStarContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> MultiSelectContextAttrs<'input> for MultiSelectContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn multiSelect(&mut self,)
	-> Result<Rc<MultiSelectContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = MultiSelectContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 102, RULE_multiSelect);
        let mut _localctx: Rc<MultiSelectContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule selectStar*/
			recog.base.set_state(1316);
			recog.selectStar()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- selectStar ----------------
pub type SelectStarContextAll<'input> = SelectStarContext<'input>;


pub type SelectStarContext<'input> = BaseParserRuleContext<'input,SelectStarContextExt<'input>>;

#[derive(Clone)]
pub struct SelectStarContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SelectStarContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SelectStarContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_selectStar(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_selectStar(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SelectStarContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_selectStar(self);
	}
}

impl<'input> CustomRuleContext<'input> for SelectStarContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_selectStar }
	//fn type_rule_index() -> usize where Self: Sized { RULE_selectStar }
}
antlr_rust::tid!{SelectStarContextExt<'a>}

impl<'input> SelectStarContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SelectStarContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SelectStarContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait SelectStarContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SelectStarContextExt<'input>>{

fn primaryExpression(&self) -> Option<Rc<PrimaryExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token DOT
/// Returns `None` if there is no child corresponding to token DOT
fn DOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DOT, 0)
}
/// Retrieves first TerminalNode corresponding to token ASTERISK
/// Returns `None` if there is no child corresponding to token ASTERISK
fn ASTERISK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ASTERISK, 0)
}

}

impl<'input> SelectStarContextAttrs<'input> for SelectStarContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn selectStar(&mut self,)
	-> Result<Rc<SelectStarContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SelectStarContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 104, RULE_selectStar);
        let mut _localctx: Rc<SelectStarContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(1323);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 ABORT | ABSENT | ADD | ADMIN | AFTER | ALL | ANALYZE | ANTI | ANY | ARRAY |
			 ASC | AT | ATTACH | AUTHORIZATION | BEGIN | BERNOULLI | BOTH | BZIP2 |
			 CALL | CANCEL | CASCADE | CASE | CAST | CATALOGS | CHARACTER | CLONE |
			 CLOSE | CLUSTER | COLUMN | COLUMNS | COMMENT | COMMIT | COMMITTED | COMPRESSION |
			 CONDITIONAL | CONNECTION | COPARTITION | COPY | COUNT | CURRENT | DATA |
			 DATABASE | DATASHARE | DATE | DAY | DAYS | DECLARE | DEFAULT | DEFINE |
			 DEFINER | DELIMITER | DENY | DESC | DESCRIBE | DESCRIPTOR | DISTRIBUTED |
			 DETACH | DOUBLE | EMPTY | ENCODING | END | ERROR | EXCLUDING | EXECUTE |
			 EXISTS | EXPLAIN | EXTERNAL | EXTRACT | FALSE | FETCH | FILTER | FINAL |
			 FIRST | FOLLOWING | FORMAT | FUNCTIONS | GRACE | GRANT | GRANTED | GRANTS |
			 GRAPHVIZ | GROUPING | GROUPS | GZIP | HOUR | HOURS | IF | IGNORE | INCLUDING |
			 INITIAL | INPUT | INTEGER | INTERVAL | INVOKER | IO | ISOLATION | JSON |
			 JSON_ARRAY | JSON_EXISTS | JSON_OBJECT | JSON_QUERY | JSON_VALUE | KEEP |
			 KEY | KEYS | LAMBDA | LAST | LATERAL | LEADING | LEFT | LEVEL | LIBRARY |
			 LIMIT | LISTAGG | LOCAL | LOCATION | LOCK | LOGICAL | M | MAP | MASKING |
			 MATCH | MATCHED | MATCHES | MATCH_RECOGNIZE | MATERIALIZED | MAX | MEASURES |
			 MERGE | MIN | MINUS_KW | MINUTE | MINUTES | MODEL | MONTH | MONTHS |
			 NEXT | NFC | NFD | NFKC | NFKD | NO | NONE | NORMALIZE | NULL | NULLS |
			 OBJECT | OF | OFFSET | OMIT | ONE | ONLY | OPTION | ORDINALITY | OUTPUT |
			 OVER | OVERFLOW | PARTITION | PARTITIONS | PASSING | PAST | PATH | PATTERN |
			 PER | PERIOD | PERMUTE | POSITION | PRECEDING | PRECISION | PROCEDURE |
			 PRIVILEGES | PROPERTIES | PRUNE | QUOTES | RANGE | READ | REFRESH | RENAME |
			 REPEATABLE | REPLACE | RESET | RESPECT | RESTRICT | RETURNING | REVOKE |
			 RIGHT | RLS | ROLE | ROLES | ROLLBACK | ROLLUP | ROW | ROWS | RUNNING |
			 S | SCALAR | SEC | SECOND | SECONDS | SCHEMA | SCHEMAS | SECURITY | SEEK |
			 SEMI | SERIALIZABLE | SESSION | SET | SETS | SHOW | SNAPSHOT | SOME |
			 START | STATS | STRUCT | SUBSET | SUBSTRING | SYSTEM | SYSTEM_TIME |
			 TABLES | TABLESAMPLE | TEMP | TEMPORARY | TEXT | STRING_KW | TIES | TIME |
			 TIMESTAMP | TO | TRAILING | TRANSACTION | TRIM | TRUE | TRUNCATE | TRY_CAST |
			 TUPLE | TYPE | UNBOUNDED | UNCOMMITTED | UNCONDITIONAL | UNIQUE | UNKNOWN |
			 UNLOAD | UNMATCHED | UPDATE | USE | USER | UTF16 | UTF32 | UTF8 | VACUUM |
			 VALIDATE | VALUE | VARYING | VERBOSE | VERSION | VIEW | WEEK | WINDOW |
			 WITHIN | WITHOUT | WORK | WRAPPER | WRITE | XZ | YEAR | YEARS | ZONE |
			 ZSTD | LPAREN | LBRACKET | MINUS | STRING | UNICODE_STRING | BINARY_LITERAL |
			 INTEGER_VALUE | DECIMAL_VALUE | DOUBLE_VALUE | IDENTIFIER | QUOTED_IDENTIFIER |
			 VARIABLE 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					/*InvokeRule primaryExpression*/
					recog.base.set_state(1318);
					recog.primaryExpression_rec(0)?;

					recog.base.set_state(1319);
					recog.base.match_token(DOT,&mut recog.err_handler)?;

					recog.base.set_state(1320);
					recog.base.match_token(ASTERISK,&mut recog.err_handler)?;

					}
				}

			 ASTERISK 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(1322);
					recog.base.match_token(ASTERISK,&mut recog.err_handler)?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- relation ----------------
pub type RelationContextAll<'input> = RelationContext<'input>;


pub type RelationContext<'input> = BaseParserRuleContext<'input,RelationContextExt<'input>>;

#[derive(Clone)]
pub struct RelationContextExt<'input>{
	pub target: Option<Rc<JoinedRelationContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for RelationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RelationContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_relation(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_relation(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RelationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_relation(self);
	}
}

impl<'input> CustomRuleContext<'input> for RelationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_relation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_relation }
}
antlr_rust::tid!{RelationContextExt<'a>}

impl<'input> RelationContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<RelationContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,RelationContextExt{
				target: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait RelationContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<RelationContextExt<'input>>{

fn joinedRelation(&self) -> Option<Rc<JoinedRelationContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> RelationContextAttrs<'input> for RelationContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn relation(&mut self,)
	-> Result<Rc<RelationContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = RelationContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 106, RULE_relation);
        let mut _localctx: Rc<RelationContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule joinedRelation*/
			recog.base.set_state(1325);
			let tmp = recog.joinedRelation_rec(0)?;
			 cast_mut::<_,RelationContext >(&mut _localctx).target = Some(tmp.clone());
			  

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- joinedRelation ----------------
#[derive(Debug)]
pub enum JoinedRelationContextAll<'input>{
	RelationDefaultContext(RelationDefaultContext<'input>),
	JoinRelationContext(JoinRelationContext<'input>),
Error(JoinedRelationContext<'input>)
}
antlr_rust::tid!{JoinedRelationContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for JoinedRelationContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for JoinedRelationContextAll<'input>{}

impl<'input> Deref for JoinedRelationContextAll<'input>{
	type Target = dyn JoinedRelationContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use JoinedRelationContextAll::*;
		match self{
			RelationDefaultContext(inner) => inner,
			JoinRelationContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JoinedRelationContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JoinedRelationContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type JoinedRelationContext<'input> = BaseParserRuleContext<'input,JoinedRelationContextExt<'input>>;

#[derive(Clone)]
pub struct JoinedRelationContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for JoinedRelationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JoinedRelationContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JoinedRelationContext<'input>{
}

impl<'input> CustomRuleContext<'input> for JoinedRelationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_joinedRelation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_joinedRelation }
}
antlr_rust::tid!{JoinedRelationContextExt<'a>}

impl<'input> JoinedRelationContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<JoinedRelationContextAll<'input>> {
		Rc::new(
		JoinedRelationContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,JoinedRelationContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait JoinedRelationContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<JoinedRelationContextExt<'input>>{


}

impl<'input> JoinedRelationContextAttrs<'input> for JoinedRelationContext<'input>{}

pub type RelationDefaultContext<'input> = BaseParserRuleContext<'input,RelationDefaultContextExt<'input>>;

pub trait RelationDefaultContextAttrs<'input>: TrinoParserContext<'input>{
	fn noJoinRelation(&self) -> Option<Rc<NoJoinRelationContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> RelationDefaultContextAttrs<'input> for RelationDefaultContext<'input>{}

pub struct RelationDefaultContextExt<'input>{
	base:JoinedRelationContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{RelationDefaultContextExt<'a>}

impl<'input> TrinoParserContext<'input> for RelationDefaultContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RelationDefaultContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_relationDefault(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_relationDefault(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RelationDefaultContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_relationDefault(self);
	}
}

impl<'input> CustomRuleContext<'input> for RelationDefaultContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_joinedRelation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_joinedRelation }
}

impl<'input> Borrow<JoinedRelationContextExt<'input>> for RelationDefaultContext<'input>{
	fn borrow(&self) -> &JoinedRelationContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<JoinedRelationContextExt<'input>> for RelationDefaultContext<'input>{
	fn borrow_mut(&mut self) -> &mut JoinedRelationContextExt<'input> { &mut self.base }
}

impl<'input> JoinedRelationContextAttrs<'input> for RelationDefaultContext<'input> {}

impl<'input> RelationDefaultContextExt<'input>{
	fn new(ctx: &dyn JoinedRelationContextAttrs<'input>) -> Rc<JoinedRelationContextAll<'input>>  {
		Rc::new(
			JoinedRelationContextAll::RelationDefaultContext(
				BaseParserRuleContext::copy_from(ctx,RelationDefaultContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type JoinRelationContext<'input> = BaseParserRuleContext<'input,JoinRelationContextExt<'input>>;

pub trait JoinRelationContextAttrs<'input>: TrinoParserContext<'input>{
	fn joinedRelation(&self) -> Option<Rc<JoinedRelationContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token CROSS
	/// Returns `None` if there is no child corresponding to token CROSS
	fn CROSS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CROSS, 0)
	}
	/// Retrieves first TerminalNode corresponding to token JOIN
	/// Returns `None` if there is no child corresponding to token JOIN
	fn JOIN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(JOIN, 0)
	}
	fn joinType(&self) -> Option<Rc<JoinTypeContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token NATURAL
	/// Returns `None` if there is no child corresponding to token NATURAL
	fn NATURAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NATURAL, 0)
	}
	fn noJoinRelation(&self) -> Option<Rc<NoJoinRelationContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn joinCriteria(&self) -> Option<Rc<JoinCriteriaContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> JoinRelationContextAttrs<'input> for JoinRelationContext<'input>{}

pub struct JoinRelationContextExt<'input>{
	base:JoinedRelationContextExt<'input>,
	pub left: Option<Rc<JoinedRelationContextAll<'input>>>,
	pub right: Option<Rc<NoJoinRelationContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{JoinRelationContextExt<'a>}

impl<'input> TrinoParserContext<'input> for JoinRelationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JoinRelationContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_joinRelation(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_joinRelation(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JoinRelationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_joinRelation(self);
	}
}

impl<'input> CustomRuleContext<'input> for JoinRelationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_joinedRelation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_joinedRelation }
}

impl<'input> Borrow<JoinedRelationContextExt<'input>> for JoinRelationContext<'input>{
	fn borrow(&self) -> &JoinedRelationContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<JoinedRelationContextExt<'input>> for JoinRelationContext<'input>{
	fn borrow_mut(&mut self) -> &mut JoinedRelationContextExt<'input> { &mut self.base }
}

impl<'input> JoinedRelationContextAttrs<'input> for JoinRelationContext<'input> {}

impl<'input> JoinRelationContextExt<'input>{
	fn new(ctx: &dyn JoinedRelationContextAttrs<'input>) -> Rc<JoinedRelationContextAll<'input>>  {
		Rc::new(
			JoinedRelationContextAll::JoinRelationContext(
				BaseParserRuleContext::copy_from(ctx,JoinRelationContextExt{
        			left:None, right:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn  joinedRelation(&mut self,)
	-> Result<Rc<JoinedRelationContextAll<'input>>,ANTLRError> {
		self.joinedRelation_rec(0)
	}

	fn joinedRelation_rec(&mut self, _p: isize)
	-> Result<Rc<JoinedRelationContextAll<'input>>,ANTLRError> {
		let recog = self;
		let _parentctx = recog.ctx.take();
		let _parentState = recog.base.get_state();
		let mut _localctx = JoinedRelationContextExt::new(_parentctx.clone(), recog.base.get_state());
		recog.base.enter_recursion_rule(_localctx.clone(), 108, RULE_joinedRelation, _p);
	    let mut _localctx: Rc<JoinedRelationContextAll> = _localctx;
        let mut _prevctx = _localctx.clone();
		let _startState = 108;
		let result: Result<(), ANTLRError> = (|| {
			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			{
			let mut tmp = RelationDefaultContextExt::new(&**_localctx);
			recog.ctx = Some(tmp.clone());
			_localctx = tmp;
			_prevctx = _localctx.clone();


			/*InvokeRule noJoinRelation*/
			recog.base.set_state(1328);
			recog.noJoinRelation()?;

			}

			let tmp = recog.input.lt(-1).cloned();
			recog.ctx.as_ref().unwrap().set_stop(tmp);
			recog.base.set_state(1349);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(157,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					recog.trigger_exit_rule_event();
					_prevctx = _localctx.clone();
					{
					{
					/*recRuleLabeledAltStartAction*/
					let mut tmp = JoinRelationContextExt::new(&**JoinedRelationContextExt::new(_parentctx.clone(), _parentState));
					if let JoinedRelationContextAll::JoinRelationContext(ctx) = cast_mut::<_,JoinedRelationContextAll >(&mut tmp){
						ctx.left = Some(_prevctx.clone());
					} else {unreachable!("cant cast");}
					recog.push_new_recursion_context(tmp.clone(), _startState, RULE_joinedRelation);
					_localctx = tmp;
					recog.base.set_state(1330);
					if !({recog.precpred(None, 2)}) {
						Err(FailedPredicateError::new(&mut recog.base, Some("recog.precpred(None, 2)".to_owned()), None))?;
					}
					recog.base.set_state(1345);
					recog.err_handler.sync(&mut recog.base)?;
					match recog.base.input.la(1) {
					 CROSS 
						=> {
							{
							recog.base.set_state(1331);
							recog.base.match_token(CROSS,&mut recog.err_handler)?;

							recog.base.set_state(1332);
							recog.base.match_token(JOIN,&mut recog.err_handler)?;

							/*InvokeRule noJoinRelation*/
							recog.base.set_state(1333);
							let tmp = recog.noJoinRelation()?;
							if let JoinedRelationContextAll::JoinRelationContext(ctx) = cast_mut::<_,JoinedRelationContextAll >(&mut _localctx){
							ctx.right = Some(tmp.clone()); } else {unreachable!("cant cast");}  

							}
						}

					 FULL | INNER | JOIN | LEFT | RIGHT 
						=> {
							{
							/*InvokeRule joinType*/
							recog.base.set_state(1334);
							recog.joinType()?;

							recog.base.set_state(1335);
							recog.base.match_token(JOIN,&mut recog.err_handler)?;

							/*InvokeRule noJoinRelation*/
							recog.base.set_state(1336);
							let tmp = recog.noJoinRelation()?;
							if let JoinedRelationContextAll::JoinRelationContext(ctx) = cast_mut::<_,JoinedRelationContextAll >(&mut _localctx){
							ctx.right = Some(tmp.clone()); } else {unreachable!("cant cast");}  

							recog.base.set_state(1338);
							recog.err_handler.sync(&mut recog.base)?;
							match  recog.interpreter.adaptive_predict(155,&mut recog.base)? {
								x if x == 1=>{
									{
									/*InvokeRule joinCriteria*/
									recog.base.set_state(1337);
									recog.joinCriteria()?;

									}
								}

								_ => {}
							}
							}
						}

					 NATURAL 
						=> {
							{
							recog.base.set_state(1340);
							recog.base.match_token(NATURAL,&mut recog.err_handler)?;

							/*InvokeRule joinType*/
							recog.base.set_state(1341);
							recog.joinType()?;

							recog.base.set_state(1342);
							recog.base.match_token(JOIN,&mut recog.err_handler)?;

							/*InvokeRule noJoinRelation*/
							recog.base.set_state(1343);
							let tmp = recog.noJoinRelation()?;
							if let JoinedRelationContextAll::JoinRelationContext(ctx) = cast_mut::<_,JoinedRelationContextAll >(&mut _localctx){
							ctx.right = Some(tmp.clone()); } else {unreachable!("cant cast");}  

							}
						}

						_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
					}
					}
					} 
				}
				recog.base.set_state(1351);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(157,&mut recog.base)?;
			}
			}
			Ok(())
		})();
		match result {
		Ok(_) => {},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re)=>{
			//_localctx.exception = re;
			recog.err_handler.report_error(&mut recog.base, re);
	        recog.err_handler.recover(&mut recog.base, re)?;}
		}
		recog.base.unroll_recursion_context(_parentctx);

		Ok(_localctx)
	}
}
//------------------- joinType ----------------
pub type JoinTypeContextAll<'input> = JoinTypeContext<'input>;


pub type JoinTypeContext<'input> = BaseParserRuleContext<'input,JoinTypeContextExt<'input>>;

#[derive(Clone)]
pub struct JoinTypeContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for JoinTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JoinTypeContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_joinType(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_joinType(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JoinTypeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_joinType(self);
	}
}

impl<'input> CustomRuleContext<'input> for JoinTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_joinType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_joinType }
}
antlr_rust::tid!{JoinTypeContextExt<'a>}

impl<'input> JoinTypeContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<JoinTypeContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,JoinTypeContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait JoinTypeContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<JoinTypeContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token INNER
/// Returns `None` if there is no child corresponding to token INNER
fn INNER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(INNER, 0)
}
/// Retrieves first TerminalNode corresponding to token LEFT
/// Returns `None` if there is no child corresponding to token LEFT
fn LEFT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LEFT, 0)
}
/// Retrieves first TerminalNode corresponding to token OUTER
/// Returns `None` if there is no child corresponding to token OUTER
fn OUTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(OUTER, 0)
}
/// Retrieves first TerminalNode corresponding to token RIGHT
/// Returns `None` if there is no child corresponding to token RIGHT
fn RIGHT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RIGHT, 0)
}
/// Retrieves first TerminalNode corresponding to token FULL
/// Returns `None` if there is no child corresponding to token FULL
fn FULL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FULL, 0)
}

}

impl<'input> JoinTypeContextAttrs<'input> for JoinTypeContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn joinType(&mut self,)
	-> Result<Rc<JoinTypeContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = JoinTypeContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 110, RULE_joinType);
        let mut _localctx: Rc<JoinTypeContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(1367);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 INNER | JOIN 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(1353);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==INNER {
						{
						recog.base.set_state(1352);
						recog.base.match_token(INNER,&mut recog.err_handler)?;

						}
					}

					}
				}

			 LEFT 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(1355);
					recog.base.match_token(LEFT,&mut recog.err_handler)?;

					recog.base.set_state(1357);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==OUTER {
						{
						recog.base.set_state(1356);
						recog.base.match_token(OUTER,&mut recog.err_handler)?;

						}
					}

					}
				}

			 RIGHT 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 3);
					recog.base.enter_outer_alt(None, 3);
					{
					recog.base.set_state(1359);
					recog.base.match_token(RIGHT,&mut recog.err_handler)?;

					recog.base.set_state(1361);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==OUTER {
						{
						recog.base.set_state(1360);
						recog.base.match_token(OUTER,&mut recog.err_handler)?;

						}
					}

					}
				}

			 FULL 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 4);
					recog.base.enter_outer_alt(None, 4);
					{
					recog.base.set_state(1363);
					recog.base.match_token(FULL,&mut recog.err_handler)?;

					recog.base.set_state(1365);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==OUTER {
						{
						recog.base.set_state(1364);
						recog.base.match_token(OUTER,&mut recog.err_handler)?;

						}
					}

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- joinCriteria ----------------
pub type JoinCriteriaContextAll<'input> = JoinCriteriaContext<'input>;


pub type JoinCriteriaContext<'input> = BaseParserRuleContext<'input,JoinCriteriaContextExt<'input>>;

#[derive(Clone)]
pub struct JoinCriteriaContextExt<'input>{
	pub tail: Option<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for JoinCriteriaContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JoinCriteriaContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_joinCriteria(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_joinCriteria(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JoinCriteriaContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_joinCriteria(self);
	}
}

impl<'input> CustomRuleContext<'input> for JoinCriteriaContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_joinCriteria }
	//fn type_rule_index() -> usize where Self: Sized { RULE_joinCriteria }
}
antlr_rust::tid!{JoinCriteriaContextExt<'a>}

impl<'input> JoinCriteriaContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<JoinCriteriaContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,JoinCriteriaContextExt{
				tail: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait JoinCriteriaContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<JoinCriteriaContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token ON
/// Returns `None` if there is no child corresponding to token ON
fn ON(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ON, 0)
}
fn booleanExpression(&self) -> Option<Rc<BooleanExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token USING
/// Returns `None` if there is no child corresponding to token USING
fn USING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(USING, 0)
}
/// Retrieves first TerminalNode corresponding to token LPAREN
/// Returns `None` if there is no child corresponding to token LPAREN
fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, 0)
}
fn identifier_all(&self) ->  Vec<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn identifier(&self, i: usize) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves first TerminalNode corresponding to token RPAREN
/// Returns `None` if there is no child corresponding to token RPAREN
fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, 0)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> JoinCriteriaContextAttrs<'input> for JoinCriteriaContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn joinCriteria(&mut self,)
	-> Result<Rc<JoinCriteriaContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = JoinCriteriaContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 112, RULE_joinCriteria);
        let mut _localctx: Rc<JoinCriteriaContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			recog.base.set_state(1386);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 ON 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(1369);
					recog.base.match_token(ON,&mut recog.err_handler)?;

					/*InvokeRule booleanExpression*/
					recog.base.set_state(1370);
					recog.booleanExpression_rec(0)?;

					}
				}

			 USING 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(1371);
					recog.base.match_token(USING,&mut recog.err_handler)?;

					recog.base.set_state(1372);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(1373);
					recog.identifier()?;

					recog.base.set_state(1378);
					recog.err_handler.sync(&mut recog.base)?;
					_alt = recog.interpreter.adaptive_predict(163,&mut recog.base)?;
					while { _alt!=2 && _alt!=INVALID_ALT } {
						if _alt==1 {
							{
							{
							recog.base.set_state(1374);
							recog.base.match_token(COMMA,&mut recog.err_handler)?;

							/*InvokeRule identifier*/
							recog.base.set_state(1375);
							recog.identifier()?;

							}
							} 
						}
						recog.base.set_state(1380);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(163,&mut recog.base)?;
					}
					recog.base.set_state(1382);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(1381);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						 cast_mut::<_,JoinCriteriaContext >(&mut _localctx).tail = Some(tmp);
						  

						}
					}

					recog.base.set_state(1384);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- noJoinRelation ----------------
pub type NoJoinRelationContextAll<'input> = NoJoinRelationContext<'input>;


pub type NoJoinRelationContext<'input> = BaseParserRuleContext<'input,NoJoinRelationContextExt<'input>>;

#[derive(Clone)]
pub struct NoJoinRelationContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for NoJoinRelationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for NoJoinRelationContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_noJoinRelation(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_noJoinRelation(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for NoJoinRelationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_noJoinRelation(self);
	}
}

impl<'input> CustomRuleContext<'input> for NoJoinRelationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_noJoinRelation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_noJoinRelation }
}
antlr_rust::tid!{NoJoinRelationContextExt<'a>}

impl<'input> NoJoinRelationContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<NoJoinRelationContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,NoJoinRelationContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait NoJoinRelationContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<NoJoinRelationContextExt<'input>>{

fn sampledRelation(&self) -> Option<Rc<SampledRelationContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> NoJoinRelationContextAttrs<'input> for NoJoinRelationContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn noJoinRelation(&mut self,)
	-> Result<Rc<NoJoinRelationContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = NoJoinRelationContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 114, RULE_noJoinRelation);
        let mut _localctx: Rc<NoJoinRelationContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule sampledRelation*/
			recog.base.set_state(1388);
			recog.sampledRelation()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- sampledRelationTarget ----------------
pub type SampledRelationTargetContextAll<'input> = SampledRelationTargetContext<'input>;


pub type SampledRelationTargetContext<'input> = BaseParserRuleContext<'input,SampledRelationTargetContextExt<'input>>;

#[derive(Clone)]
pub struct SampledRelationTargetContextExt<'input>{
	pub target: Option<Rc<PatternRecognitionContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SampledRelationTargetContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SampledRelationTargetContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_sampledRelationTarget(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_sampledRelationTarget(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SampledRelationTargetContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_sampledRelationTarget(self);
	}
}

impl<'input> CustomRuleContext<'input> for SampledRelationTargetContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_sampledRelationTarget }
	//fn type_rule_index() -> usize where Self: Sized { RULE_sampledRelationTarget }
}
antlr_rust::tid!{SampledRelationTargetContextExt<'a>}

impl<'input> SampledRelationTargetContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SampledRelationTargetContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SampledRelationTargetContextExt{
				target: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait SampledRelationTargetContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SampledRelationTargetContextExt<'input>>{

fn patternRecognition(&self) -> Option<Rc<PatternRecognitionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> SampledRelationTargetContextAttrs<'input> for SampledRelationTargetContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn sampledRelationTarget(&mut self,)
	-> Result<Rc<SampledRelationTargetContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SampledRelationTargetContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 116, RULE_sampledRelationTarget);
        let mut _localctx: Rc<SampledRelationTargetContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule patternRecognition*/
			recog.base.set_state(1390);
			let tmp = recog.patternRecognition()?;
			 cast_mut::<_,SampledRelationTargetContext >(&mut _localctx).target = Some(tmp.clone());
			  

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- sampledRelation ----------------
pub type SampledRelationContextAll<'input> = SampledRelationContext<'input>;


pub type SampledRelationContext<'input> = BaseParserRuleContext<'input,SampledRelationContextExt<'input>>;

#[derive(Clone)]
pub struct SampledRelationContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SampledRelationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SampledRelationContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_sampledRelation(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_sampledRelation(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SampledRelationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_sampledRelation(self);
	}
}

impl<'input> CustomRuleContext<'input> for SampledRelationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_sampledRelation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_sampledRelation }
}
antlr_rust::tid!{SampledRelationContextExt<'a>}

impl<'input> SampledRelationContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SampledRelationContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SampledRelationContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait SampledRelationContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SampledRelationContextExt<'input>>{

fn sampledRelationTarget(&self) -> Option<Rc<SampledRelationTargetContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn sampleOperator(&self) -> Option<Rc<SampleOperatorContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> SampledRelationContextAttrs<'input> for SampledRelationContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn sampledRelation(&mut self,)
	-> Result<Rc<SampledRelationContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SampledRelationContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 118, RULE_sampledRelation);
        let mut _localctx: Rc<SampledRelationContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule sampledRelationTarget*/
			recog.base.set_state(1392);
			recog.sampledRelationTarget()?;

			recog.base.set_state(1394);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(166,&mut recog.base)? {
				x if x == 1=>{
					{
					/*InvokeRule sampleOperator*/
					recog.base.set_state(1393);
					recog.sampleOperator()?;

					}
				}

				_ => {}
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- sampleOperator ----------------
pub type SampleOperatorContextAll<'input> = SampleOperatorContext<'input>;


pub type SampleOperatorContext<'input> = BaseParserRuleContext<'input,SampleOperatorContextExt<'input>>;

#[derive(Clone)]
pub struct SampleOperatorContextExt<'input>{
	pub percentage: Option<Rc<ExpressionContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SampleOperatorContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SampleOperatorContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_sampleOperator(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_sampleOperator(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SampleOperatorContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_sampleOperator(self);
	}
}

impl<'input> CustomRuleContext<'input> for SampleOperatorContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_sampleOperator }
	//fn type_rule_index() -> usize where Self: Sized { RULE_sampleOperator }
}
antlr_rust::tid!{SampleOperatorContextExt<'a>}

impl<'input> SampleOperatorContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SampleOperatorContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SampleOperatorContextExt{
				percentage: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait SampleOperatorContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SampleOperatorContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token TABLESAMPLE
/// Returns `None` if there is no child corresponding to token TABLESAMPLE
fn TABLESAMPLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TABLESAMPLE, 0)
}
fn sampleMethod(&self) -> Option<Rc<SampleMethodContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token LPAREN
/// Returns `None` if there is no child corresponding to token LPAREN
fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, 0)
}
/// Retrieves first TerminalNode corresponding to token RPAREN
/// Returns `None` if there is no child corresponding to token RPAREN
fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, 0)
}
fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> SampleOperatorContextAttrs<'input> for SampleOperatorContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn sampleOperator(&mut self,)
	-> Result<Rc<SampleOperatorContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SampleOperatorContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 120, RULE_sampleOperator);
        let mut _localctx: Rc<SampleOperatorContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1396);
			recog.base.match_token(TABLESAMPLE,&mut recog.err_handler)?;

			/*InvokeRule sampleMethod*/
			recog.base.set_state(1397);
			recog.sampleMethod()?;

			recog.base.set_state(1398);
			recog.base.match_token(LPAREN,&mut recog.err_handler)?;

			/*InvokeRule expression*/
			recog.base.set_state(1399);
			let tmp = recog.expression()?;
			 cast_mut::<_,SampleOperatorContext >(&mut _localctx).percentage = Some(tmp.clone());
			  

			recog.base.set_state(1400);
			recog.base.match_token(RPAREN,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- sampleMethod ----------------
pub type SampleMethodContextAll<'input> = SampleMethodContext<'input>;


pub type SampleMethodContext<'input> = BaseParserRuleContext<'input,SampleMethodContextExt<'input>>;

#[derive(Clone)]
pub struct SampleMethodContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SampleMethodContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SampleMethodContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_sampleMethod(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_sampleMethod(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SampleMethodContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_sampleMethod(self);
	}
}

impl<'input> CustomRuleContext<'input> for SampleMethodContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_sampleMethod }
	//fn type_rule_index() -> usize where Self: Sized { RULE_sampleMethod }
}
antlr_rust::tid!{SampleMethodContextExt<'a>}

impl<'input> SampleMethodContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SampleMethodContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SampleMethodContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait SampleMethodContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SampleMethodContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token BERNOULLI
/// Returns `None` if there is no child corresponding to token BERNOULLI
fn BERNOULLI(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(BERNOULLI, 0)
}
/// Retrieves first TerminalNode corresponding to token SYSTEM
/// Returns `None` if there is no child corresponding to token SYSTEM
fn SYSTEM(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SYSTEM, 0)
}

}

impl<'input> SampleMethodContextAttrs<'input> for SampleMethodContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn sampleMethod(&mut self,)
	-> Result<Rc<SampleMethodContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SampleMethodContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 122, RULE_sampleMethod);
        let mut _localctx: Rc<SampleMethodContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1402);
			_la = recog.base.input.la(1);
			if { !(_la==BERNOULLI || _la==SYSTEM) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- trimsSpecification ----------------
pub type TrimsSpecificationContextAll<'input> = TrimsSpecificationContext<'input>;


pub type TrimsSpecificationContext<'input> = BaseParserRuleContext<'input,TrimsSpecificationContextExt<'input>>;

#[derive(Clone)]
pub struct TrimsSpecificationContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for TrimsSpecificationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TrimsSpecificationContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_trimsSpecification(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_trimsSpecification(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TrimsSpecificationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_trimsSpecification(self);
	}
}

impl<'input> CustomRuleContext<'input> for TrimsSpecificationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_trimsSpecification }
	//fn type_rule_index() -> usize where Self: Sized { RULE_trimsSpecification }
}
antlr_rust::tid!{TrimsSpecificationContextExt<'a>}

impl<'input> TrimsSpecificationContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<TrimsSpecificationContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,TrimsSpecificationContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait TrimsSpecificationContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<TrimsSpecificationContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token LEADING
/// Returns `None` if there is no child corresponding to token LEADING
fn LEADING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LEADING, 0)
}
/// Retrieves first TerminalNode corresponding to token TRAILING
/// Returns `None` if there is no child corresponding to token TRAILING
fn TRAILING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TRAILING, 0)
}
/// Retrieves first TerminalNode corresponding to token BOTH
/// Returns `None` if there is no child corresponding to token BOTH
fn BOTH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(BOTH, 0)
}

}

impl<'input> TrimsSpecificationContextAttrs<'input> for TrimsSpecificationContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn trimsSpecification(&mut self,)
	-> Result<Rc<TrimsSpecificationContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = TrimsSpecificationContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 124, RULE_trimsSpecification);
        let mut _localctx: Rc<TrimsSpecificationContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1404);
			_la = recog.base.input.la(1);
			if { !(_la==BOTH || _la==LEADING || _la==TRAILING) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- listAggOverflowBehavior ----------------
pub type ListAggOverflowBehaviorContextAll<'input> = ListAggOverflowBehaviorContext<'input>;


pub type ListAggOverflowBehaviorContext<'input> = BaseParserRuleContext<'input,ListAggOverflowBehaviorContextExt<'input>>;

#[derive(Clone)]
pub struct ListAggOverflowBehaviorContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ListAggOverflowBehaviorContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ListAggOverflowBehaviorContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_listAggOverflowBehavior(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_listAggOverflowBehavior(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ListAggOverflowBehaviorContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_listAggOverflowBehavior(self);
	}
}

impl<'input> CustomRuleContext<'input> for ListAggOverflowBehaviorContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_listAggOverflowBehavior }
	//fn type_rule_index() -> usize where Self: Sized { RULE_listAggOverflowBehavior }
}
antlr_rust::tid!{ListAggOverflowBehaviorContextExt<'a>}

impl<'input> ListAggOverflowBehaviorContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ListAggOverflowBehaviorContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ListAggOverflowBehaviorContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait ListAggOverflowBehaviorContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ListAggOverflowBehaviorContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token ERROR
/// Returns `None` if there is no child corresponding to token ERROR
fn ERROR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ERROR, 0)
}
/// Retrieves first TerminalNode corresponding to token TRUNCATE
/// Returns `None` if there is no child corresponding to token TRUNCATE
fn TRUNCATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TRUNCATE, 0)
}
fn listaggCountIndication(&self) -> Option<Rc<ListaggCountIndicationContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn string(&self) -> Option<Rc<StringContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> ListAggOverflowBehaviorContextAttrs<'input> for ListAggOverflowBehaviorContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn listAggOverflowBehavior(&mut self,)
	-> Result<Rc<ListAggOverflowBehaviorContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = ListAggOverflowBehaviorContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 126, RULE_listAggOverflowBehavior);
        let mut _localctx: Rc<ListAggOverflowBehaviorContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(1412);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 ERROR 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(1406);
					recog.base.match_token(ERROR,&mut recog.err_handler)?;

					}
				}

			 TRUNCATE 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(1407);
					recog.base.match_token(TRUNCATE,&mut recog.err_handler)?;

					recog.base.set_state(1409);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==STRING || _la==UNICODE_STRING {
						{
						/*InvokeRule string*/
						recog.base.set_state(1408);
						recog.string()?;

						}
					}

					/*InvokeRule listaggCountIndication*/
					recog.base.set_state(1411);
					recog.listaggCountIndication()?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- listaggCountIndication ----------------
pub type ListaggCountIndicationContextAll<'input> = ListaggCountIndicationContext<'input>;


pub type ListaggCountIndicationContext<'input> = BaseParserRuleContext<'input,ListaggCountIndicationContextExt<'input>>;

#[derive(Clone)]
pub struct ListaggCountIndicationContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ListaggCountIndicationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ListaggCountIndicationContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_listaggCountIndication(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_listaggCountIndication(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ListaggCountIndicationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_listaggCountIndication(self);
	}
}

impl<'input> CustomRuleContext<'input> for ListaggCountIndicationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_listaggCountIndication }
	//fn type_rule_index() -> usize where Self: Sized { RULE_listaggCountIndication }
}
antlr_rust::tid!{ListaggCountIndicationContextExt<'a>}

impl<'input> ListaggCountIndicationContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ListaggCountIndicationContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ListaggCountIndicationContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait ListaggCountIndicationContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ListaggCountIndicationContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token WITH
/// Returns `None` if there is no child corresponding to token WITH
fn WITH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WITH, 0)
}
/// Retrieves first TerminalNode corresponding to token COUNT
/// Returns `None` if there is no child corresponding to token COUNT
fn COUNT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COUNT, 0)
}
/// Retrieves first TerminalNode corresponding to token WITHOUT
/// Returns `None` if there is no child corresponding to token WITHOUT
fn WITHOUT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WITHOUT, 0)
}

}

impl<'input> ListaggCountIndicationContextAttrs<'input> for ListaggCountIndicationContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn listaggCountIndication(&mut self,)
	-> Result<Rc<ListaggCountIndicationContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = ListaggCountIndicationContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 128, RULE_listaggCountIndication);
        let mut _localctx: Rc<ListaggCountIndicationContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(1418);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 WITH 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(1414);
					recog.base.match_token(WITH,&mut recog.err_handler)?;

					recog.base.set_state(1415);
					recog.base.match_token(COUNT,&mut recog.err_handler)?;

					}
				}

			 WITHOUT 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(1416);
					recog.base.match_token(WITHOUT,&mut recog.err_handler)?;

					recog.base.set_state(1417);
					recog.base.match_token(COUNT,&mut recog.err_handler)?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- patternRecognitionTarget ----------------
pub type PatternRecognitionTargetContextAll<'input> = PatternRecognitionTargetContext<'input>;


pub type PatternRecognitionTargetContext<'input> = BaseParserRuleContext<'input,PatternRecognitionTargetContextExt<'input>>;

#[derive(Clone)]
pub struct PatternRecognitionTargetContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PatternRecognitionTargetContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PatternRecognitionTargetContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_patternRecognitionTarget(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_patternRecognitionTarget(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PatternRecognitionTargetContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_patternRecognitionTarget(self);
	}
}

impl<'input> CustomRuleContext<'input> for PatternRecognitionTargetContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_patternRecognitionTarget }
	//fn type_rule_index() -> usize where Self: Sized { RULE_patternRecognitionTarget }
}
antlr_rust::tid!{PatternRecognitionTargetContextExt<'a>}

impl<'input> PatternRecognitionTargetContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PatternRecognitionTargetContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PatternRecognitionTargetContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait PatternRecognitionTargetContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PatternRecognitionTargetContextExt<'input>>{

fn aliasedRelation(&self) -> Option<Rc<AliasedRelationContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> PatternRecognitionTargetContextAttrs<'input> for PatternRecognitionTargetContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn patternRecognitionTarget(&mut self,)
	-> Result<Rc<PatternRecognitionTargetContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PatternRecognitionTargetContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 130, RULE_patternRecognitionTarget);
        let mut _localctx: Rc<PatternRecognitionTargetContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule aliasedRelation*/
			recog.base.set_state(1420);
			recog.aliasedRelation()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- patternRecognition ----------------
pub type PatternRecognitionContextAll<'input> = PatternRecognitionContext<'input>;


pub type PatternRecognitionContext<'input> = BaseParserRuleContext<'input,PatternRecognitionContextExt<'input>>;

#[derive(Clone)]
pub struct PatternRecognitionContextExt<'input>{
	pub expression: Option<Rc<ExpressionContextAll<'input>>>,
	pub partition:Vec<Rc<ExpressionContextAll<'input>>>,
	pub COMMA: Option<TokenType<'input>>,
	pub tail:Vec<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PatternRecognitionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PatternRecognitionContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_patternRecognition(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_patternRecognition(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PatternRecognitionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_patternRecognition(self);
	}
}

impl<'input> CustomRuleContext<'input> for PatternRecognitionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_patternRecognition }
	//fn type_rule_index() -> usize where Self: Sized { RULE_patternRecognition }
}
antlr_rust::tid!{PatternRecognitionContextExt<'a>}

impl<'input> PatternRecognitionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PatternRecognitionContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PatternRecognitionContextExt{
				COMMA: None, 
				tail: Vec::new(), 
				expression: None, 
				partition: Vec::new(), 
				ph:PhantomData
			}),
		)
	}
}

pub trait PatternRecognitionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PatternRecognitionContextExt<'input>>{

fn patternRecognitionTarget(&self) -> Option<Rc<PatternRecognitionTargetContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token MATCH_RECOGNIZE
/// Returns `None` if there is no child corresponding to token MATCH_RECOGNIZE
fn MATCH_RECOGNIZE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MATCH_RECOGNIZE, 0)
}
/// Retrieves all `TerminalNode`s corresponding to token LPAREN in current rule
fn LPAREN_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token LPAREN, starting from 0.
/// Returns `None` if number of children corresponding to token LPAREN is less or equal than `i`.
fn LPAREN(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, i)
}
/// Retrieves first TerminalNode corresponding to token PATTERN
/// Returns `None` if there is no child corresponding to token PATTERN
fn PATTERN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PATTERN, 0)
}
fn rowPattern(&self) -> Option<Rc<RowPatternContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves all `TerminalNode`s corresponding to token RPAREN in current rule
fn RPAREN_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token RPAREN, starting from 0.
/// Returns `None` if number of children corresponding to token RPAREN is less or equal than `i`.
fn RPAREN(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, i)
}
/// Retrieves first TerminalNode corresponding to token DEFINE
/// Returns `None` if there is no child corresponding to token DEFINE
fn DEFINE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DEFINE, 0)
}
fn variableDefinition_all(&self) ->  Vec<Rc<VariableDefinitionContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn variableDefinition(&self, i: usize) -> Option<Rc<VariableDefinitionContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves first TerminalNode corresponding to token PARTITION
/// Returns `None` if there is no child corresponding to token PARTITION
fn PARTITION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PARTITION, 0)
}
/// Retrieves all `TerminalNode`s corresponding to token BY in current rule
fn BY_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token BY, starting from 0.
/// Returns `None` if number of children corresponding to token BY is less or equal than `i`.
fn BY(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(BY, i)
}
/// Retrieves first TerminalNode corresponding to token ORDER
/// Returns `None` if there is no child corresponding to token ORDER
fn ORDER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ORDER, 0)
}
fn sortItem_all(&self) ->  Vec<Rc<SortItemContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn sortItem(&self, i: usize) -> Option<Rc<SortItemContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves first TerminalNode corresponding to token MEASURES
/// Returns `None` if there is no child corresponding to token MEASURES
fn MEASURES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MEASURES, 0)
}
fn measureDefinition_all(&self) ->  Vec<Rc<MeasureDefinitionContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn measureDefinition(&self, i: usize) -> Option<Rc<MeasureDefinitionContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
fn rowsPerMatch(&self) -> Option<Rc<RowsPerMatchContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token AFTER
/// Returns `None` if there is no child corresponding to token AFTER
fn AFTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(AFTER, 0)
}
/// Retrieves first TerminalNode corresponding to token MATCH
/// Returns `None` if there is no child corresponding to token MATCH
fn MATCH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MATCH, 0)
}
fn skipTo(&self) -> Option<Rc<SkipToContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token SUBSET
/// Returns `None` if there is no child corresponding to token SUBSET
fn SUBSET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SUBSET, 0)
}
fn subsetDefinition_all(&self) ->  Vec<Rc<SubsetDefinitionContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn subsetDefinition(&self, i: usize) -> Option<Rc<SubsetDefinitionContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}
fn expression_all(&self) ->  Vec<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn expression(&self, i: usize) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves first TerminalNode corresponding to token INITIAL
/// Returns `None` if there is no child corresponding to token INITIAL
fn INITIAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(INITIAL, 0)
}
/// Retrieves first TerminalNode corresponding to token SEEK
/// Returns `None` if there is no child corresponding to token SEEK
fn SEEK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SEEK, 0)
}

}

impl<'input> PatternRecognitionContextAttrs<'input> for PatternRecognitionContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn patternRecognition(&mut self,)
	-> Result<Rc<PatternRecognitionContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PatternRecognitionContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 132, RULE_patternRecognition);
        let mut _localctx: Rc<PatternRecognitionContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule patternRecognitionTarget*/
			recog.base.set_state(1422);
			recog.patternRecognitionTarget()?;

			recog.base.set_state(1512);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(187,&mut recog.base)? {
				x if x == 1=>{
					{
					recog.base.set_state(1423);
					recog.base.match_token(MATCH_RECOGNIZE,&mut recog.err_handler)?;

					recog.base.set_state(1424);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					recog.base.set_state(1438);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==PARTITION {
						{
						recog.base.set_state(1425);
						recog.base.match_token(PARTITION,&mut recog.err_handler)?;

						recog.base.set_state(1426);
						recog.base.match_token(BY,&mut recog.err_handler)?;

						/*InvokeRule expression*/
						recog.base.set_state(1427);
						let tmp = recog.expression()?;
						 cast_mut::<_,PatternRecognitionContext >(&mut _localctx).expression = Some(tmp.clone());
						  

						let temp =  cast_mut::<_,PatternRecognitionContext >(&mut _localctx).expression.clone().unwrap()
						 ;
						 cast_mut::<_,PatternRecognitionContext >(&mut _localctx).partition.push(temp);
						  
						recog.base.set_state(1432);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(170,&mut recog.base)?;
						while { _alt!=2 && _alt!=INVALID_ALT } {
							if _alt==1 {
								{
								{
								recog.base.set_state(1428);
								recog.base.match_token(COMMA,&mut recog.err_handler)?;

								/*InvokeRule expression*/
								recog.base.set_state(1429);
								let tmp = recog.expression()?;
								 cast_mut::<_,PatternRecognitionContext >(&mut _localctx).expression = Some(tmp.clone());
								  

								let temp =  cast_mut::<_,PatternRecognitionContext >(&mut _localctx).expression.clone().unwrap()
								 ;
								 cast_mut::<_,PatternRecognitionContext >(&mut _localctx).partition.push(temp);
								  
								}
								} 
							}
							recog.base.set_state(1434);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(170,&mut recog.base)?;
						}
						recog.base.set_state(1436);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==COMMA {
							{
							recog.base.set_state(1435);
							let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
							 cast_mut::<_,PatternRecognitionContext >(&mut _localctx).COMMA = Some(tmp);
							  

							let temp =  cast_mut::<_,PatternRecognitionContext >(&mut _localctx).COMMA.clone().unwrap()
							 ;
							 cast_mut::<_,PatternRecognitionContext >(&mut _localctx).tail.push(temp);
							  
							}
						}

						}
					}

					recog.base.set_state(1453);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==ORDER {
						{
						recog.base.set_state(1440);
						recog.base.match_token(ORDER,&mut recog.err_handler)?;

						recog.base.set_state(1441);
						recog.base.match_token(BY,&mut recog.err_handler)?;

						/*InvokeRule sortItem*/
						recog.base.set_state(1442);
						recog.sortItem()?;

						recog.base.set_state(1447);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(173,&mut recog.base)?;
						while { _alt!=2 && _alt!=INVALID_ALT } {
							if _alt==1 {
								{
								{
								recog.base.set_state(1443);
								recog.base.match_token(COMMA,&mut recog.err_handler)?;

								/*InvokeRule sortItem*/
								recog.base.set_state(1444);
								recog.sortItem()?;

								}
								} 
							}
							recog.base.set_state(1449);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(173,&mut recog.base)?;
						}
						recog.base.set_state(1451);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==COMMA {
							{
							recog.base.set_state(1450);
							let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
							 cast_mut::<_,PatternRecognitionContext >(&mut _localctx).COMMA = Some(tmp);
							  

							let temp =  cast_mut::<_,PatternRecognitionContext >(&mut _localctx).COMMA.clone().unwrap()
							 ;
							 cast_mut::<_,PatternRecognitionContext >(&mut _localctx).tail.push(temp);
							  
							}
						}

						}
					}

					recog.base.set_state(1467);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==MEASURES {
						{
						recog.base.set_state(1455);
						recog.base.match_token(MEASURES,&mut recog.err_handler)?;

						/*InvokeRule measureDefinition*/
						recog.base.set_state(1456);
						recog.measureDefinition()?;

						recog.base.set_state(1461);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(176,&mut recog.base)?;
						while { _alt!=2 && _alt!=INVALID_ALT } {
							if _alt==1 {
								{
								{
								recog.base.set_state(1457);
								recog.base.match_token(COMMA,&mut recog.err_handler)?;

								/*InvokeRule measureDefinition*/
								recog.base.set_state(1458);
								recog.measureDefinition()?;

								}
								} 
							}
							recog.base.set_state(1463);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(176,&mut recog.base)?;
						}
						recog.base.set_state(1465);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==COMMA {
							{
							recog.base.set_state(1464);
							let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
							 cast_mut::<_,PatternRecognitionContext >(&mut _localctx).COMMA = Some(tmp);
							  

							let temp =  cast_mut::<_,PatternRecognitionContext >(&mut _localctx).COMMA.clone().unwrap()
							 ;
							 cast_mut::<_,PatternRecognitionContext >(&mut _localctx).tail.push(temp);
							  
							}
						}

						}
					}

					recog.base.set_state(1470);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==ALL || _la==ONE {
						{
						/*InvokeRule rowsPerMatch*/
						recog.base.set_state(1469);
						recog.rowsPerMatch()?;

						}
					}

					recog.base.set_state(1475);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==AFTER {
						{
						recog.base.set_state(1472);
						recog.base.match_token(AFTER,&mut recog.err_handler)?;

						recog.base.set_state(1473);
						recog.base.match_token(MATCH,&mut recog.err_handler)?;

						/*InvokeRule skipTo*/
						recog.base.set_state(1474);
						recog.skipTo()?;

						}
					}

					recog.base.set_state(1478);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==INITIAL || _la==SEEK {
						{
						recog.base.set_state(1477);
						_la = recog.base.input.la(1);
						if { !(_la==INITIAL || _la==SEEK) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
					}

					recog.base.set_state(1480);
					recog.base.match_token(PATTERN,&mut recog.err_handler)?;

					recog.base.set_state(1481);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule rowPattern*/
					recog.base.set_state(1482);
					recog.rowPattern_rec(0)?;

					recog.base.set_state(1483);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					recog.base.set_state(1496);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==SUBSET {
						{
						recog.base.set_state(1484);
						recog.base.match_token(SUBSET,&mut recog.err_handler)?;

						/*InvokeRule subsetDefinition*/
						recog.base.set_state(1485);
						recog.subsetDefinition()?;

						recog.base.set_state(1490);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(182,&mut recog.base)?;
						while { _alt!=2 && _alt!=INVALID_ALT } {
							if _alt==1 {
								{
								{
								recog.base.set_state(1486);
								recog.base.match_token(COMMA,&mut recog.err_handler)?;

								/*InvokeRule subsetDefinition*/
								recog.base.set_state(1487);
								recog.subsetDefinition()?;

								}
								} 
							}
							recog.base.set_state(1492);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(182,&mut recog.base)?;
						}
						recog.base.set_state(1494);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==COMMA {
							{
							recog.base.set_state(1493);
							let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
							 cast_mut::<_,PatternRecognitionContext >(&mut _localctx).COMMA = Some(tmp);
							  

							let temp =  cast_mut::<_,PatternRecognitionContext >(&mut _localctx).COMMA.clone().unwrap()
							 ;
							 cast_mut::<_,PatternRecognitionContext >(&mut _localctx).tail.push(temp);
							  
							}
						}

						}
					}

					recog.base.set_state(1498);
					recog.base.match_token(DEFINE,&mut recog.err_handler)?;

					/*InvokeRule variableDefinition*/
					recog.base.set_state(1499);
					recog.variableDefinition()?;

					recog.base.set_state(1504);
					recog.err_handler.sync(&mut recog.base)?;
					_alt = recog.interpreter.adaptive_predict(185,&mut recog.base)?;
					while { _alt!=2 && _alt!=INVALID_ALT } {
						if _alt==1 {
							{
							{
							recog.base.set_state(1500);
							recog.base.match_token(COMMA,&mut recog.err_handler)?;

							/*InvokeRule variableDefinition*/
							recog.base.set_state(1501);
							recog.variableDefinition()?;

							}
							} 
						}
						recog.base.set_state(1506);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(185,&mut recog.base)?;
					}
					recog.base.set_state(1508);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(1507);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						 cast_mut::<_,PatternRecognitionContext >(&mut _localctx).COMMA = Some(tmp);
						  

						let temp =  cast_mut::<_,PatternRecognitionContext >(&mut _localctx).COMMA.clone().unwrap()
						 ;
						 cast_mut::<_,PatternRecognitionContext >(&mut _localctx).tail.push(temp);
						  
						}
					}

					recog.base.set_state(1510);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}

				_ => {}
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- measureDefinition ----------------
pub type MeasureDefinitionContextAll<'input> = MeasureDefinitionContext<'input>;


pub type MeasureDefinitionContext<'input> = BaseParserRuleContext<'input,MeasureDefinitionContextExt<'input>>;

#[derive(Clone)]
pub struct MeasureDefinitionContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for MeasureDefinitionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for MeasureDefinitionContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_measureDefinition(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_measureDefinition(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for MeasureDefinitionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_measureDefinition(self);
	}
}

impl<'input> CustomRuleContext<'input> for MeasureDefinitionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_measureDefinition }
	//fn type_rule_index() -> usize where Self: Sized { RULE_measureDefinition }
}
antlr_rust::tid!{MeasureDefinitionContextExt<'a>}

impl<'input> MeasureDefinitionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<MeasureDefinitionContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,MeasureDefinitionContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait MeasureDefinitionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<MeasureDefinitionContextExt<'input>>{

fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token AS
/// Returns `None` if there is no child corresponding to token AS
fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(AS, 0)
}
fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> MeasureDefinitionContextAttrs<'input> for MeasureDefinitionContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn measureDefinition(&mut self,)
	-> Result<Rc<MeasureDefinitionContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = MeasureDefinitionContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 134, RULE_measureDefinition);
        let mut _localctx: Rc<MeasureDefinitionContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule expression*/
			recog.base.set_state(1514);
			recog.expression()?;

			recog.base.set_state(1515);
			recog.base.match_token(AS,&mut recog.err_handler)?;

			/*InvokeRule identifier*/
			recog.base.set_state(1516);
			recog.identifier()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- rowsPerMatch ----------------
pub type RowsPerMatchContextAll<'input> = RowsPerMatchContext<'input>;


pub type RowsPerMatchContext<'input> = BaseParserRuleContext<'input,RowsPerMatchContextExt<'input>>;

#[derive(Clone)]
pub struct RowsPerMatchContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for RowsPerMatchContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RowsPerMatchContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_rowsPerMatch(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_rowsPerMatch(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RowsPerMatchContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_rowsPerMatch(self);
	}
}

impl<'input> CustomRuleContext<'input> for RowsPerMatchContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_rowsPerMatch }
	//fn type_rule_index() -> usize where Self: Sized { RULE_rowsPerMatch }
}
antlr_rust::tid!{RowsPerMatchContextExt<'a>}

impl<'input> RowsPerMatchContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<RowsPerMatchContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,RowsPerMatchContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait RowsPerMatchContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<RowsPerMatchContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token ONE
/// Returns `None` if there is no child corresponding to token ONE
fn ONE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ONE, 0)
}
/// Retrieves first TerminalNode corresponding to token ROW
/// Returns `None` if there is no child corresponding to token ROW
fn ROW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ROW, 0)
}
/// Retrieves first TerminalNode corresponding to token PER
/// Returns `None` if there is no child corresponding to token PER
fn PER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PER, 0)
}
/// Retrieves first TerminalNode corresponding to token MATCH
/// Returns `None` if there is no child corresponding to token MATCH
fn MATCH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MATCH, 0)
}
/// Retrieves first TerminalNode corresponding to token ALL
/// Returns `None` if there is no child corresponding to token ALL
fn ALL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ALL, 0)
}
/// Retrieves first TerminalNode corresponding to token ROWS
/// Returns `None` if there is no child corresponding to token ROWS
fn ROWS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ROWS, 0)
}
fn emptyMatchHandling(&self) -> Option<Rc<EmptyMatchHandlingContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> RowsPerMatchContextAttrs<'input> for RowsPerMatchContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn rowsPerMatch(&mut self,)
	-> Result<Rc<RowsPerMatchContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = RowsPerMatchContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 136, RULE_rowsPerMatch);
        let mut _localctx: Rc<RowsPerMatchContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(1529);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 ONE 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(1518);
					recog.base.match_token(ONE,&mut recog.err_handler)?;

					recog.base.set_state(1519);
					recog.base.match_token(ROW,&mut recog.err_handler)?;

					recog.base.set_state(1520);
					recog.base.match_token(PER,&mut recog.err_handler)?;

					recog.base.set_state(1521);
					recog.base.match_token(MATCH,&mut recog.err_handler)?;

					}
				}

			 ALL 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(1522);
					recog.base.match_token(ALL,&mut recog.err_handler)?;

					recog.base.set_state(1523);
					recog.base.match_token(ROWS,&mut recog.err_handler)?;

					recog.base.set_state(1524);
					recog.base.match_token(PER,&mut recog.err_handler)?;

					recog.base.set_state(1525);
					recog.base.match_token(MATCH,&mut recog.err_handler)?;

					recog.base.set_state(1527);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==OMIT || _la==SHOW || _la==WITH {
						{
						/*InvokeRule emptyMatchHandling*/
						recog.base.set_state(1526);
						recog.emptyMatchHandling()?;

						}
					}

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- emptyMatchHandling ----------------
pub type EmptyMatchHandlingContextAll<'input> = EmptyMatchHandlingContext<'input>;


pub type EmptyMatchHandlingContext<'input> = BaseParserRuleContext<'input,EmptyMatchHandlingContextExt<'input>>;

#[derive(Clone)]
pub struct EmptyMatchHandlingContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for EmptyMatchHandlingContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for EmptyMatchHandlingContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_emptyMatchHandling(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_emptyMatchHandling(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for EmptyMatchHandlingContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_emptyMatchHandling(self);
	}
}

impl<'input> CustomRuleContext<'input> for EmptyMatchHandlingContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_emptyMatchHandling }
	//fn type_rule_index() -> usize where Self: Sized { RULE_emptyMatchHandling }
}
antlr_rust::tid!{EmptyMatchHandlingContextExt<'a>}

impl<'input> EmptyMatchHandlingContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<EmptyMatchHandlingContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,EmptyMatchHandlingContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait EmptyMatchHandlingContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<EmptyMatchHandlingContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token SHOW
/// Returns `None` if there is no child corresponding to token SHOW
fn SHOW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SHOW, 0)
}
/// Retrieves first TerminalNode corresponding to token EMPTY
/// Returns `None` if there is no child corresponding to token EMPTY
fn EMPTY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EMPTY, 0)
}
/// Retrieves first TerminalNode corresponding to token MATCHES
/// Returns `None` if there is no child corresponding to token MATCHES
fn MATCHES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MATCHES, 0)
}
/// Retrieves first TerminalNode corresponding to token OMIT
/// Returns `None` if there is no child corresponding to token OMIT
fn OMIT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(OMIT, 0)
}
/// Retrieves first TerminalNode corresponding to token WITH
/// Returns `None` if there is no child corresponding to token WITH
fn WITH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WITH, 0)
}
/// Retrieves first TerminalNode corresponding to token UNMATCHED
/// Returns `None` if there is no child corresponding to token UNMATCHED
fn UNMATCHED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UNMATCHED, 0)
}
/// Retrieves first TerminalNode corresponding to token ROWS
/// Returns `None` if there is no child corresponding to token ROWS
fn ROWS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ROWS, 0)
}

}

impl<'input> EmptyMatchHandlingContextAttrs<'input> for EmptyMatchHandlingContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn emptyMatchHandling(&mut self,)
	-> Result<Rc<EmptyMatchHandlingContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = EmptyMatchHandlingContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 138, RULE_emptyMatchHandling);
        let mut _localctx: Rc<EmptyMatchHandlingContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(1540);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 SHOW 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(1531);
					recog.base.match_token(SHOW,&mut recog.err_handler)?;

					recog.base.set_state(1532);
					recog.base.match_token(EMPTY,&mut recog.err_handler)?;

					recog.base.set_state(1533);
					recog.base.match_token(MATCHES,&mut recog.err_handler)?;

					}
				}

			 OMIT 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(1534);
					recog.base.match_token(OMIT,&mut recog.err_handler)?;

					recog.base.set_state(1535);
					recog.base.match_token(EMPTY,&mut recog.err_handler)?;

					recog.base.set_state(1536);
					recog.base.match_token(MATCHES,&mut recog.err_handler)?;

					}
				}

			 WITH 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 3);
					recog.base.enter_outer_alt(None, 3);
					{
					recog.base.set_state(1537);
					recog.base.match_token(WITH,&mut recog.err_handler)?;

					recog.base.set_state(1538);
					recog.base.match_token(UNMATCHED,&mut recog.err_handler)?;

					recog.base.set_state(1539);
					recog.base.match_token(ROWS,&mut recog.err_handler)?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- skipTo ----------------
pub type SkipToContextAll<'input> = SkipToContext<'input>;


pub type SkipToContext<'input> = BaseParserRuleContext<'input,SkipToContextExt<'input>>;

#[derive(Clone)]
pub struct SkipToContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SkipToContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SkipToContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_skipTo(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_skipTo(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SkipToContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_skipTo(self);
	}
}

impl<'input> CustomRuleContext<'input> for SkipToContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_skipTo }
	//fn type_rule_index() -> usize where Self: Sized { RULE_skipTo }
}
antlr_rust::tid!{SkipToContextExt<'a>}

impl<'input> SkipToContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SkipToContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SkipToContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait SkipToContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SkipToContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token SKIP_KW
/// Returns `None` if there is no child corresponding to token SKIP_KW
fn SKIP_KW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SKIP_KW, 0)
}
/// Retrieves first TerminalNode corresponding to token TO
/// Returns `None` if there is no child corresponding to token TO
fn TO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TO, 0)
}
/// Retrieves first TerminalNode corresponding to token NEXT
/// Returns `None` if there is no child corresponding to token NEXT
fn NEXT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NEXT, 0)
}
/// Retrieves first TerminalNode corresponding to token ROW
/// Returns `None` if there is no child corresponding to token ROW
fn ROW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ROW, 0)
}
/// Retrieves first TerminalNode corresponding to token PAST
/// Returns `None` if there is no child corresponding to token PAST
fn PAST(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PAST, 0)
}
/// Retrieves first TerminalNode corresponding to token LAST
/// Returns `None` if there is no child corresponding to token LAST
fn LAST(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LAST, 0)
}
/// Retrieves first TerminalNode corresponding to token FIRST
/// Returns `None` if there is no child corresponding to token FIRST
fn FIRST(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FIRST, 0)
}
fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> SkipToContextAttrs<'input> for SkipToContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn skipTo(&mut self,)
	-> Result<Rc<SkipToContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SkipToContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 140, RULE_skipTo);
        let mut _localctx: Rc<SkipToContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(1561);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(191,&mut recog.base)? {
				1 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(1542);
					recog.base.match_token(SKIP_KW,&mut recog.err_handler)?;

					recog.base.set_state(1543);
					recog.base.match_token(TO,&mut recog.err_handler)?;

					recog.base.set_state(1544);
					recog.base.match_token(NEXT,&mut recog.err_handler)?;

					recog.base.set_state(1545);
					recog.base.match_token(ROW,&mut recog.err_handler)?;

					}
				}
			,
				2 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(1546);
					recog.base.match_token(SKIP_KW,&mut recog.err_handler)?;

					recog.base.set_state(1547);
					recog.base.match_token(PAST,&mut recog.err_handler)?;

					recog.base.set_state(1548);
					recog.base.match_token(LAST,&mut recog.err_handler)?;

					recog.base.set_state(1549);
					recog.base.match_token(ROW,&mut recog.err_handler)?;

					}
				}
			,
				3 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 3);
					recog.base.enter_outer_alt(None, 3);
					{
					recog.base.set_state(1550);
					recog.base.match_token(SKIP_KW,&mut recog.err_handler)?;

					recog.base.set_state(1551);
					recog.base.match_token(TO,&mut recog.err_handler)?;

					recog.base.set_state(1552);
					recog.base.match_token(FIRST,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(1553);
					recog.identifier()?;

					}
				}
			,
				4 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 4);
					recog.base.enter_outer_alt(None, 4);
					{
					recog.base.set_state(1554);
					recog.base.match_token(SKIP_KW,&mut recog.err_handler)?;

					recog.base.set_state(1555);
					recog.base.match_token(TO,&mut recog.err_handler)?;

					recog.base.set_state(1556);
					recog.base.match_token(LAST,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(1557);
					recog.identifier()?;

					}
				}
			,
				5 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 5);
					recog.base.enter_outer_alt(None, 5);
					{
					recog.base.set_state(1558);
					recog.base.match_token(SKIP_KW,&mut recog.err_handler)?;

					recog.base.set_state(1559);
					recog.base.match_token(TO,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(1560);
					recog.identifier()?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- subsetDefinition ----------------
pub type SubsetDefinitionContextAll<'input> = SubsetDefinitionContext<'input>;


pub type SubsetDefinitionContext<'input> = BaseParserRuleContext<'input,SubsetDefinitionContextExt<'input>>;

#[derive(Clone)]
pub struct SubsetDefinitionContextExt<'input>{
	pub name: Option<Rc<IdentifierContextAll<'input>>>,
	pub identifier: Option<Rc<IdentifierContextAll<'input>>>,
	pub union:Vec<Rc<IdentifierContextAll<'input>>>,
	pub tail: Option<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for SubsetDefinitionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SubsetDefinitionContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_subsetDefinition(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_subsetDefinition(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SubsetDefinitionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_subsetDefinition(self);
	}
}

impl<'input> CustomRuleContext<'input> for SubsetDefinitionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_subsetDefinition }
	//fn type_rule_index() -> usize where Self: Sized { RULE_subsetDefinition }
}
antlr_rust::tid!{SubsetDefinitionContextExt<'a>}

impl<'input> SubsetDefinitionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<SubsetDefinitionContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,SubsetDefinitionContextExt{
				tail: None, 
				name: None, identifier: None, 
				union: Vec::new(), 
				ph:PhantomData
			}),
		)
	}
}

pub trait SubsetDefinitionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<SubsetDefinitionContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token EQ
/// Returns `None` if there is no child corresponding to token EQ
fn EQ(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EQ, 0)
}
/// Retrieves first TerminalNode corresponding to token LPAREN
/// Returns `None` if there is no child corresponding to token LPAREN
fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, 0)
}
/// Retrieves first TerminalNode corresponding to token RPAREN
/// Returns `None` if there is no child corresponding to token RPAREN
fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, 0)
}
fn identifier_all(&self) ->  Vec<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn identifier(&self, i: usize) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> SubsetDefinitionContextAttrs<'input> for SubsetDefinitionContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn subsetDefinition(&mut self,)
	-> Result<Rc<SubsetDefinitionContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = SubsetDefinitionContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 142, RULE_subsetDefinition);
        let mut _localctx: Rc<SubsetDefinitionContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule identifier*/
			recog.base.set_state(1563);
			let tmp = recog.identifier()?;
			 cast_mut::<_,SubsetDefinitionContext >(&mut _localctx).name = Some(tmp.clone());
			  

			recog.base.set_state(1564);
			recog.base.match_token(EQ,&mut recog.err_handler)?;

			recog.base.set_state(1565);
			recog.base.match_token(LPAREN,&mut recog.err_handler)?;

			/*InvokeRule identifier*/
			recog.base.set_state(1566);
			let tmp = recog.identifier()?;
			 cast_mut::<_,SubsetDefinitionContext >(&mut _localctx).identifier = Some(tmp.clone());
			  

			let temp =  cast_mut::<_,SubsetDefinitionContext >(&mut _localctx).identifier.clone().unwrap()
			 ;
			 cast_mut::<_,SubsetDefinitionContext >(&mut _localctx).union.push(temp);
			  
			recog.base.set_state(1571);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(192,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					{
					{
					recog.base.set_state(1567);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(1568);
					let tmp = recog.identifier()?;
					 cast_mut::<_,SubsetDefinitionContext >(&mut _localctx).identifier = Some(tmp.clone());
					  

					let temp =  cast_mut::<_,SubsetDefinitionContext >(&mut _localctx).identifier.clone().unwrap()
					 ;
					 cast_mut::<_,SubsetDefinitionContext >(&mut _localctx).union.push(temp);
					  
					}
					} 
				}
				recog.base.set_state(1573);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(192,&mut recog.base)?;
			}
			recog.base.set_state(1575);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==COMMA {
				{
				recog.base.set_state(1574);
				let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
				 cast_mut::<_,SubsetDefinitionContext >(&mut _localctx).tail = Some(tmp);
				  

				}
			}

			recog.base.set_state(1577);
			recog.base.match_token(RPAREN,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- variableDefinition ----------------
pub type VariableDefinitionContextAll<'input> = VariableDefinitionContext<'input>;


pub type VariableDefinitionContext<'input> = BaseParserRuleContext<'input,VariableDefinitionContextExt<'input>>;

#[derive(Clone)]
pub struct VariableDefinitionContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for VariableDefinitionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for VariableDefinitionContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_variableDefinition(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_variableDefinition(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for VariableDefinitionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_variableDefinition(self);
	}
}

impl<'input> CustomRuleContext<'input> for VariableDefinitionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_variableDefinition }
	//fn type_rule_index() -> usize where Self: Sized { RULE_variableDefinition }
}
antlr_rust::tid!{VariableDefinitionContextExt<'a>}

impl<'input> VariableDefinitionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<VariableDefinitionContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,VariableDefinitionContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait VariableDefinitionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<VariableDefinitionContextExt<'input>>{

fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token AS
/// Returns `None` if there is no child corresponding to token AS
fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(AS, 0)
}
fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> VariableDefinitionContextAttrs<'input> for VariableDefinitionContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn variableDefinition(&mut self,)
	-> Result<Rc<VariableDefinitionContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = VariableDefinitionContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 144, RULE_variableDefinition);
        let mut _localctx: Rc<VariableDefinitionContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule identifier*/
			recog.base.set_state(1579);
			recog.identifier()?;

			recog.base.set_state(1580);
			recog.base.match_token(AS,&mut recog.err_handler)?;

			/*InvokeRule expression*/
			recog.base.set_state(1581);
			recog.expression()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- aliasedRelationTarget ----------------
pub type AliasedRelationTargetContextAll<'input> = AliasedRelationTargetContext<'input>;


pub type AliasedRelationTargetContext<'input> = BaseParserRuleContext<'input,AliasedRelationTargetContextExt<'input>>;

#[derive(Clone)]
pub struct AliasedRelationTargetContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for AliasedRelationTargetContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for AliasedRelationTargetContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_aliasedRelationTarget(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_aliasedRelationTarget(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for AliasedRelationTargetContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_aliasedRelationTarget(self);
	}
}

impl<'input> CustomRuleContext<'input> for AliasedRelationTargetContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_aliasedRelationTarget }
	//fn type_rule_index() -> usize where Self: Sized { RULE_aliasedRelationTarget }
}
antlr_rust::tid!{AliasedRelationTargetContextExt<'a>}

impl<'input> AliasedRelationTargetContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<AliasedRelationTargetContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,AliasedRelationTargetContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait AliasedRelationTargetContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<AliasedRelationTargetContextExt<'input>>{

fn relationPrimary(&self) -> Option<Rc<RelationPrimaryContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> AliasedRelationTargetContextAttrs<'input> for AliasedRelationTargetContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn aliasedRelationTarget(&mut self,)
	-> Result<Rc<AliasedRelationTargetContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = AliasedRelationTargetContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 146, RULE_aliasedRelationTarget);
        let mut _localctx: Rc<AliasedRelationTargetContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule relationPrimary*/
			recog.base.set_state(1583);
			recog.relationPrimary()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- aliasedRelation ----------------
pub type AliasedRelationContextAll<'input> = AliasedRelationContext<'input>;


pub type AliasedRelationContext<'input> = BaseParserRuleContext<'input,AliasedRelationContextExt<'input>>;

#[derive(Clone)]
pub struct AliasedRelationContextExt<'input>{
	pub alias: Option<Rc<IdentifierContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for AliasedRelationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for AliasedRelationContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_aliasedRelation(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_aliasedRelation(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for AliasedRelationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_aliasedRelation(self);
	}
}

impl<'input> CustomRuleContext<'input> for AliasedRelationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_aliasedRelation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_aliasedRelation }
}
antlr_rust::tid!{AliasedRelationContextExt<'a>}

impl<'input> AliasedRelationContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<AliasedRelationContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,AliasedRelationContextExt{
				alias: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait AliasedRelationContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<AliasedRelationContextExt<'input>>{

fn aliasedRelationTarget(&self) -> Option<Rc<AliasedRelationTargetContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token AS
/// Returns `None` if there is no child corresponding to token AS
fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(AS, 0)
}
fn columnAliases(&self) -> Option<Rc<ColumnAliasesContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> AliasedRelationContextAttrs<'input> for AliasedRelationContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn aliasedRelation(&mut self,)
	-> Result<Rc<AliasedRelationContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = AliasedRelationContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 148, RULE_aliasedRelation);
        let mut _localctx: Rc<AliasedRelationContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule aliasedRelationTarget*/
			recog.base.set_state(1585);
			recog.aliasedRelationTarget()?;

			recog.base.set_state(1593);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(196,&mut recog.base)? {
				x if x == 1=>{
					{
					recog.base.set_state(1587);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==AS {
						{
						recog.base.set_state(1586);
						recog.base.match_token(AS,&mut recog.err_handler)?;

						}
					}

					/*InvokeRule identifier*/
					recog.base.set_state(1589);
					let tmp = recog.identifier()?;
					 cast_mut::<_,AliasedRelationContext >(&mut _localctx).alias = Some(tmp.clone());
					  

					recog.base.set_state(1591);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(195,&mut recog.base)? {
						x if x == 1=>{
							{
							/*InvokeRule columnAliases*/
							recog.base.set_state(1590);
							recog.columnAliases()?;

							}
						}

						_ => {}
					}
					}
				}

				_ => {}
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- columnAliases ----------------
pub type ColumnAliasesContextAll<'input> = ColumnAliasesContext<'input>;


pub type ColumnAliasesContext<'input> = BaseParserRuleContext<'input,ColumnAliasesContextExt<'input>>;

#[derive(Clone)]
pub struct ColumnAliasesContextExt<'input>{
	pub tail: Option<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ColumnAliasesContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ColumnAliasesContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_columnAliases(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_columnAliases(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ColumnAliasesContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_columnAliases(self);
	}
}

impl<'input> CustomRuleContext<'input> for ColumnAliasesContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_columnAliases }
	//fn type_rule_index() -> usize where Self: Sized { RULE_columnAliases }
}
antlr_rust::tid!{ColumnAliasesContextExt<'a>}

impl<'input> ColumnAliasesContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ColumnAliasesContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ColumnAliasesContextExt{
				tail: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait ColumnAliasesContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ColumnAliasesContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token LPAREN
/// Returns `None` if there is no child corresponding to token LPAREN
fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, 0)
}
fn identifierSeq(&self) -> Option<Rc<IdentifierSeqContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token RPAREN
/// Returns `None` if there is no child corresponding to token RPAREN
fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, 0)
}
/// Retrieves first TerminalNode corresponding to token COMMA
/// Returns `None` if there is no child corresponding to token COMMA
fn COMMA(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, 0)
}

}

impl<'input> ColumnAliasesContextAttrs<'input> for ColumnAliasesContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn columnAliases(&mut self,)
	-> Result<Rc<ColumnAliasesContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = ColumnAliasesContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 150, RULE_columnAliases);
        let mut _localctx: Rc<ColumnAliasesContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1595);
			recog.base.match_token(LPAREN,&mut recog.err_handler)?;

			/*InvokeRule identifierSeq*/
			recog.base.set_state(1596);
			recog.identifierSeq()?;

			recog.base.set_state(1598);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==COMMA {
				{
				recog.base.set_state(1597);
				let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
				 cast_mut::<_,ColumnAliasesContext >(&mut _localctx).tail = Some(tmp);
				  

				}
			}

			recog.base.set_state(1600);
			recog.base.match_token(RPAREN,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- relationPrimary ----------------
#[derive(Debug)]
pub enum RelationPrimaryContextAll<'input>{
	SubqueryRelationContext(SubqueryRelationContext<'input>),
	ParenthesizedRelationContext(ParenthesizedRelationContext<'input>),
	UnnestContext(UnnestContext<'input>),
	TableFunctionInvocationContext(TableFunctionInvocationContext<'input>),
	LateralContext(LateralContext<'input>),
	TableNameContext(TableNameContext<'input>),
Error(RelationPrimaryContext<'input>)
}
antlr_rust::tid!{RelationPrimaryContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for RelationPrimaryContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for RelationPrimaryContextAll<'input>{}

impl<'input> Deref for RelationPrimaryContextAll<'input>{
	type Target = dyn RelationPrimaryContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use RelationPrimaryContextAll::*;
		match self{
			SubqueryRelationContext(inner) => inner,
			ParenthesizedRelationContext(inner) => inner,
			UnnestContext(inner) => inner,
			TableFunctionInvocationContext(inner) => inner,
			LateralContext(inner) => inner,
			TableNameContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RelationPrimaryContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RelationPrimaryContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type RelationPrimaryContext<'input> = BaseParserRuleContext<'input,RelationPrimaryContextExt<'input>>;

#[derive(Clone)]
pub struct RelationPrimaryContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for RelationPrimaryContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RelationPrimaryContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RelationPrimaryContext<'input>{
}

impl<'input> CustomRuleContext<'input> for RelationPrimaryContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_relationPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_relationPrimary }
}
antlr_rust::tid!{RelationPrimaryContextExt<'a>}

impl<'input> RelationPrimaryContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<RelationPrimaryContextAll<'input>> {
		Rc::new(
		RelationPrimaryContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,RelationPrimaryContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait RelationPrimaryContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<RelationPrimaryContextExt<'input>>{


}

impl<'input> RelationPrimaryContextAttrs<'input> for RelationPrimaryContext<'input>{}

pub type SubqueryRelationContext<'input> = BaseParserRuleContext<'input,SubqueryRelationContextExt<'input>>;

pub trait SubqueryRelationContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn query(&self) -> Option<Rc<QueryContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
}

impl<'input> SubqueryRelationContextAttrs<'input> for SubqueryRelationContext<'input>{}

pub struct SubqueryRelationContextExt<'input>{
	base:RelationPrimaryContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SubqueryRelationContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SubqueryRelationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SubqueryRelationContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_subqueryRelation(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_subqueryRelation(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SubqueryRelationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_subqueryRelation(self);
	}
}

impl<'input> CustomRuleContext<'input> for SubqueryRelationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_relationPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_relationPrimary }
}

impl<'input> Borrow<RelationPrimaryContextExt<'input>> for SubqueryRelationContext<'input>{
	fn borrow(&self) -> &RelationPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<RelationPrimaryContextExt<'input>> for SubqueryRelationContext<'input>{
	fn borrow_mut(&mut self) -> &mut RelationPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> RelationPrimaryContextAttrs<'input> for SubqueryRelationContext<'input> {}

impl<'input> SubqueryRelationContextExt<'input>{
	fn new(ctx: &dyn RelationPrimaryContextAttrs<'input>) -> Rc<RelationPrimaryContextAll<'input>>  {
		Rc::new(
			RelationPrimaryContextAll::SubqueryRelationContext(
				BaseParserRuleContext::copy_from(ctx,SubqueryRelationContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ParenthesizedRelationContext<'input> = BaseParserRuleContext<'input,ParenthesizedRelationContextExt<'input>>;

pub trait ParenthesizedRelationContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn relation(&self) -> Option<Rc<RelationContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> ParenthesizedRelationContextAttrs<'input> for ParenthesizedRelationContext<'input>{}

pub struct ParenthesizedRelationContextExt<'input>{
	base:RelationPrimaryContextExt<'input>,
	pub rel: Option<Rc<RelationContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ParenthesizedRelationContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ParenthesizedRelationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ParenthesizedRelationContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_parenthesizedRelation(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_parenthesizedRelation(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ParenthesizedRelationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_parenthesizedRelation(self);
	}
}

impl<'input> CustomRuleContext<'input> for ParenthesizedRelationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_relationPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_relationPrimary }
}

impl<'input> Borrow<RelationPrimaryContextExt<'input>> for ParenthesizedRelationContext<'input>{
	fn borrow(&self) -> &RelationPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<RelationPrimaryContextExt<'input>> for ParenthesizedRelationContext<'input>{
	fn borrow_mut(&mut self) -> &mut RelationPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> RelationPrimaryContextAttrs<'input> for ParenthesizedRelationContext<'input> {}

impl<'input> ParenthesizedRelationContextExt<'input>{
	fn new(ctx: &dyn RelationPrimaryContextAttrs<'input>) -> Rc<RelationPrimaryContextAll<'input>>  {
		Rc::new(
			RelationPrimaryContextAll::ParenthesizedRelationContext(
				BaseParserRuleContext::copy_from(ctx,ParenthesizedRelationContextExt{
        			rel:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type UnnestContext<'input> = BaseParserRuleContext<'input,UnnestContextExt<'input>>;

pub trait UnnestContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token UNNEST
	/// Returns `None` if there is no child corresponding to token UNNEST
	fn UNNEST(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(UNNEST, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn expression_all(&self) ->  Vec<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn expression(&self, i: usize) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
	/// Retrieves first TerminalNode corresponding to token WITH
	/// Returns `None` if there is no child corresponding to token WITH
	fn WITH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(WITH, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ORDINALITY
	/// Returns `None` if there is no child corresponding to token ORDINALITY
	fn ORDINALITY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ORDINALITY, 0)
	}
}

impl<'input> UnnestContextAttrs<'input> for UnnestContext<'input>{}

pub struct UnnestContextExt<'input>{
	base:RelationPrimaryContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{UnnestContextExt<'a>}

impl<'input> TrinoParserContext<'input> for UnnestContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for UnnestContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_unnest(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_unnest(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for UnnestContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_unnest(self);
	}
}

impl<'input> CustomRuleContext<'input> for UnnestContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_relationPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_relationPrimary }
}

impl<'input> Borrow<RelationPrimaryContextExt<'input>> for UnnestContext<'input>{
	fn borrow(&self) -> &RelationPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<RelationPrimaryContextExt<'input>> for UnnestContext<'input>{
	fn borrow_mut(&mut self) -> &mut RelationPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> RelationPrimaryContextAttrs<'input> for UnnestContext<'input> {}

impl<'input> UnnestContextExt<'input>{
	fn new(ctx: &dyn RelationPrimaryContextAttrs<'input>) -> Rc<RelationPrimaryContextAll<'input>>  {
		Rc::new(
			RelationPrimaryContextAll::UnnestContext(
				BaseParserRuleContext::copy_from(ctx,UnnestContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type TableFunctionInvocationContext<'input> = BaseParserRuleContext<'input,TableFunctionInvocationContextExt<'input>>;

pub trait TableFunctionInvocationContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn tableFunctionCall(&self) -> Option<Rc<TableFunctionCallContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
}

impl<'input> TableFunctionInvocationContextAttrs<'input> for TableFunctionInvocationContext<'input>{}

pub struct TableFunctionInvocationContextExt<'input>{
	base:RelationPrimaryContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{TableFunctionInvocationContextExt<'a>}

impl<'input> TrinoParserContext<'input> for TableFunctionInvocationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableFunctionInvocationContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_tableFunctionInvocation(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_tableFunctionInvocation(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableFunctionInvocationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_tableFunctionInvocation(self);
	}
}

impl<'input> CustomRuleContext<'input> for TableFunctionInvocationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_relationPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_relationPrimary }
}

impl<'input> Borrow<RelationPrimaryContextExt<'input>> for TableFunctionInvocationContext<'input>{
	fn borrow(&self) -> &RelationPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<RelationPrimaryContextExt<'input>> for TableFunctionInvocationContext<'input>{
	fn borrow_mut(&mut self) -> &mut RelationPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> RelationPrimaryContextAttrs<'input> for TableFunctionInvocationContext<'input> {}

impl<'input> TableFunctionInvocationContextExt<'input>{
	fn new(ctx: &dyn RelationPrimaryContextAttrs<'input>) -> Rc<RelationPrimaryContextAll<'input>>  {
		Rc::new(
			RelationPrimaryContextAll::TableFunctionInvocationContext(
				BaseParserRuleContext::copy_from(ctx,TableFunctionInvocationContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type LateralContext<'input> = BaseParserRuleContext<'input,LateralContextExt<'input>>;

pub trait LateralContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token LATERAL
	/// Returns `None` if there is no child corresponding to token LATERAL
	fn LATERAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LATERAL, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn query(&self) -> Option<Rc<QueryContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
}

impl<'input> LateralContextAttrs<'input> for LateralContext<'input>{}

pub struct LateralContextExt<'input>{
	base:RelationPrimaryContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{LateralContextExt<'a>}

impl<'input> TrinoParserContext<'input> for LateralContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for LateralContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_lateral(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_lateral(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for LateralContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_lateral(self);
	}
}

impl<'input> CustomRuleContext<'input> for LateralContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_relationPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_relationPrimary }
}

impl<'input> Borrow<RelationPrimaryContextExt<'input>> for LateralContext<'input>{
	fn borrow(&self) -> &RelationPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<RelationPrimaryContextExt<'input>> for LateralContext<'input>{
	fn borrow_mut(&mut self) -> &mut RelationPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> RelationPrimaryContextAttrs<'input> for LateralContext<'input> {}

impl<'input> LateralContextExt<'input>{
	fn new(ctx: &dyn RelationPrimaryContextAttrs<'input>) -> Rc<RelationPrimaryContextAll<'input>>  {
		Rc::new(
			RelationPrimaryContextAll::LateralContext(
				BaseParserRuleContext::copy_from(ctx,LateralContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type TableNameContext<'input> = BaseParserRuleContext<'input,TableNameContextExt<'input>>;

pub trait TableNameContextAttrs<'input>: TrinoParserContext<'input>{
	fn pathExpression(&self) -> Option<Rc<PathExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn queryPeriod(&self) -> Option<Rc<QueryPeriodContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> TableNameContextAttrs<'input> for TableNameContext<'input>{}

pub struct TableNameContextExt<'input>{
	base:RelationPrimaryContextExt<'input>,
	pub tableNameRef: Option<Rc<PathExpressionContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{TableNameContextExt<'a>}

impl<'input> TrinoParserContext<'input> for TableNameContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableNameContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_tableName(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_tableName(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableNameContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_tableName(self);
	}
}

impl<'input> CustomRuleContext<'input> for TableNameContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_relationPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_relationPrimary }
}

impl<'input> Borrow<RelationPrimaryContextExt<'input>> for TableNameContext<'input>{
	fn borrow(&self) -> &RelationPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<RelationPrimaryContextExt<'input>> for TableNameContext<'input>{
	fn borrow_mut(&mut self) -> &mut RelationPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> RelationPrimaryContextAttrs<'input> for TableNameContext<'input> {}

impl<'input> TableNameContextExt<'input>{
	fn new(ctx: &dyn RelationPrimaryContextAttrs<'input>) -> Rc<RelationPrimaryContextAll<'input>>  {
		Rc::new(
			RelationPrimaryContextAll::TableNameContext(
				BaseParserRuleContext::copy_from(ctx,TableNameContextExt{
        			tableNameRef:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn relationPrimary(&mut self,)
	-> Result<Rc<RelationPrimaryContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = RelationPrimaryContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 152, RULE_relationPrimary);
        let mut _localctx: Rc<RelationPrimaryContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			recog.base.set_state(1642);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(202,&mut recog.base)? {
				1 =>{
					let tmp = TableNameContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					/*InvokeRule pathExpression*/
					recog.base.set_state(1602);
					let tmp = recog.pathExpression()?;
					if let RelationPrimaryContextAll::TableNameContext(ctx) = cast_mut::<_,RelationPrimaryContextAll >(&mut _localctx){
					ctx.tableNameRef = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(1604);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(198,&mut recog.base)? {
						x if x == 1=>{
							{
							/*InvokeRule queryPeriod*/
							recog.base.set_state(1603);
							recog.queryPeriod()?;

							}
						}

						_ => {}
					}
					}
				}
			,
				2 =>{
					let tmp = SubqueryRelationContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(1606);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule query*/
					recog.base.set_state(1607);
					recog.query()?;

					recog.base.set_state(1608);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				3 =>{
					let tmp = UnnestContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 3);
					_localctx = tmp;
					{
					recog.base.set_state(1610);
					recog.base.match_token(UNNEST,&mut recog.err_handler)?;

					recog.base.set_state(1611);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule expression*/
					recog.base.set_state(1612);
					recog.expression()?;

					recog.base.set_state(1617);
					recog.err_handler.sync(&mut recog.base)?;
					_alt = recog.interpreter.adaptive_predict(199,&mut recog.base)?;
					while { _alt!=2 && _alt!=INVALID_ALT } {
						if _alt==1 {
							{
							{
							recog.base.set_state(1613);
							recog.base.match_token(COMMA,&mut recog.err_handler)?;

							/*InvokeRule expression*/
							recog.base.set_state(1614);
							recog.expression()?;

							}
							} 
						}
						recog.base.set_state(1619);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(199,&mut recog.base)?;
					}
					recog.base.set_state(1621);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(1620);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						if let RelationPrimaryContextAll::UnnestContext(ctx) = cast_mut::<_,RelationPrimaryContextAll >(&mut _localctx){
						ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(1623);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					recog.base.set_state(1626);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(201,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(1624);
							recog.base.match_token(WITH,&mut recog.err_handler)?;

							recog.base.set_state(1625);
							recog.base.match_token(ORDINALITY,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					}
				}
			,
				4 =>{
					let tmp = LateralContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 4);
					_localctx = tmp;
					{
					recog.base.set_state(1628);
					recog.base.match_token(LATERAL,&mut recog.err_handler)?;

					recog.base.set_state(1629);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule query*/
					recog.base.set_state(1630);
					recog.query()?;

					recog.base.set_state(1631);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				5 =>{
					let tmp = TableFunctionInvocationContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 5);
					_localctx = tmp;
					{
					recog.base.set_state(1633);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					recog.base.set_state(1634);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule tableFunctionCall*/
					recog.base.set_state(1635);
					recog.tableFunctionCall()?;

					recog.base.set_state(1636);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				6 =>{
					let tmp = ParenthesizedRelationContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 6);
					_localctx = tmp;
					{
					recog.base.set_state(1638);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule relation*/
					recog.base.set_state(1639);
					let tmp = recog.relation()?;
					if let RelationPrimaryContextAll::ParenthesizedRelationContext(ctx) = cast_mut::<_,RelationPrimaryContextAll >(&mut _localctx){
					ctx.rel = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(1640);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- tableFunctionCall ----------------
#[derive(Debug)]
pub enum TableFunctionCallContextAll<'input>{
	DefaultTableFunctionCallContext(DefaultTableFunctionCallContext<'input>),
Error(TableFunctionCallContext<'input>)
}
antlr_rust::tid!{TableFunctionCallContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for TableFunctionCallContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for TableFunctionCallContextAll<'input>{}

impl<'input> Deref for TableFunctionCallContextAll<'input>{
	type Target = dyn TableFunctionCallContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use TableFunctionCallContextAll::*;
		match self{
			DefaultTableFunctionCallContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableFunctionCallContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableFunctionCallContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type TableFunctionCallContext<'input> = BaseParserRuleContext<'input,TableFunctionCallContextExt<'input>>;

#[derive(Clone)]
pub struct TableFunctionCallContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for TableFunctionCallContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableFunctionCallContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableFunctionCallContext<'input>{
}

impl<'input> CustomRuleContext<'input> for TableFunctionCallContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_tableFunctionCall }
	//fn type_rule_index() -> usize where Self: Sized { RULE_tableFunctionCall }
}
antlr_rust::tid!{TableFunctionCallContextExt<'a>}

impl<'input> TableFunctionCallContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<TableFunctionCallContextAll<'input>> {
		Rc::new(
		TableFunctionCallContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,TableFunctionCallContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait TableFunctionCallContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<TableFunctionCallContextExt<'input>>{


}

impl<'input> TableFunctionCallContextAttrs<'input> for TableFunctionCallContext<'input>{}

pub type DefaultTableFunctionCallContext<'input> = BaseParserRuleContext<'input,DefaultTableFunctionCallContextExt<'input>>;

pub trait DefaultTableFunctionCallContextAttrs<'input>: TrinoParserContext<'input>{
	fn functionName(&self) -> Option<Rc<FunctionNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn tableFunctionArgument_all(&self) ->  Vec<Rc<TableFunctionArgumentContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn tableFunctionArgument(&self, i: usize) -> Option<Rc<TableFunctionArgumentContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	fn tableFunctionArgumentCopartition(&self) -> Option<Rc<TableFunctionArgumentCopartitionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn over(&self) -> Option<Rc<OverContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> DefaultTableFunctionCallContextAttrs<'input> for DefaultTableFunctionCallContext<'input>{}

pub struct DefaultTableFunctionCallContextExt<'input>{
	base:TableFunctionCallContextExt<'input>,
	pub COMMA: Option<TokenType<'input>>,
	pub tail:Vec<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DefaultTableFunctionCallContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DefaultTableFunctionCallContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DefaultTableFunctionCallContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_defaultTableFunctionCall(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_defaultTableFunctionCall(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DefaultTableFunctionCallContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_defaultTableFunctionCall(self);
	}
}

impl<'input> CustomRuleContext<'input> for DefaultTableFunctionCallContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_tableFunctionCall }
	//fn type_rule_index() -> usize where Self: Sized { RULE_tableFunctionCall }
}

impl<'input> Borrow<TableFunctionCallContextExt<'input>> for DefaultTableFunctionCallContext<'input>{
	fn borrow(&self) -> &TableFunctionCallContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<TableFunctionCallContextExt<'input>> for DefaultTableFunctionCallContext<'input>{
	fn borrow_mut(&mut self) -> &mut TableFunctionCallContextExt<'input> { &mut self.base }
}

impl<'input> TableFunctionCallContextAttrs<'input> for DefaultTableFunctionCallContext<'input> {}

impl<'input> DefaultTableFunctionCallContextExt<'input>{
	fn new(ctx: &dyn TableFunctionCallContextAttrs<'input>) -> Rc<TableFunctionCallContextAll<'input>>  {
		Rc::new(
			TableFunctionCallContextAll::DefaultTableFunctionCallContext(
				BaseParserRuleContext::copy_from(ctx,DefaultTableFunctionCallContextExt{
					COMMA:None, 
        			tail:Vec::new(), 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn tableFunctionCall(&mut self,)
	-> Result<Rc<TableFunctionCallContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = TableFunctionCallContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 154, RULE_tableFunctionCall);
        let mut _localctx: Rc<TableFunctionCallContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			let tmp = DefaultTableFunctionCallContextExt::new(&**_localctx);
			recog.base.enter_outer_alt(Some(tmp.clone()), 1);
			_localctx = tmp;
			{
			/*InvokeRule functionName*/
			recog.base.set_state(1644);
			recog.functionName()?;

			recog.base.set_state(1645);
			recog.base.match_token(LPAREN,&mut recog.err_handler)?;

			recog.base.set_state(1657);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(205,&mut recog.base)? {
				x if x == 1=>{
					{
					/*InvokeRule tableFunctionArgument*/
					recog.base.set_state(1646);
					recog.tableFunctionArgument()?;

					recog.base.set_state(1651);
					recog.err_handler.sync(&mut recog.base)?;
					_alt = recog.interpreter.adaptive_predict(203,&mut recog.base)?;
					while { _alt!=2 && _alt!=INVALID_ALT } {
						if _alt==1 {
							{
							{
							recog.base.set_state(1647);
							recog.base.match_token(COMMA,&mut recog.err_handler)?;

							/*InvokeRule tableFunctionArgument*/
							recog.base.set_state(1648);
							recog.tableFunctionArgument()?;

							}
							} 
						}
						recog.base.set_state(1653);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(203,&mut recog.base)?;
					}
					recog.base.set_state(1655);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(1654);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						if let TableFunctionCallContextAll::DefaultTableFunctionCallContext(ctx) = cast_mut::<_,TableFunctionCallContextAll >(&mut _localctx){
						ctx.COMMA = Some(tmp); } else {unreachable!("cant cast");}  

						let temp = if let TableFunctionCallContextAll::DefaultTableFunctionCallContext(ctx) = cast_mut::<_,TableFunctionCallContextAll >(&mut _localctx){
						ctx.COMMA.clone().unwrap() } else {unreachable!("cant cast");} ;
						if let TableFunctionCallContextAll::DefaultTableFunctionCallContext(ctx) = cast_mut::<_,TableFunctionCallContextAll >(&mut _localctx){
						ctx.tail.push(temp); } else {unreachable!("cant cast");}  
						}
					}

					}
				}

				_ => {}
			}
			recog.base.set_state(1660);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==COPARTITION {
				{
				/*InvokeRule tableFunctionArgumentCopartition*/
				recog.base.set_state(1659);
				recog.tableFunctionArgumentCopartition()?;

				}
			}

			recog.base.set_state(1662);
			recog.base.match_token(RPAREN,&mut recog.err_handler)?;

			recog.base.set_state(1664);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==OVER {
				{
				/*InvokeRule over*/
				recog.base.set_state(1663);
				recog.over()?;

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- tableFunctionArgumentCopartition ----------------
pub type TableFunctionArgumentCopartitionContextAll<'input> = TableFunctionArgumentCopartitionContext<'input>;


pub type TableFunctionArgumentCopartitionContext<'input> = BaseParserRuleContext<'input,TableFunctionArgumentCopartitionContextExt<'input>>;

#[derive(Clone)]
pub struct TableFunctionArgumentCopartitionContextExt<'input>{
	pub COMMA: Option<TokenType<'input>>,
	pub tail:Vec<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for TableFunctionArgumentCopartitionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableFunctionArgumentCopartitionContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_tableFunctionArgumentCopartition(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_tableFunctionArgumentCopartition(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableFunctionArgumentCopartitionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_tableFunctionArgumentCopartition(self);
	}
}

impl<'input> CustomRuleContext<'input> for TableFunctionArgumentCopartitionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_tableFunctionArgumentCopartition }
	//fn type_rule_index() -> usize where Self: Sized { RULE_tableFunctionArgumentCopartition }
}
antlr_rust::tid!{TableFunctionArgumentCopartitionContextExt<'a>}

impl<'input> TableFunctionArgumentCopartitionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<TableFunctionArgumentCopartitionContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,TableFunctionArgumentCopartitionContextExt{
				COMMA: None, 
				tail: Vec::new(), 
				ph:PhantomData
			}),
		)
	}
}

pub trait TableFunctionArgumentCopartitionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<TableFunctionArgumentCopartitionContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token COPARTITION
/// Returns `None` if there is no child corresponding to token COPARTITION
fn COPARTITION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COPARTITION, 0)
}
fn copartitionTables_all(&self) ->  Vec<Rc<CopartitionTablesContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn copartitionTables(&self, i: usize) -> Option<Rc<CopartitionTablesContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> TableFunctionArgumentCopartitionContextAttrs<'input> for TableFunctionArgumentCopartitionContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn tableFunctionArgumentCopartition(&mut self,)
	-> Result<Rc<TableFunctionArgumentCopartitionContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = TableFunctionArgumentCopartitionContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 156, RULE_tableFunctionArgumentCopartition);
        let mut _localctx: Rc<TableFunctionArgumentCopartitionContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1666);
			recog.base.match_token(COPARTITION,&mut recog.err_handler)?;

			/*InvokeRule copartitionTables*/
			recog.base.set_state(1667);
			recog.copartitionTables()?;

			recog.base.set_state(1672);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(208,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					{
					{
					recog.base.set_state(1668);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule copartitionTables*/
					recog.base.set_state(1669);
					recog.copartitionTables()?;

					}
					} 
				}
				recog.base.set_state(1674);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(208,&mut recog.base)?;
			}
			recog.base.set_state(1676);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==COMMA {
				{
				recog.base.set_state(1675);
				let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
				 cast_mut::<_,TableFunctionArgumentCopartitionContext >(&mut _localctx).COMMA = Some(tmp);
				  

				let temp =  cast_mut::<_,TableFunctionArgumentCopartitionContext >(&mut _localctx).COMMA.clone().unwrap()
				 ;
				 cast_mut::<_,TableFunctionArgumentCopartitionContext >(&mut _localctx).tail.push(temp);
				  
				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- tableFunctionArgumentName ----------------
pub type TableFunctionArgumentNameContextAll<'input> = TableFunctionArgumentNameContext<'input>;


pub type TableFunctionArgumentNameContext<'input> = BaseParserRuleContext<'input,TableFunctionArgumentNameContextExt<'input>>;

#[derive(Clone)]
pub struct TableFunctionArgumentNameContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for TableFunctionArgumentNameContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableFunctionArgumentNameContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_tableFunctionArgumentName(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_tableFunctionArgumentName(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableFunctionArgumentNameContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_tableFunctionArgumentName(self);
	}
}

impl<'input> CustomRuleContext<'input> for TableFunctionArgumentNameContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_tableFunctionArgumentName }
	//fn type_rule_index() -> usize where Self: Sized { RULE_tableFunctionArgumentName }
}
antlr_rust::tid!{TableFunctionArgumentNameContextExt<'a>}

impl<'input> TableFunctionArgumentNameContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<TableFunctionArgumentNameContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,TableFunctionArgumentNameContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait TableFunctionArgumentNameContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<TableFunctionArgumentNameContextExt<'input>>{

fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> TableFunctionArgumentNameContextAttrs<'input> for TableFunctionArgumentNameContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn tableFunctionArgumentName(&mut self,)
	-> Result<Rc<TableFunctionArgumentNameContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = TableFunctionArgumentNameContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 158, RULE_tableFunctionArgumentName);
        let mut _localctx: Rc<TableFunctionArgumentNameContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule identifier*/
			recog.base.set_state(1678);
			recog.identifier()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- tableFunctionArgument ----------------
pub type TableFunctionArgumentContextAll<'input> = TableFunctionArgumentContext<'input>;


pub type TableFunctionArgumentContext<'input> = BaseParserRuleContext<'input,TableFunctionArgumentContextExt<'input>>;

#[derive(Clone)]
pub struct TableFunctionArgumentContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for TableFunctionArgumentContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableFunctionArgumentContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_tableFunctionArgument(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_tableFunctionArgument(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableFunctionArgumentContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_tableFunctionArgument(self);
	}
}

impl<'input> CustomRuleContext<'input> for TableFunctionArgumentContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_tableFunctionArgument }
	//fn type_rule_index() -> usize where Self: Sized { RULE_tableFunctionArgument }
}
antlr_rust::tid!{TableFunctionArgumentContextExt<'a>}

impl<'input> TableFunctionArgumentContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<TableFunctionArgumentContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,TableFunctionArgumentContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait TableFunctionArgumentContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<TableFunctionArgumentContextExt<'input>>{

fn tableArgument(&self) -> Option<Rc<TableArgumentContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn descriptorArgument(&self) -> Option<Rc<DescriptorArgumentContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn tableFunctionArgumentName(&self) -> Option<Rc<TableFunctionArgumentNameContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> TableFunctionArgumentContextAttrs<'input> for TableFunctionArgumentContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn tableFunctionArgument(&mut self,)
	-> Result<Rc<TableFunctionArgumentContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = TableFunctionArgumentContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 160, RULE_tableFunctionArgument);
        let mut _localctx: Rc<TableFunctionArgumentContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1683);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(210,&mut recog.base)? {
				x if x == 1=>{
					{
					/*InvokeRule tableFunctionArgumentName*/
					recog.base.set_state(1680);
					recog.tableFunctionArgumentName()?;

					recog.base.set_state(1681);
					recog.base.match_token(T__0,&mut recog.err_handler)?;

					}
				}

				_ => {}
			}
			recog.base.set_state(1688);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(211,&mut recog.base)? {
				1 =>{
					{
					/*InvokeRule tableArgument*/
					recog.base.set_state(1685);
					recog.tableArgument()?;

					}
				}
			,
				2 =>{
					{
					/*InvokeRule descriptorArgument*/
					recog.base.set_state(1686);
					recog.descriptorArgument()?;

					}
				}
			,
				3 =>{
					{
					/*InvokeRule expression*/
					recog.base.set_state(1687);
					recog.expression()?;

					}
				}

				_ => {}
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- tableArgument ----------------
pub type TableArgumentContextAll<'input> = TableArgumentContext<'input>;


pub type TableArgumentContext<'input> = BaseParserRuleContext<'input,TableArgumentContextExt<'input>>;

#[derive(Clone)]
pub struct TableArgumentContextExt<'input>{
	pub COMMA: Option<TokenType<'input>>,
	pub tail:Vec<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for TableArgumentContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableArgumentContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_tableArgument(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_tableArgument(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableArgumentContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_tableArgument(self);
	}
}

impl<'input> CustomRuleContext<'input> for TableArgumentContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_tableArgument }
	//fn type_rule_index() -> usize where Self: Sized { RULE_tableArgument }
}
antlr_rust::tid!{TableArgumentContextExt<'a>}

impl<'input> TableArgumentContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<TableArgumentContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,TableArgumentContextExt{
				COMMA: None, 
				tail: Vec::new(), 
				ph:PhantomData
			}),
		)
	}
}

pub trait TableArgumentContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<TableArgumentContextExt<'input>>{

fn tableArgumentRelation(&self) -> Option<Rc<TableArgumentRelationContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token PARTITION
/// Returns `None` if there is no child corresponding to token PARTITION
fn PARTITION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PARTITION, 0)
}
/// Retrieves all `TerminalNode`s corresponding to token BY in current rule
fn BY_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token BY, starting from 0.
/// Returns `None` if number of children corresponding to token BY is less or equal than `i`.
fn BY(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(BY, i)
}
/// Retrieves first TerminalNode corresponding to token PRUNE
/// Returns `None` if there is no child corresponding to token PRUNE
fn PRUNE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PRUNE, 0)
}
/// Retrieves first TerminalNode corresponding to token WHEN
/// Returns `None` if there is no child corresponding to token WHEN
fn WHEN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WHEN, 0)
}
/// Retrieves first TerminalNode corresponding to token EMPTY
/// Returns `None` if there is no child corresponding to token EMPTY
fn EMPTY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EMPTY, 0)
}
/// Retrieves first TerminalNode corresponding to token KEEP
/// Returns `None` if there is no child corresponding to token KEEP
fn KEEP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(KEEP, 0)
}
/// Retrieves first TerminalNode corresponding to token ORDER
/// Returns `None` if there is no child corresponding to token ORDER
fn ORDER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ORDER, 0)
}
/// Retrieves all `TerminalNode`s corresponding to token LPAREN in current rule
fn LPAREN_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token LPAREN, starting from 0.
/// Returns `None` if number of children corresponding to token LPAREN is less or equal than `i`.
fn LPAREN(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, i)
}
/// Retrieves all `TerminalNode`s corresponding to token RPAREN in current rule
fn RPAREN_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token RPAREN, starting from 0.
/// Returns `None` if number of children corresponding to token RPAREN is less or equal than `i`.
fn RPAREN(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, i)
}
fn expression_all(&self) ->  Vec<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn expression(&self, i: usize) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
fn sortItem_all(&self) ->  Vec<Rc<SortItemContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn sortItem(&self, i: usize) -> Option<Rc<SortItemContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> TableArgumentContextAttrs<'input> for TableArgumentContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn tableArgument(&mut self,)
	-> Result<Rc<TableArgumentContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = TableArgumentContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 162, RULE_tableArgument);
        let mut _localctx: Rc<TableArgumentContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule tableArgumentRelation*/
			recog.base.set_state(1690);
			recog.tableArgumentRelation()?;

			recog.base.set_state(1711);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==PARTITION {
				{
				recog.base.set_state(1691);
				recog.base.match_token(PARTITION,&mut recog.err_handler)?;

				recog.base.set_state(1692);
				recog.base.match_token(BY,&mut recog.err_handler)?;

				recog.base.set_state(1709);
				recog.err_handler.sync(&mut recog.base)?;
				match  recog.interpreter.adaptive_predict(215,&mut recog.base)? {
					1 =>{
						{
						recog.base.set_state(1693);
						recog.base.match_token(LPAREN,&mut recog.err_handler)?;

						recog.base.set_state(1705);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if ((((_la - 9)) & !0x3f) == 0 && ((1usize << (_la - 9)) & ((1usize << (ABORT - 9)) | (1usize << (ABSENT - 9)) | (1usize << (ADD - 9)) | (1usize << (ADMIN - 9)) | (1usize << (AFTER - 9)) | (1usize << (ALL - 9)) | (1usize << (ANALYZE - 9)) | (1usize << (ANTI - 9)) | (1usize << (ANY - 9)) | (1usize << (ARRAY - 9)) | (1usize << (ASC - 9)) | (1usize << (AT - 9)) | (1usize << (ATTACH - 9)) | (1usize << (AUTHORIZATION - 9)) | (1usize << (BEGIN - 9)) | (1usize << (BERNOULLI - 9)) | (1usize << (BOTH - 9)) | (1usize << (BZIP2 - 9)) | (1usize << (CALL - 9)) | (1usize << (CANCEL - 9)) | (1usize << (CASCADE - 9)) | (1usize << (CASE - 9)) | (1usize << (CAST - 9)))) != 0) || ((((_la - 41)) & !0x3f) == 0 && ((1usize << (_la - 41)) & ((1usize << (CATALOGS - 41)) | (1usize << (CHARACTER - 41)) | (1usize << (CLONE - 41)) | (1usize << (CLOSE - 41)) | (1usize << (CLUSTER - 41)) | (1usize << (COLUMN - 41)) | (1usize << (COLUMNS - 41)) | (1usize << (COMMENT - 41)) | (1usize << (COMMIT - 41)) | (1usize << (COMMITTED - 41)) | (1usize << (COMPRESSION - 41)) | (1usize << (CONDITIONAL - 41)) | (1usize << (CONNECTION - 41)) | (1usize << (COPARTITION - 41)) | (1usize << (COPY - 41)) | (1usize << (COUNT - 41)) | (1usize << (CURRENT - 41)) | (1usize << (DATA - 41)) | (1usize << (DATABASE - 41)) | (1usize << (DATASHARE - 41)) | (1usize << (DATE - 41)) | (1usize << (DAY - 41)) | (1usize << (DAYS - 41)))) != 0) || ((((_la - 74)) & !0x3f) == 0 && ((1usize << (_la - 74)) & ((1usize << (DECLARE - 74)) | (1usize << (DEFAULT - 74)) | (1usize << (DEFINE - 74)) | (1usize << (DEFINER - 74)) | (1usize << (DELIMITER - 74)) | (1usize << (DENY - 74)) | (1usize << (DESC - 74)) | (1usize << (DESCRIBE - 74)) | (1usize << (DESCRIPTOR - 74)) | (1usize << (DISTRIBUTED - 74)) | (1usize << (DETACH - 74)) | (1usize << (DOUBLE - 74)) | (1usize << (EMPTY - 74)) | (1usize << (ENCODING - 74)) | (1usize << (END - 74)) | (1usize << (ERROR - 74)) | (1usize << (EXCLUDING - 74)) | (1usize << (EXECUTE - 74)) | (1usize << (EXISTS - 74)) | (1usize << (EXPLAIN - 74)))) != 0) || ((((_la - 106)) & !0x3f) == 0 && ((1usize << (_la - 106)) & ((1usize << (EXTERNAL - 106)) | (1usize << (EXTRACT - 106)) | (1usize << (FALSE - 106)) | (1usize << (FETCH - 106)) | (1usize << (FILTER - 106)) | (1usize << (FINAL - 106)) | (1usize << (FIRST - 106)) | (1usize << (FOLLOWING - 106)) | (1usize << (FORMAT - 106)) | (1usize << (FUNCTIONS - 106)) | (1usize << (GRACE - 106)) | (1usize << (GRANT - 106)) | (1usize << (GRANTED - 106)) | (1usize << (GRANTS - 106)) | (1usize << (GRAPHVIZ - 106)) | (1usize << (GROUPING - 106)) | (1usize << (GROUPS - 106)) | (1usize << (GZIP - 106)) | (1usize << (HOUR - 106)) | (1usize << (HOURS - 106)) | (1usize << (IF - 106)) | (1usize << (IGNORE - 106)))) != 0) || ((((_la - 138)) & !0x3f) == 0 && ((1usize << (_la - 138)) & ((1usize << (INCLUDING - 138)) | (1usize << (INITIAL - 138)) | (1usize << (INPUT - 138)) | (1usize << (INTEGER - 138)) | (1usize << (INTERVAL - 138)) | (1usize << (INVOKER - 138)) | (1usize << (IO - 138)) | (1usize << (ISOLATION - 138)) | (1usize << (JSON - 138)) | (1usize << (JSON_ARRAY - 138)) | (1usize << (JSON_EXISTS - 138)) | (1usize << (JSON_OBJECT - 138)) | (1usize << (JSON_QUERY - 138)) | (1usize << (JSON_VALUE - 138)) | (1usize << (KEEP - 138)) | (1usize << (KEY - 138)) | (1usize << (KEYS - 138)) | (1usize << (LAMBDA - 138)) | (1usize << (LAST - 138)) | (1usize << (LATERAL - 138)) | (1usize << (LEADING - 138)) | (1usize << (LEFT - 138)) | (1usize << (LEVEL - 138)))) != 0) || ((((_la - 170)) & !0x3f) == 0 && ((1usize << (_la - 170)) & ((1usize << (LIBRARY - 170)) | (1usize << (LIMIT - 170)) | (1usize << (LISTAGG - 170)) | (1usize << (LOCAL - 170)) | (1usize << (LOCATION - 170)) | (1usize << (LOCK - 170)) | (1usize << (LOGICAL - 170)) | (1usize << (M - 170)) | (1usize << (MAP - 170)) | (1usize << (MASKING - 170)) | (1usize << (MATCH - 170)) | (1usize << (MATCHED - 170)) | (1usize << (MATCHES - 170)) | (1usize << (MATCH_RECOGNIZE - 170)) | (1usize << (MATERIALIZED - 170)) | (1usize << (MAX - 170)) | (1usize << (MEASURES - 170)) | (1usize << (MERGE - 170)) | (1usize << (MIN - 170)) | (1usize << (MINUS_KW - 170)) | (1usize << (MINUTE - 170)) | (1usize << (MINUTES - 170)) | (1usize << (MODEL - 170)) | (1usize << (MONTH - 170)) | (1usize << (MONTHS - 170)) | (1usize << (NEXT - 170)) | (1usize << (NFC - 170)) | (1usize << (NFD - 170)) | (1usize << (NFKC - 170)) | (1usize << (NFKD - 170)))) != 0) || ((((_la - 202)) & !0x3f) == 0 && ((1usize << (_la - 202)) & ((1usize << (NO - 202)) | (1usize << (NONE - 202)) | (1usize << (NORMALIZE - 202)) | (1usize << (NOT - 202)) | (1usize << (NULL - 202)) | (1usize << (NULLS - 202)) | (1usize << (OBJECT - 202)) | (1usize << (OF - 202)) | (1usize << (OFFSET - 202)) | (1usize << (OMIT - 202)) | (1usize << (ONE - 202)) | (1usize << (ONLY - 202)) | (1usize << (OPTION - 202)) | (1usize << (ORDINALITY - 202)) | (1usize << (OUTPUT - 202)) | (1usize << (OVER - 202)) | (1usize << (OVERFLOW - 202)) | (1usize << (PARTITION - 202)) | (1usize << (PARTITIONS - 202)) | (1usize << (PASSING - 202)) | (1usize << (PAST - 202)) | (1usize << (PATH - 202)) | (1usize << (PATTERN - 202)) | (1usize << (PER - 202)) | (1usize << (PERIOD - 202)))) != 0) || ((((_la - 234)) & !0x3f) == 0 && ((1usize << (_la - 234)) & ((1usize << (PERMUTE - 234)) | (1usize << (POSITION - 234)) | (1usize << (PRECEDING - 234)) | (1usize << (PRECISION - 234)) | (1usize << (PROCEDURE - 234)) | (1usize << (PRIVILEGES - 234)) | (1usize << (PROPERTIES - 234)) | (1usize << (PRUNE - 234)) | (1usize << (QUOTES - 234)) | (1usize << (RANGE - 234)) | (1usize << (READ - 234)) | (1usize << (REFRESH - 234)) | (1usize << (RENAME - 234)) | (1usize << (REPEATABLE - 234)) | (1usize << (REPLACE - 234)) | (1usize << (RESET - 234)) | (1usize << (RESPECT - 234)) | (1usize << (RESTRICT - 234)) | (1usize << (RETURNING - 234)) | (1usize << (REVOKE - 234)) | (1usize << (RIGHT - 234)) | (1usize << (RLS - 234)) | (1usize << (ROLE - 234)) | (1usize << (ROLES - 234)) | (1usize << (ROLLBACK - 234)) | (1usize << (ROLLUP - 234)) | (1usize << (ROW - 234)) | (1usize << (ROWS - 234)) | (1usize << (RUNNING - 234)))) != 0) || ((((_la - 266)) & !0x3f) == 0 && ((1usize << (_la - 266)) & ((1usize << (S - 266)) | (1usize << (SCALAR - 266)) | (1usize << (SEC - 266)) | (1usize << (SECOND - 266)) | (1usize << (SECONDS - 266)) | (1usize << (SCHEMA - 266)) | (1usize << (SCHEMAS - 266)) | (1usize << (SECURITY - 266)) | (1usize << (SEEK - 266)) | (1usize << (SEMI - 266)) | (1usize << (SERIALIZABLE - 266)) | (1usize << (SESSION - 266)) | (1usize << (SET - 266)) | (1usize << (SETS - 266)) | (1usize << (SHOW - 266)) | (1usize << (SNAPSHOT - 266)) | (1usize << (SOME - 266)) | (1usize << (START - 266)) | (1usize << (STATS - 266)) | (1usize << (STRUCT - 266)) | (1usize << (SUBSET - 266)) | (1usize << (SUBSTRING - 266)) | (1usize << (SYSTEM - 266)) | (1usize << (SYSTEM_TIME - 266)))) != 0) || ((((_la - 298)) & !0x3f) == 0 && ((1usize << (_la - 298)) & ((1usize << (TABLES - 298)) | (1usize << (TABLESAMPLE - 298)) | (1usize << (TEMP - 298)) | (1usize << (TEMPORARY - 298)) | (1usize << (TEXT - 298)) | (1usize << (STRING_KW - 298)) | (1usize << (TIES - 298)) | (1usize << (TIME - 298)) | (1usize << (TIMESTAMP - 298)) | (1usize << (TO - 298)) | (1usize << (TRAILING - 298)) | (1usize << (TRANSACTION - 298)) | (1usize << (TRIM - 298)) | (1usize << (TRUE - 298)) | (1usize << (TRUNCATE - 298)) | (1usize << (TRY_CAST - 298)) | (1usize << (TUPLE - 298)) | (1usize << (TYPE - 298)) | (1usize << (UNBOUNDED - 298)) | (1usize << (UNCOMMITTED - 298)) | (1usize << (UNCONDITIONAL - 298)) | (1usize << (UNIQUE - 298)) | (1usize << (UNKNOWN - 298)) | (1usize << (UNLOAD - 298)) | (1usize << (UNMATCHED - 298)))) != 0) || ((((_la - 330)) & !0x3f) == 0 && ((1usize << (_la - 330)) & ((1usize << (UPDATE - 330)) | (1usize << (USE - 330)) | (1usize << (USER - 330)) | (1usize << (UTF16 - 330)) | (1usize << (UTF32 - 330)) | (1usize << (UTF8 - 330)) | (1usize << (VACUUM - 330)) | (1usize << (VALIDATE - 330)) | (1usize << (VALUE - 330)) | (1usize << (VARYING - 330)) | (1usize << (VERBOSE - 330)) | (1usize << (VERSION - 330)) | (1usize << (VIEW - 330)) | (1usize << (WEEK - 330)) | (1usize << (WINDOW - 330)) | (1usize << (WITHIN - 330)) | (1usize << (WITHOUT - 330)) | (1usize << (WORK - 330)) | (1usize << (WRAPPER - 330)) | (1usize << (WRITE - 330)) | (1usize << (XZ - 330)) | (1usize << (YEAR - 330)) | (1usize << (YEARS - 330)) | (1usize << (ZONE - 330)) | (1usize << (ZSTD - 330)) | (1usize << (LPAREN - 330)))) != 0) || ((((_la - 363)) & !0x3f) == 0 && ((1usize << (_la - 363)) & ((1usize << (LBRACKET - 363)) | (1usize << (PLUS - 363)) | (1usize << (MINUS - 363)) | (1usize << (POSIX - 363)) | (1usize << (STRING - 363)) | (1usize << (UNICODE_STRING - 363)) | (1usize << (BINARY_LITERAL - 363)) | (1usize << (INTEGER_VALUE - 363)) | (1usize << (DECIMAL_VALUE - 363)) | (1usize << (DOUBLE_VALUE - 363)) | (1usize << (IDENTIFIER - 363)) | (1usize << (QUOTED_IDENTIFIER - 363)) | (1usize << (VARIABLE - 363)))) != 0) {
							{
							/*InvokeRule expression*/
							recog.base.set_state(1694);
							recog.expression()?;

							recog.base.set_state(1699);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(212,&mut recog.base)?;
							while { _alt!=2 && _alt!=INVALID_ALT } {
								if _alt==1 {
									{
									{
									recog.base.set_state(1695);
									recog.base.match_token(COMMA,&mut recog.err_handler)?;

									/*InvokeRule expression*/
									recog.base.set_state(1696);
									recog.expression()?;

									}
									} 
								}
								recog.base.set_state(1701);
								recog.err_handler.sync(&mut recog.base)?;
								_alt = recog.interpreter.adaptive_predict(212,&mut recog.base)?;
							}
							recog.base.set_state(1703);
							recog.err_handler.sync(&mut recog.base)?;
							_la = recog.base.input.la(1);
							if _la==COMMA {
								{
								recog.base.set_state(1702);
								let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
								 cast_mut::<_,TableArgumentContext >(&mut _localctx).COMMA = Some(tmp);
								  

								let temp =  cast_mut::<_,TableArgumentContext >(&mut _localctx).COMMA.clone().unwrap()
								 ;
								 cast_mut::<_,TableArgumentContext >(&mut _localctx).tail.push(temp);
								  
								}
							}

							}
						}

						recog.base.set_state(1707);
						recog.base.match_token(RPAREN,&mut recog.err_handler)?;

						}
					}
				,
					2 =>{
						{
						/*InvokeRule expression*/
						recog.base.set_state(1708);
						recog.expression()?;

						}
					}

					_ => {}
				}
				}
			}

			recog.base.set_state(1719);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 PRUNE 
				=> {
			    	{
			    	recog.base.set_state(1713);
			    	recog.base.match_token(PRUNE,&mut recog.err_handler)?;

			    	recog.base.set_state(1714);
			    	recog.base.match_token(WHEN,&mut recog.err_handler)?;

			    	recog.base.set_state(1715);
			    	recog.base.match_token(EMPTY,&mut recog.err_handler)?;

			    	}
			    }

			 KEEP 
				=> {
			    	{
			    	recog.base.set_state(1716);
			    	recog.base.match_token(KEEP,&mut recog.err_handler)?;

			    	recog.base.set_state(1717);
			    	recog.base.match_token(WHEN,&mut recog.err_handler)?;

			    	recog.base.set_state(1718);
			    	recog.base.match_token(EMPTY,&mut recog.err_handler)?;

			    	}
			    }

			 COMMA | COPARTITION | ORDER | RPAREN 
				=> {
			    }

				_ => {}
			}
			recog.base.set_state(1740);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==ORDER {
				{
				recog.base.set_state(1721);
				recog.base.match_token(ORDER,&mut recog.err_handler)?;

				recog.base.set_state(1722);
				recog.base.match_token(BY,&mut recog.err_handler)?;

				recog.base.set_state(1738);
				recog.err_handler.sync(&mut recog.base)?;
				match  recog.interpreter.adaptive_predict(220,&mut recog.base)? {
					1 =>{
						{
						recog.base.set_state(1723);
						recog.base.match_token(LPAREN,&mut recog.err_handler)?;

						/*InvokeRule sortItem*/
						recog.base.set_state(1724);
						recog.sortItem()?;

						recog.base.set_state(1729);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(218,&mut recog.base)?;
						while { _alt!=2 && _alt!=INVALID_ALT } {
							if _alt==1 {
								{
								{
								recog.base.set_state(1725);
								recog.base.match_token(COMMA,&mut recog.err_handler)?;

								/*InvokeRule sortItem*/
								recog.base.set_state(1726);
								recog.sortItem()?;

								}
								} 
							}
							recog.base.set_state(1731);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(218,&mut recog.base)?;
						}
						recog.base.set_state(1733);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==COMMA {
							{
							recog.base.set_state(1732);
							let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
							 cast_mut::<_,TableArgumentContext >(&mut _localctx).COMMA = Some(tmp);
							  

							let temp =  cast_mut::<_,TableArgumentContext >(&mut _localctx).COMMA.clone().unwrap()
							 ;
							 cast_mut::<_,TableArgumentContext >(&mut _localctx).tail.push(temp);
							  
							}
						}

						recog.base.set_state(1735);
						recog.base.match_token(RPAREN,&mut recog.err_handler)?;

						}
					}
				,
					2 =>{
						{
						/*InvokeRule sortItem*/
						recog.base.set_state(1737);
						recog.sortItem()?;

						}
					}

					_ => {}
				}
				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- tableArgumentRelation ----------------
#[derive(Debug)]
pub enum TableArgumentRelationContextAll<'input>{
	TableArgumentQueryContext(TableArgumentQueryContext<'input>),
	TableArgumentTableContext(TableArgumentTableContext<'input>),
Error(TableArgumentRelationContext<'input>)
}
antlr_rust::tid!{TableArgumentRelationContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for TableArgumentRelationContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for TableArgumentRelationContextAll<'input>{}

impl<'input> Deref for TableArgumentRelationContextAll<'input>{
	type Target = dyn TableArgumentRelationContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use TableArgumentRelationContextAll::*;
		match self{
			TableArgumentQueryContext(inner) => inner,
			TableArgumentTableContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableArgumentRelationContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableArgumentRelationContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type TableArgumentRelationContext<'input> = BaseParserRuleContext<'input,TableArgumentRelationContextExt<'input>>;

#[derive(Clone)]
pub struct TableArgumentRelationContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for TableArgumentRelationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableArgumentRelationContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableArgumentRelationContext<'input>{
}

impl<'input> CustomRuleContext<'input> for TableArgumentRelationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_tableArgumentRelation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_tableArgumentRelation }
}
antlr_rust::tid!{TableArgumentRelationContextExt<'a>}

impl<'input> TableArgumentRelationContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<TableArgumentRelationContextAll<'input>> {
		Rc::new(
		TableArgumentRelationContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,TableArgumentRelationContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait TableArgumentRelationContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<TableArgumentRelationContextExt<'input>>{


}

impl<'input> TableArgumentRelationContextAttrs<'input> for TableArgumentRelationContext<'input>{}

pub type TableArgumentQueryContext<'input> = BaseParserRuleContext<'input,TableArgumentQueryContextExt<'input>>;

pub trait TableArgumentQueryContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn query(&self) -> Option<Rc<QueryContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token AS
	/// Returns `None` if there is no child corresponding to token AS
	fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(AS, 0)
	}
	fn columnAliases(&self) -> Option<Rc<ColumnAliasesContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> TableArgumentQueryContextAttrs<'input> for TableArgumentQueryContext<'input>{}

pub struct TableArgumentQueryContextExt<'input>{
	base:TableArgumentRelationContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{TableArgumentQueryContextExt<'a>}

impl<'input> TrinoParserContext<'input> for TableArgumentQueryContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableArgumentQueryContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_tableArgumentQuery(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_tableArgumentQuery(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableArgumentQueryContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_tableArgumentQuery(self);
	}
}

impl<'input> CustomRuleContext<'input> for TableArgumentQueryContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_tableArgumentRelation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_tableArgumentRelation }
}

impl<'input> Borrow<TableArgumentRelationContextExt<'input>> for TableArgumentQueryContext<'input>{
	fn borrow(&self) -> &TableArgumentRelationContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<TableArgumentRelationContextExt<'input>> for TableArgumentQueryContext<'input>{
	fn borrow_mut(&mut self) -> &mut TableArgumentRelationContextExt<'input> { &mut self.base }
}

impl<'input> TableArgumentRelationContextAttrs<'input> for TableArgumentQueryContext<'input> {}

impl<'input> TableArgumentQueryContextExt<'input>{
	fn new(ctx: &dyn TableArgumentRelationContextAttrs<'input>) -> Rc<TableArgumentRelationContextAll<'input>>  {
		Rc::new(
			TableArgumentRelationContextAll::TableArgumentQueryContext(
				BaseParserRuleContext::copy_from(ctx,TableArgumentQueryContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type TableArgumentTableContext<'input> = BaseParserRuleContext<'input,TableArgumentTableContextExt<'input>>;

pub trait TableArgumentTableContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token TABLE
	/// Returns `None` if there is no child corresponding to token TABLE
	fn TABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TABLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token AS
	/// Returns `None` if there is no child corresponding to token AS
	fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(AS, 0)
	}
	fn columnAliases(&self) -> Option<Rc<ColumnAliasesContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> TableArgumentTableContextAttrs<'input> for TableArgumentTableContext<'input>{}

pub struct TableArgumentTableContextExt<'input>{
	base:TableArgumentRelationContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{TableArgumentTableContextExt<'a>}

impl<'input> TrinoParserContext<'input> for TableArgumentTableContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TableArgumentTableContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_tableArgumentTable(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_tableArgumentTable(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TableArgumentTableContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_tableArgumentTable(self);
	}
}

impl<'input> CustomRuleContext<'input> for TableArgumentTableContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_tableArgumentRelation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_tableArgumentRelation }
}

impl<'input> Borrow<TableArgumentRelationContextExt<'input>> for TableArgumentTableContext<'input>{
	fn borrow(&self) -> &TableArgumentRelationContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<TableArgumentRelationContextExt<'input>> for TableArgumentTableContext<'input>{
	fn borrow_mut(&mut self) -> &mut TableArgumentRelationContextExt<'input> { &mut self.base }
}

impl<'input> TableArgumentRelationContextAttrs<'input> for TableArgumentTableContext<'input> {}

impl<'input> TableArgumentTableContextExt<'input>{
	fn new(ctx: &dyn TableArgumentRelationContextAttrs<'input>) -> Rc<TableArgumentRelationContextAll<'input>>  {
		Rc::new(
			TableArgumentRelationContextAll::TableArgumentTableContext(
				BaseParserRuleContext::copy_from(ctx,TableArgumentTableContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn tableArgumentRelation(&mut self,)
	-> Result<Rc<TableArgumentRelationContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = TableArgumentRelationContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 164, RULE_tableArgumentRelation);
        let mut _localctx: Rc<TableArgumentRelationContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(1768);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(228,&mut recog.base)? {
				1 =>{
					let tmp = TableArgumentTableContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					recog.base.set_state(1742);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					recog.base.set_state(1743);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(1744);
					recog.qualifiedName()?;

					recog.base.set_state(1745);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					recog.base.set_state(1753);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(224,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(1747);
							recog.err_handler.sync(&mut recog.base)?;
							_la = recog.base.input.la(1);
							if _la==AS {
								{
								recog.base.set_state(1746);
								recog.base.match_token(AS,&mut recog.err_handler)?;

								}
							}

							/*InvokeRule identifier*/
							recog.base.set_state(1749);
							recog.identifier()?;

							recog.base.set_state(1751);
							recog.err_handler.sync(&mut recog.base)?;
							_la = recog.base.input.la(1);
							if _la==LPAREN {
								{
								/*InvokeRule columnAliases*/
								recog.base.set_state(1750);
								recog.columnAliases()?;

								}
							}

							}
						}

						_ => {}
					}
					}
				}
			,
				2 =>{
					let tmp = TableArgumentQueryContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(1755);
					recog.base.match_token(TABLE,&mut recog.err_handler)?;

					recog.base.set_state(1756);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule query*/
					recog.base.set_state(1757);
					recog.query()?;

					recog.base.set_state(1758);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					recog.base.set_state(1766);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(227,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(1760);
							recog.err_handler.sync(&mut recog.base)?;
							_la = recog.base.input.la(1);
							if _la==AS {
								{
								recog.base.set_state(1759);
								recog.base.match_token(AS,&mut recog.err_handler)?;

								}
							}

							/*InvokeRule identifier*/
							recog.base.set_state(1762);
							recog.identifier()?;

							recog.base.set_state(1764);
							recog.err_handler.sync(&mut recog.base)?;
							_la = recog.base.input.la(1);
							if _la==LPAREN {
								{
								/*InvokeRule columnAliases*/
								recog.base.set_state(1763);
								recog.columnAliases()?;

								}
							}

							}
						}

						_ => {}
					}
					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- descriptorArgument ----------------
pub type DescriptorArgumentContextAll<'input> = DescriptorArgumentContext<'input>;


pub type DescriptorArgumentContext<'input> = BaseParserRuleContext<'input,DescriptorArgumentContextExt<'input>>;

#[derive(Clone)]
pub struct DescriptorArgumentContextExt<'input>{
	pub tail: Option<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for DescriptorArgumentContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DescriptorArgumentContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_descriptorArgument(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_descriptorArgument(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DescriptorArgumentContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_descriptorArgument(self);
	}
}

impl<'input> CustomRuleContext<'input> for DescriptorArgumentContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_descriptorArgument }
	//fn type_rule_index() -> usize where Self: Sized { RULE_descriptorArgument }
}
antlr_rust::tid!{DescriptorArgumentContextExt<'a>}

impl<'input> DescriptorArgumentContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<DescriptorArgumentContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,DescriptorArgumentContextExt{
				tail: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait DescriptorArgumentContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<DescriptorArgumentContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token DESCRIPTOR
/// Returns `None` if there is no child corresponding to token DESCRIPTOR
fn DESCRIPTOR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DESCRIPTOR, 0)
}
/// Retrieves first TerminalNode corresponding to token LPAREN
/// Returns `None` if there is no child corresponding to token LPAREN
fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, 0)
}
fn descriptorField_all(&self) ->  Vec<Rc<DescriptorFieldContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn descriptorField(&self, i: usize) -> Option<Rc<DescriptorFieldContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves first TerminalNode corresponding to token RPAREN
/// Returns `None` if there is no child corresponding to token RPAREN
fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, 0)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}
/// Retrieves first TerminalNode corresponding to token CAST
/// Returns `None` if there is no child corresponding to token CAST
fn CAST(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(CAST, 0)
}
/// Retrieves first TerminalNode corresponding to token NULL
/// Returns `None` if there is no child corresponding to token NULL
fn NULL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NULL, 0)
}
/// Retrieves first TerminalNode corresponding to token AS
/// Returns `None` if there is no child corresponding to token AS
fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(AS, 0)
}

}

impl<'input> DescriptorArgumentContextAttrs<'input> for DescriptorArgumentContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn descriptorArgument(&mut self,)
	-> Result<Rc<DescriptorArgumentContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = DescriptorArgumentContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 166, RULE_descriptorArgument);
        let mut _localctx: Rc<DescriptorArgumentContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			recog.base.set_state(1791);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 DESCRIPTOR 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(1770);
					recog.base.match_token(DESCRIPTOR,&mut recog.err_handler)?;

					recog.base.set_state(1771);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule descriptorField*/
					recog.base.set_state(1772);
					recog.descriptorField()?;

					recog.base.set_state(1777);
					recog.err_handler.sync(&mut recog.base)?;
					_alt = recog.interpreter.adaptive_predict(229,&mut recog.base)?;
					while { _alt!=2 && _alt!=INVALID_ALT } {
						if _alt==1 {
							{
							{
							recog.base.set_state(1773);
							recog.base.match_token(COMMA,&mut recog.err_handler)?;

							/*InvokeRule descriptorField*/
							recog.base.set_state(1774);
							recog.descriptorField()?;

							}
							} 
						}
						recog.base.set_state(1779);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(229,&mut recog.base)?;
					}
					recog.base.set_state(1781);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(1780);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						 cast_mut::<_,DescriptorArgumentContext >(&mut _localctx).tail = Some(tmp);
						  

						}
					}

					recog.base.set_state(1783);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}

			 CAST 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(1785);
					recog.base.match_token(CAST,&mut recog.err_handler)?;

					recog.base.set_state(1786);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					recog.base.set_state(1787);
					recog.base.match_token(NULL,&mut recog.err_handler)?;

					recog.base.set_state(1788);
					recog.base.match_token(AS,&mut recog.err_handler)?;

					recog.base.set_state(1789);
					recog.base.match_token(DESCRIPTOR,&mut recog.err_handler)?;

					recog.base.set_state(1790);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- descriptorField ----------------
pub type DescriptorFieldContextAll<'input> = DescriptorFieldContext<'input>;


pub type DescriptorFieldContext<'input> = BaseParserRuleContext<'input,DescriptorFieldContextExt<'input>>;

#[derive(Clone)]
pub struct DescriptorFieldContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for DescriptorFieldContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DescriptorFieldContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_descriptorField(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_descriptorField(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DescriptorFieldContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_descriptorField(self);
	}
}

impl<'input> CustomRuleContext<'input> for DescriptorFieldContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_descriptorField }
	//fn type_rule_index() -> usize where Self: Sized { RULE_descriptorField }
}
antlr_rust::tid!{DescriptorFieldContextExt<'a>}

impl<'input> DescriptorFieldContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<DescriptorFieldContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,DescriptorFieldContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait DescriptorFieldContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<DescriptorFieldContextExt<'input>>{

fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn type_(&self) -> Option<Rc<Type_ContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> DescriptorFieldContextAttrs<'input> for DescriptorFieldContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn descriptorField(&mut self,)
	-> Result<Rc<DescriptorFieldContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = DescriptorFieldContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 168, RULE_descriptorField);
        let mut _localctx: Rc<DescriptorFieldContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule identifier*/
			recog.base.set_state(1793);
			recog.identifier()?;

			recog.base.set_state(1795);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if ((((_la - 9)) & !0x3f) == 0 && ((1usize << (_la - 9)) & ((1usize << (ABORT - 9)) | (1usize << (ABSENT - 9)) | (1usize << (ADD - 9)) | (1usize << (ADMIN - 9)) | (1usize << (AFTER - 9)) | (1usize << (ALL - 9)) | (1usize << (ANALYZE - 9)) | (1usize << (ANTI - 9)) | (1usize << (ANY - 9)) | (1usize << (ARRAY - 9)) | (1usize << (ASC - 9)) | (1usize << (AT - 9)) | (1usize << (ATTACH - 9)) | (1usize << (AUTHORIZATION - 9)) | (1usize << (BEGIN - 9)) | (1usize << (BERNOULLI - 9)) | (1usize << (BOTH - 9)) | (1usize << (BZIP2 - 9)) | (1usize << (CALL - 9)) | (1usize << (CANCEL - 9)) | (1usize << (CASCADE - 9)))) != 0) || ((((_la - 41)) & !0x3f) == 0 && ((1usize << (_la - 41)) & ((1usize << (CATALOGS - 41)) | (1usize << (CHARACTER - 41)) | (1usize << (CLONE - 41)) | (1usize << (CLOSE - 41)) | (1usize << (CLUSTER - 41)) | (1usize << (COLUMN - 41)) | (1usize << (COLUMNS - 41)) | (1usize << (COMMENT - 41)) | (1usize << (COMMIT - 41)) | (1usize << (COMMITTED - 41)) | (1usize << (COMPRESSION - 41)) | (1usize << (CONDITIONAL - 41)) | (1usize << (CONNECTION - 41)) | (1usize << (COPARTITION - 41)) | (1usize << (COPY - 41)) | (1usize << (COUNT - 41)) | (1usize << (CURRENT - 41)) | (1usize << (DATA - 41)) | (1usize << (DATABASE - 41)) | (1usize << (DATASHARE - 41)) | (1usize << (DATE - 41)) | (1usize << (DAY - 41)) | (1usize << (DAYS - 41)))) != 0) || ((((_la - 74)) & !0x3f) == 0 && ((1usize << (_la - 74)) & ((1usize << (DECLARE - 74)) | (1usize << (DEFAULT - 74)) | (1usize << (DEFINE - 74)) | (1usize << (DEFINER - 74)) | (1usize << (DELIMITER - 74)) | (1usize << (DENY - 74)) | (1usize << (DESC - 74)) | (1usize << (DESCRIBE - 74)) | (1usize << (DESCRIPTOR - 74)) | (1usize << (DISTRIBUTED - 74)) | (1usize << (DETACH - 74)) | (1usize << (DOUBLE - 74)) | (1usize << (EMPTY - 74)) | (1usize << (ENCODING - 74)) | (1usize << (END - 74)) | (1usize << (ERROR - 74)) | (1usize << (EXCLUDING - 74)) | (1usize << (EXECUTE - 74)) | (1usize << (EXPLAIN - 74)))) != 0) || ((((_la - 106)) & !0x3f) == 0 && ((1usize << (_la - 106)) & ((1usize << (EXTERNAL - 106)) | (1usize << (FETCH - 106)) | (1usize << (FILTER - 106)) | (1usize << (FINAL - 106)) | (1usize << (FIRST - 106)) | (1usize << (FOLLOWING - 106)) | (1usize << (FORMAT - 106)) | (1usize << (FUNCTION - 106)) | (1usize << (FUNCTIONS - 106)) | (1usize << (GRACE - 106)) | (1usize << (GRANT - 106)) | (1usize << (GRANTED - 106)) | (1usize << (GRANTS - 106)) | (1usize << (GRAPHVIZ - 106)) | (1usize << (GROUPS - 106)) | (1usize << (GZIP - 106)) | (1usize << (HOUR - 106)) | (1usize << (HOURS - 106)) | (1usize << (IF - 106)) | (1usize << (IGNORE - 106)))) != 0) || ((((_la - 138)) & !0x3f) == 0 && ((1usize << (_la - 138)) & ((1usize << (INCLUDING - 138)) | (1usize << (INITIAL - 138)) | (1usize << (INPUT - 138)) | (1usize << (INTEGER - 138)) | (1usize << (INTERVAL - 138)) | (1usize << (INVOKER - 138)) | (1usize << (IO - 138)) | (1usize << (ISOLATION - 138)) | (1usize << (JSON - 138)) | (1usize << (KEEP - 138)) | (1usize << (KEY - 138)) | (1usize << (KEYS - 138)) | (1usize << (LAMBDA - 138)) | (1usize << (LAST - 138)) | (1usize << (LATERAL - 138)) | (1usize << (LEADING - 138)) | (1usize << (LEVEL - 138)))) != 0) || ((((_la - 170)) & !0x3f) == 0 && ((1usize << (_la - 170)) & ((1usize << (LIBRARY - 170)) | (1usize << (LIMIT - 170)) | (1usize << (LOCAL - 170)) | (1usize << (LOCATION - 170)) | (1usize << (LOCK - 170)) | (1usize << (LOGICAL - 170)) | (1usize << (M - 170)) | (1usize << (MAP - 170)) | (1usize << (MASKING - 170)) | (1usize << (MATCH - 170)) | (1usize << (MATCHED - 170)) | (1usize << (MATCHES - 170)) | (1usize << (MATCH_RECOGNIZE - 170)) | (1usize << (MATERIALIZED - 170)) | (1usize << (MAX - 170)) | (1usize << (MEASURES - 170)) | (1usize << (MERGE - 170)) | (1usize << (MIN - 170)) | (1usize << (MINUS_KW - 170)) | (1usize << (MINUTE - 170)) | (1usize << (MINUTES - 170)) | (1usize << (MODEL - 170)) | (1usize << (MONTH - 170)) | (1usize << (MONTHS - 170)) | (1usize << (NEXT - 170)) | (1usize << (NFC - 170)) | (1usize << (NFD - 170)) | (1usize << (NFKC - 170)) | (1usize << (NFKD - 170)))) != 0) || ((((_la - 202)) & !0x3f) == 0 && ((1usize << (_la - 202)) & ((1usize << (NO - 202)) | (1usize << (NONE - 202)) | (1usize << (NULL - 202)) | (1usize << (NULLS - 202)) | (1usize << (OBJECT - 202)) | (1usize << (OF - 202)) | (1usize << (OFFSET - 202)) | (1usize << (OMIT - 202)) | (1usize << (ONE - 202)) | (1usize << (ONLY - 202)) | (1usize << (OPTION - 202)) | (1usize << (ORDINALITY - 202)) | (1usize << (OUTPUT - 202)) | (1usize << (OVER - 202)) | (1usize << (OVERFLOW - 202)) | (1usize << (PARTITION - 202)) | (1usize << (PARTITIONS - 202)) | (1usize << (PASSING - 202)) | (1usize << (PAST - 202)) | (1usize << (PATH - 202)) | (1usize << (PATTERN - 202)) | (1usize << (PER - 202)) | (1usize << (PERIOD - 202)))) != 0) || ((((_la - 234)) & !0x3f) == 0 && ((1usize << (_la - 234)) & ((1usize << (PERMUTE - 234)) | (1usize << (POSITION - 234)) | (1usize << (PRECEDING - 234)) | (1usize << (PRECISION - 234)) | (1usize << (PROCEDURE - 234)) | (1usize << (PRIVILEGES - 234)) | (1usize << (PROPERTIES - 234)) | (1usize << (PRUNE - 234)) | (1usize << (QUOTES - 234)) | (1usize << (RANGE - 234)) | (1usize << (READ - 234)) | (1usize << (REFRESH - 234)) | (1usize << (RENAME - 234)) | (1usize << (REPEATABLE - 234)) | (1usize << (REPLACE - 234)) | (1usize << (RESET - 234)) | (1usize << (RESPECT - 234)) | (1usize << (RESTRICT - 234)) | (1usize << (RETURNING - 234)) | (1usize << (REVOKE - 234)) | (1usize << (RLS - 234)) | (1usize << (ROLE - 234)) | (1usize << (ROLES - 234)) | (1usize << (ROLLBACK - 234)) | (1usize << (ROLLUP - 234)) | (1usize << (ROW - 234)) | (1usize << (ROWS - 234)) | (1usize << (RUNNING - 234)))) != 0) || ((((_la - 266)) & !0x3f) == 0 && ((1usize << (_la - 266)) & ((1usize << (S - 266)) | (1usize << (SCALAR - 266)) | (1usize << (SEC - 266)) | (1usize << (SECOND - 266)) | (1usize << (SECONDS - 266)) | (1usize << (SCHEMA - 266)) | (1usize << (SCHEMAS - 266)) | (1usize << (SECURITY - 266)) | (1usize << (SEEK - 266)) | (1usize << (SEMI - 266)) | (1usize << (SERIALIZABLE - 266)) | (1usize << (SESSION - 266)) | (1usize << (SET - 266)) | (1usize << (SETS - 266)) | (1usize << (SHOW - 266)) | (1usize << (SNAPSHOT - 266)) | (1usize << (SOME - 266)) | (1usize << (START - 266)) | (1usize << (STATS - 266)) | (1usize << (STRUCT - 266)) | (1usize << (SUBSET - 266)) | (1usize << (SUBSTRING - 266)) | (1usize << (SYSTEM - 266)) | (1usize << (SYSTEM_TIME - 266)))) != 0) || ((((_la - 298)) & !0x3f) == 0 && ((1usize << (_la - 298)) & ((1usize << (TABLES - 298)) | (1usize << (TABLESAMPLE - 298)) | (1usize << (TEMP - 298)) | (1usize << (TEMPORARY - 298)) | (1usize << (TEXT - 298)) | (1usize << (STRING_KW - 298)) | (1usize << (TIES - 298)) | (1usize << (TIME - 298)) | (1usize << (TIMESTAMP - 298)) | (1usize << (TO - 298)) | (1usize << (TRAILING - 298)) | (1usize << (TRANSACTION - 298)) | (1usize << (TRUNCATE - 298)) | (1usize << (TRY_CAST - 298)) | (1usize << (TUPLE - 298)) | (1usize << (TYPE - 298)) | (1usize << (UNBOUNDED - 298)) | (1usize << (UNCOMMITTED - 298)) | (1usize << (UNCONDITIONAL - 298)) | (1usize << (UNIQUE - 298)) | (1usize << (UNKNOWN - 298)) | (1usize << (UNLOAD - 298)) | (1usize << (UNMATCHED - 298)))) != 0) || ((((_la - 330)) & !0x3f) == 0 && ((1usize << (_la - 330)) & ((1usize << (UPDATE - 330)) | (1usize << (USE - 330)) | (1usize << (USER - 330)) | (1usize << (UTF16 - 330)) | (1usize << (UTF32 - 330)) | (1usize << (UTF8 - 330)) | (1usize << (VACUUM - 330)) | (1usize << (VALIDATE - 330)) | (1usize << (VALUE - 330)) | (1usize << (VARYING - 330)) | (1usize << (VERBOSE - 330)) | (1usize << (VERSION - 330)) | (1usize << (VIEW - 330)) | (1usize << (WEEK - 330)) | (1usize << (WINDOW - 330)) | (1usize << (WITHIN - 330)) | (1usize << (WITHOUT - 330)) | (1usize << (WORK - 330)) | (1usize << (WRAPPER - 330)) | (1usize << (WRITE - 330)) | (1usize << (XZ - 330)) | (1usize << (YEAR - 330)) | (1usize << (YEARS - 330)) | (1usize << (ZONE - 330)) | (1usize << (ZSTD - 330)))) != 0) || ((((_la - 381)) & !0x3f) == 0 && ((1usize << (_la - 381)) & ((1usize << (DOLLAR - 381)) | (1usize << (IDENTIFIER - 381)) | (1usize << (QUOTED_IDENTIFIER - 381)))) != 0) {
				{
				/*InvokeRule type_*/
				recog.base.set_state(1794);
				recog.type_()?;

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- copartitionTables ----------------
pub type CopartitionTablesContextAll<'input> = CopartitionTablesContext<'input>;


pub type CopartitionTablesContext<'input> = BaseParserRuleContext<'input,CopartitionTablesContextExt<'input>>;

#[derive(Clone)]
pub struct CopartitionTablesContextExt<'input>{
	pub tail: Option<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for CopartitionTablesContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CopartitionTablesContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_copartitionTables(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_copartitionTables(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CopartitionTablesContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_copartitionTables(self);
	}
}

impl<'input> CustomRuleContext<'input> for CopartitionTablesContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_copartitionTables }
	//fn type_rule_index() -> usize where Self: Sized { RULE_copartitionTables }
}
antlr_rust::tid!{CopartitionTablesContextExt<'a>}

impl<'input> CopartitionTablesContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<CopartitionTablesContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,CopartitionTablesContextExt{
				tail: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait CopartitionTablesContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<CopartitionTablesContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token LPAREN
/// Returns `None` if there is no child corresponding to token LPAREN
fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, 0)
}
fn qualifiedName_all(&self) ->  Vec<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn qualifiedName(&self, i: usize) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}
/// Retrieves first TerminalNode corresponding to token RPAREN
/// Returns `None` if there is no child corresponding to token RPAREN
fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, 0)
}

}

impl<'input> CopartitionTablesContextAttrs<'input> for CopartitionTablesContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn copartitionTables(&mut self,)
	-> Result<Rc<CopartitionTablesContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = CopartitionTablesContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 170, RULE_copartitionTables);
        let mut _localctx: Rc<CopartitionTablesContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1797);
			recog.base.match_token(LPAREN,&mut recog.err_handler)?;

			/*InvokeRule qualifiedName*/
			recog.base.set_state(1798);
			recog.qualifiedName()?;

			recog.base.set_state(1799);
			recog.base.match_token(COMMA,&mut recog.err_handler)?;

			/*InvokeRule qualifiedName*/
			recog.base.set_state(1800);
			recog.qualifiedName()?;

			recog.base.set_state(1805);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(233,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					{
					{
					recog.base.set_state(1801);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule qualifiedName*/
					recog.base.set_state(1802);
					recog.qualifiedName()?;

					}
					} 
				}
				recog.base.set_state(1807);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(233,&mut recog.base)?;
			}
			recog.base.set_state(1809);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==COMMA {
				{
				recog.base.set_state(1808);
				let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
				 cast_mut::<_,CopartitionTablesContext >(&mut _localctx).tail = Some(tmp);
				  

				}
			}

			recog.base.set_state(1811);
			recog.base.match_token(RPAREN,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- expression ----------------
pub type ExpressionContextAll<'input> = ExpressionContext<'input>;


pub type ExpressionContext<'input> = BaseParserRuleContext<'input,ExpressionContextExt<'input>>;

#[derive(Clone)]
pub struct ExpressionContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ExpressionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ExpressionContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_expression(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_expression(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ExpressionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_expression(self);
	}
}

impl<'input> CustomRuleContext<'input> for ExpressionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_expression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_expression }
}
antlr_rust::tid!{ExpressionContextExt<'a>}

impl<'input> ExpressionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ExpressionContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ExpressionContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait ExpressionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ExpressionContextExt<'input>>{

fn booleanExpression(&self) -> Option<Rc<BooleanExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> ExpressionContextAttrs<'input> for ExpressionContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn expression(&mut self,)
	-> Result<Rc<ExpressionContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = ExpressionContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 172, RULE_expression);
        let mut _localctx: Rc<ExpressionContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule booleanExpression*/
			recog.base.set_state(1813);
			recog.booleanExpression_rec(0)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- booleanExpression ----------------
#[derive(Debug)]
pub enum BooleanExpressionContextAll<'input>{
	LogicalNotContext(LogicalNotContext<'input>),
	PredicatedContext(PredicatedContext<'input>),
	OrContext(OrContext<'input>),
	AndContext(AndContext<'input>),
Error(BooleanExpressionContext<'input>)
}
antlr_rust::tid!{BooleanExpressionContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for BooleanExpressionContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for BooleanExpressionContextAll<'input>{}

impl<'input> Deref for BooleanExpressionContextAll<'input>{
	type Target = dyn BooleanExpressionContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use BooleanExpressionContextAll::*;
		match self{
			LogicalNotContext(inner) => inner,
			PredicatedContext(inner) => inner,
			OrContext(inner) => inner,
			AndContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for BooleanExpressionContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for BooleanExpressionContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type BooleanExpressionContext<'input> = BaseParserRuleContext<'input,BooleanExpressionContextExt<'input>>;

#[derive(Clone)]
pub struct BooleanExpressionContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for BooleanExpressionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for BooleanExpressionContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for BooleanExpressionContext<'input>{
}

impl<'input> CustomRuleContext<'input> for BooleanExpressionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_booleanExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_booleanExpression }
}
antlr_rust::tid!{BooleanExpressionContextExt<'a>}

impl<'input> BooleanExpressionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<BooleanExpressionContextAll<'input>> {
		Rc::new(
		BooleanExpressionContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,BooleanExpressionContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait BooleanExpressionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<BooleanExpressionContextExt<'input>>{


}

impl<'input> BooleanExpressionContextAttrs<'input> for BooleanExpressionContext<'input>{}

pub type LogicalNotContext<'input> = BaseParserRuleContext<'input,LogicalNotContextExt<'input>>;

pub trait LogicalNotContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token NOT
	/// Returns `None` if there is no child corresponding to token NOT
	fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NOT, 0)
	}
	fn booleanExpression(&self) -> Option<Rc<BooleanExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> LogicalNotContextAttrs<'input> for LogicalNotContext<'input>{}

pub struct LogicalNotContextExt<'input>{
	base:BooleanExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{LogicalNotContextExt<'a>}

impl<'input> TrinoParserContext<'input> for LogicalNotContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for LogicalNotContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_logicalNot(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_logicalNot(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for LogicalNotContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_logicalNot(self);
	}
}

impl<'input> CustomRuleContext<'input> for LogicalNotContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_booleanExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_booleanExpression }
}

impl<'input> Borrow<BooleanExpressionContextExt<'input>> for LogicalNotContext<'input>{
	fn borrow(&self) -> &BooleanExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<BooleanExpressionContextExt<'input>> for LogicalNotContext<'input>{
	fn borrow_mut(&mut self) -> &mut BooleanExpressionContextExt<'input> { &mut self.base }
}

impl<'input> BooleanExpressionContextAttrs<'input> for LogicalNotContext<'input> {}

impl<'input> LogicalNotContextExt<'input>{
	fn new(ctx: &dyn BooleanExpressionContextAttrs<'input>) -> Rc<BooleanExpressionContextAll<'input>>  {
		Rc::new(
			BooleanExpressionContextAll::LogicalNotContext(
				BaseParserRuleContext::copy_from(ctx,LogicalNotContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type PredicatedContext<'input> = BaseParserRuleContext<'input,PredicatedContextExt<'input>>;

pub trait PredicatedContextAttrs<'input>: TrinoParserContext<'input>{
	fn valueExpression(&self) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn predicate(&self) -> Option<Rc<PredicateContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> PredicatedContextAttrs<'input> for PredicatedContext<'input>{}

pub struct PredicatedContextExt<'input>{
	base:BooleanExpressionContextExt<'input>,
	pub left: Option<Rc<ValueExpressionContextAll<'input>>>,
	pub pred: Option<Rc<PredicateContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PredicatedContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PredicatedContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PredicatedContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_predicated(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_predicated(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PredicatedContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_predicated(self);
	}
}

impl<'input> CustomRuleContext<'input> for PredicatedContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_booleanExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_booleanExpression }
}

impl<'input> Borrow<BooleanExpressionContextExt<'input>> for PredicatedContext<'input>{
	fn borrow(&self) -> &BooleanExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<BooleanExpressionContextExt<'input>> for PredicatedContext<'input>{
	fn borrow_mut(&mut self) -> &mut BooleanExpressionContextExt<'input> { &mut self.base }
}

impl<'input> BooleanExpressionContextAttrs<'input> for PredicatedContext<'input> {}

impl<'input> PredicatedContextExt<'input>{
	fn new(ctx: &dyn BooleanExpressionContextAttrs<'input>) -> Rc<BooleanExpressionContextAll<'input>>  {
		Rc::new(
			BooleanExpressionContextAll::PredicatedContext(
				BaseParserRuleContext::copy_from(ctx,PredicatedContextExt{
        			left:None, pred:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type OrContext<'input> = BaseParserRuleContext<'input,OrContextExt<'input>>;

pub trait OrContextAttrs<'input>: TrinoParserContext<'input>{
	fn booleanExpression_all(&self) ->  Vec<Rc<BooleanExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn booleanExpression(&self, i: usize) -> Option<Rc<BooleanExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token OR
	/// Returns `None` if there is no child corresponding to token OR
	fn OR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(OR, 0)
	}
}

impl<'input> OrContextAttrs<'input> for OrContext<'input>{}

pub struct OrContextExt<'input>{
	base:BooleanExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{OrContextExt<'a>}

impl<'input> TrinoParserContext<'input> for OrContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for OrContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_or(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_or(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for OrContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_or(self);
	}
}

impl<'input> CustomRuleContext<'input> for OrContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_booleanExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_booleanExpression }
}

impl<'input> Borrow<BooleanExpressionContextExt<'input>> for OrContext<'input>{
	fn borrow(&self) -> &BooleanExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<BooleanExpressionContextExt<'input>> for OrContext<'input>{
	fn borrow_mut(&mut self) -> &mut BooleanExpressionContextExt<'input> { &mut self.base }
}

impl<'input> BooleanExpressionContextAttrs<'input> for OrContext<'input> {}

impl<'input> OrContextExt<'input>{
	fn new(ctx: &dyn BooleanExpressionContextAttrs<'input>) -> Rc<BooleanExpressionContextAll<'input>>  {
		Rc::new(
			BooleanExpressionContextAll::OrContext(
				BaseParserRuleContext::copy_from(ctx,OrContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type AndContext<'input> = BaseParserRuleContext<'input,AndContextExt<'input>>;

pub trait AndContextAttrs<'input>: TrinoParserContext<'input>{
	fn booleanExpression_all(&self) ->  Vec<Rc<BooleanExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn booleanExpression(&self, i: usize) -> Option<Rc<BooleanExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token AND
	/// Returns `None` if there is no child corresponding to token AND
	fn AND(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(AND, 0)
	}
}

impl<'input> AndContextAttrs<'input> for AndContext<'input>{}

pub struct AndContextExt<'input>{
	base:BooleanExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{AndContextExt<'a>}

impl<'input> TrinoParserContext<'input> for AndContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for AndContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_and(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_and(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for AndContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_and(self);
	}
}

impl<'input> CustomRuleContext<'input> for AndContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_booleanExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_booleanExpression }
}

impl<'input> Borrow<BooleanExpressionContextExt<'input>> for AndContext<'input>{
	fn borrow(&self) -> &BooleanExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<BooleanExpressionContextExt<'input>> for AndContext<'input>{
	fn borrow_mut(&mut self) -> &mut BooleanExpressionContextExt<'input> { &mut self.base }
}

impl<'input> BooleanExpressionContextAttrs<'input> for AndContext<'input> {}

impl<'input> AndContextExt<'input>{
	fn new(ctx: &dyn BooleanExpressionContextAttrs<'input>) -> Rc<BooleanExpressionContextAll<'input>>  {
		Rc::new(
			BooleanExpressionContextAll::AndContext(
				BaseParserRuleContext::copy_from(ctx,AndContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn  booleanExpression(&mut self,)
	-> Result<Rc<BooleanExpressionContextAll<'input>>,ANTLRError> {
		self.booleanExpression_rec(0)
	}

	fn booleanExpression_rec(&mut self, _p: isize)
	-> Result<Rc<BooleanExpressionContextAll<'input>>,ANTLRError> {
		let recog = self;
		let _parentctx = recog.ctx.take();
		let _parentState = recog.base.get_state();
		let mut _localctx = BooleanExpressionContextExt::new(_parentctx.clone(), recog.base.get_state());
		recog.base.enter_recursion_rule(_localctx.clone(), 174, RULE_booleanExpression, _p);
	    let mut _localctx: Rc<BooleanExpressionContextAll> = _localctx;
        let mut _prevctx = _localctx.clone();
		let _startState = 174;
		let result: Result<(), ANTLRError> = (|| {
			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1822);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 ABORT | ABSENT | ADD | ADMIN | AFTER | ALL | ANALYZE | ANTI | ANY | ARRAY |
			 ASC | AT | ATTACH | AUTHORIZATION | BEGIN | BERNOULLI | BOTH | BZIP2 |
			 CALL | CANCEL | CASCADE | CASE | CAST | CATALOGS | CHARACTER | CLONE |
			 CLOSE | CLUSTER | COLUMN | COLUMNS | COMMENT | COMMIT | COMMITTED | COMPRESSION |
			 CONDITIONAL | CONNECTION | COPARTITION | COPY | COUNT | CURRENT | DATA |
			 DATABASE | DATASHARE | DATE | DAY | DAYS | DECLARE | DEFAULT | DEFINE |
			 DEFINER | DELIMITER | DENY | DESC | DESCRIBE | DESCRIPTOR | DISTRIBUTED |
			 DETACH | DOUBLE | EMPTY | ENCODING | END | ERROR | EXCLUDING | EXECUTE |
			 EXISTS | EXPLAIN | EXTERNAL | EXTRACT | FALSE | FETCH | FILTER | FINAL |
			 FIRST | FOLLOWING | FORMAT | FUNCTIONS | GRACE | GRANT | GRANTED | GRANTS |
			 GRAPHVIZ | GROUPING | GROUPS | GZIP | HOUR | HOURS | IF | IGNORE | INCLUDING |
			 INITIAL | INPUT | INTEGER | INTERVAL | INVOKER | IO | ISOLATION | JSON |
			 JSON_ARRAY | JSON_EXISTS | JSON_OBJECT | JSON_QUERY | JSON_VALUE | KEEP |
			 KEY | KEYS | LAMBDA | LAST | LATERAL | LEADING | LEFT | LEVEL | LIBRARY |
			 LIMIT | LISTAGG | LOCAL | LOCATION | LOCK | LOGICAL | M | MAP | MASKING |
			 MATCH | MATCHED | MATCHES | MATCH_RECOGNIZE | MATERIALIZED | MAX | MEASURES |
			 MERGE | MIN | MINUS_KW | MINUTE | MINUTES | MODEL | MONTH | MONTHS |
			 NEXT | NFC | NFD | NFKC | NFKD | NO | NONE | NORMALIZE | NULL | NULLS |
			 OBJECT | OF | OFFSET | OMIT | ONE | ONLY | OPTION | ORDINALITY | OUTPUT |
			 OVER | OVERFLOW | PARTITION | PARTITIONS | PASSING | PAST | PATH | PATTERN |
			 PER | PERIOD | PERMUTE | POSITION | PRECEDING | PRECISION | PROCEDURE |
			 PRIVILEGES | PROPERTIES | PRUNE | QUOTES | RANGE | READ | REFRESH | RENAME |
			 REPEATABLE | REPLACE | RESET | RESPECT | RESTRICT | RETURNING | REVOKE |
			 RIGHT | RLS | ROLE | ROLES | ROLLBACK | ROLLUP | ROW | ROWS | RUNNING |
			 S | SCALAR | SEC | SECOND | SECONDS | SCHEMA | SCHEMAS | SECURITY | SEEK |
			 SEMI | SERIALIZABLE | SESSION | SET | SETS | SHOW | SNAPSHOT | SOME |
			 START | STATS | STRUCT | SUBSET | SUBSTRING | SYSTEM | SYSTEM_TIME |
			 TABLES | TABLESAMPLE | TEMP | TEMPORARY | TEXT | STRING_KW | TIES | TIME |
			 TIMESTAMP | TO | TRAILING | TRANSACTION | TRIM | TRUE | TRUNCATE | TRY_CAST |
			 TUPLE | TYPE | UNBOUNDED | UNCOMMITTED | UNCONDITIONAL | UNIQUE | UNKNOWN |
			 UNLOAD | UNMATCHED | UPDATE | USE | USER | UTF16 | UTF32 | UTF8 | VACUUM |
			 VALIDATE | VALUE | VARYING | VERBOSE | VERSION | VIEW | WEEK | WINDOW |
			 WITHIN | WITHOUT | WORK | WRAPPER | WRITE | XZ | YEAR | YEARS | ZONE |
			 ZSTD | LPAREN | LBRACKET | PLUS | MINUS | POSIX | STRING | UNICODE_STRING |
			 BINARY_LITERAL | INTEGER_VALUE | DECIMAL_VALUE | DOUBLE_VALUE | IDENTIFIER |
			 QUOTED_IDENTIFIER | VARIABLE 
				=> {
					{
					let mut tmp = PredicatedContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();


					/*InvokeRule valueExpression*/
					recog.base.set_state(1816);
					let tmp = recog.valueExpression_rec(0)?;
					if let BooleanExpressionContextAll::PredicatedContext(ctx) = cast_mut::<_,BooleanExpressionContextAll >(&mut _localctx){
					ctx.left = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(1818);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(235,&mut recog.base)? {
						x if x == 1=>{
							{
							/*InvokeRule predicate*/
							recog.base.set_state(1817);
							let tmp = recog.predicate()?;
							if let BooleanExpressionContextAll::PredicatedContext(ctx) = cast_mut::<_,BooleanExpressionContextAll >(&mut _localctx){
							ctx.pred = Some(tmp.clone()); } else {unreachable!("cant cast");}  

							}
						}

						_ => {}
					}
					}
				}

			 NOT 
				=> {
					{
					let mut tmp = LogicalNotContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(1820);
					recog.base.match_token(NOT,&mut recog.err_handler)?;

					/*InvokeRule booleanExpression*/
					recog.base.set_state(1821);
					recog.booleanExpression_rec(3)?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}

			let tmp = recog.input.lt(-1).cloned();
			recog.ctx.as_ref().unwrap().set_stop(tmp);
			recog.base.set_state(1832);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(238,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					recog.trigger_exit_rule_event();
					_prevctx = _localctx.clone();
					{
					recog.base.set_state(1830);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(237,&mut recog.base)? {
						1 =>{
							{
							/*recRuleLabeledAltStartAction*/
							let mut tmp = AndContextExt::new(&**BooleanExpressionContextExt::new(_parentctx.clone(), _parentState));
							recog.push_new_recursion_context(tmp.clone(), _startState, RULE_booleanExpression);
							_localctx = tmp;
							recog.base.set_state(1824);
							if !({recog.precpred(None, 2)}) {
								Err(FailedPredicateError::new(&mut recog.base, Some("recog.precpred(None, 2)".to_owned()), None))?;
							}
							recog.base.set_state(1825);
							recog.base.match_token(AND,&mut recog.err_handler)?;

							/*InvokeRule booleanExpression*/
							recog.base.set_state(1826);
							recog.booleanExpression_rec(3)?;

							}
						}
					,
						2 =>{
							{
							/*recRuleLabeledAltStartAction*/
							let mut tmp = OrContextExt::new(&**BooleanExpressionContextExt::new(_parentctx.clone(), _parentState));
							recog.push_new_recursion_context(tmp.clone(), _startState, RULE_booleanExpression);
							_localctx = tmp;
							recog.base.set_state(1827);
							if !({recog.precpred(None, 1)}) {
								Err(FailedPredicateError::new(&mut recog.base, Some("recog.precpred(None, 1)".to_owned()), None))?;
							}
							recog.base.set_state(1828);
							recog.base.match_token(OR,&mut recog.err_handler)?;

							/*InvokeRule booleanExpression*/
							recog.base.set_state(1829);
							recog.booleanExpression_rec(2)?;

							}
						}

						_ => {}
					}
					} 
				}
				recog.base.set_state(1834);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(238,&mut recog.base)?;
			}
			}
			Ok(())
		})();
		match result {
		Ok(_) => {},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re)=>{
			//_localctx.exception = re;
			recog.err_handler.report_error(&mut recog.base, re);
	        recog.err_handler.recover(&mut recog.base, re)?;}
		}
		recog.base.unroll_recursion_context(_parentctx);

		Ok(_localctx)
	}
}
//------------------- predicate ----------------
#[derive(Debug)]
pub enum PredicateContextAll<'input>{
	UnknownPredicateContext(UnknownPredicateContext<'input>),
	ComparisonContext(ComparisonContext<'input>),
	LikeContext(LikeContext<'input>),
	InSubqueryContext(InSubqueryContext<'input>),
	DistinctFromContext(DistinctFromContext<'input>),
	SimilarToContext(SimilarToContext<'input>),
	InListContext(InListContext<'input>),
	NullPredicateContext(NullPredicateContext<'input>),
	BetweenContext(BetweenContext<'input>),
	QuantifiedComparisonContext(QuantifiedComparisonContext<'input>),
Error(PredicateContext<'input>)
}
antlr_rust::tid!{PredicateContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for PredicateContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for PredicateContextAll<'input>{}

impl<'input> Deref for PredicateContextAll<'input>{
	type Target = dyn PredicateContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use PredicateContextAll::*;
		match self{
			UnknownPredicateContext(inner) => inner,
			ComparisonContext(inner) => inner,
			LikeContext(inner) => inner,
			InSubqueryContext(inner) => inner,
			DistinctFromContext(inner) => inner,
			SimilarToContext(inner) => inner,
			InListContext(inner) => inner,
			NullPredicateContext(inner) => inner,
			BetweenContext(inner) => inner,
			QuantifiedComparisonContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PredicateContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PredicateContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type PredicateContext<'input> = BaseParserRuleContext<'input,PredicateContextExt<'input>>;

#[derive(Clone)]
pub struct PredicateContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PredicateContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PredicateContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PredicateContext<'input>{
}

impl<'input> CustomRuleContext<'input> for PredicateContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_predicate }
	//fn type_rule_index() -> usize where Self: Sized { RULE_predicate }
}
antlr_rust::tid!{PredicateContextExt<'a>}

impl<'input> PredicateContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PredicateContextAll<'input>> {
		Rc::new(
		PredicateContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PredicateContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait PredicateContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PredicateContextExt<'input>>{


}

impl<'input> PredicateContextAttrs<'input> for PredicateContext<'input>{}

pub type UnknownPredicateContext<'input> = BaseParserRuleContext<'input,UnknownPredicateContextExt<'input>>;

pub trait UnknownPredicateContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token IS
	/// Returns `None` if there is no child corresponding to token IS
	fn IS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IS, 0)
	}
	/// Retrieves first TerminalNode corresponding to token UNKNOWN
	/// Returns `None` if there is no child corresponding to token UNKNOWN
	fn UNKNOWN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(UNKNOWN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token NOT
	/// Returns `None` if there is no child corresponding to token NOT
	fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NOT, 0)
	}
}

impl<'input> UnknownPredicateContextAttrs<'input> for UnknownPredicateContext<'input>{}

pub struct UnknownPredicateContextExt<'input>{
	base:PredicateContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{UnknownPredicateContextExt<'a>}

impl<'input> TrinoParserContext<'input> for UnknownPredicateContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for UnknownPredicateContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_unknownPredicate(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_unknownPredicate(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for UnknownPredicateContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_unknownPredicate(self);
	}
}

impl<'input> CustomRuleContext<'input> for UnknownPredicateContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_predicate }
	//fn type_rule_index() -> usize where Self: Sized { RULE_predicate }
}

impl<'input> Borrow<PredicateContextExt<'input>> for UnknownPredicateContext<'input>{
	fn borrow(&self) -> &PredicateContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PredicateContextExt<'input>> for UnknownPredicateContext<'input>{
	fn borrow_mut(&mut self) -> &mut PredicateContextExt<'input> { &mut self.base }
}

impl<'input> PredicateContextAttrs<'input> for UnknownPredicateContext<'input> {}

impl<'input> UnknownPredicateContextExt<'input>{
	fn new(ctx: &dyn PredicateContextAttrs<'input>) -> Rc<PredicateContextAll<'input>>  {
		Rc::new(
			PredicateContextAll::UnknownPredicateContext(
				BaseParserRuleContext::copy_from(ctx,UnknownPredicateContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ComparisonContext<'input> = BaseParserRuleContext<'input,ComparisonContextExt<'input>>;

pub trait ComparisonContextAttrs<'input>: TrinoParserContext<'input>{
	fn comparisonOperator(&self) -> Option<Rc<ComparisonOperatorContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn valueExpression(&self) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> ComparisonContextAttrs<'input> for ComparisonContext<'input>{}

pub struct ComparisonContextExt<'input>{
	base:PredicateContextExt<'input>,
	pub right: Option<Rc<ValueExpressionContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ComparisonContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ComparisonContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ComparisonContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_comparison(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_comparison(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ComparisonContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_comparison(self);
	}
}

impl<'input> CustomRuleContext<'input> for ComparisonContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_predicate }
	//fn type_rule_index() -> usize where Self: Sized { RULE_predicate }
}

impl<'input> Borrow<PredicateContextExt<'input>> for ComparisonContext<'input>{
	fn borrow(&self) -> &PredicateContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PredicateContextExt<'input>> for ComparisonContext<'input>{
	fn borrow_mut(&mut self) -> &mut PredicateContextExt<'input> { &mut self.base }
}

impl<'input> PredicateContextAttrs<'input> for ComparisonContext<'input> {}

impl<'input> ComparisonContextExt<'input>{
	fn new(ctx: &dyn PredicateContextAttrs<'input>) -> Rc<PredicateContextAll<'input>>  {
		Rc::new(
			PredicateContextAll::ComparisonContext(
				BaseParserRuleContext::copy_from(ctx,ComparisonContextExt{
        			right:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type LikeContext<'input> = BaseParserRuleContext<'input,LikeContextExt<'input>>;

pub trait LikeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token LIKE
	/// Returns `None` if there is no child corresponding to token LIKE
	fn LIKE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LIKE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ILIKE
	/// Returns `None` if there is no child corresponding to token ILIKE
	fn ILIKE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ILIKE, 0)
	}
	fn valueExpression_all(&self) ->  Vec<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn valueExpression(&self, i: usize) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token NOT
	/// Returns `None` if there is no child corresponding to token NOT
	fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NOT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ESCAPE
	/// Returns `None` if there is no child corresponding to token ESCAPE
	fn ESCAPE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ESCAPE, 0)
	}
}

impl<'input> LikeContextAttrs<'input> for LikeContext<'input>{}

pub struct LikeContextExt<'input>{
	base:PredicateContextExt<'input>,
	pub pattern: Option<Rc<ValueExpressionContextAll<'input>>>,
	pub escape: Option<Rc<ValueExpressionContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{LikeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for LikeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for LikeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_like(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_like(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for LikeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_like(self);
	}
}

impl<'input> CustomRuleContext<'input> for LikeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_predicate }
	//fn type_rule_index() -> usize where Self: Sized { RULE_predicate }
}

impl<'input> Borrow<PredicateContextExt<'input>> for LikeContext<'input>{
	fn borrow(&self) -> &PredicateContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PredicateContextExt<'input>> for LikeContext<'input>{
	fn borrow_mut(&mut self) -> &mut PredicateContextExt<'input> { &mut self.base }
}

impl<'input> PredicateContextAttrs<'input> for LikeContext<'input> {}

impl<'input> LikeContextExt<'input>{
	fn new(ctx: &dyn PredicateContextAttrs<'input>) -> Rc<PredicateContextAll<'input>>  {
		Rc::new(
			PredicateContextAll::LikeContext(
				BaseParserRuleContext::copy_from(ctx,LikeContextExt{
        			pattern:None, escape:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type InSubqueryContext<'input> = BaseParserRuleContext<'input,InSubqueryContextExt<'input>>;

pub trait InSubqueryContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token IN
	/// Returns `None` if there is no child corresponding to token IN
	fn IN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn query(&self) -> Option<Rc<QueryContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token NOT
	/// Returns `None` if there is no child corresponding to token NOT
	fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NOT, 0)
	}
}

impl<'input> InSubqueryContextAttrs<'input> for InSubqueryContext<'input>{}

pub struct InSubqueryContextExt<'input>{
	base:PredicateContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{InSubqueryContextExt<'a>}

impl<'input> TrinoParserContext<'input> for InSubqueryContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for InSubqueryContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_inSubquery(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_inSubquery(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for InSubqueryContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_inSubquery(self);
	}
}

impl<'input> CustomRuleContext<'input> for InSubqueryContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_predicate }
	//fn type_rule_index() -> usize where Self: Sized { RULE_predicate }
}

impl<'input> Borrow<PredicateContextExt<'input>> for InSubqueryContext<'input>{
	fn borrow(&self) -> &PredicateContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PredicateContextExt<'input>> for InSubqueryContext<'input>{
	fn borrow_mut(&mut self) -> &mut PredicateContextExt<'input> { &mut self.base }
}

impl<'input> PredicateContextAttrs<'input> for InSubqueryContext<'input> {}

impl<'input> InSubqueryContextExt<'input>{
	fn new(ctx: &dyn PredicateContextAttrs<'input>) -> Rc<PredicateContextAll<'input>>  {
		Rc::new(
			PredicateContextAll::InSubqueryContext(
				BaseParserRuleContext::copy_from(ctx,InSubqueryContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type DistinctFromContext<'input> = BaseParserRuleContext<'input,DistinctFromContextExt<'input>>;

pub trait DistinctFromContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token IS
	/// Returns `None` if there is no child corresponding to token IS
	fn IS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IS, 0)
	}
	/// Retrieves first TerminalNode corresponding to token DISTINCT
	/// Returns `None` if there is no child corresponding to token DISTINCT
	fn DISTINCT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DISTINCT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token FROM
	/// Returns `None` if there is no child corresponding to token FROM
	fn FROM(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(FROM, 0)
	}
	fn valueExpression(&self) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token NOT
	/// Returns `None` if there is no child corresponding to token NOT
	fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NOT, 0)
	}
}

impl<'input> DistinctFromContextAttrs<'input> for DistinctFromContext<'input>{}

pub struct DistinctFromContextExt<'input>{
	base:PredicateContextExt<'input>,
	pub right: Option<Rc<ValueExpressionContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DistinctFromContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DistinctFromContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DistinctFromContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_distinctFrom(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_distinctFrom(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DistinctFromContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_distinctFrom(self);
	}
}

impl<'input> CustomRuleContext<'input> for DistinctFromContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_predicate }
	//fn type_rule_index() -> usize where Self: Sized { RULE_predicate }
}

impl<'input> Borrow<PredicateContextExt<'input>> for DistinctFromContext<'input>{
	fn borrow(&self) -> &PredicateContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PredicateContextExt<'input>> for DistinctFromContext<'input>{
	fn borrow_mut(&mut self) -> &mut PredicateContextExt<'input> { &mut self.base }
}

impl<'input> PredicateContextAttrs<'input> for DistinctFromContext<'input> {}

impl<'input> DistinctFromContextExt<'input>{
	fn new(ctx: &dyn PredicateContextAttrs<'input>) -> Rc<PredicateContextAll<'input>>  {
		Rc::new(
			PredicateContextAll::DistinctFromContext(
				BaseParserRuleContext::copy_from(ctx,DistinctFromContextExt{
        			right:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SimilarToContext<'input> = BaseParserRuleContext<'input,SimilarToContextExt<'input>>;

pub trait SimilarToContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token SIMILAR
	/// Returns `None` if there is no child corresponding to token SIMILAR
	fn SIMILAR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SIMILAR, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TO
	/// Returns `None` if there is no child corresponding to token TO
	fn TO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TO, 0)
	}
	fn valueExpression_all(&self) ->  Vec<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn valueExpression(&self, i: usize) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token NOT
	/// Returns `None` if there is no child corresponding to token NOT
	fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NOT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ESCAPE
	/// Returns `None` if there is no child corresponding to token ESCAPE
	fn ESCAPE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ESCAPE, 0)
	}
}

impl<'input> SimilarToContextAttrs<'input> for SimilarToContext<'input>{}

pub struct SimilarToContextExt<'input>{
	base:PredicateContextExt<'input>,
	pub pattern: Option<Rc<ValueExpressionContextAll<'input>>>,
	pub escape: Option<Rc<ValueExpressionContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SimilarToContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SimilarToContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SimilarToContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_similarTo(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_similarTo(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SimilarToContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_similarTo(self);
	}
}

impl<'input> CustomRuleContext<'input> for SimilarToContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_predicate }
	//fn type_rule_index() -> usize where Self: Sized { RULE_predicate }
}

impl<'input> Borrow<PredicateContextExt<'input>> for SimilarToContext<'input>{
	fn borrow(&self) -> &PredicateContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PredicateContextExt<'input>> for SimilarToContext<'input>{
	fn borrow_mut(&mut self) -> &mut PredicateContextExt<'input> { &mut self.base }
}

impl<'input> PredicateContextAttrs<'input> for SimilarToContext<'input> {}

impl<'input> SimilarToContextExt<'input>{
	fn new(ctx: &dyn PredicateContextAttrs<'input>) -> Rc<PredicateContextAll<'input>>  {
		Rc::new(
			PredicateContextAll::SimilarToContext(
				BaseParserRuleContext::copy_from(ctx,SimilarToContextExt{
        			pattern:None, escape:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type InListContext<'input> = BaseParserRuleContext<'input,InListContextExt<'input>>;

pub trait InListContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token IN
	/// Returns `None` if there is no child corresponding to token IN
	fn IN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn expression_all(&self) ->  Vec<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn expression(&self, i: usize) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token NOT
	/// Returns `None` if there is no child corresponding to token NOT
	fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NOT, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> InListContextAttrs<'input> for InListContext<'input>{}

pub struct InListContextExt<'input>{
	base:PredicateContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{InListContextExt<'a>}

impl<'input> TrinoParserContext<'input> for InListContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for InListContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_inList(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_inList(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for InListContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_inList(self);
	}
}

impl<'input> CustomRuleContext<'input> for InListContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_predicate }
	//fn type_rule_index() -> usize where Self: Sized { RULE_predicate }
}

impl<'input> Borrow<PredicateContextExt<'input>> for InListContext<'input>{
	fn borrow(&self) -> &PredicateContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PredicateContextExt<'input>> for InListContext<'input>{
	fn borrow_mut(&mut self) -> &mut PredicateContextExt<'input> { &mut self.base }
}

impl<'input> PredicateContextAttrs<'input> for InListContext<'input> {}

impl<'input> InListContextExt<'input>{
	fn new(ctx: &dyn PredicateContextAttrs<'input>) -> Rc<PredicateContextAll<'input>>  {
		Rc::new(
			PredicateContextAll::InListContext(
				BaseParserRuleContext::copy_from(ctx,InListContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type NullPredicateContext<'input> = BaseParserRuleContext<'input,NullPredicateContextExt<'input>>;

pub trait NullPredicateContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token IS
	/// Returns `None` if there is no child corresponding to token IS
	fn IS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IS, 0)
	}
	/// Retrieves first TerminalNode corresponding to token NULL
	/// Returns `None` if there is no child corresponding to token NULL
	fn NULL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NULL, 0)
	}
	/// Retrieves first TerminalNode corresponding to token NOT
	/// Returns `None` if there is no child corresponding to token NOT
	fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NOT, 0)
	}
}

impl<'input> NullPredicateContextAttrs<'input> for NullPredicateContext<'input>{}

pub struct NullPredicateContextExt<'input>{
	base:PredicateContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{NullPredicateContextExt<'a>}

impl<'input> TrinoParserContext<'input> for NullPredicateContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for NullPredicateContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_nullPredicate(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_nullPredicate(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for NullPredicateContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_nullPredicate(self);
	}
}

impl<'input> CustomRuleContext<'input> for NullPredicateContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_predicate }
	//fn type_rule_index() -> usize where Self: Sized { RULE_predicate }
}

impl<'input> Borrow<PredicateContextExt<'input>> for NullPredicateContext<'input>{
	fn borrow(&self) -> &PredicateContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PredicateContextExt<'input>> for NullPredicateContext<'input>{
	fn borrow_mut(&mut self) -> &mut PredicateContextExt<'input> { &mut self.base }
}

impl<'input> PredicateContextAttrs<'input> for NullPredicateContext<'input> {}

impl<'input> NullPredicateContextExt<'input>{
	fn new(ctx: &dyn PredicateContextAttrs<'input>) -> Rc<PredicateContextAll<'input>>  {
		Rc::new(
			PredicateContextAll::NullPredicateContext(
				BaseParserRuleContext::copy_from(ctx,NullPredicateContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type BetweenContext<'input> = BaseParserRuleContext<'input,BetweenContextExt<'input>>;

pub trait BetweenContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token BETWEEN
	/// Returns `None` if there is no child corresponding to token BETWEEN
	fn BETWEEN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(BETWEEN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token AND
	/// Returns `None` if there is no child corresponding to token AND
	fn AND(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(AND, 0)
	}
	fn valueExpression_all(&self) ->  Vec<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn valueExpression(&self, i: usize) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token NOT
	/// Returns `None` if there is no child corresponding to token NOT
	fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NOT, 0)
	}
}

impl<'input> BetweenContextAttrs<'input> for BetweenContext<'input>{}

pub struct BetweenContextExt<'input>{
	base:PredicateContextExt<'input>,
	pub lower: Option<Rc<ValueExpressionContextAll<'input>>>,
	pub upper: Option<Rc<ValueExpressionContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{BetweenContextExt<'a>}

impl<'input> TrinoParserContext<'input> for BetweenContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for BetweenContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_between(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_between(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for BetweenContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_between(self);
	}
}

impl<'input> CustomRuleContext<'input> for BetweenContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_predicate }
	//fn type_rule_index() -> usize where Self: Sized { RULE_predicate }
}

impl<'input> Borrow<PredicateContextExt<'input>> for BetweenContext<'input>{
	fn borrow(&self) -> &PredicateContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PredicateContextExt<'input>> for BetweenContext<'input>{
	fn borrow_mut(&mut self) -> &mut PredicateContextExt<'input> { &mut self.base }
}

impl<'input> PredicateContextAttrs<'input> for BetweenContext<'input> {}

impl<'input> BetweenContextExt<'input>{
	fn new(ctx: &dyn PredicateContextAttrs<'input>) -> Rc<PredicateContextAll<'input>>  {
		Rc::new(
			PredicateContextAll::BetweenContext(
				BaseParserRuleContext::copy_from(ctx,BetweenContextExt{
        			lower:None, upper:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type QuantifiedComparisonContext<'input> = BaseParserRuleContext<'input,QuantifiedComparisonContextExt<'input>>;

pub trait QuantifiedComparisonContextAttrs<'input>: TrinoParserContext<'input>{
	fn comparisonOperator(&self) -> Option<Rc<ComparisonOperatorContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn comparisonQuantifier(&self) -> Option<Rc<ComparisonQuantifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn query(&self) -> Option<Rc<QueryContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
}

impl<'input> QuantifiedComparisonContextAttrs<'input> for QuantifiedComparisonContext<'input>{}

pub struct QuantifiedComparisonContextExt<'input>{
	base:PredicateContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{QuantifiedComparisonContextExt<'a>}

impl<'input> TrinoParserContext<'input> for QuantifiedComparisonContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QuantifiedComparisonContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_quantifiedComparison(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_quantifiedComparison(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QuantifiedComparisonContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_quantifiedComparison(self);
	}
}

impl<'input> CustomRuleContext<'input> for QuantifiedComparisonContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_predicate }
	//fn type_rule_index() -> usize where Self: Sized { RULE_predicate }
}

impl<'input> Borrow<PredicateContextExt<'input>> for QuantifiedComparisonContext<'input>{
	fn borrow(&self) -> &PredicateContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PredicateContextExt<'input>> for QuantifiedComparisonContext<'input>{
	fn borrow_mut(&mut self) -> &mut PredicateContextExt<'input> { &mut self.base }
}

impl<'input> PredicateContextAttrs<'input> for QuantifiedComparisonContext<'input> {}

impl<'input> QuantifiedComparisonContextExt<'input>{
	fn new(ctx: &dyn PredicateContextAttrs<'input>) -> Rc<PredicateContextAll<'input>>  {
		Rc::new(
			PredicateContextAll::QuantifiedComparisonContext(
				BaseParserRuleContext::copy_from(ctx,QuantifiedComparisonContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn predicate(&mut self,)
	-> Result<Rc<PredicateContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PredicateContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 176, RULE_predicate);
        let mut _localctx: Rc<PredicateContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			recog.base.set_state(1914);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(251,&mut recog.base)? {
				1 =>{
					let tmp = ComparisonContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					/*InvokeRule comparisonOperator*/
					recog.base.set_state(1835);
					recog.comparisonOperator()?;

					/*InvokeRule valueExpression*/
					recog.base.set_state(1836);
					let tmp = recog.valueExpression_rec(0)?;
					if let PredicateContextAll::ComparisonContext(ctx) = cast_mut::<_,PredicateContextAll >(&mut _localctx){
					ctx.right = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					}
				}
			,
				2 =>{
					let tmp = QuantifiedComparisonContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					/*InvokeRule comparisonOperator*/
					recog.base.set_state(1838);
					recog.comparisonOperator()?;

					/*InvokeRule comparisonQuantifier*/
					recog.base.set_state(1839);
					recog.comparisonQuantifier()?;

					recog.base.set_state(1840);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule query*/
					recog.base.set_state(1841);
					recog.query()?;

					recog.base.set_state(1842);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				3 =>{
					let tmp = BetweenContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 3);
					_localctx = tmp;
					{
					recog.base.set_state(1845);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==NOT {
						{
						recog.base.set_state(1844);
						recog.base.match_token(NOT,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(1847);
					recog.base.match_token(BETWEEN,&mut recog.err_handler)?;

					/*InvokeRule valueExpression*/
					recog.base.set_state(1848);
					let tmp = recog.valueExpression_rec(0)?;
					if let PredicateContextAll::BetweenContext(ctx) = cast_mut::<_,PredicateContextAll >(&mut _localctx){
					ctx.lower = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(1849);
					recog.base.match_token(AND,&mut recog.err_handler)?;

					/*InvokeRule valueExpression*/
					recog.base.set_state(1850);
					let tmp = recog.valueExpression_rec(0)?;
					if let PredicateContextAll::BetweenContext(ctx) = cast_mut::<_,PredicateContextAll >(&mut _localctx){
					ctx.upper = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					}
				}
			,
				4 =>{
					let tmp = InListContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 4);
					_localctx = tmp;
					{
					recog.base.set_state(1853);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==NOT {
						{
						recog.base.set_state(1852);
						recog.base.match_token(NOT,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(1855);
					recog.base.match_token(IN,&mut recog.err_handler)?;

					recog.base.set_state(1856);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule expression*/
					recog.base.set_state(1857);
					recog.expression()?;

					recog.base.set_state(1862);
					recog.err_handler.sync(&mut recog.base)?;
					_alt = recog.interpreter.adaptive_predict(241,&mut recog.base)?;
					while { _alt!=2 && _alt!=INVALID_ALT } {
						if _alt==1 {
							{
							{
							recog.base.set_state(1858);
							recog.base.match_token(COMMA,&mut recog.err_handler)?;

							/*InvokeRule expression*/
							recog.base.set_state(1859);
							recog.expression()?;

							}
							} 
						}
						recog.base.set_state(1864);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(241,&mut recog.base)?;
					}
					recog.base.set_state(1866);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(1865);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						if let PredicateContextAll::InListContext(ctx) = cast_mut::<_,PredicateContextAll >(&mut _localctx){
						ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(1868);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				5 =>{
					let tmp = InSubqueryContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 5);
					_localctx = tmp;
					{
					recog.base.set_state(1871);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==NOT {
						{
						recog.base.set_state(1870);
						recog.base.match_token(NOT,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(1873);
					recog.base.match_token(IN,&mut recog.err_handler)?;

					recog.base.set_state(1874);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule query*/
					recog.base.set_state(1875);
					recog.query()?;

					recog.base.set_state(1876);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				6 =>{
					let tmp = LikeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 6);
					_localctx = tmp;
					{
					recog.base.set_state(1879);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==NOT {
						{
						recog.base.set_state(1878);
						recog.base.match_token(NOT,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(1881);
					_la = recog.base.input.la(1);
					if { !(_la==ILIKE || _la==LIKE) } {
						recog.err_handler.recover_inline(&mut recog.base)?;

					}
					else {
						if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
						recog.err_handler.report_match(&mut recog.base);
						recog.base.consume(&mut recog.err_handler);
					}
					/*InvokeRule valueExpression*/
					recog.base.set_state(1882);
					let tmp = recog.valueExpression_rec(0)?;
					if let PredicateContextAll::LikeContext(ctx) = cast_mut::<_,PredicateContextAll >(&mut _localctx){
					ctx.pattern = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(1885);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(245,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(1883);
							recog.base.match_token(ESCAPE,&mut recog.err_handler)?;

							/*InvokeRule valueExpression*/
							recog.base.set_state(1884);
							let tmp = recog.valueExpression_rec(0)?;
							if let PredicateContextAll::LikeContext(ctx) = cast_mut::<_,PredicateContextAll >(&mut _localctx){
							ctx.escape = Some(tmp.clone()); } else {unreachable!("cant cast");}  

							}
						}

						_ => {}
					}
					}
				}
			,
				7 =>{
					let tmp = SimilarToContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 7);
					_localctx = tmp;
					{
					recog.base.set_state(1888);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==NOT {
						{
						recog.base.set_state(1887);
						recog.base.match_token(NOT,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(1890);
					recog.base.match_token(SIMILAR,&mut recog.err_handler)?;

					recog.base.set_state(1891);
					recog.base.match_token(TO,&mut recog.err_handler)?;

					/*InvokeRule valueExpression*/
					recog.base.set_state(1892);
					let tmp = recog.valueExpression_rec(0)?;
					if let PredicateContextAll::SimilarToContext(ctx) = cast_mut::<_,PredicateContextAll >(&mut _localctx){
					ctx.pattern = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(1895);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(247,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(1893);
							recog.base.match_token(ESCAPE,&mut recog.err_handler)?;

							/*InvokeRule valueExpression*/
							recog.base.set_state(1894);
							let tmp = recog.valueExpression_rec(0)?;
							if let PredicateContextAll::SimilarToContext(ctx) = cast_mut::<_,PredicateContextAll >(&mut _localctx){
							ctx.escape = Some(tmp.clone()); } else {unreachable!("cant cast");}  

							}
						}

						_ => {}
					}
					}
				}
			,
				8 =>{
					let tmp = NullPredicateContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 8);
					_localctx = tmp;
					{
					recog.base.set_state(1897);
					recog.base.match_token(IS,&mut recog.err_handler)?;

					recog.base.set_state(1899);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==NOT {
						{
						recog.base.set_state(1898);
						recog.base.match_token(NOT,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(1901);
					recog.base.match_token(NULL,&mut recog.err_handler)?;

					}
				}
			,
				9 =>{
					let tmp = DistinctFromContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 9);
					_localctx = tmp;
					{
					recog.base.set_state(1902);
					recog.base.match_token(IS,&mut recog.err_handler)?;

					recog.base.set_state(1904);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==NOT {
						{
						recog.base.set_state(1903);
						recog.base.match_token(NOT,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(1906);
					recog.base.match_token(DISTINCT,&mut recog.err_handler)?;

					recog.base.set_state(1907);
					recog.base.match_token(FROM,&mut recog.err_handler)?;

					/*InvokeRule valueExpression*/
					recog.base.set_state(1908);
					let tmp = recog.valueExpression_rec(0)?;
					if let PredicateContextAll::DistinctFromContext(ctx) = cast_mut::<_,PredicateContextAll >(&mut _localctx){
					ctx.right = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					}
				}
			,
				10 =>{
					let tmp = UnknownPredicateContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 10);
					_localctx = tmp;
					{
					recog.base.set_state(1909);
					recog.base.match_token(IS,&mut recog.err_handler)?;

					recog.base.set_state(1911);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==NOT {
						{
						recog.base.set_state(1910);
						recog.base.match_token(NOT,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(1913);
					recog.base.match_token(UNKNOWN,&mut recog.err_handler)?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- valueExpression ----------------
#[derive(Debug)]
pub enum ValueExpressionContextAll<'input>{
	ValueExpressionDefaultContext(ValueExpressionDefaultContext<'input>),
	ConcatenationContext(ConcatenationContext<'input>),
	ArithmeticBinaryContext(ArithmeticBinaryContext<'input>),
	ArithmeticUnaryContext(ArithmeticUnaryContext<'input>),
	AtTimeZoneContext(AtTimeZoneContext<'input>),
Error(ValueExpressionContext<'input>)
}
antlr_rust::tid!{ValueExpressionContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for ValueExpressionContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for ValueExpressionContextAll<'input>{}

impl<'input> Deref for ValueExpressionContextAll<'input>{
	type Target = dyn ValueExpressionContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use ValueExpressionContextAll::*;
		match self{
			ValueExpressionDefaultContext(inner) => inner,
			ConcatenationContext(inner) => inner,
			ArithmeticBinaryContext(inner) => inner,
			ArithmeticUnaryContext(inner) => inner,
			AtTimeZoneContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ValueExpressionContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ValueExpressionContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type ValueExpressionContext<'input> = BaseParserRuleContext<'input,ValueExpressionContextExt<'input>>;

#[derive(Clone)]
pub struct ValueExpressionContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ValueExpressionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ValueExpressionContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ValueExpressionContext<'input>{
}

impl<'input> CustomRuleContext<'input> for ValueExpressionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_valueExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_valueExpression }
}
antlr_rust::tid!{ValueExpressionContextExt<'a>}

impl<'input> ValueExpressionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ValueExpressionContextAll<'input>> {
		Rc::new(
		ValueExpressionContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ValueExpressionContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait ValueExpressionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ValueExpressionContextExt<'input>>{


}

impl<'input> ValueExpressionContextAttrs<'input> for ValueExpressionContext<'input>{}

pub type ValueExpressionDefaultContext<'input> = BaseParserRuleContext<'input,ValueExpressionDefaultContextExt<'input>>;

pub trait ValueExpressionDefaultContextAttrs<'input>: TrinoParserContext<'input>{
	fn primaryExpression(&self) -> Option<Rc<PrimaryExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> ValueExpressionDefaultContextAttrs<'input> for ValueExpressionDefaultContext<'input>{}

pub struct ValueExpressionDefaultContextExt<'input>{
	base:ValueExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ValueExpressionDefaultContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ValueExpressionDefaultContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ValueExpressionDefaultContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_valueExpressionDefault(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_valueExpressionDefault(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ValueExpressionDefaultContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_valueExpressionDefault(self);
	}
}

impl<'input> CustomRuleContext<'input> for ValueExpressionDefaultContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_valueExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_valueExpression }
}

impl<'input> Borrow<ValueExpressionContextExt<'input>> for ValueExpressionDefaultContext<'input>{
	fn borrow(&self) -> &ValueExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<ValueExpressionContextExt<'input>> for ValueExpressionDefaultContext<'input>{
	fn borrow_mut(&mut self) -> &mut ValueExpressionContextExt<'input> { &mut self.base }
}

impl<'input> ValueExpressionContextAttrs<'input> for ValueExpressionDefaultContext<'input> {}

impl<'input> ValueExpressionDefaultContextExt<'input>{
	fn new(ctx: &dyn ValueExpressionContextAttrs<'input>) -> Rc<ValueExpressionContextAll<'input>>  {
		Rc::new(
			ValueExpressionContextAll::ValueExpressionDefaultContext(
				BaseParserRuleContext::copy_from(ctx,ValueExpressionDefaultContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ConcatenationContext<'input> = BaseParserRuleContext<'input,ConcatenationContextExt<'input>>;

pub trait ConcatenationContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token CONCAT
	/// Returns `None` if there is no child corresponding to token CONCAT
	fn CONCAT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CONCAT, 0)
	}
	fn valueExpression_all(&self) ->  Vec<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn valueExpression(&self, i: usize) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
}

impl<'input> ConcatenationContextAttrs<'input> for ConcatenationContext<'input>{}

pub struct ConcatenationContextExt<'input>{
	base:ValueExpressionContextExt<'input>,
	pub left: Option<Rc<ValueExpressionContextAll<'input>>>,
	pub right: Option<Rc<ValueExpressionContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ConcatenationContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ConcatenationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ConcatenationContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_concatenation(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_concatenation(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ConcatenationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_concatenation(self);
	}
}

impl<'input> CustomRuleContext<'input> for ConcatenationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_valueExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_valueExpression }
}

impl<'input> Borrow<ValueExpressionContextExt<'input>> for ConcatenationContext<'input>{
	fn borrow(&self) -> &ValueExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<ValueExpressionContextExt<'input>> for ConcatenationContext<'input>{
	fn borrow_mut(&mut self) -> &mut ValueExpressionContextExt<'input> { &mut self.base }
}

impl<'input> ValueExpressionContextAttrs<'input> for ConcatenationContext<'input> {}

impl<'input> ConcatenationContextExt<'input>{
	fn new(ctx: &dyn ValueExpressionContextAttrs<'input>) -> Rc<ValueExpressionContextAll<'input>>  {
		Rc::new(
			ValueExpressionContextAll::ConcatenationContext(
				BaseParserRuleContext::copy_from(ctx,ConcatenationContextExt{
        			left:None, right:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ArithmeticBinaryContext<'input> = BaseParserRuleContext<'input,ArithmeticBinaryContextExt<'input>>;

pub trait ArithmeticBinaryContextAttrs<'input>: TrinoParserContext<'input>{
	fn valueExpression_all(&self) ->  Vec<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn valueExpression(&self, i: usize) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token ASTERISK
	/// Returns `None` if there is no child corresponding to token ASTERISK
	fn ASTERISK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ASTERISK, 0)
	}
	/// Retrieves first TerminalNode corresponding to token SLASH
	/// Returns `None` if there is no child corresponding to token SLASH
	fn SLASH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SLASH, 0)
	}
	/// Retrieves first TerminalNode corresponding to token PERCENT
	/// Returns `None` if there is no child corresponding to token PERCENT
	fn PERCENT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(PERCENT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token PLUS
	/// Returns `None` if there is no child corresponding to token PLUS
	fn PLUS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(PLUS, 0)
	}
	/// Retrieves first TerminalNode corresponding to token MINUS
	/// Returns `None` if there is no child corresponding to token MINUS
	fn MINUS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(MINUS, 0)
	}
	/// Retrieves first TerminalNode corresponding to token BITWISE_SHIFT_LEFT
	/// Returns `None` if there is no child corresponding to token BITWISE_SHIFT_LEFT
	fn BITWISE_SHIFT_LEFT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(BITWISE_SHIFT_LEFT, 0)
	}
}

impl<'input> ArithmeticBinaryContextAttrs<'input> for ArithmeticBinaryContext<'input>{}

pub struct ArithmeticBinaryContextExt<'input>{
	base:ValueExpressionContextExt<'input>,
	pub left: Option<Rc<ValueExpressionContextAll<'input>>>,
	pub operator: Option<TokenType<'input>>,
	pub right: Option<Rc<ValueExpressionContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ArithmeticBinaryContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ArithmeticBinaryContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ArithmeticBinaryContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_arithmeticBinary(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_arithmeticBinary(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ArithmeticBinaryContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_arithmeticBinary(self);
	}
}

impl<'input> CustomRuleContext<'input> for ArithmeticBinaryContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_valueExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_valueExpression }
}

impl<'input> Borrow<ValueExpressionContextExt<'input>> for ArithmeticBinaryContext<'input>{
	fn borrow(&self) -> &ValueExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<ValueExpressionContextExt<'input>> for ArithmeticBinaryContext<'input>{
	fn borrow_mut(&mut self) -> &mut ValueExpressionContextExt<'input> { &mut self.base }
}

impl<'input> ValueExpressionContextAttrs<'input> for ArithmeticBinaryContext<'input> {}

impl<'input> ArithmeticBinaryContextExt<'input>{
	fn new(ctx: &dyn ValueExpressionContextAttrs<'input>) -> Rc<ValueExpressionContextAll<'input>>  {
		Rc::new(
			ValueExpressionContextAll::ArithmeticBinaryContext(
				BaseParserRuleContext::copy_from(ctx,ArithmeticBinaryContextExt{
					operator:None, 
        			left:None, right:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ArithmeticUnaryContext<'input> = BaseParserRuleContext<'input,ArithmeticUnaryContextExt<'input>>;

pub trait ArithmeticUnaryContextAttrs<'input>: TrinoParserContext<'input>{
	fn valueExpression(&self) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token MINUS
	/// Returns `None` if there is no child corresponding to token MINUS
	fn MINUS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(MINUS, 0)
	}
	/// Retrieves first TerminalNode corresponding to token PLUS
	/// Returns `None` if there is no child corresponding to token PLUS
	fn PLUS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(PLUS, 0)
	}
	/// Retrieves first TerminalNode corresponding to token POSIX
	/// Returns `None` if there is no child corresponding to token POSIX
	fn POSIX(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(POSIX, 0)
	}
}

impl<'input> ArithmeticUnaryContextAttrs<'input> for ArithmeticUnaryContext<'input>{}

pub struct ArithmeticUnaryContextExt<'input>{
	base:ValueExpressionContextExt<'input>,
	pub operator: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ArithmeticUnaryContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ArithmeticUnaryContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ArithmeticUnaryContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_arithmeticUnary(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_arithmeticUnary(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ArithmeticUnaryContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_arithmeticUnary(self);
	}
}

impl<'input> CustomRuleContext<'input> for ArithmeticUnaryContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_valueExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_valueExpression }
}

impl<'input> Borrow<ValueExpressionContextExt<'input>> for ArithmeticUnaryContext<'input>{
	fn borrow(&self) -> &ValueExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<ValueExpressionContextExt<'input>> for ArithmeticUnaryContext<'input>{
	fn borrow_mut(&mut self) -> &mut ValueExpressionContextExt<'input> { &mut self.base }
}

impl<'input> ValueExpressionContextAttrs<'input> for ArithmeticUnaryContext<'input> {}

impl<'input> ArithmeticUnaryContextExt<'input>{
	fn new(ctx: &dyn ValueExpressionContextAttrs<'input>) -> Rc<ValueExpressionContextAll<'input>>  {
		Rc::new(
			ValueExpressionContextAll::ArithmeticUnaryContext(
				BaseParserRuleContext::copy_from(ctx,ArithmeticUnaryContextExt{
					operator:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type AtTimeZoneContext<'input> = BaseParserRuleContext<'input,AtTimeZoneContextExt<'input>>;

pub trait AtTimeZoneContextAttrs<'input>: TrinoParserContext<'input>{
	fn valueExpression(&self) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token AT
	/// Returns `None` if there is no child corresponding to token AT
	fn AT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(AT, 0)
	}
	fn timeZoneSpecifier(&self) -> Option<Rc<TimeZoneSpecifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> AtTimeZoneContextAttrs<'input> for AtTimeZoneContext<'input>{}

pub struct AtTimeZoneContextExt<'input>{
	base:ValueExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{AtTimeZoneContextExt<'a>}

impl<'input> TrinoParserContext<'input> for AtTimeZoneContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for AtTimeZoneContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_atTimeZone(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_atTimeZone(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for AtTimeZoneContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_atTimeZone(self);
	}
}

impl<'input> CustomRuleContext<'input> for AtTimeZoneContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_valueExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_valueExpression }
}

impl<'input> Borrow<ValueExpressionContextExt<'input>> for AtTimeZoneContext<'input>{
	fn borrow(&self) -> &ValueExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<ValueExpressionContextExt<'input>> for AtTimeZoneContext<'input>{
	fn borrow_mut(&mut self) -> &mut ValueExpressionContextExt<'input> { &mut self.base }
}

impl<'input> ValueExpressionContextAttrs<'input> for AtTimeZoneContext<'input> {}

impl<'input> AtTimeZoneContextExt<'input>{
	fn new(ctx: &dyn ValueExpressionContextAttrs<'input>) -> Rc<ValueExpressionContextAll<'input>>  {
		Rc::new(
			ValueExpressionContextAll::AtTimeZoneContext(
				BaseParserRuleContext::copy_from(ctx,AtTimeZoneContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn  valueExpression(&mut self,)
	-> Result<Rc<ValueExpressionContextAll<'input>>,ANTLRError> {
		self.valueExpression_rec(0)
	}

	fn valueExpression_rec(&mut self, _p: isize)
	-> Result<Rc<ValueExpressionContextAll<'input>>,ANTLRError> {
		let recog = self;
		let _parentctx = recog.ctx.take();
		let _parentState = recog.base.get_state();
		let mut _localctx = ValueExpressionContextExt::new(_parentctx.clone(), recog.base.get_state());
		recog.base.enter_recursion_rule(_localctx.clone(), 178, RULE_valueExpression, _p);
	    let mut _localctx: Rc<ValueExpressionContextAll> = _localctx;
        let mut _prevctx = _localctx.clone();
		let _startState = 178;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {
			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(1920);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(252,&mut recog.base)? {
				1 =>{
					{
					let mut tmp = ValueExpressionDefaultContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();


					/*InvokeRule primaryExpression*/
					recog.base.set_state(1917);
					recog.primaryExpression_rec(0)?;

					}
				}
			,
				2 =>{
					{
					let mut tmp = ArithmeticUnaryContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(1918);
					if let ValueExpressionContextAll::ArithmeticUnaryContext(ctx) = cast_mut::<_,ValueExpressionContextAll >(&mut _localctx){
					ctx.operator = recog.base.input.lt(1).cloned(); } else {unreachable!("cant cast");} 
					_la = recog.base.input.la(1);
					if { !(((((_la - 372)) & !0x3f) == 0 && ((1usize << (_la - 372)) & ((1usize << (PLUS - 372)) | (1usize << (MINUS - 372)) | (1usize << (POSIX - 372)))) != 0)) } {
						let tmp = recog.err_handler.recover_inline(&mut recog.base)?;
						if let ValueExpressionContextAll::ArithmeticUnaryContext(ctx) = cast_mut::<_,ValueExpressionContextAll >(&mut _localctx){
						ctx.operator = Some(tmp); } else {unreachable!("cant cast");}  

					}
					else {
						if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
						recog.err_handler.report_match(&mut recog.base);
						recog.base.consume(&mut recog.err_handler);
					}
					/*InvokeRule valueExpression*/
					recog.base.set_state(1919);
					recog.valueExpression_rec(5)?;

					}
				}

				_ => {}
			}

			let tmp = recog.input.lt(-1).cloned();
			recog.ctx.as_ref().unwrap().set_stop(tmp);
			recog.base.set_state(1939);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(254,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					recog.trigger_exit_rule_event();
					_prevctx = _localctx.clone();
					{
					recog.base.set_state(1937);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(253,&mut recog.base)? {
						1 =>{
							{
							/*recRuleLabeledAltStartAction*/
							let mut tmp = ArithmeticBinaryContextExt::new(&**ValueExpressionContextExt::new(_parentctx.clone(), _parentState));
							if let ValueExpressionContextAll::ArithmeticBinaryContext(ctx) = cast_mut::<_,ValueExpressionContextAll >(&mut tmp){
								ctx.left = Some(_prevctx.clone());
							} else {unreachable!("cant cast");}
							recog.push_new_recursion_context(tmp.clone(), _startState, RULE_valueExpression);
							_localctx = tmp;
							recog.base.set_state(1922);
							if !({recog.precpred(None, 4)}) {
								Err(FailedPredicateError::new(&mut recog.base, Some("recog.precpred(None, 4)".to_owned()), None))?;
							}
							recog.base.set_state(1923);
							if let ValueExpressionContextAll::ArithmeticBinaryContext(ctx) = cast_mut::<_,ValueExpressionContextAll >(&mut _localctx){
							ctx.operator = recog.base.input.lt(1).cloned(); } else {unreachable!("cant cast");} 
							_la = recog.base.input.la(1);
							if { !(((((_la - 374)) & !0x3f) == 0 && ((1usize << (_la - 374)) & ((1usize << (ASTERISK - 374)) | (1usize << (SLASH - 374)) | (1usize << (PERCENT - 374)))) != 0)) } {
								let tmp = recog.err_handler.recover_inline(&mut recog.base)?;
								if let ValueExpressionContextAll::ArithmeticBinaryContext(ctx) = cast_mut::<_,ValueExpressionContextAll >(&mut _localctx){
								ctx.operator = Some(tmp); } else {unreachable!("cant cast");}  

							}
							else {
								if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
								recog.err_handler.report_match(&mut recog.base);
								recog.base.consume(&mut recog.err_handler);
							}
							/*InvokeRule valueExpression*/
							recog.base.set_state(1924);
							let tmp = recog.valueExpression_rec(5)?;
							if let ValueExpressionContextAll::ArithmeticBinaryContext(ctx) = cast_mut::<_,ValueExpressionContextAll >(&mut _localctx){
							ctx.right = Some(tmp.clone()); } else {unreachable!("cant cast");}  

							}
						}
					,
						2 =>{
							{
							/*recRuleLabeledAltStartAction*/
							let mut tmp = ArithmeticBinaryContextExt::new(&**ValueExpressionContextExt::new(_parentctx.clone(), _parentState));
							if let ValueExpressionContextAll::ArithmeticBinaryContext(ctx) = cast_mut::<_,ValueExpressionContextAll >(&mut tmp){
								ctx.left = Some(_prevctx.clone());
							} else {unreachable!("cant cast");}
							recog.push_new_recursion_context(tmp.clone(), _startState, RULE_valueExpression);
							_localctx = tmp;
							recog.base.set_state(1925);
							if !({recog.precpred(None, 3)}) {
								Err(FailedPredicateError::new(&mut recog.base, Some("recog.precpred(None, 3)".to_owned()), None))?;
							}
							recog.base.set_state(1926);
							if let ValueExpressionContextAll::ArithmeticBinaryContext(ctx) = cast_mut::<_,ValueExpressionContextAll >(&mut _localctx){
							ctx.operator = recog.base.input.lt(1).cloned(); } else {unreachable!("cant cast");} 
							_la = recog.base.input.la(1);
							if { !(_la==PLUS || _la==MINUS) } {
								let tmp = recog.err_handler.recover_inline(&mut recog.base)?;
								if let ValueExpressionContextAll::ArithmeticBinaryContext(ctx) = cast_mut::<_,ValueExpressionContextAll >(&mut _localctx){
								ctx.operator = Some(tmp); } else {unreachable!("cant cast");}  

							}
							else {
								if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
								recog.err_handler.report_match(&mut recog.base);
								recog.base.consume(&mut recog.err_handler);
							}
							/*InvokeRule valueExpression*/
							recog.base.set_state(1927);
							let tmp = recog.valueExpression_rec(4)?;
							if let ValueExpressionContextAll::ArithmeticBinaryContext(ctx) = cast_mut::<_,ValueExpressionContextAll >(&mut _localctx){
							ctx.right = Some(tmp.clone()); } else {unreachable!("cant cast");}  

							}
						}
					,
						3 =>{
							{
							/*recRuleLabeledAltStartAction*/
							let mut tmp = ConcatenationContextExt::new(&**ValueExpressionContextExt::new(_parentctx.clone(), _parentState));
							if let ValueExpressionContextAll::ConcatenationContext(ctx) = cast_mut::<_,ValueExpressionContextAll >(&mut tmp){
								ctx.left = Some(_prevctx.clone());
							} else {unreachable!("cant cast");}
							recog.push_new_recursion_context(tmp.clone(), _startState, RULE_valueExpression);
							_localctx = tmp;
							recog.base.set_state(1928);
							if !({recog.precpred(None, 2)}) {
								Err(FailedPredicateError::new(&mut recog.base, Some("recog.precpred(None, 2)".to_owned()), None))?;
							}
							recog.base.set_state(1929);
							recog.base.match_token(CONCAT,&mut recog.err_handler)?;

							/*InvokeRule valueExpression*/
							recog.base.set_state(1930);
							let tmp = recog.valueExpression_rec(3)?;
							if let ValueExpressionContextAll::ConcatenationContext(ctx) = cast_mut::<_,ValueExpressionContextAll >(&mut _localctx){
							ctx.right = Some(tmp.clone()); } else {unreachable!("cant cast");}  

							}
						}
					,
						4 =>{
							{
							/*recRuleLabeledAltStartAction*/
							let mut tmp = ArithmeticBinaryContextExt::new(&**ValueExpressionContextExt::new(_parentctx.clone(), _parentState));
							if let ValueExpressionContextAll::ArithmeticBinaryContext(ctx) = cast_mut::<_,ValueExpressionContextAll >(&mut tmp){
								ctx.left = Some(_prevctx.clone());
							} else {unreachable!("cant cast");}
							recog.push_new_recursion_context(tmp.clone(), _startState, RULE_valueExpression);
							_localctx = tmp;
							recog.base.set_state(1931);
							if !({recog.precpred(None, 1)}) {
								Err(FailedPredicateError::new(&mut recog.base, Some("recog.precpred(None, 1)".to_owned()), None))?;
							}
							recog.base.set_state(1932);
							let tmp = recog.base.match_token(BITWISE_SHIFT_LEFT,&mut recog.err_handler)?;
							if let ValueExpressionContextAll::ArithmeticBinaryContext(ctx) = cast_mut::<_,ValueExpressionContextAll >(&mut _localctx){
							ctx.operator = Some(tmp); } else {unreachable!("cant cast");}  

							/*InvokeRule valueExpression*/
							recog.base.set_state(1933);
							let tmp = recog.valueExpression_rec(2)?;
							if let ValueExpressionContextAll::ArithmeticBinaryContext(ctx) = cast_mut::<_,ValueExpressionContextAll >(&mut _localctx){
							ctx.right = Some(tmp.clone()); } else {unreachable!("cant cast");}  

							}
						}
					,
						5 =>{
							{
							/*recRuleLabeledAltStartAction*/
							let mut tmp = AtTimeZoneContextExt::new(&**ValueExpressionContextExt::new(_parentctx.clone(), _parentState));
							recog.push_new_recursion_context(tmp.clone(), _startState, RULE_valueExpression);
							_localctx = tmp;
							recog.base.set_state(1934);
							if !({recog.precpred(None, 6)}) {
								Err(FailedPredicateError::new(&mut recog.base, Some("recog.precpred(None, 6)".to_owned()), None))?;
							}
							recog.base.set_state(1935);
							recog.base.match_token(AT,&mut recog.err_handler)?;

							/*InvokeRule timeZoneSpecifier*/
							recog.base.set_state(1936);
							recog.timeZoneSpecifier()?;

							}
						}

						_ => {}
					}
					} 
				}
				recog.base.set_state(1941);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(254,&mut recog.base)?;
			}
			}
			Ok(())
		})();
		match result {
		Ok(_) => {},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re)=>{
			//_localctx.exception = re;
			recog.err_handler.report_error(&mut recog.base, re);
	        recog.err_handler.recover(&mut recog.base, re)?;}
		}
		recog.base.unroll_recursion_context(_parentctx);

		Ok(_localctx)
	}
}
//------------------- primaryExpression ----------------
#[derive(Debug)]
pub enum PrimaryExpressionContextAll<'input>{
	DereferenceContext(DereferenceContext<'input>),
	TypeConstructorContext(TypeConstructorContext<'input>),
	JsonValueContext(JsonValueContext<'input>),
	SubstringContext(SubstringContext<'input>),
	CountStarContext(CountStarContext<'input>),
	CastContext(CastContext<'input>),
	LambdaContext(LambdaContext<'input>),
	ParenthesizedExpressionContext(ParenthesizedExpressionContext<'input>),
	TrimContext(TrimContext<'input>),
	ArrayContext(ArrayContext<'input>),
	NormalizeContext(NormalizeContext<'input>),
	JsonObjectContext(JsonObjectContext<'input>),
	IntervalLiteralContext(IntervalLiteralContext<'input>),
	NumericLiteralContext(NumericLiteralContext<'input>),
	BooleanLiteralContext(BooleanLiteralContext<'input>),
	JsonArrayContext(JsonArrayContext<'input>),
	SimpleCaseContext(SimpleCaseContext<'input>),
	ColumnReferenceContext(ColumnReferenceContext<'input>),
	NullLiteralContext(NullLiteralContext<'input>),
	RowConstructorContext(RowConstructorContext<'input>),
	SubscriptContext(SubscriptContext<'input>),
	JsonExistsContext(JsonExistsContext<'input>),
	SubqueryExpressionContext(SubqueryExpressionContext<'input>),
	BinaryLiteralContext(BinaryLiteralContext<'input>),
	JsonQueryContext(JsonQueryContext<'input>),
	ExtractContext(ExtractContext<'input>),
	MeasureContext(MeasureContext<'input>),
	StringLiteralContext(StringLiteralContext<'input>),
	ArrayConstructorContext(ArrayConstructorContext<'input>),
	FunctionCallContext(FunctionCallContext<'input>),
	VariableContext(VariableContext<'input>),
	ExistsContext(ExistsContext<'input>),
	PositionContext(PositionContext<'input>),
	ListaggContext(ListaggContext<'input>),
	SearchedCaseContext(SearchedCaseContext<'input>),
Error(PrimaryExpressionContext<'input>)
}
antlr_rust::tid!{PrimaryExpressionContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for PrimaryExpressionContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for PrimaryExpressionContextAll<'input>{}

impl<'input> Deref for PrimaryExpressionContextAll<'input>{
	type Target = dyn PrimaryExpressionContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use PrimaryExpressionContextAll::*;
		match self{
			DereferenceContext(inner) => inner,
			TypeConstructorContext(inner) => inner,
			JsonValueContext(inner) => inner,
			SubstringContext(inner) => inner,
			CountStarContext(inner) => inner,
			CastContext(inner) => inner,
			LambdaContext(inner) => inner,
			ParenthesizedExpressionContext(inner) => inner,
			TrimContext(inner) => inner,
			ArrayContext(inner) => inner,
			NormalizeContext(inner) => inner,
			JsonObjectContext(inner) => inner,
			IntervalLiteralContext(inner) => inner,
			NumericLiteralContext(inner) => inner,
			BooleanLiteralContext(inner) => inner,
			JsonArrayContext(inner) => inner,
			SimpleCaseContext(inner) => inner,
			ColumnReferenceContext(inner) => inner,
			NullLiteralContext(inner) => inner,
			RowConstructorContext(inner) => inner,
			SubscriptContext(inner) => inner,
			JsonExistsContext(inner) => inner,
			SubqueryExpressionContext(inner) => inner,
			BinaryLiteralContext(inner) => inner,
			JsonQueryContext(inner) => inner,
			ExtractContext(inner) => inner,
			MeasureContext(inner) => inner,
			StringLiteralContext(inner) => inner,
			ArrayConstructorContext(inner) => inner,
			FunctionCallContext(inner) => inner,
			VariableContext(inner) => inner,
			ExistsContext(inner) => inner,
			PositionContext(inner) => inner,
			ListaggContext(inner) => inner,
			SearchedCaseContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrimaryExpressionContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrimaryExpressionContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type PrimaryExpressionContext<'input> = BaseParserRuleContext<'input,PrimaryExpressionContextExt<'input>>;

#[derive(Clone)]
pub struct PrimaryExpressionContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PrimaryExpressionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrimaryExpressionContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrimaryExpressionContext<'input>{
}

impl<'input> CustomRuleContext<'input> for PrimaryExpressionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}
antlr_rust::tid!{PrimaryExpressionContextExt<'a>}

impl<'input> PrimaryExpressionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PrimaryExpressionContextAll<'input>> {
		Rc::new(
		PrimaryExpressionContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PrimaryExpressionContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait PrimaryExpressionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PrimaryExpressionContextExt<'input>>{


}

impl<'input> PrimaryExpressionContextAttrs<'input> for PrimaryExpressionContext<'input>{}

pub type DereferenceContext<'input> = BaseParserRuleContext<'input,DereferenceContextExt<'input>>;

pub trait DereferenceContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DOT
	/// Returns `None` if there is no child corresponding to token DOT
	fn DOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DOT, 0)
	}
	fn primaryExpression(&self) -> Option<Rc<PrimaryExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn columnNameComponent(&self) -> Option<Rc<ColumnNameComponentContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> DereferenceContextAttrs<'input> for DereferenceContext<'input>{}

pub struct DereferenceContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub base_: Option<Rc<PrimaryExpressionContextAll<'input>>>,
	pub fieldName: Option<Rc<ColumnNameComponentContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DereferenceContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DereferenceContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DereferenceContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_dereference(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_dereference(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DereferenceContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_dereference(self);
	}
}

impl<'input> CustomRuleContext<'input> for DereferenceContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for DereferenceContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for DereferenceContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for DereferenceContext<'input> {}

impl<'input> DereferenceContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::DereferenceContext(
				BaseParserRuleContext::copy_from(ctx,DereferenceContextExt{
        			base_:None, fieldName:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type TypeConstructorContext<'input> = BaseParserRuleContext<'input,TypeConstructorContextExt<'input>>;

pub trait TypeConstructorContextAttrs<'input>: TrinoParserContext<'input>{
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn string(&self) -> Option<Rc<StringContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token DOUBLE
	/// Returns `None` if there is no child corresponding to token DOUBLE
	fn DOUBLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DOUBLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token PRECISION
	/// Returns `None` if there is no child corresponding to token PRECISION
	fn PRECISION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(PRECISION, 0)
	}
}

impl<'input> TypeConstructorContextAttrs<'input> for TypeConstructorContext<'input>{}

pub struct TypeConstructorContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{TypeConstructorContextExt<'a>}

impl<'input> TrinoParserContext<'input> for TypeConstructorContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TypeConstructorContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_typeConstructor(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_typeConstructor(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TypeConstructorContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_typeConstructor(self);
	}
}

impl<'input> CustomRuleContext<'input> for TypeConstructorContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for TypeConstructorContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for TypeConstructorContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for TypeConstructorContext<'input> {}

impl<'input> TypeConstructorContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::TypeConstructorContext(
				BaseParserRuleContext::copy_from(ctx,TypeConstructorContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type JsonValueContext<'input> = BaseParserRuleContext<'input,JsonValueContextExt<'input>>;

pub trait JsonValueContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token JSON_VALUE
	/// Returns `None` if there is no child corresponding to token JSON_VALUE
	fn JSON_VALUE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(JSON_VALUE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn jsonPathInvocation(&self) -> Option<Rc<JsonPathInvocationContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RETURNING
	/// Returns `None` if there is no child corresponding to token RETURNING
	fn RETURNING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RETURNING, 0)
	}
	fn type_(&self) -> Option<Rc<Type_ContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token ON in current rule
	fn ON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token ON, starting from 0.
	/// Returns `None` if number of children corresponding to token ON is less or equal than `i`.
	fn ON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ON, i)
	}
	/// Retrieves first TerminalNode corresponding to token EMPTY
	/// Returns `None` if there is no child corresponding to token EMPTY
	fn EMPTY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EMPTY, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ERROR
	/// Returns `None` if there is no child corresponding to token ERROR
	fn ERROR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ERROR, 0)
	}
	fn jsonValueBehavior_all(&self) ->  Vec<Rc<JsonValueBehaviorContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn jsonValueBehavior(&self, i: usize) -> Option<Rc<JsonValueBehaviorContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
}

impl<'input> JsonValueContextAttrs<'input> for JsonValueContext<'input>{}

pub struct JsonValueContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub emptyBehavior: Option<Rc<JsonValueBehaviorContextAll<'input>>>,
	pub errorBehavior: Option<Rc<JsonValueBehaviorContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{JsonValueContextExt<'a>}

impl<'input> TrinoParserContext<'input> for JsonValueContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JsonValueContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_jsonValue(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_jsonValue(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JsonValueContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_jsonValue(self);
	}
}

impl<'input> CustomRuleContext<'input> for JsonValueContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for JsonValueContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for JsonValueContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for JsonValueContext<'input> {}

impl<'input> JsonValueContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::JsonValueContext(
				BaseParserRuleContext::copy_from(ctx,JsonValueContextExt{
        			emptyBehavior:None, errorBehavior:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SubstringContext<'input> = BaseParserRuleContext<'input,SubstringContextExt<'input>>;

pub trait SubstringContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token SUBSTRING
	/// Returns `None` if there is no child corresponding to token SUBSTRING
	fn SUBSTRING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SUBSTRING, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn valueExpression_all(&self) ->  Vec<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn valueExpression(&self, i: usize) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token FROM
	/// Returns `None` if there is no child corresponding to token FROM
	fn FROM(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(FROM, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token FOR
	/// Returns `None` if there is no child corresponding to token FOR
	fn FOR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(FOR, 0)
	}
}

impl<'input> SubstringContextAttrs<'input> for SubstringContext<'input>{}

pub struct SubstringContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SubstringContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SubstringContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SubstringContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_substring(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_substring(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SubstringContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_substring(self);
	}
}

impl<'input> CustomRuleContext<'input> for SubstringContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for SubstringContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for SubstringContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for SubstringContext<'input> {}

impl<'input> SubstringContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::SubstringContext(
				BaseParserRuleContext::copy_from(ctx,SubstringContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type CountStarContext<'input> = BaseParserRuleContext<'input,CountStarContextExt<'input>>;

pub trait CountStarContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token COUNT
	/// Returns `None` if there is no child corresponding to token COUNT
	fn COUNT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COUNT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ASTERISK
	/// Returns `None` if there is no child corresponding to token ASTERISK
	fn ASTERISK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ASTERISK, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn functionCallTail(&self) -> Option<Rc<FunctionCallTailContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> CountStarContextAttrs<'input> for CountStarContext<'input>{}

pub struct CountStarContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{CountStarContextExt<'a>}

impl<'input> TrinoParserContext<'input> for CountStarContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CountStarContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_countStar(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_countStar(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CountStarContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_countStar(self);
	}
}

impl<'input> CustomRuleContext<'input> for CountStarContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for CountStarContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for CountStarContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for CountStarContext<'input> {}

impl<'input> CountStarContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::CountStarContext(
				BaseParserRuleContext::copy_from(ctx,CountStarContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type CastContext<'input> = BaseParserRuleContext<'input,CastContextExt<'input>>;

pub trait CastContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token CAST
	/// Returns `None` if there is no child corresponding to token CAST
	fn CAST(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CAST, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token AS
	/// Returns `None` if there is no child corresponding to token AS
	fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(AS, 0)
	}
	fn type_(&self) -> Option<Rc<Type_ContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TRY_CAST
	/// Returns `None` if there is no child corresponding to token TRY_CAST
	fn TRY_CAST(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TRY_CAST, 0)
	}
}

impl<'input> CastContextAttrs<'input> for CastContext<'input>{}

pub struct CastContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{CastContextExt<'a>}

impl<'input> TrinoParserContext<'input> for CastContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CastContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_cast(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_cast(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CastContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_cast(self);
	}
}

impl<'input> CustomRuleContext<'input> for CastContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for CastContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for CastContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for CastContext<'input> {}

impl<'input> CastContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::CastContext(
				BaseParserRuleContext::copy_from(ctx,CastContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type LambdaContext<'input> = BaseParserRuleContext<'input,LambdaContextExt<'input>>;

pub trait LambdaContextAttrs<'input>: TrinoParserContext<'input>{
	fn identifier_all(&self) ->  Vec<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn identifier(&self, i: usize) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> LambdaContextAttrs<'input> for LambdaContext<'input>{}

pub struct LambdaContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{LambdaContextExt<'a>}

impl<'input> TrinoParserContext<'input> for LambdaContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for LambdaContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_lambda(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_lambda(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for LambdaContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_lambda(self);
	}
}

impl<'input> CustomRuleContext<'input> for LambdaContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for LambdaContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for LambdaContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for LambdaContext<'input> {}

impl<'input> LambdaContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::LambdaContext(
				BaseParserRuleContext::copy_from(ctx,LambdaContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ParenthesizedExpressionContext<'input> = BaseParserRuleContext<'input,ParenthesizedExpressionContextExt<'input>>;

pub trait ParenthesizedExpressionContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
}

impl<'input> ParenthesizedExpressionContextAttrs<'input> for ParenthesizedExpressionContext<'input>{}

pub struct ParenthesizedExpressionContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ParenthesizedExpressionContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ParenthesizedExpressionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ParenthesizedExpressionContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_parenthesizedExpression(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_parenthesizedExpression(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ParenthesizedExpressionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_parenthesizedExpression(self);
	}
}

impl<'input> CustomRuleContext<'input> for ParenthesizedExpressionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for ParenthesizedExpressionContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for ParenthesizedExpressionContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for ParenthesizedExpressionContext<'input> {}

impl<'input> ParenthesizedExpressionContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::ParenthesizedExpressionContext(
				BaseParserRuleContext::copy_from(ctx,ParenthesizedExpressionContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type TrimContext<'input> = BaseParserRuleContext<'input,TrimContextExt<'input>>;

pub trait TrimContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token TRIM
	/// Returns `None` if there is no child corresponding to token TRIM
	fn TRIM(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TRIM, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn valueExpression_all(&self) ->  Vec<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn valueExpression(&self, i: usize) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token FROM
	/// Returns `None` if there is no child corresponding to token FROM
	fn FROM(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(FROM, 0)
	}
	fn trimsSpecification(&self) -> Option<Rc<TrimsSpecificationContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> TrimContextAttrs<'input> for TrimContext<'input>{}

pub struct TrimContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub trimChar: Option<Rc<ValueExpressionContextAll<'input>>>,
	pub trimSource: Option<Rc<ValueExpressionContextAll<'input>>>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{TrimContextExt<'a>}

impl<'input> TrinoParserContext<'input> for TrimContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TrimContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_trim(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_trim(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TrimContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_trim(self);
	}
}

impl<'input> CustomRuleContext<'input> for TrimContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for TrimContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for TrimContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for TrimContext<'input> {}

impl<'input> TrimContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::TrimContext(
				BaseParserRuleContext::copy_from(ctx,TrimContextExt{
					tail:None, 
        			trimChar:None, trimSource:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ArrayContext<'input> = BaseParserRuleContext<'input,ArrayContextExt<'input>>;

pub trait ArrayContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token LBRACKET
	/// Returns `None` if there is no child corresponding to token LBRACKET
	fn LBRACKET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LBRACKET, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RBRACKET
	/// Returns `None` if there is no child corresponding to token RBRACKET
	fn RBRACKET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RBRACKET, 0)
	}
	fn expression_all(&self) ->  Vec<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn expression(&self, i: usize) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> ArrayContextAttrs<'input> for ArrayContext<'input>{}

pub struct ArrayContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ArrayContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ArrayContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ArrayContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_array(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_array(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ArrayContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_array(self);
	}
}

impl<'input> CustomRuleContext<'input> for ArrayContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for ArrayContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for ArrayContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for ArrayContext<'input> {}

impl<'input> ArrayContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::ArrayContext(
				BaseParserRuleContext::copy_from(ctx,ArrayContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type NormalizeContext<'input> = BaseParserRuleContext<'input,NormalizeContextExt<'input>>;

pub trait NormalizeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token NORMALIZE
	/// Returns `None` if there is no child corresponding to token NORMALIZE
	fn NORMALIZE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NORMALIZE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn valueExpression(&self) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
	fn normalForm(&self) -> Option<Rc<NormalFormContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> NormalizeContextAttrs<'input> for NormalizeContext<'input>{}

pub struct NormalizeContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{NormalizeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for NormalizeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for NormalizeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_normalize(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_normalize(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for NormalizeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_normalize(self);
	}
}

impl<'input> CustomRuleContext<'input> for NormalizeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for NormalizeContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for NormalizeContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for NormalizeContext<'input> {}

impl<'input> NormalizeContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::NormalizeContext(
				BaseParserRuleContext::copy_from(ctx,NormalizeContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type JsonObjectContext<'input> = BaseParserRuleContext<'input,JsonObjectContextExt<'input>>;

pub trait JsonObjectContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token JSON_OBJECT
	/// Returns `None` if there is no child corresponding to token JSON_OBJECT
	fn JSON_OBJECT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(JSON_OBJECT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn jsonObjectMember_all(&self) ->  Vec<Rc<JsonObjectMemberContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn jsonObjectMember(&self, i: usize) -> Option<Rc<JsonObjectMemberContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token RETURNING
	/// Returns `None` if there is no child corresponding to token RETURNING
	fn RETURNING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RETURNING, 0)
	}
	fn type_(&self) -> Option<Rc<Type_ContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
	/// Retrieves all `TerminalNode`s corresponding to token NULL in current rule
	fn NULL_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token NULL, starting from 0.
	/// Returns `None` if number of children corresponding to token NULL is less or equal than `i`.
	fn NULL(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NULL, i)
	}
	/// Retrieves first TerminalNode corresponding to token ON
	/// Returns `None` if there is no child corresponding to token ON
	fn ON(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ON, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ABSENT
	/// Returns `None` if there is no child corresponding to token ABSENT
	fn ABSENT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ABSENT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token WITH
	/// Returns `None` if there is no child corresponding to token WITH
	fn WITH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(WITH, 0)
	}
	/// Retrieves first TerminalNode corresponding to token UNIQUE
	/// Returns `None` if there is no child corresponding to token UNIQUE
	fn UNIQUE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(UNIQUE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token WITHOUT
	/// Returns `None` if there is no child corresponding to token WITHOUT
	fn WITHOUT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(WITHOUT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token FORMAT
	/// Returns `None` if there is no child corresponding to token FORMAT
	fn FORMAT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(FORMAT, 0)
	}
	fn jsonRepresentation(&self) -> Option<Rc<JsonRepresentationContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token KEYS
	/// Returns `None` if there is no child corresponding to token KEYS
	fn KEYS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(KEYS, 0)
	}
}

impl<'input> JsonObjectContextAttrs<'input> for JsonObjectContext<'input>{}

pub struct JsonObjectContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{JsonObjectContextExt<'a>}

impl<'input> TrinoParserContext<'input> for JsonObjectContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JsonObjectContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_jsonObject(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_jsonObject(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JsonObjectContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_jsonObject(self);
	}
}

impl<'input> CustomRuleContext<'input> for JsonObjectContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for JsonObjectContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for JsonObjectContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for JsonObjectContext<'input> {}

impl<'input> JsonObjectContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::JsonObjectContext(
				BaseParserRuleContext::copy_from(ctx,JsonObjectContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type IntervalLiteralContext<'input> = BaseParserRuleContext<'input,IntervalLiteralContextExt<'input>>;

pub trait IntervalLiteralContextAttrs<'input>: TrinoParserContext<'input>{
	fn interval(&self) -> Option<Rc<IntervalContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> IntervalLiteralContextAttrs<'input> for IntervalLiteralContext<'input>{}

pub struct IntervalLiteralContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{IntervalLiteralContextExt<'a>}

impl<'input> TrinoParserContext<'input> for IntervalLiteralContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for IntervalLiteralContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_intervalLiteral(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_intervalLiteral(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for IntervalLiteralContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_intervalLiteral(self);
	}
}

impl<'input> CustomRuleContext<'input> for IntervalLiteralContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for IntervalLiteralContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for IntervalLiteralContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for IntervalLiteralContext<'input> {}

impl<'input> IntervalLiteralContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::IntervalLiteralContext(
				BaseParserRuleContext::copy_from(ctx,IntervalLiteralContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type NumericLiteralContext<'input> = BaseParserRuleContext<'input,NumericLiteralContextExt<'input>>;

pub trait NumericLiteralContextAttrs<'input>: TrinoParserContext<'input>{
	fn number(&self) -> Option<Rc<NumberContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> NumericLiteralContextAttrs<'input> for NumericLiteralContext<'input>{}

pub struct NumericLiteralContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{NumericLiteralContextExt<'a>}

impl<'input> TrinoParserContext<'input> for NumericLiteralContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for NumericLiteralContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_numericLiteral(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_numericLiteral(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for NumericLiteralContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_numericLiteral(self);
	}
}

impl<'input> CustomRuleContext<'input> for NumericLiteralContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for NumericLiteralContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for NumericLiteralContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for NumericLiteralContext<'input> {}

impl<'input> NumericLiteralContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::NumericLiteralContext(
				BaseParserRuleContext::copy_from(ctx,NumericLiteralContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type BooleanLiteralContext<'input> = BaseParserRuleContext<'input,BooleanLiteralContextExt<'input>>;

pub trait BooleanLiteralContextAttrs<'input>: TrinoParserContext<'input>{
	fn booleanValue(&self) -> Option<Rc<BooleanValueContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> BooleanLiteralContextAttrs<'input> for BooleanLiteralContext<'input>{}

pub struct BooleanLiteralContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{BooleanLiteralContextExt<'a>}

impl<'input> TrinoParserContext<'input> for BooleanLiteralContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for BooleanLiteralContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_booleanLiteral(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_booleanLiteral(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for BooleanLiteralContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_booleanLiteral(self);
	}
}

impl<'input> CustomRuleContext<'input> for BooleanLiteralContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for BooleanLiteralContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for BooleanLiteralContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for BooleanLiteralContext<'input> {}

impl<'input> BooleanLiteralContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::BooleanLiteralContext(
				BaseParserRuleContext::copy_from(ctx,BooleanLiteralContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type JsonArrayContext<'input> = BaseParserRuleContext<'input,JsonArrayContextExt<'input>>;

pub trait JsonArrayContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token JSON_ARRAY
	/// Returns `None` if there is no child corresponding to token JSON_ARRAY
	fn JSON_ARRAY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(JSON_ARRAY, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn jsonValueExpression_all(&self) ->  Vec<Rc<JsonValueExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn jsonValueExpression(&self, i: usize) -> Option<Rc<JsonValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token RETURNING
	/// Returns `None` if there is no child corresponding to token RETURNING
	fn RETURNING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RETURNING, 0)
	}
	fn type_(&self) -> Option<Rc<Type_ContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
	/// Retrieves all `TerminalNode`s corresponding to token NULL in current rule
	fn NULL_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token NULL, starting from 0.
	/// Returns `None` if number of children corresponding to token NULL is less or equal than `i`.
	fn NULL(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NULL, i)
	}
	/// Retrieves first TerminalNode corresponding to token ON
	/// Returns `None` if there is no child corresponding to token ON
	fn ON(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ON, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ABSENT
	/// Returns `None` if there is no child corresponding to token ABSENT
	fn ABSENT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ABSENT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token FORMAT
	/// Returns `None` if there is no child corresponding to token FORMAT
	fn FORMAT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(FORMAT, 0)
	}
	fn jsonRepresentation(&self) -> Option<Rc<JsonRepresentationContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> JsonArrayContextAttrs<'input> for JsonArrayContext<'input>{}

pub struct JsonArrayContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{JsonArrayContextExt<'a>}

impl<'input> TrinoParserContext<'input> for JsonArrayContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JsonArrayContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_jsonArray(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_jsonArray(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JsonArrayContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_jsonArray(self);
	}
}

impl<'input> CustomRuleContext<'input> for JsonArrayContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for JsonArrayContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for JsonArrayContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for JsonArrayContext<'input> {}

impl<'input> JsonArrayContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::JsonArrayContext(
				BaseParserRuleContext::copy_from(ctx,JsonArrayContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SimpleCaseContext<'input> = BaseParserRuleContext<'input,SimpleCaseContextExt<'input>>;

pub trait SimpleCaseContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token CASE
	/// Returns `None` if there is no child corresponding to token CASE
	fn CASE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CASE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token END
	/// Returns `None` if there is no child corresponding to token END
	fn END(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(END, 0)
	}
	fn expression_all(&self) ->  Vec<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn expression(&self, i: usize) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	fn whenClause_all(&self) ->  Vec<Rc<WhenClauseContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn whenClause(&self, i: usize) -> Option<Rc<WhenClauseContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token ELSE
	/// Returns `None` if there is no child corresponding to token ELSE
	fn ELSE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ELSE, 0)
	}
}

impl<'input> SimpleCaseContextAttrs<'input> for SimpleCaseContext<'input>{}

pub struct SimpleCaseContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub operand: Option<Rc<ExpressionContextAll<'input>>>,
	pub elseExpression: Option<Rc<ExpressionContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SimpleCaseContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SimpleCaseContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SimpleCaseContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_simpleCase(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_simpleCase(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SimpleCaseContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_simpleCase(self);
	}
}

impl<'input> CustomRuleContext<'input> for SimpleCaseContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for SimpleCaseContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for SimpleCaseContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for SimpleCaseContext<'input> {}

impl<'input> SimpleCaseContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::SimpleCaseContext(
				BaseParserRuleContext::copy_from(ctx,SimpleCaseContextExt{
        			operand:None, elseExpression:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ColumnReferenceContext<'input> = BaseParserRuleContext<'input,ColumnReferenceContextExt<'input>>;

pub trait ColumnReferenceContextAttrs<'input>: TrinoParserContext<'input>{
	fn columnName(&self) -> Option<Rc<ColumnNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> ColumnReferenceContextAttrs<'input> for ColumnReferenceContext<'input>{}

pub struct ColumnReferenceContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ColumnReferenceContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ColumnReferenceContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ColumnReferenceContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_columnReference(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_columnReference(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ColumnReferenceContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_columnReference(self);
	}
}

impl<'input> CustomRuleContext<'input> for ColumnReferenceContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for ColumnReferenceContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for ColumnReferenceContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for ColumnReferenceContext<'input> {}

impl<'input> ColumnReferenceContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::ColumnReferenceContext(
				BaseParserRuleContext::copy_from(ctx,ColumnReferenceContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type NullLiteralContext<'input> = BaseParserRuleContext<'input,NullLiteralContextExt<'input>>;

pub trait NullLiteralContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token NULL
	/// Returns `None` if there is no child corresponding to token NULL
	fn NULL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NULL, 0)
	}
}

impl<'input> NullLiteralContextAttrs<'input> for NullLiteralContext<'input>{}

pub struct NullLiteralContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{NullLiteralContextExt<'a>}

impl<'input> TrinoParserContext<'input> for NullLiteralContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for NullLiteralContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_nullLiteral(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_nullLiteral(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for NullLiteralContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_nullLiteral(self);
	}
}

impl<'input> CustomRuleContext<'input> for NullLiteralContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for NullLiteralContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for NullLiteralContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for NullLiteralContext<'input> {}

impl<'input> NullLiteralContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::NullLiteralContext(
				BaseParserRuleContext::copy_from(ctx,NullLiteralContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type RowConstructorContext<'input> = BaseParserRuleContext<'input,RowConstructorContextExt<'input>>;

pub trait RowConstructorContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn expression_all(&self) ->  Vec<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn expression(&self, i: usize) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
	/// Retrieves first TerminalNode corresponding to token ROW
	/// Returns `None` if there is no child corresponding to token ROW
	fn ROW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ROW, 0)
	}
}

impl<'input> RowConstructorContextAttrs<'input> for RowConstructorContext<'input>{}

pub struct RowConstructorContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{RowConstructorContextExt<'a>}

impl<'input> TrinoParserContext<'input> for RowConstructorContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RowConstructorContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_rowConstructor(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_rowConstructor(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RowConstructorContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_rowConstructor(self);
	}
}

impl<'input> CustomRuleContext<'input> for RowConstructorContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for RowConstructorContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for RowConstructorContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for RowConstructorContext<'input> {}

impl<'input> RowConstructorContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::RowConstructorContext(
				BaseParserRuleContext::copy_from(ctx,RowConstructorContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SubscriptContext<'input> = BaseParserRuleContext<'input,SubscriptContextExt<'input>>;

pub trait SubscriptContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token LBRACKET
	/// Returns `None` if there is no child corresponding to token LBRACKET
	fn LBRACKET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LBRACKET, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RBRACKET
	/// Returns `None` if there is no child corresponding to token RBRACKET
	fn RBRACKET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RBRACKET, 0)
	}
	fn primaryExpression(&self) -> Option<Rc<PrimaryExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn valueExpression(&self) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> SubscriptContextAttrs<'input> for SubscriptContext<'input>{}

pub struct SubscriptContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub value: Option<Rc<PrimaryExpressionContextAll<'input>>>,
	pub index: Option<Rc<ValueExpressionContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SubscriptContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SubscriptContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SubscriptContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_subscript(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_subscript(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SubscriptContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_subscript(self);
	}
}

impl<'input> CustomRuleContext<'input> for SubscriptContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for SubscriptContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for SubscriptContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for SubscriptContext<'input> {}

impl<'input> SubscriptContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::SubscriptContext(
				BaseParserRuleContext::copy_from(ctx,SubscriptContextExt{
        			value:None, index:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type JsonExistsContext<'input> = BaseParserRuleContext<'input,JsonExistsContextExt<'input>>;

pub trait JsonExistsContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token JSON_EXISTS
	/// Returns `None` if there is no child corresponding to token JSON_EXISTS
	fn JSON_EXISTS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(JSON_EXISTS, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn jsonPathInvocation(&self) -> Option<Rc<JsonPathInvocationContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn jsonExistsErrorBehavior(&self) -> Option<Rc<JsonExistsErrorBehaviorContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token ON
	/// Returns `None` if there is no child corresponding to token ON
	fn ON(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ON, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ERROR
	/// Returns `None` if there is no child corresponding to token ERROR
	fn ERROR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ERROR, 0)
	}
}

impl<'input> JsonExistsContextAttrs<'input> for JsonExistsContext<'input>{}

pub struct JsonExistsContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{JsonExistsContextExt<'a>}

impl<'input> TrinoParserContext<'input> for JsonExistsContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JsonExistsContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_jsonExists(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_jsonExists(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JsonExistsContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_jsonExists(self);
	}
}

impl<'input> CustomRuleContext<'input> for JsonExistsContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for JsonExistsContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for JsonExistsContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for JsonExistsContext<'input> {}

impl<'input> JsonExistsContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::JsonExistsContext(
				BaseParserRuleContext::copy_from(ctx,JsonExistsContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SubqueryExpressionContext<'input> = BaseParserRuleContext<'input,SubqueryExpressionContextExt<'input>>;

pub trait SubqueryExpressionContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn query(&self) -> Option<Rc<QueryContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
}

impl<'input> SubqueryExpressionContextAttrs<'input> for SubqueryExpressionContext<'input>{}

pub struct SubqueryExpressionContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SubqueryExpressionContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SubqueryExpressionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SubqueryExpressionContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_subqueryExpression(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_subqueryExpression(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SubqueryExpressionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_subqueryExpression(self);
	}
}

impl<'input> CustomRuleContext<'input> for SubqueryExpressionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for SubqueryExpressionContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for SubqueryExpressionContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for SubqueryExpressionContext<'input> {}

impl<'input> SubqueryExpressionContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::SubqueryExpressionContext(
				BaseParserRuleContext::copy_from(ctx,SubqueryExpressionContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type BinaryLiteralContext<'input> = BaseParserRuleContext<'input,BinaryLiteralContextExt<'input>>;

pub trait BinaryLiteralContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token BINARY_LITERAL
	/// Returns `None` if there is no child corresponding to token BINARY_LITERAL
	fn BINARY_LITERAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(BINARY_LITERAL, 0)
	}
}

impl<'input> BinaryLiteralContextAttrs<'input> for BinaryLiteralContext<'input>{}

pub struct BinaryLiteralContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{BinaryLiteralContextExt<'a>}

impl<'input> TrinoParserContext<'input> for BinaryLiteralContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for BinaryLiteralContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_binaryLiteral(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_binaryLiteral(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for BinaryLiteralContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_binaryLiteral(self);
	}
}

impl<'input> CustomRuleContext<'input> for BinaryLiteralContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for BinaryLiteralContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for BinaryLiteralContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for BinaryLiteralContext<'input> {}

impl<'input> BinaryLiteralContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::BinaryLiteralContext(
				BaseParserRuleContext::copy_from(ctx,BinaryLiteralContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type JsonQueryContext<'input> = BaseParserRuleContext<'input,JsonQueryContextExt<'input>>;

pub trait JsonQueryContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token JSON_QUERY
	/// Returns `None` if there is no child corresponding to token JSON_QUERY
	fn JSON_QUERY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(JSON_QUERY, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn jsonPathInvocation(&self) -> Option<Rc<JsonPathInvocationContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RETURNING
	/// Returns `None` if there is no child corresponding to token RETURNING
	fn RETURNING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RETURNING, 0)
	}
	fn type_(&self) -> Option<Rc<Type_ContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn jsonQueryWrapperBehavior(&self) -> Option<Rc<JsonQueryWrapperBehaviorContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token WRAPPER
	/// Returns `None` if there is no child corresponding to token WRAPPER
	fn WRAPPER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(WRAPPER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token QUOTES
	/// Returns `None` if there is no child corresponding to token QUOTES
	fn QUOTES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(QUOTES, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token ON in current rule
	fn ON_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token ON, starting from 0.
	/// Returns `None` if number of children corresponding to token ON is less or equal than `i`.
	fn ON(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ON, i)
	}
	/// Retrieves first TerminalNode corresponding to token EMPTY
	/// Returns `None` if there is no child corresponding to token EMPTY
	fn EMPTY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EMPTY, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ERROR
	/// Returns `None` if there is no child corresponding to token ERROR
	fn ERROR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ERROR, 0)
	}
	/// Retrieves first TerminalNode corresponding to token KEEP
	/// Returns `None` if there is no child corresponding to token KEEP
	fn KEEP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(KEEP, 0)
	}
	/// Retrieves first TerminalNode corresponding to token OMIT
	/// Returns `None` if there is no child corresponding to token OMIT
	fn OMIT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(OMIT, 0)
	}
	fn jsonQueryBehavior_all(&self) ->  Vec<Rc<JsonQueryBehaviorContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn jsonQueryBehavior(&self, i: usize) -> Option<Rc<JsonQueryBehaviorContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token FORMAT
	/// Returns `None` if there is no child corresponding to token FORMAT
	fn FORMAT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(FORMAT, 0)
	}
	fn jsonRepresentation(&self) -> Option<Rc<JsonRepresentationContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token SCALAR
	/// Returns `None` if there is no child corresponding to token SCALAR
	fn SCALAR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SCALAR, 0)
	}
	/// Retrieves first TerminalNode corresponding to token STRING_KW
	/// Returns `None` if there is no child corresponding to token STRING_KW
	fn STRING_KW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(STRING_KW, 0)
	}
}

impl<'input> JsonQueryContextAttrs<'input> for JsonQueryContext<'input>{}

pub struct JsonQueryContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub emptyBehavior: Option<Rc<JsonQueryBehaviorContextAll<'input>>>,
	pub errorBehavior: Option<Rc<JsonQueryBehaviorContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{JsonQueryContextExt<'a>}

impl<'input> TrinoParserContext<'input> for JsonQueryContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JsonQueryContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_jsonQuery(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_jsonQuery(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JsonQueryContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_jsonQuery(self);
	}
}

impl<'input> CustomRuleContext<'input> for JsonQueryContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for JsonQueryContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for JsonQueryContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for JsonQueryContext<'input> {}

impl<'input> JsonQueryContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::JsonQueryContext(
				BaseParserRuleContext::copy_from(ctx,JsonQueryContextExt{
        			emptyBehavior:None, errorBehavior:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ExtractContext<'input> = BaseParserRuleContext<'input,ExtractContextExt<'input>>;

pub trait ExtractContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token EXTRACT
	/// Returns `None` if there is no child corresponding to token EXTRACT
	fn EXTRACT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXTRACT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token FROM
	/// Returns `None` if there is no child corresponding to token FROM
	fn FROM(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(FROM, 0)
	}
	fn valueExpression(&self) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
}

impl<'input> ExtractContextAttrs<'input> for ExtractContext<'input>{}

pub struct ExtractContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ExtractContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ExtractContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ExtractContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_extract(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_extract(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ExtractContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_extract(self);
	}
}

impl<'input> CustomRuleContext<'input> for ExtractContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for ExtractContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for ExtractContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for ExtractContext<'input> {}

impl<'input> ExtractContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::ExtractContext(
				BaseParserRuleContext::copy_from(ctx,ExtractContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type MeasureContext<'input> = BaseParserRuleContext<'input,MeasureContextExt<'input>>;

pub trait MeasureContextAttrs<'input>: TrinoParserContext<'input>{
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn over(&self) -> Option<Rc<OverContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> MeasureContextAttrs<'input> for MeasureContext<'input>{}

pub struct MeasureContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{MeasureContextExt<'a>}

impl<'input> TrinoParserContext<'input> for MeasureContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for MeasureContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_measure(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_measure(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for MeasureContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_measure(self);
	}
}

impl<'input> CustomRuleContext<'input> for MeasureContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for MeasureContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for MeasureContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for MeasureContext<'input> {}

impl<'input> MeasureContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::MeasureContext(
				BaseParserRuleContext::copy_from(ctx,MeasureContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type StringLiteralContext<'input> = BaseParserRuleContext<'input,StringLiteralContextExt<'input>>;

pub trait StringLiteralContextAttrs<'input>: TrinoParserContext<'input>{
	fn string(&self) -> Option<Rc<StringContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> StringLiteralContextAttrs<'input> for StringLiteralContext<'input>{}

pub struct StringLiteralContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{StringLiteralContextExt<'a>}

impl<'input> TrinoParserContext<'input> for StringLiteralContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for StringLiteralContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_stringLiteral(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_stringLiteral(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for StringLiteralContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_stringLiteral(self);
	}
}

impl<'input> CustomRuleContext<'input> for StringLiteralContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for StringLiteralContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for StringLiteralContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for StringLiteralContext<'input> {}

impl<'input> StringLiteralContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::StringLiteralContext(
				BaseParserRuleContext::copy_from(ctx,StringLiteralContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ArrayConstructorContext<'input> = BaseParserRuleContext<'input,ArrayConstructorContextExt<'input>>;

pub trait ArrayConstructorContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ARRAY
	/// Returns `None` if there is no child corresponding to token ARRAY
	fn ARRAY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ARRAY, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LBRACKET
	/// Returns `None` if there is no child corresponding to token LBRACKET
	fn LBRACKET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LBRACKET, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RBRACKET
	/// Returns `None` if there is no child corresponding to token RBRACKET
	fn RBRACKET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RBRACKET, 0)
	}
	fn expression_all(&self) ->  Vec<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn expression(&self, i: usize) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> ArrayConstructorContextAttrs<'input> for ArrayConstructorContext<'input>{}

pub struct ArrayConstructorContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ArrayConstructorContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ArrayConstructorContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ArrayConstructorContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_arrayConstructor(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_arrayConstructor(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ArrayConstructorContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_arrayConstructor(self);
	}
}

impl<'input> CustomRuleContext<'input> for ArrayConstructorContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for ArrayConstructorContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for ArrayConstructorContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for ArrayConstructorContext<'input> {}

impl<'input> ArrayConstructorContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::ArrayConstructorContext(
				BaseParserRuleContext::copy_from(ctx,ArrayConstructorContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type FunctionCallContext<'input> = BaseParserRuleContext<'input,FunctionCallContextExt<'input>>;

pub trait FunctionCallContextAttrs<'input>: TrinoParserContext<'input>{
	fn functionCallHead(&self) -> Option<Rc<FunctionCallHeadContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn functionName(&self) -> Option<Rc<FunctionNameContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn functionCallTail(&self) -> Option<Rc<FunctionCallTailContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn functionExtraArguments(&self) -> Option<Rc<FunctionExtraArgumentsContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn callArgument_all(&self) ->  Vec<Rc<CallArgumentContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn callArgument(&self, i: usize) -> Option<Rc<CallArgumentContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	fn setQuantifier(&self) -> Option<Rc<SetQuantifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> FunctionCallContextAttrs<'input> for FunctionCallContext<'input>{}

pub struct FunctionCallContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{FunctionCallContextExt<'a>}

impl<'input> TrinoParserContext<'input> for FunctionCallContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for FunctionCallContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_functionCall(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_functionCall(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for FunctionCallContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_functionCall(self);
	}
}

impl<'input> CustomRuleContext<'input> for FunctionCallContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for FunctionCallContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for FunctionCallContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for FunctionCallContext<'input> {}

impl<'input> FunctionCallContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::FunctionCallContext(
				BaseParserRuleContext::copy_from(ctx,FunctionCallContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type VariableContext<'input> = BaseParserRuleContext<'input,VariableContextExt<'input>>;

pub trait VariableContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token VARIABLE
	/// Returns `None` if there is no child corresponding to token VARIABLE
	fn VARIABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(VARIABLE, 0)
	}
}

impl<'input> VariableContextAttrs<'input> for VariableContext<'input>{}

pub struct VariableContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{VariableContextExt<'a>}

impl<'input> TrinoParserContext<'input> for VariableContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for VariableContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_variable(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_variable(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for VariableContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_variable(self);
	}
}

impl<'input> CustomRuleContext<'input> for VariableContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for VariableContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for VariableContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for VariableContext<'input> {}

impl<'input> VariableContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::VariableContext(
				BaseParserRuleContext::copy_from(ctx,VariableContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ExistsContext<'input> = BaseParserRuleContext<'input,ExistsContextExt<'input>>;

pub trait ExistsContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token EXISTS
	/// Returns `None` if there is no child corresponding to token EXISTS
	fn EXISTS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(EXISTS, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn query(&self) -> Option<Rc<QueryContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
}

impl<'input> ExistsContextAttrs<'input> for ExistsContext<'input>{}

pub struct ExistsContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ExistsContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ExistsContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ExistsContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_exists(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_exists(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ExistsContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_exists(self);
	}
}

impl<'input> CustomRuleContext<'input> for ExistsContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for ExistsContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for ExistsContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for ExistsContext<'input> {}

impl<'input> ExistsContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::ExistsContext(
				BaseParserRuleContext::copy_from(ctx,ExistsContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type PositionContext<'input> = BaseParserRuleContext<'input,PositionContextExt<'input>>;

pub trait PositionContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token POSITION
	/// Returns `None` if there is no child corresponding to token POSITION
	fn POSITION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(POSITION, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token IN
	/// Returns `None` if there is no child corresponding to token IN
	fn IN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn valueExpression_all(&self) ->  Vec<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn valueExpression(&self, i: usize) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
}

impl<'input> PositionContextAttrs<'input> for PositionContext<'input>{}

pub struct PositionContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub needle: Option<Rc<ValueExpressionContextAll<'input>>>,
	pub haystack: Option<Rc<ValueExpressionContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PositionContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PositionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PositionContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_position(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_position(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PositionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_position(self);
	}
}

impl<'input> CustomRuleContext<'input> for PositionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for PositionContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for PositionContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for PositionContext<'input> {}

impl<'input> PositionContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::PositionContext(
				BaseParserRuleContext::copy_from(ctx,PositionContextExt{
        			needle:None, haystack:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ListaggContext<'input> = BaseParserRuleContext<'input,ListaggContextExt<'input>>;

pub trait ListaggContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves all `TerminalNode`s corresponding to token LPAREN in current rule
	fn LPAREN_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token LPAREN, starting from 0.
	/// Returns `None` if number of children corresponding to token LPAREN is less or equal than `i`.
	fn LPAREN(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, i)
	}
	/// Retrieves all `TerminalNode`s corresponding to token RPAREN in current rule
	fn RPAREN_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token RPAREN, starting from 0.
	/// Returns `None` if number of children corresponding to token RPAREN is less or equal than `i`.
	fn RPAREN(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, i)
	}
	/// Retrieves first TerminalNode corresponding to token LISTAGG
	/// Returns `None` if there is no child corresponding to token LISTAGG
	fn LISTAGG(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LISTAGG, 0)
	}
	fn expression_all(&self) ->  Vec<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn expression(&self, i: usize) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	fn setQuantifier(&self) -> Option<Rc<SetQuantifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
	/// Retrieves first TerminalNode corresponding to token ON
	/// Returns `None` if there is no child corresponding to token ON
	fn ON(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ON, 0)
	}
	/// Retrieves first TerminalNode corresponding to token OVERFLOW
	/// Returns `None` if there is no child corresponding to token OVERFLOW
	fn OVERFLOW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(OVERFLOW, 0)
	}
	fn listAggOverflowBehavior(&self) -> Option<Rc<ListAggOverflowBehaviorContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token WITHIN
	/// Returns `None` if there is no child corresponding to token WITHIN
	fn WITHIN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(WITHIN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token GROUP
	/// Returns `None` if there is no child corresponding to token GROUP
	fn GROUP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(GROUP, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ORDER
	/// Returns `None` if there is no child corresponding to token ORDER
	fn ORDER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ORDER, 0)
	}
	/// Retrieves first TerminalNode corresponding to token BY
	/// Returns `None` if there is no child corresponding to token BY
	fn BY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(BY, 0)
	}
	fn sortItem_all(&self) ->  Vec<Rc<SortItemContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn sortItem(&self, i: usize) -> Option<Rc<SortItemContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
}

impl<'input> ListaggContextAttrs<'input> for ListaggContext<'input>{}

pub struct ListaggContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub name: Option<TokenType<'input>>,
	pub agg_expr: Option<Rc<ExpressionContextAll<'input>>>,
	pub COMMA: Option<TokenType<'input>>,
	pub tail:Vec<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ListaggContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ListaggContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ListaggContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_listagg(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_listagg(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ListaggContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_listagg(self);
	}
}

impl<'input> CustomRuleContext<'input> for ListaggContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for ListaggContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for ListaggContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for ListaggContext<'input> {}

impl<'input> ListaggContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::ListaggContext(
				BaseParserRuleContext::copy_from(ctx,ListaggContextExt{
					name:None, COMMA:None, 
        			tail:Vec::new(), 
        			agg_expr:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SearchedCaseContext<'input> = BaseParserRuleContext<'input,SearchedCaseContextExt<'input>>;

pub trait SearchedCaseContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token CASE
	/// Returns `None` if there is no child corresponding to token CASE
	fn CASE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CASE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token END
	/// Returns `None` if there is no child corresponding to token END
	fn END(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(END, 0)
	}
	fn whenClause_all(&self) ->  Vec<Rc<WhenClauseContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn whenClause(&self, i: usize) -> Option<Rc<WhenClauseContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token ELSE
	/// Returns `None` if there is no child corresponding to token ELSE
	fn ELSE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ELSE, 0)
	}
	fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> SearchedCaseContextAttrs<'input> for SearchedCaseContext<'input>{}

pub struct SearchedCaseContextExt<'input>{
	base:PrimaryExpressionContextExt<'input>,
	pub elseExpression: Option<Rc<ExpressionContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SearchedCaseContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SearchedCaseContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SearchedCaseContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_searchedCase(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_searchedCase(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SearchedCaseContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_searchedCase(self);
	}
}

impl<'input> CustomRuleContext<'input> for SearchedCaseContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_primaryExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_primaryExpression }
}

impl<'input> Borrow<PrimaryExpressionContextExt<'input>> for SearchedCaseContext<'input>{
	fn borrow(&self) -> &PrimaryExpressionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrimaryExpressionContextExt<'input>> for SearchedCaseContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrimaryExpressionContextExt<'input> { &mut self.base }
}

impl<'input> PrimaryExpressionContextAttrs<'input> for SearchedCaseContext<'input> {}

impl<'input> SearchedCaseContextExt<'input>{
	fn new(ctx: &dyn PrimaryExpressionContextAttrs<'input>) -> Rc<PrimaryExpressionContextAll<'input>>  {
		Rc::new(
			PrimaryExpressionContextAll::SearchedCaseContext(
				BaseParserRuleContext::copy_from(ctx,SearchedCaseContextExt{
        			elseExpression:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn  primaryExpression(&mut self,)
	-> Result<Rc<PrimaryExpressionContextAll<'input>>,ANTLRError> {
		self.primaryExpression_rec(0)
	}

	fn primaryExpression_rec(&mut self, _p: isize)
	-> Result<Rc<PrimaryExpressionContextAll<'input>>,ANTLRError> {
		let recog = self;
		let _parentctx = recog.ctx.take();
		let _parentState = recog.base.get_state();
		let mut _localctx = PrimaryExpressionContextExt::new(_parentctx.clone(), recog.base.get_state());
		recog.base.enter_recursion_rule(_localctx.clone(), 180, RULE_primaryExpression, _p);
	    let mut _localctx: Rc<PrimaryExpressionContextAll> = _localctx;
        let mut _prevctx = _localctx.clone();
		let _startState = 180;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {
			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2375);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(316,&mut recog.base)? {
				1 =>{
					{
					let mut tmp = NullLiteralContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();


					recog.base.set_state(1943);
					recog.base.match_token(NULL,&mut recog.err_handler)?;

					}
				}
			,
				2 =>{
					{
					let mut tmp = IntervalLiteralContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					/*InvokeRule interval*/
					recog.base.set_state(1944);
					recog.interval()?;

					}
				}
			,
				3 =>{
					{
					let mut tmp = NumericLiteralContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					/*InvokeRule number*/
					recog.base.set_state(1945);
					recog.number()?;

					}
				}
			,
				4 =>{
					{
					let mut tmp = BooleanLiteralContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					/*InvokeRule booleanValue*/
					recog.base.set_state(1946);
					recog.booleanValue()?;

					}
				}
			,
				5 =>{
					{
					let mut tmp = StringLiteralContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					/*InvokeRule string*/
					recog.base.set_state(1947);
					recog.string()?;

					}
				}
			,
				6 =>{
					{
					let mut tmp = BinaryLiteralContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(1948);
					recog.base.match_token(BINARY_LITERAL,&mut recog.err_handler)?;

					}
				}
			,
				7 =>{
					{
					let mut tmp = TypeConstructorContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					/*InvokeRule identifier*/
					recog.base.set_state(1949);
					recog.identifier()?;

					/*InvokeRule string*/
					recog.base.set_state(1950);
					recog.string()?;

					}
				}
			,
				8 =>{
					{
					let mut tmp = TypeConstructorContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(1952);
					recog.base.match_token(DOUBLE,&mut recog.err_handler)?;

					recog.base.set_state(1953);
					recog.base.match_token(PRECISION,&mut recog.err_handler)?;

					/*InvokeRule string*/
					recog.base.set_state(1954);
					recog.string()?;

					}
				}
			,
				9 =>{
					{
					let mut tmp = RowConstructorContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(1955);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule expression*/
					recog.base.set_state(1956);
					recog.expression()?;

					recog.base.set_state(1959); 
					recog.err_handler.sync(&mut recog.base)?;
					_alt = 1;
					loop {
						match _alt {
						    x if x == 1=>
							{
							{
							recog.base.set_state(1957);
							recog.base.match_token(COMMA,&mut recog.err_handler)?;

							/*InvokeRule expression*/
							recog.base.set_state(1958);
							recog.expression()?;

							}
							}

						_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
						}
						recog.base.set_state(1961); 
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(255,&mut recog.base)?;
						if _alt==2 || _alt==INVALID_ALT { break }
					}
					recog.base.set_state(1964);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(1963);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						if let PrimaryExpressionContextAll::RowConstructorContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
						ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(1966);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				10 =>{
					{
					let mut tmp = RowConstructorContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(1968);
					recog.base.match_token(ROW,&mut recog.err_handler)?;

					recog.base.set_state(1969);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule expression*/
					recog.base.set_state(1970);
					recog.expression()?;

					recog.base.set_state(1975);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while _la==COMMA {
						{
						{
						recog.base.set_state(1971);
						recog.base.match_token(COMMA,&mut recog.err_handler)?;

						/*InvokeRule expression*/
						recog.base.set_state(1972);
						recog.expression()?;

						}
						}
						recog.base.set_state(1977);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					recog.base.set_state(1978);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				11 =>{
					{
					let mut tmp = PositionContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(1980);
					recog.base.match_token(POSITION,&mut recog.err_handler)?;

					recog.base.set_state(1981);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule valueExpression*/
					recog.base.set_state(1982);
					let tmp = recog.valueExpression_rec(0)?;
					if let PrimaryExpressionContextAll::PositionContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
					ctx.needle = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(1983);
					recog.base.match_token(IN,&mut recog.err_handler)?;

					/*InvokeRule valueExpression*/
					recog.base.set_state(1984);
					let tmp = recog.valueExpression_rec(0)?;
					if let PrimaryExpressionContextAll::PositionContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
					ctx.haystack = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(1985);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				12 =>{
					{
					let mut tmp = ListaggContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(1987);
					let tmp = recog.base.match_token(LISTAGG,&mut recog.err_handler)?;
					if let PrimaryExpressionContextAll::ListaggContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
					ctx.name = Some(tmp); } else {unreachable!("cant cast");}  

					recog.base.set_state(1988);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					recog.base.set_state(1990);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(258,&mut recog.base)? {
						x if x == 1=>{
							{
							/*InvokeRule setQuantifier*/
							recog.base.set_state(1989);
							recog.setQuantifier()?;

							}
						}

						_ => {}
					}
					/*InvokeRule expression*/
					recog.base.set_state(1992);
					let tmp = recog.expression()?;
					if let PrimaryExpressionContextAll::ListaggContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
					ctx.agg_expr = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(1995);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(259,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(1993);
							recog.base.match_token(COMMA,&mut recog.err_handler)?;

							/*InvokeRule expression*/
							recog.base.set_state(1994);
							recog.expression()?;

							}
						}

						_ => {}
					}
					recog.base.set_state(1998);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(1997);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						if let PrimaryExpressionContextAll::ListaggContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
						ctx.COMMA = Some(tmp); } else {unreachable!("cant cast");}  

						let temp = if let PrimaryExpressionContextAll::ListaggContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
						ctx.COMMA.clone().unwrap() } else {unreachable!("cant cast");} ;
						if let PrimaryExpressionContextAll::ListaggContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
						ctx.tail.push(temp); } else {unreachable!("cant cast");}  
						}
					}

					recog.base.set_state(2003);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==ON {
						{
						recog.base.set_state(2000);
						recog.base.match_token(ON,&mut recog.err_handler)?;

						recog.base.set_state(2001);
						recog.base.match_token(OVERFLOW,&mut recog.err_handler)?;

						/*InvokeRule listAggOverflowBehavior*/
						recog.base.set_state(2002);
						recog.listAggOverflowBehavior()?;

						}
					}

					recog.base.set_state(2005);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					recog.base.set_state(2024);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(264,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(2006);
							recog.base.match_token(WITHIN,&mut recog.err_handler)?;

							recog.base.set_state(2007);
							recog.base.match_token(GROUP,&mut recog.err_handler)?;

							recog.base.set_state(2008);
							recog.base.match_token(LPAREN,&mut recog.err_handler)?;

							recog.base.set_state(2009);
							recog.base.match_token(ORDER,&mut recog.err_handler)?;

							recog.base.set_state(2010);
							recog.base.match_token(BY,&mut recog.err_handler)?;

							/*InvokeRule sortItem*/
							recog.base.set_state(2011);
							recog.sortItem()?;

							recog.base.set_state(2016);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(262,&mut recog.base)?;
							while { _alt!=2 && _alt!=INVALID_ALT } {
								if _alt==1 {
									{
									{
									recog.base.set_state(2012);
									recog.base.match_token(COMMA,&mut recog.err_handler)?;

									/*InvokeRule sortItem*/
									recog.base.set_state(2013);
									recog.sortItem()?;

									}
									} 
								}
								recog.base.set_state(2018);
								recog.err_handler.sync(&mut recog.base)?;
								_alt = recog.interpreter.adaptive_predict(262,&mut recog.base)?;
							}
							recog.base.set_state(2020);
							recog.err_handler.sync(&mut recog.base)?;
							_la = recog.base.input.la(1);
							if _la==COMMA {
								{
								recog.base.set_state(2019);
								let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
								if let PrimaryExpressionContextAll::ListaggContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
								ctx.COMMA = Some(tmp); } else {unreachable!("cant cast");}  

								let temp = if let PrimaryExpressionContextAll::ListaggContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
								ctx.COMMA.clone().unwrap() } else {unreachable!("cant cast");} ;
								if let PrimaryExpressionContextAll::ListaggContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
								ctx.tail.push(temp); } else {unreachable!("cant cast");}  
								}
							}

							recog.base.set_state(2022);
							recog.base.match_token(RPAREN,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					}
				}
			,
				13 =>{
					{
					let mut tmp = ExistsContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2026);
					recog.base.match_token(EXISTS,&mut recog.err_handler)?;

					recog.base.set_state(2027);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule query*/
					recog.base.set_state(2028);
					recog.query()?;

					recog.base.set_state(2029);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				14 =>{
					{
					let mut tmp = SimpleCaseContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2031);
					recog.base.match_token(CASE,&mut recog.err_handler)?;

					/*InvokeRule expression*/
					recog.base.set_state(2032);
					let tmp = recog.expression()?;
					if let PrimaryExpressionContextAll::SimpleCaseContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
					ctx.operand = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(2034); 
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					loop {
						{
						{
						/*InvokeRule whenClause*/
						recog.base.set_state(2033);
						recog.whenClause()?;

						}
						}
						recog.base.set_state(2036); 
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if !(_la==WHEN) {break}
					}
					recog.base.set_state(2040);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==ELSE {
						{
						recog.base.set_state(2038);
						recog.base.match_token(ELSE,&mut recog.err_handler)?;

						/*InvokeRule expression*/
						recog.base.set_state(2039);
						let tmp = recog.expression()?;
						if let PrimaryExpressionContextAll::SimpleCaseContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
						ctx.elseExpression = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(2042);
					recog.base.match_token(END,&mut recog.err_handler)?;

					}
				}
			,
				15 =>{
					{
					let mut tmp = SearchedCaseContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2044);
					recog.base.match_token(CASE,&mut recog.err_handler)?;

					recog.base.set_state(2046); 
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					loop {
						{
						{
						/*InvokeRule whenClause*/
						recog.base.set_state(2045);
						recog.whenClause()?;

						}
						}
						recog.base.set_state(2048); 
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if !(_la==WHEN) {break}
					}
					recog.base.set_state(2052);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==ELSE {
						{
						recog.base.set_state(2050);
						recog.base.match_token(ELSE,&mut recog.err_handler)?;

						/*InvokeRule expression*/
						recog.base.set_state(2051);
						let tmp = recog.expression()?;
						if let PrimaryExpressionContextAll::SearchedCaseContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
						ctx.elseExpression = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(2054);
					recog.base.match_token(END,&mut recog.err_handler)?;

					}
				}
			,
				16 =>{
					{
					let mut tmp = CastContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2056);
					recog.base.match_token(CAST,&mut recog.err_handler)?;

					recog.base.set_state(2057);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule expression*/
					recog.base.set_state(2058);
					recog.expression()?;

					recog.base.set_state(2059);
					recog.base.match_token(AS,&mut recog.err_handler)?;

					/*InvokeRule type_*/
					recog.base.set_state(2060);
					recog.type_()?;

					recog.base.set_state(2061);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				17 =>{
					{
					let mut tmp = CastContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2063);
					recog.base.match_token(TRY_CAST,&mut recog.err_handler)?;

					recog.base.set_state(2064);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule expression*/
					recog.base.set_state(2065);
					recog.expression()?;

					recog.base.set_state(2066);
					recog.base.match_token(AS,&mut recog.err_handler)?;

					/*InvokeRule type_*/
					recog.base.set_state(2067);
					recog.type_()?;

					recog.base.set_state(2068);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				18 =>{
					{
					let mut tmp = TrimContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2070);
					recog.base.match_token(TRIM,&mut recog.err_handler)?;

					recog.base.set_state(2071);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					{
					recog.base.set_state(2073);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(269,&mut recog.base)? {
						x if x == 1=>{
							{
							/*InvokeRule trimsSpecification*/
							recog.base.set_state(2072);
							recog.trimsSpecification()?;

							}
						}

						_ => {}
					}
					recog.base.set_state(2076);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if ((((_la - 9)) & !0x3f) == 0 && ((1usize << (_la - 9)) & ((1usize << (ABORT - 9)) | (1usize << (ABSENT - 9)) | (1usize << (ADD - 9)) | (1usize << (ADMIN - 9)) | (1usize << (AFTER - 9)) | (1usize << (ALL - 9)) | (1usize << (ANALYZE - 9)) | (1usize << (ANTI - 9)) | (1usize << (ANY - 9)) | (1usize << (ARRAY - 9)) | (1usize << (ASC - 9)) | (1usize << (AT - 9)) | (1usize << (ATTACH - 9)) | (1usize << (AUTHORIZATION - 9)) | (1usize << (BEGIN - 9)) | (1usize << (BERNOULLI - 9)) | (1usize << (BOTH - 9)) | (1usize << (BZIP2 - 9)) | (1usize << (CALL - 9)) | (1usize << (CANCEL - 9)) | (1usize << (CASCADE - 9)) | (1usize << (CASE - 9)) | (1usize << (CAST - 9)))) != 0) || ((((_la - 41)) & !0x3f) == 0 && ((1usize << (_la - 41)) & ((1usize << (CATALOGS - 41)) | (1usize << (CHARACTER - 41)) | (1usize << (CLONE - 41)) | (1usize << (CLOSE - 41)) | (1usize << (CLUSTER - 41)) | (1usize << (COLUMN - 41)) | (1usize << (COLUMNS - 41)) | (1usize << (COMMENT - 41)) | (1usize << (COMMIT - 41)) | (1usize << (COMMITTED - 41)) | (1usize << (COMPRESSION - 41)) | (1usize << (CONDITIONAL - 41)) | (1usize << (CONNECTION - 41)) | (1usize << (COPARTITION - 41)) | (1usize << (COPY - 41)) | (1usize << (COUNT - 41)) | (1usize << (CURRENT - 41)) | (1usize << (DATA - 41)) | (1usize << (DATABASE - 41)) | (1usize << (DATASHARE - 41)) | (1usize << (DATE - 41)) | (1usize << (DAY - 41)) | (1usize << (DAYS - 41)))) != 0) || ((((_la - 74)) & !0x3f) == 0 && ((1usize << (_la - 74)) & ((1usize << (DECLARE - 74)) | (1usize << (DEFAULT - 74)) | (1usize << (DEFINE - 74)) | (1usize << (DEFINER - 74)) | (1usize << (DELIMITER - 74)) | (1usize << (DENY - 74)) | (1usize << (DESC - 74)) | (1usize << (DESCRIBE - 74)) | (1usize << (DESCRIPTOR - 74)) | (1usize << (DISTRIBUTED - 74)) | (1usize << (DETACH - 74)) | (1usize << (DOUBLE - 74)) | (1usize << (EMPTY - 74)) | (1usize << (ENCODING - 74)) | (1usize << (END - 74)) | (1usize << (ERROR - 74)) | (1usize << (EXCLUDING - 74)) | (1usize << (EXECUTE - 74)) | (1usize << (EXISTS - 74)) | (1usize << (EXPLAIN - 74)))) != 0) || ((((_la - 106)) & !0x3f) == 0 && ((1usize << (_la - 106)) & ((1usize << (EXTERNAL - 106)) | (1usize << (EXTRACT - 106)) | (1usize << (FALSE - 106)) | (1usize << (FETCH - 106)) | (1usize << (FILTER - 106)) | (1usize << (FINAL - 106)) | (1usize << (FIRST - 106)) | (1usize << (FOLLOWING - 106)) | (1usize << (FORMAT - 106)) | (1usize << (FUNCTIONS - 106)) | (1usize << (GRACE - 106)) | (1usize << (GRANT - 106)) | (1usize << (GRANTED - 106)) | (1usize << (GRANTS - 106)) | (1usize << (GRAPHVIZ - 106)) | (1usize << (GROUPING - 106)) | (1usize << (GROUPS - 106)) | (1usize << (GZIP - 106)) | (1usize << (HOUR - 106)) | (1usize << (HOURS - 106)) | (1usize << (IF - 106)) | (1usize << (IGNORE - 106)))) != 0) || ((((_la - 138)) & !0x3f) == 0 && ((1usize << (_la - 138)) & ((1usize << (INCLUDING - 138)) | (1usize << (INITIAL - 138)) | (1usize << (INPUT - 138)) | (1usize << (INTEGER - 138)) | (1usize << (INTERVAL - 138)) | (1usize << (INVOKER - 138)) | (1usize << (IO - 138)) | (1usize << (ISOLATION - 138)) | (1usize << (JSON - 138)) | (1usize << (JSON_ARRAY - 138)) | (1usize << (JSON_EXISTS - 138)) | (1usize << (JSON_OBJECT - 138)) | (1usize << (JSON_QUERY - 138)) | (1usize << (JSON_VALUE - 138)) | (1usize << (KEEP - 138)) | (1usize << (KEY - 138)) | (1usize << (KEYS - 138)) | (1usize << (LAMBDA - 138)) | (1usize << (LAST - 138)) | (1usize << (LATERAL - 138)) | (1usize << (LEADING - 138)) | (1usize << (LEFT - 138)) | (1usize << (LEVEL - 138)))) != 0) || ((((_la - 170)) & !0x3f) == 0 && ((1usize << (_la - 170)) & ((1usize << (LIBRARY - 170)) | (1usize << (LIMIT - 170)) | (1usize << (LISTAGG - 170)) | (1usize << (LOCAL - 170)) | (1usize << (LOCATION - 170)) | (1usize << (LOCK - 170)) | (1usize << (LOGICAL - 170)) | (1usize << (M - 170)) | (1usize << (MAP - 170)) | (1usize << (MASKING - 170)) | (1usize << (MATCH - 170)) | (1usize << (MATCHED - 170)) | (1usize << (MATCHES - 170)) | (1usize << (MATCH_RECOGNIZE - 170)) | (1usize << (MATERIALIZED - 170)) | (1usize << (MAX - 170)) | (1usize << (MEASURES - 170)) | (1usize << (MERGE - 170)) | (1usize << (MIN - 170)) | (1usize << (MINUS_KW - 170)) | (1usize << (MINUTE - 170)) | (1usize << (MINUTES - 170)) | (1usize << (MODEL - 170)) | (1usize << (MONTH - 170)) | (1usize << (MONTHS - 170)) | (1usize << (NEXT - 170)) | (1usize << (NFC - 170)) | (1usize << (NFD - 170)) | (1usize << (NFKC - 170)) | (1usize << (NFKD - 170)))) != 0) || ((((_la - 202)) & !0x3f) == 0 && ((1usize << (_la - 202)) & ((1usize << (NO - 202)) | (1usize << (NONE - 202)) | (1usize << (NORMALIZE - 202)) | (1usize << (NULL - 202)) | (1usize << (NULLS - 202)) | (1usize << (OBJECT - 202)) | (1usize << (OF - 202)) | (1usize << (OFFSET - 202)) | (1usize << (OMIT - 202)) | (1usize << (ONE - 202)) | (1usize << (ONLY - 202)) | (1usize << (OPTION - 202)) | (1usize << (ORDINALITY - 202)) | (1usize << (OUTPUT - 202)) | (1usize << (OVER - 202)) | (1usize << (OVERFLOW - 202)) | (1usize << (PARTITION - 202)) | (1usize << (PARTITIONS - 202)) | (1usize << (PASSING - 202)) | (1usize << (PAST - 202)) | (1usize << (PATH - 202)) | (1usize << (PATTERN - 202)) | (1usize << (PER - 202)) | (1usize << (PERIOD - 202)))) != 0) || ((((_la - 234)) & !0x3f) == 0 && ((1usize << (_la - 234)) & ((1usize << (PERMUTE - 234)) | (1usize << (POSITION - 234)) | (1usize << (PRECEDING - 234)) | (1usize << (PRECISION - 234)) | (1usize << (PROCEDURE - 234)) | (1usize << (PRIVILEGES - 234)) | (1usize << (PROPERTIES - 234)) | (1usize << (PRUNE - 234)) | (1usize << (QUOTES - 234)) | (1usize << (RANGE - 234)) | (1usize << (READ - 234)) | (1usize << (REFRESH - 234)) | (1usize << (RENAME - 234)) | (1usize << (REPEATABLE - 234)) | (1usize << (REPLACE - 234)) | (1usize << (RESET - 234)) | (1usize << (RESPECT - 234)) | (1usize << (RESTRICT - 234)) | (1usize << (RETURNING - 234)) | (1usize << (REVOKE - 234)) | (1usize << (RIGHT - 234)) | (1usize << (RLS - 234)) | (1usize << (ROLE - 234)) | (1usize << (ROLES - 234)) | (1usize << (ROLLBACK - 234)) | (1usize << (ROLLUP - 234)) | (1usize << (ROW - 234)) | (1usize << (ROWS - 234)) | (1usize << (RUNNING - 234)))) != 0) || ((((_la - 266)) & !0x3f) == 0 && ((1usize << (_la - 266)) & ((1usize << (S - 266)) | (1usize << (SCALAR - 266)) | (1usize << (SEC - 266)) | (1usize << (SECOND - 266)) | (1usize << (SECONDS - 266)) | (1usize << (SCHEMA - 266)) | (1usize << (SCHEMAS - 266)) | (1usize << (SECURITY - 266)) | (1usize << (SEEK - 266)) | (1usize << (SEMI - 266)) | (1usize << (SERIALIZABLE - 266)) | (1usize << (SESSION - 266)) | (1usize << (SET - 266)) | (1usize << (SETS - 266)) | (1usize << (SHOW - 266)) | (1usize << (SNAPSHOT - 266)) | (1usize << (SOME - 266)) | (1usize << (START - 266)) | (1usize << (STATS - 266)) | (1usize << (STRUCT - 266)) | (1usize << (SUBSET - 266)) | (1usize << (SUBSTRING - 266)) | (1usize << (SYSTEM - 266)) | (1usize << (SYSTEM_TIME - 266)))) != 0) || ((((_la - 298)) & !0x3f) == 0 && ((1usize << (_la - 298)) & ((1usize << (TABLES - 298)) | (1usize << (TABLESAMPLE - 298)) | (1usize << (TEMP - 298)) | (1usize << (TEMPORARY - 298)) | (1usize << (TEXT - 298)) | (1usize << (STRING_KW - 298)) | (1usize << (TIES - 298)) | (1usize << (TIME - 298)) | (1usize << (TIMESTAMP - 298)) | (1usize << (TO - 298)) | (1usize << (TRAILING - 298)) | (1usize << (TRANSACTION - 298)) | (1usize << (TRIM - 298)) | (1usize << (TRUE - 298)) | (1usize << (TRUNCATE - 298)) | (1usize << (TRY_CAST - 298)) | (1usize << (TUPLE - 298)) | (1usize << (TYPE - 298)) | (1usize << (UNBOUNDED - 298)) | (1usize << (UNCOMMITTED - 298)) | (1usize << (UNCONDITIONAL - 298)) | (1usize << (UNIQUE - 298)) | (1usize << (UNKNOWN - 298)) | (1usize << (UNLOAD - 298)) | (1usize << (UNMATCHED - 298)))) != 0) || ((((_la - 330)) & !0x3f) == 0 && ((1usize << (_la - 330)) & ((1usize << (UPDATE - 330)) | (1usize << (USE - 330)) | (1usize << (USER - 330)) | (1usize << (UTF16 - 330)) | (1usize << (UTF32 - 330)) | (1usize << (UTF8 - 330)) | (1usize << (VACUUM - 330)) | (1usize << (VALIDATE - 330)) | (1usize << (VALUE - 330)) | (1usize << (VARYING - 330)) | (1usize << (VERBOSE - 330)) | (1usize << (VERSION - 330)) | (1usize << (VIEW - 330)) | (1usize << (WEEK - 330)) | (1usize << (WINDOW - 330)) | (1usize << (WITHIN - 330)) | (1usize << (WITHOUT - 330)) | (1usize << (WORK - 330)) | (1usize << (WRAPPER - 330)) | (1usize << (WRITE - 330)) | (1usize << (XZ - 330)) | (1usize << (YEAR - 330)) | (1usize << (YEARS - 330)) | (1usize << (ZONE - 330)) | (1usize << (ZSTD - 330)) | (1usize << (LPAREN - 330)))) != 0) || ((((_la - 363)) & !0x3f) == 0 && ((1usize << (_la - 363)) & ((1usize << (LBRACKET - 363)) | (1usize << (PLUS - 363)) | (1usize << (MINUS - 363)) | (1usize << (POSIX - 363)) | (1usize << (STRING - 363)) | (1usize << (UNICODE_STRING - 363)) | (1usize << (BINARY_LITERAL - 363)) | (1usize << (INTEGER_VALUE - 363)) | (1usize << (DECIMAL_VALUE - 363)) | (1usize << (DOUBLE_VALUE - 363)) | (1usize << (IDENTIFIER - 363)) | (1usize << (QUOTED_IDENTIFIER - 363)) | (1usize << (VARIABLE - 363)))) != 0) {
						{
						/*InvokeRule valueExpression*/
						recog.base.set_state(2075);
						let tmp = recog.valueExpression_rec(0)?;
						if let PrimaryExpressionContextAll::TrimContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
						ctx.trimChar = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(2078);
					recog.base.match_token(FROM,&mut recog.err_handler)?;

					}
					/*InvokeRule valueExpression*/
					recog.base.set_state(2080);
					let tmp = recog.valueExpression_rec(0)?;
					if let PrimaryExpressionContextAll::TrimContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
					ctx.trimSource = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(2081);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				19 =>{
					{
					let mut tmp = TrimContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2083);
					recog.base.match_token(TRIM,&mut recog.err_handler)?;

					recog.base.set_state(2084);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					recog.base.set_state(2092);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(273,&mut recog.base)? {
						x if x == 1=>{
							{
							/*InvokeRule trimsSpecification*/
							recog.base.set_state(2085);
							recog.trimsSpecification()?;

							recog.base.set_state(2087);
							recog.err_handler.sync(&mut recog.base)?;
							match  recog.interpreter.adaptive_predict(271,&mut recog.base)? {
								x if x == 1=>{
									{
									/*InvokeRule valueExpression*/
									recog.base.set_state(2086);
									let tmp = recog.valueExpression_rec(0)?;
									if let PrimaryExpressionContextAll::TrimContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
									ctx.trimChar = Some(tmp.clone()); } else {unreachable!("cant cast");}  

									}
								}

								_ => {}
							}
							recog.base.set_state(2090);
							recog.err_handler.sync(&mut recog.base)?;
							_la = recog.base.input.la(1);
							if _la==FROM {
								{
								recog.base.set_state(2089);
								recog.base.match_token(FROM,&mut recog.err_handler)?;

								}
							}

							}
						}

						_ => {}
					}
					/*InvokeRule valueExpression*/
					recog.base.set_state(2094);
					let tmp = recog.valueExpression_rec(0)?;
					if let PrimaryExpressionContextAll::TrimContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
					ctx.trimSource = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(2095);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				20 =>{
					{
					let mut tmp = TrimContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2097);
					recog.base.match_token(TRIM,&mut recog.err_handler)?;

					recog.base.set_state(2098);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule valueExpression*/
					recog.base.set_state(2099);
					let tmp = recog.valueExpression_rec(0)?;
					if let PrimaryExpressionContextAll::TrimContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
					ctx.trimSource = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(2100);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule valueExpression*/
					recog.base.set_state(2101);
					let tmp = recog.valueExpression_rec(0)?;
					if let PrimaryExpressionContextAll::TrimContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
					ctx.trimChar = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(2103);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(2102);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						if let PrimaryExpressionContextAll::TrimContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
						ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(2105);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				21 =>{
					{
					let mut tmp = SubstringContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2107);
					recog.base.match_token(SUBSTRING,&mut recog.err_handler)?;

					recog.base.set_state(2108);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule valueExpression*/
					recog.base.set_state(2109);
					recog.valueExpression_rec(0)?;

					recog.base.set_state(2110);
					recog.base.match_token(FROM,&mut recog.err_handler)?;

					/*InvokeRule valueExpression*/
					recog.base.set_state(2111);
					recog.valueExpression_rec(0)?;

					recog.base.set_state(2114);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==FOR {
						{
						recog.base.set_state(2112);
						recog.base.match_token(FOR,&mut recog.err_handler)?;

						/*InvokeRule valueExpression*/
						recog.base.set_state(2113);
						recog.valueExpression_rec(0)?;

						}
					}

					recog.base.set_state(2116);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				22 =>{
					{
					let mut tmp = NormalizeContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2118);
					recog.base.match_token(NORMALIZE,&mut recog.err_handler)?;

					recog.base.set_state(2119);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule valueExpression*/
					recog.base.set_state(2120);
					recog.valueExpression_rec(0)?;

					recog.base.set_state(2123);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(276,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(2121);
							recog.base.match_token(COMMA,&mut recog.err_handler)?;

							/*InvokeRule normalForm*/
							recog.base.set_state(2122);
							recog.normalForm()?;

							}
						}

						_ => {}
					}
					recog.base.set_state(2126);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(2125);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						if let PrimaryExpressionContextAll::NormalizeContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
						ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(2128);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				23 =>{
					{
					let mut tmp = ExtractContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2130);
					recog.base.match_token(EXTRACT,&mut recog.err_handler)?;

					recog.base.set_state(2131);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(2132);
					recog.identifier()?;

					recog.base.set_state(2133);
					recog.base.match_token(FROM,&mut recog.err_handler)?;

					/*InvokeRule valueExpression*/
					recog.base.set_state(2134);
					recog.valueExpression_rec(0)?;

					recog.base.set_state(2135);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				24 =>{
					{
					let mut tmp = CountStarContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2137);
					recog.base.match_token(COUNT,&mut recog.err_handler)?;

					recog.base.set_state(2138);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					recog.base.set_state(2139);
					recog.base.match_token(ASTERISK,&mut recog.err_handler)?;

					recog.base.set_state(2140);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					/*InvokeRule functionCallTail*/
					recog.base.set_state(2141);
					recog.functionCallTail()?;

					}
				}
			,
				25 =>{
					{
					let mut tmp = FunctionCallContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					/*InvokeRule functionCallHead*/
					recog.base.set_state(2142);
					recog.functionCallHead()?;

					/*InvokeRule functionName*/
					recog.base.set_state(2143);
					recog.functionName()?;

					recog.base.set_state(2144);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					{
					recog.base.set_state(2156);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if ((((_la - 9)) & !0x3f) == 0 && ((1usize << (_la - 9)) & ((1usize << (ABORT - 9)) | (1usize << (ABSENT - 9)) | (1usize << (ADD - 9)) | (1usize << (ADMIN - 9)) | (1usize << (AFTER - 9)) | (1usize << (ALL - 9)) | (1usize << (ANALYZE - 9)) | (1usize << (ANTI - 9)) | (1usize << (ANY - 9)) | (1usize << (ARRAY - 9)) | (1usize << (ASC - 9)) | (1usize << (AT - 9)) | (1usize << (ATTACH - 9)) | (1usize << (AUTHORIZATION - 9)) | (1usize << (BEGIN - 9)) | (1usize << (BERNOULLI - 9)) | (1usize << (BOTH - 9)) | (1usize << (BZIP2 - 9)) | (1usize << (CALL - 9)) | (1usize << (CANCEL - 9)) | (1usize << (CASCADE - 9)) | (1usize << (CASE - 9)) | (1usize << (CAST - 9)))) != 0) || ((((_la - 41)) & !0x3f) == 0 && ((1usize << (_la - 41)) & ((1usize << (CATALOGS - 41)) | (1usize << (CHARACTER - 41)) | (1usize << (CLONE - 41)) | (1usize << (CLOSE - 41)) | (1usize << (CLUSTER - 41)) | (1usize << (COLUMN - 41)) | (1usize << (COLUMNS - 41)) | (1usize << (COMMENT - 41)) | (1usize << (COMMIT - 41)) | (1usize << (COMMITTED - 41)) | (1usize << (COMPRESSION - 41)) | (1usize << (CONDITIONAL - 41)) | (1usize << (CONNECTION - 41)) | (1usize << (COPARTITION - 41)) | (1usize << (COPY - 41)) | (1usize << (COUNT - 41)) | (1usize << (CURRENT - 41)) | (1usize << (DATA - 41)) | (1usize << (DATABASE - 41)) | (1usize << (DATASHARE - 41)) | (1usize << (DATE - 41)) | (1usize << (DAY - 41)) | (1usize << (DAYS - 41)))) != 0) || ((((_la - 74)) & !0x3f) == 0 && ((1usize << (_la - 74)) & ((1usize << (DECLARE - 74)) | (1usize << (DEFAULT - 74)) | (1usize << (DEFINE - 74)) | (1usize << (DEFINER - 74)) | (1usize << (DELIMITER - 74)) | (1usize << (DENY - 74)) | (1usize << (DESC - 74)) | (1usize << (DESCRIBE - 74)) | (1usize << (DESCRIPTOR - 74)) | (1usize << (DISTINCT - 74)) | (1usize << (DISTRIBUTED - 74)) | (1usize << (DETACH - 74)) | (1usize << (DOUBLE - 74)) | (1usize << (EMPTY - 74)) | (1usize << (ENCODING - 74)) | (1usize << (END - 74)) | (1usize << (ERROR - 74)) | (1usize << (EXCLUDING - 74)) | (1usize << (EXECUTE - 74)) | (1usize << (EXISTS - 74)) | (1usize << (EXPLAIN - 74)))) != 0) || ((((_la - 106)) & !0x3f) == 0 && ((1usize << (_la - 106)) & ((1usize << (EXTERNAL - 106)) | (1usize << (EXTRACT - 106)) | (1usize << (FALSE - 106)) | (1usize << (FETCH - 106)) | (1usize << (FILTER - 106)) | (1usize << (FINAL - 106)) | (1usize << (FIRST - 106)) | (1usize << (FOLLOWING - 106)) | (1usize << (FORMAT - 106)) | (1usize << (FUNCTIONS - 106)) | (1usize << (GRACE - 106)) | (1usize << (GRANT - 106)) | (1usize << (GRANTED - 106)) | (1usize << (GRANTS - 106)) | (1usize << (GRAPHVIZ - 106)) | (1usize << (GROUPING - 106)) | (1usize << (GROUPS - 106)) | (1usize << (GZIP - 106)) | (1usize << (HOUR - 106)) | (1usize << (HOURS - 106)) | (1usize << (IF - 106)) | (1usize << (IGNORE - 106)))) != 0) || ((((_la - 138)) & !0x3f) == 0 && ((1usize << (_la - 138)) & ((1usize << (INCLUDING - 138)) | (1usize << (INITIAL - 138)) | (1usize << (INPUT - 138)) | (1usize << (INTEGER - 138)) | (1usize << (INTERVAL - 138)) | (1usize << (INVOKER - 138)) | (1usize << (IO - 138)) | (1usize << (ISOLATION - 138)) | (1usize << (JSON - 138)) | (1usize << (JSON_ARRAY - 138)) | (1usize << (JSON_EXISTS - 138)) | (1usize << (JSON_OBJECT - 138)) | (1usize << (JSON_QUERY - 138)) | (1usize << (JSON_VALUE - 138)) | (1usize << (KEEP - 138)) | (1usize << (KEY - 138)) | (1usize << (KEYS - 138)) | (1usize << (LAMBDA - 138)) | (1usize << (LAST - 138)) | (1usize << (LATERAL - 138)) | (1usize << (LEADING - 138)) | (1usize << (LEFT - 138)) | (1usize << (LEVEL - 138)))) != 0) || ((((_la - 170)) & !0x3f) == 0 && ((1usize << (_la - 170)) & ((1usize << (LIBRARY - 170)) | (1usize << (LIMIT - 170)) | (1usize << (LISTAGG - 170)) | (1usize << (LOCAL - 170)) | (1usize << (LOCATION - 170)) | (1usize << (LOCK - 170)) | (1usize << (LOGICAL - 170)) | (1usize << (M - 170)) | (1usize << (MAP - 170)) | (1usize << (MASKING - 170)) | (1usize << (MATCH - 170)) | (1usize << (MATCHED - 170)) | (1usize << (MATCHES - 170)) | (1usize << (MATCH_RECOGNIZE - 170)) | (1usize << (MATERIALIZED - 170)) | (1usize << (MAX - 170)) | (1usize << (MEASURES - 170)) | (1usize << (MERGE - 170)) | (1usize << (MIN - 170)) | (1usize << (MINUS_KW - 170)) | (1usize << (MINUTE - 170)) | (1usize << (MINUTES - 170)) | (1usize << (MODEL - 170)) | (1usize << (MONTH - 170)) | (1usize << (MONTHS - 170)) | (1usize << (NEXT - 170)) | (1usize << (NFC - 170)) | (1usize << (NFD - 170)) | (1usize << (NFKC - 170)) | (1usize << (NFKD - 170)))) != 0) || ((((_la - 202)) & !0x3f) == 0 && ((1usize << (_la - 202)) & ((1usize << (NO - 202)) | (1usize << (NONE - 202)) | (1usize << (NORMALIZE - 202)) | (1usize << (NOT - 202)) | (1usize << (NULL - 202)) | (1usize << (NULLS - 202)) | (1usize << (OBJECT - 202)) | (1usize << (OF - 202)) | (1usize << (OFFSET - 202)) | (1usize << (OMIT - 202)) | (1usize << (ONE - 202)) | (1usize << (ONLY - 202)) | (1usize << (OPTION - 202)) | (1usize << (ORDINALITY - 202)) | (1usize << (OUTPUT - 202)) | (1usize << (OVER - 202)) | (1usize << (OVERFLOW - 202)) | (1usize << (PARTITION - 202)) | (1usize << (PARTITIONS - 202)) | (1usize << (PASSING - 202)) | (1usize << (PAST - 202)) | (1usize << (PATH - 202)) | (1usize << (PATTERN - 202)) | (1usize << (PER - 202)) | (1usize << (PERIOD - 202)))) != 0) || ((((_la - 234)) & !0x3f) == 0 && ((1usize << (_la - 234)) & ((1usize << (PERMUTE - 234)) | (1usize << (POSITION - 234)) | (1usize << (PRECEDING - 234)) | (1usize << (PRECISION - 234)) | (1usize << (PROCEDURE - 234)) | (1usize << (PRIVILEGES - 234)) | (1usize << (PROPERTIES - 234)) | (1usize << (PRUNE - 234)) | (1usize << (QUOTES - 234)) | (1usize << (RANGE - 234)) | (1usize << (READ - 234)) | (1usize << (REFRESH - 234)) | (1usize << (RENAME - 234)) | (1usize << (REPEATABLE - 234)) | (1usize << (REPLACE - 234)) | (1usize << (RESET - 234)) | (1usize << (RESPECT - 234)) | (1usize << (RESTRICT - 234)) | (1usize << (RETURNING - 234)) | (1usize << (REVOKE - 234)) | (1usize << (RIGHT - 234)) | (1usize << (RLS - 234)) | (1usize << (ROLE - 234)) | (1usize << (ROLES - 234)) | (1usize << (ROLLBACK - 234)) | (1usize << (ROLLUP - 234)) | (1usize << (ROW - 234)) | (1usize << (ROWS - 234)) | (1usize << (RUNNING - 234)))) != 0) || ((((_la - 266)) & !0x3f) == 0 && ((1usize << (_la - 266)) & ((1usize << (S - 266)) | (1usize << (SCALAR - 266)) | (1usize << (SEC - 266)) | (1usize << (SECOND - 266)) | (1usize << (SECONDS - 266)) | (1usize << (SCHEMA - 266)) | (1usize << (SCHEMAS - 266)) | (1usize << (SECURITY - 266)) | (1usize << (SEEK - 266)) | (1usize << (SEMI - 266)) | (1usize << (SERIALIZABLE - 266)) | (1usize << (SESSION - 266)) | (1usize << (SET - 266)) | (1usize << (SETS - 266)) | (1usize << (SHOW - 266)) | (1usize << (SNAPSHOT - 266)) | (1usize << (SOME - 266)) | (1usize << (START - 266)) | (1usize << (STATS - 266)) | (1usize << (STRUCT - 266)) | (1usize << (SUBSET - 266)) | (1usize << (SUBSTRING - 266)) | (1usize << (SYSTEM - 266)) | (1usize << (SYSTEM_TIME - 266)))) != 0) || ((((_la - 298)) & !0x3f) == 0 && ((1usize << (_la - 298)) & ((1usize << (TABLES - 298)) | (1usize << (TABLESAMPLE - 298)) | (1usize << (TEMP - 298)) | (1usize << (TEMPORARY - 298)) | (1usize << (TEXT - 298)) | (1usize << (STRING_KW - 298)) | (1usize << (TIES - 298)) | (1usize << (TIME - 298)) | (1usize << (TIMESTAMP - 298)) | (1usize << (TO - 298)) | (1usize << (TRAILING - 298)) | (1usize << (TRANSACTION - 298)) | (1usize << (TRIM - 298)) | (1usize << (TRUE - 298)) | (1usize << (TRUNCATE - 298)) | (1usize << (TRY_CAST - 298)) | (1usize << (TUPLE - 298)) | (1usize << (TYPE - 298)) | (1usize << (UNBOUNDED - 298)) | (1usize << (UNCOMMITTED - 298)) | (1usize << (UNCONDITIONAL - 298)) | (1usize << (UNIQUE - 298)) | (1usize << (UNKNOWN - 298)) | (1usize << (UNLOAD - 298)) | (1usize << (UNMATCHED - 298)))) != 0) || ((((_la - 330)) & !0x3f) == 0 && ((1usize << (_la - 330)) & ((1usize << (UPDATE - 330)) | (1usize << (USE - 330)) | (1usize << (USER - 330)) | (1usize << (UTF16 - 330)) | (1usize << (UTF32 - 330)) | (1usize << (UTF8 - 330)) | (1usize << (VACUUM - 330)) | (1usize << (VALIDATE - 330)) | (1usize << (VALUE - 330)) | (1usize << (VARYING - 330)) | (1usize << (VERBOSE - 330)) | (1usize << (VERSION - 330)) | (1usize << (VIEW - 330)) | (1usize << (WEEK - 330)) | (1usize << (WINDOW - 330)) | (1usize << (WITHIN - 330)) | (1usize << (WITHOUT - 330)) | (1usize << (WORK - 330)) | (1usize << (WRAPPER - 330)) | (1usize << (WRITE - 330)) | (1usize << (XZ - 330)) | (1usize << (YEAR - 330)) | (1usize << (YEARS - 330)) | (1usize << (ZONE - 330)) | (1usize << (ZSTD - 330)) | (1usize << (LPAREN - 330)))) != 0) || ((((_la - 363)) & !0x3f) == 0 && ((1usize << (_la - 363)) & ((1usize << (LBRACKET - 363)) | (1usize << (PLUS - 363)) | (1usize << (MINUS - 363)) | (1usize << (POSIX - 363)) | (1usize << (STRING - 363)) | (1usize << (UNICODE_STRING - 363)) | (1usize << (BINARY_LITERAL - 363)) | (1usize << (INTEGER_VALUE - 363)) | (1usize << (DECIMAL_VALUE - 363)) | (1usize << (DOUBLE_VALUE - 363)) | (1usize << (IDENTIFIER - 363)) | (1usize << (QUOTED_IDENTIFIER - 363)) | (1usize << (VARIABLE - 363)))) != 0) {
						{
						recog.base.set_state(2146);
						recog.err_handler.sync(&mut recog.base)?;
						match  recog.interpreter.adaptive_predict(278,&mut recog.base)? {
							x if x == 1=>{
								{
								/*InvokeRule setQuantifier*/
								recog.base.set_state(2145);
								recog.setQuantifier()?;

								}
							}

							_ => {}
						}
						/*InvokeRule callArgument*/
						recog.base.set_state(2148);
						recog.callArgument()?;

						recog.base.set_state(2153);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						while _la==COMMA {
							{
							{
							recog.base.set_state(2149);
							recog.base.match_token(COMMA,&mut recog.err_handler)?;

							/*InvokeRule callArgument*/
							recog.base.set_state(2150);
							recog.callArgument()?;

							}
							}
							recog.base.set_state(2155);
							recog.err_handler.sync(&mut recog.base)?;
							_la = recog.base.input.la(1);
						}
						}
					}

					/*InvokeRule functionExtraArguments*/
					recog.base.set_state(2158);
					recog.functionExtraArguments()?;

					}
					recog.base.set_state(2160);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					/*InvokeRule functionCallTail*/
					recog.base.set_state(2161);
					recog.functionCallTail()?;

					}
				}
			,
				26 =>{
					{
					let mut tmp = MeasureContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					/*InvokeRule identifier*/
					recog.base.set_state(2163);
					recog.identifier()?;

					/*InvokeRule over*/
					recog.base.set_state(2164);
					recog.over()?;

					}
				}
			,
				27 =>{
					{
					let mut tmp = LambdaContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					/*InvokeRule identifier*/
					recog.base.set_state(2166);
					recog.identifier()?;

					recog.base.set_state(2167);
					recog.base.match_token(T__1,&mut recog.err_handler)?;

					/*InvokeRule expression*/
					recog.base.set_state(2168);
					recog.expression()?;

					}
				}
			,
				28 =>{
					{
					let mut tmp = LambdaContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2170);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					recog.base.set_state(2179);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if ((((_la - 9)) & !0x3f) == 0 && ((1usize << (_la - 9)) & ((1usize << (ABORT - 9)) | (1usize << (ABSENT - 9)) | (1usize << (ADD - 9)) | (1usize << (ADMIN - 9)) | (1usize << (AFTER - 9)) | (1usize << (ALL - 9)) | (1usize << (ANALYZE - 9)) | (1usize << (ANTI - 9)) | (1usize << (ANY - 9)) | (1usize << (ARRAY - 9)) | (1usize << (ASC - 9)) | (1usize << (AT - 9)) | (1usize << (ATTACH - 9)) | (1usize << (AUTHORIZATION - 9)) | (1usize << (BEGIN - 9)) | (1usize << (BERNOULLI - 9)) | (1usize << (BOTH - 9)) | (1usize << (BZIP2 - 9)) | (1usize << (CALL - 9)) | (1usize << (CANCEL - 9)) | (1usize << (CASCADE - 9)))) != 0) || ((((_la - 41)) & !0x3f) == 0 && ((1usize << (_la - 41)) & ((1usize << (CATALOGS - 41)) | (1usize << (CHARACTER - 41)) | (1usize << (CLONE - 41)) | (1usize << (CLOSE - 41)) | (1usize << (CLUSTER - 41)) | (1usize << (COLUMN - 41)) | (1usize << (COLUMNS - 41)) | (1usize << (COMMENT - 41)) | (1usize << (COMMIT - 41)) | (1usize << (COMMITTED - 41)) | (1usize << (COMPRESSION - 41)) | (1usize << (CONDITIONAL - 41)) | (1usize << (CONNECTION - 41)) | (1usize << (COPARTITION - 41)) | (1usize << (COPY - 41)) | (1usize << (COUNT - 41)) | (1usize << (CURRENT - 41)) | (1usize << (DATA - 41)) | (1usize << (DATABASE - 41)) | (1usize << (DATASHARE - 41)) | (1usize << (DATE - 41)) | (1usize << (DAY - 41)) | (1usize << (DAYS - 41)))) != 0) || ((((_la - 74)) & !0x3f) == 0 && ((1usize << (_la - 74)) & ((1usize << (DECLARE - 74)) | (1usize << (DEFAULT - 74)) | (1usize << (DEFINE - 74)) | (1usize << (DEFINER - 74)) | (1usize << (DELIMITER - 74)) | (1usize << (DENY - 74)) | (1usize << (DESC - 74)) | (1usize << (DESCRIBE - 74)) | (1usize << (DESCRIPTOR - 74)) | (1usize << (DISTRIBUTED - 74)) | (1usize << (DETACH - 74)) | (1usize << (DOUBLE - 74)) | (1usize << (EMPTY - 74)) | (1usize << (ENCODING - 74)) | (1usize << (END - 74)) | (1usize << (ERROR - 74)) | (1usize << (EXCLUDING - 74)) | (1usize << (EXECUTE - 74)) | (1usize << (EXPLAIN - 74)))) != 0) || ((((_la - 106)) & !0x3f) == 0 && ((1usize << (_la - 106)) & ((1usize << (EXTERNAL - 106)) | (1usize << (FETCH - 106)) | (1usize << (FILTER - 106)) | (1usize << (FINAL - 106)) | (1usize << (FIRST - 106)) | (1usize << (FOLLOWING - 106)) | (1usize << (FORMAT - 106)) | (1usize << (FUNCTIONS - 106)) | (1usize << (GRACE - 106)) | (1usize << (GRANT - 106)) | (1usize << (GRANTED - 106)) | (1usize << (GRANTS - 106)) | (1usize << (GRAPHVIZ - 106)) | (1usize << (GROUPS - 106)) | (1usize << (GZIP - 106)) | (1usize << (HOUR - 106)) | (1usize << (HOURS - 106)) | (1usize << (IF - 106)) | (1usize << (IGNORE - 106)))) != 0) || ((((_la - 138)) & !0x3f) == 0 && ((1usize << (_la - 138)) & ((1usize << (INCLUDING - 138)) | (1usize << (INITIAL - 138)) | (1usize << (INPUT - 138)) | (1usize << (INTEGER - 138)) | (1usize << (INTERVAL - 138)) | (1usize << (INVOKER - 138)) | (1usize << (IO - 138)) | (1usize << (ISOLATION - 138)) | (1usize << (JSON - 138)) | (1usize << (KEEP - 138)) | (1usize << (KEY - 138)) | (1usize << (KEYS - 138)) | (1usize << (LAMBDA - 138)) | (1usize << (LAST - 138)) | (1usize << (LATERAL - 138)) | (1usize << (LEADING - 138)) | (1usize << (LEVEL - 138)))) != 0) || ((((_la - 170)) & !0x3f) == 0 && ((1usize << (_la - 170)) & ((1usize << (LIBRARY - 170)) | (1usize << (LIMIT - 170)) | (1usize << (LOCAL - 170)) | (1usize << (LOCATION - 170)) | (1usize << (LOCK - 170)) | (1usize << (LOGICAL - 170)) | (1usize << (M - 170)) | (1usize << (MAP - 170)) | (1usize << (MASKING - 170)) | (1usize << (MATCH - 170)) | (1usize << (MATCHED - 170)) | (1usize << (MATCHES - 170)) | (1usize << (MATCH_RECOGNIZE - 170)) | (1usize << (MATERIALIZED - 170)) | (1usize << (MAX - 170)) | (1usize << (MEASURES - 170)) | (1usize << (MERGE - 170)) | (1usize << (MIN - 170)) | (1usize << (MINUS_KW - 170)) | (1usize << (MINUTE - 170)) | (1usize << (MINUTES - 170)) | (1usize << (MODEL - 170)) | (1usize << (MONTH - 170)) | (1usize << (MONTHS - 170)) | (1usize << (NEXT - 170)) | (1usize << (NFC - 170)) | (1usize << (NFD - 170)) | (1usize << (NFKC - 170)) | (1usize << (NFKD - 170)))) != 0) || ((((_la - 202)) & !0x3f) == 0 && ((1usize << (_la - 202)) & ((1usize << (NO - 202)) | (1usize << (NONE - 202)) | (1usize << (NULLS - 202)) | (1usize << (OBJECT - 202)) | (1usize << (OF - 202)) | (1usize << (OFFSET - 202)) | (1usize << (OMIT - 202)) | (1usize << (ONE - 202)) | (1usize << (ONLY - 202)) | (1usize << (OPTION - 202)) | (1usize << (ORDINALITY - 202)) | (1usize << (OUTPUT - 202)) | (1usize << (OVER - 202)) | (1usize << (OVERFLOW - 202)) | (1usize << (PARTITION - 202)) | (1usize << (PARTITIONS - 202)) | (1usize << (PASSING - 202)) | (1usize << (PAST - 202)) | (1usize << (PATH - 202)) | (1usize << (PATTERN - 202)) | (1usize << (PER - 202)) | (1usize << (PERIOD - 202)))) != 0) || ((((_la - 234)) & !0x3f) == 0 && ((1usize << (_la - 234)) & ((1usize << (PERMUTE - 234)) | (1usize << (POSITION - 234)) | (1usize << (PRECEDING - 234)) | (1usize << (PRECISION - 234)) | (1usize << (PROCEDURE - 234)) | (1usize << (PRIVILEGES - 234)) | (1usize << (PROPERTIES - 234)) | (1usize << (PRUNE - 234)) | (1usize << (QUOTES - 234)) | (1usize << (RANGE - 234)) | (1usize << (READ - 234)) | (1usize << (REFRESH - 234)) | (1usize << (RENAME - 234)) | (1usize << (REPEATABLE - 234)) | (1usize << (REPLACE - 234)) | (1usize << (RESET - 234)) | (1usize << (RESPECT - 234)) | (1usize << (RESTRICT - 234)) | (1usize << (RETURNING - 234)) | (1usize << (REVOKE - 234)) | (1usize << (RLS - 234)) | (1usize << (ROLE - 234)) | (1usize << (ROLES - 234)) | (1usize << (ROLLBACK - 234)) | (1usize << (ROLLUP - 234)) | (1usize << (ROW - 234)) | (1usize << (ROWS - 234)) | (1usize << (RUNNING - 234)))) != 0) || ((((_la - 266)) & !0x3f) == 0 && ((1usize << (_la - 266)) & ((1usize << (S - 266)) | (1usize << (SCALAR - 266)) | (1usize << (SEC - 266)) | (1usize << (SECOND - 266)) | (1usize << (SECONDS - 266)) | (1usize << (SCHEMA - 266)) | (1usize << (SCHEMAS - 266)) | (1usize << (SECURITY - 266)) | (1usize << (SEEK - 266)) | (1usize << (SEMI - 266)) | (1usize << (SERIALIZABLE - 266)) | (1usize << (SESSION - 266)) | (1usize << (SET - 266)) | (1usize << (SETS - 266)) | (1usize << (SHOW - 266)) | (1usize << (SNAPSHOT - 266)) | (1usize << (SOME - 266)) | (1usize << (START - 266)) | (1usize << (STATS - 266)) | (1usize << (STRUCT - 266)) | (1usize << (SUBSET - 266)) | (1usize << (SUBSTRING - 266)) | (1usize << (SYSTEM - 266)) | (1usize << (SYSTEM_TIME - 266)))) != 0) || ((((_la - 298)) & !0x3f) == 0 && ((1usize << (_la - 298)) & ((1usize << (TABLES - 298)) | (1usize << (TABLESAMPLE - 298)) | (1usize << (TEMP - 298)) | (1usize << (TEMPORARY - 298)) | (1usize << (TEXT - 298)) | (1usize << (STRING_KW - 298)) | (1usize << (TIES - 298)) | (1usize << (TIME - 298)) | (1usize << (TIMESTAMP - 298)) | (1usize << (TO - 298)) | (1usize << (TRAILING - 298)) | (1usize << (TRANSACTION - 298)) | (1usize << (TRUNCATE - 298)) | (1usize << (TRY_CAST - 298)) | (1usize << (TUPLE - 298)) | (1usize << (TYPE - 298)) | (1usize << (UNBOUNDED - 298)) | (1usize << (UNCOMMITTED - 298)) | (1usize << (UNCONDITIONAL - 298)) | (1usize << (UNIQUE - 298)) | (1usize << (UNKNOWN - 298)) | (1usize << (UNLOAD - 298)) | (1usize << (UNMATCHED - 298)))) != 0) || ((((_la - 330)) & !0x3f) == 0 && ((1usize << (_la - 330)) & ((1usize << (UPDATE - 330)) | (1usize << (USE - 330)) | (1usize << (USER - 330)) | (1usize << (UTF16 - 330)) | (1usize << (UTF32 - 330)) | (1usize << (UTF8 - 330)) | (1usize << (VACUUM - 330)) | (1usize << (VALIDATE - 330)) | (1usize << (VALUE - 330)) | (1usize << (VARYING - 330)) | (1usize << (VERBOSE - 330)) | (1usize << (VERSION - 330)) | (1usize << (VIEW - 330)) | (1usize << (WEEK - 330)) | (1usize << (WINDOW - 330)) | (1usize << (WITHIN - 330)) | (1usize << (WITHOUT - 330)) | (1usize << (WORK - 330)) | (1usize << (WRAPPER - 330)) | (1usize << (WRITE - 330)) | (1usize << (XZ - 330)) | (1usize << (YEAR - 330)) | (1usize << (YEARS - 330)) | (1usize << (ZONE - 330)) | (1usize << (ZSTD - 330)))) != 0) || _la==IDENTIFIER || _la==QUOTED_IDENTIFIER {
						{
						/*InvokeRule identifier*/
						recog.base.set_state(2171);
						recog.identifier()?;

						recog.base.set_state(2176);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(281,&mut recog.base)?;
						while { _alt!=2 && _alt!=INVALID_ALT } {
							if _alt==1 {
								{
								{
								recog.base.set_state(2172);
								recog.base.match_token(COMMA,&mut recog.err_handler)?;

								/*InvokeRule identifier*/
								recog.base.set_state(2173);
								recog.identifier()?;

								}
								} 
							}
							recog.base.set_state(2178);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(281,&mut recog.base)?;
						}
						}
					}

					recog.base.set_state(2182);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(2181);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						if let PrimaryExpressionContextAll::LambdaContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
						ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(2184);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					recog.base.set_state(2185);
					recog.base.match_token(T__1,&mut recog.err_handler)?;

					/*InvokeRule expression*/
					recog.base.set_state(2186);
					recog.expression()?;

					}
				}
			,
				29 =>{
					{
					let mut tmp = SubqueryExpressionContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2187);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule query*/
					recog.base.set_state(2188);
					recog.query()?;

					recog.base.set_state(2189);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				30 =>{
					{
					let mut tmp = ArrayConstructorContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2191);
					recog.base.match_token(ARRAY,&mut recog.err_handler)?;

					recog.base.set_state(2192);
					recog.base.match_token(LBRACKET,&mut recog.err_handler)?;

					recog.base.set_state(2201);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if ((((_la - 9)) & !0x3f) == 0 && ((1usize << (_la - 9)) & ((1usize << (ABORT - 9)) | (1usize << (ABSENT - 9)) | (1usize << (ADD - 9)) | (1usize << (ADMIN - 9)) | (1usize << (AFTER - 9)) | (1usize << (ALL - 9)) | (1usize << (ANALYZE - 9)) | (1usize << (ANTI - 9)) | (1usize << (ANY - 9)) | (1usize << (ARRAY - 9)) | (1usize << (ASC - 9)) | (1usize << (AT - 9)) | (1usize << (ATTACH - 9)) | (1usize << (AUTHORIZATION - 9)) | (1usize << (BEGIN - 9)) | (1usize << (BERNOULLI - 9)) | (1usize << (BOTH - 9)) | (1usize << (BZIP2 - 9)) | (1usize << (CALL - 9)) | (1usize << (CANCEL - 9)) | (1usize << (CASCADE - 9)) | (1usize << (CASE - 9)) | (1usize << (CAST - 9)))) != 0) || ((((_la - 41)) & !0x3f) == 0 && ((1usize << (_la - 41)) & ((1usize << (CATALOGS - 41)) | (1usize << (CHARACTER - 41)) | (1usize << (CLONE - 41)) | (1usize << (CLOSE - 41)) | (1usize << (CLUSTER - 41)) | (1usize << (COLUMN - 41)) | (1usize << (COLUMNS - 41)) | (1usize << (COMMENT - 41)) | (1usize << (COMMIT - 41)) | (1usize << (COMMITTED - 41)) | (1usize << (COMPRESSION - 41)) | (1usize << (CONDITIONAL - 41)) | (1usize << (CONNECTION - 41)) | (1usize << (COPARTITION - 41)) | (1usize << (COPY - 41)) | (1usize << (COUNT - 41)) | (1usize << (CURRENT - 41)) | (1usize << (DATA - 41)) | (1usize << (DATABASE - 41)) | (1usize << (DATASHARE - 41)) | (1usize << (DATE - 41)) | (1usize << (DAY - 41)) | (1usize << (DAYS - 41)))) != 0) || ((((_la - 74)) & !0x3f) == 0 && ((1usize << (_la - 74)) & ((1usize << (DECLARE - 74)) | (1usize << (DEFAULT - 74)) | (1usize << (DEFINE - 74)) | (1usize << (DEFINER - 74)) | (1usize << (DELIMITER - 74)) | (1usize << (DENY - 74)) | (1usize << (DESC - 74)) | (1usize << (DESCRIBE - 74)) | (1usize << (DESCRIPTOR - 74)) | (1usize << (DISTRIBUTED - 74)) | (1usize << (DETACH - 74)) | (1usize << (DOUBLE - 74)) | (1usize << (EMPTY - 74)) | (1usize << (ENCODING - 74)) | (1usize << (END - 74)) | (1usize << (ERROR - 74)) | (1usize << (EXCLUDING - 74)) | (1usize << (EXECUTE - 74)) | (1usize << (EXISTS - 74)) | (1usize << (EXPLAIN - 74)))) != 0) || ((((_la - 106)) & !0x3f) == 0 && ((1usize << (_la - 106)) & ((1usize << (EXTERNAL - 106)) | (1usize << (EXTRACT - 106)) | (1usize << (FALSE - 106)) | (1usize << (FETCH - 106)) | (1usize << (FILTER - 106)) | (1usize << (FINAL - 106)) | (1usize << (FIRST - 106)) | (1usize << (FOLLOWING - 106)) | (1usize << (FORMAT - 106)) | (1usize << (FUNCTIONS - 106)) | (1usize << (GRACE - 106)) | (1usize << (GRANT - 106)) | (1usize << (GRANTED - 106)) | (1usize << (GRANTS - 106)) | (1usize << (GRAPHVIZ - 106)) | (1usize << (GROUPING - 106)) | (1usize << (GROUPS - 106)) | (1usize << (GZIP - 106)) | (1usize << (HOUR - 106)) | (1usize << (HOURS - 106)) | (1usize << (IF - 106)) | (1usize << (IGNORE - 106)))) != 0) || ((((_la - 138)) & !0x3f) == 0 && ((1usize << (_la - 138)) & ((1usize << (INCLUDING - 138)) | (1usize << (INITIAL - 138)) | (1usize << (INPUT - 138)) | (1usize << (INTEGER - 138)) | (1usize << (INTERVAL - 138)) | (1usize << (INVOKER - 138)) | (1usize << (IO - 138)) | (1usize << (ISOLATION - 138)) | (1usize << (JSON - 138)) | (1usize << (JSON_ARRAY - 138)) | (1usize << (JSON_EXISTS - 138)) | (1usize << (JSON_OBJECT - 138)) | (1usize << (JSON_QUERY - 138)) | (1usize << (JSON_VALUE - 138)) | (1usize << (KEEP - 138)) | (1usize << (KEY - 138)) | (1usize << (KEYS - 138)) | (1usize << (LAMBDA - 138)) | (1usize << (LAST - 138)) | (1usize << (LATERAL - 138)) | (1usize << (LEADING - 138)) | (1usize << (LEFT - 138)) | (1usize << (LEVEL - 138)))) != 0) || ((((_la - 170)) & !0x3f) == 0 && ((1usize << (_la - 170)) & ((1usize << (LIBRARY - 170)) | (1usize << (LIMIT - 170)) | (1usize << (LISTAGG - 170)) | (1usize << (LOCAL - 170)) | (1usize << (LOCATION - 170)) | (1usize << (LOCK - 170)) | (1usize << (LOGICAL - 170)) | (1usize << (M - 170)) | (1usize << (MAP - 170)) | (1usize << (MASKING - 170)) | (1usize << (MATCH - 170)) | (1usize << (MATCHED - 170)) | (1usize << (MATCHES - 170)) | (1usize << (MATCH_RECOGNIZE - 170)) | (1usize << (MATERIALIZED - 170)) | (1usize << (MAX - 170)) | (1usize << (MEASURES - 170)) | (1usize << (MERGE - 170)) | (1usize << (MIN - 170)) | (1usize << (MINUS_KW - 170)) | (1usize << (MINUTE - 170)) | (1usize << (MINUTES - 170)) | (1usize << (MODEL - 170)) | (1usize << (MONTH - 170)) | (1usize << (MONTHS - 170)) | (1usize << (NEXT - 170)) | (1usize << (NFC - 170)) | (1usize << (NFD - 170)) | (1usize << (NFKC - 170)) | (1usize << (NFKD - 170)))) != 0) || ((((_la - 202)) & !0x3f) == 0 && ((1usize << (_la - 202)) & ((1usize << (NO - 202)) | (1usize << (NONE - 202)) | (1usize << (NORMALIZE - 202)) | (1usize << (NOT - 202)) | (1usize << (NULL - 202)) | (1usize << (NULLS - 202)) | (1usize << (OBJECT - 202)) | (1usize << (OF - 202)) | (1usize << (OFFSET - 202)) | (1usize << (OMIT - 202)) | (1usize << (ONE - 202)) | (1usize << (ONLY - 202)) | (1usize << (OPTION - 202)) | (1usize << (ORDINALITY - 202)) | (1usize << (OUTPUT - 202)) | (1usize << (OVER - 202)) | (1usize << (OVERFLOW - 202)) | (1usize << (PARTITION - 202)) | (1usize << (PARTITIONS - 202)) | (1usize << (PASSING - 202)) | (1usize << (PAST - 202)) | (1usize << (PATH - 202)) | (1usize << (PATTERN - 202)) | (1usize << (PER - 202)) | (1usize << (PERIOD - 202)))) != 0) || ((((_la - 234)) & !0x3f) == 0 && ((1usize << (_la - 234)) & ((1usize << (PERMUTE - 234)) | (1usize << (POSITION - 234)) | (1usize << (PRECEDING - 234)) | (1usize << (PRECISION - 234)) | (1usize << (PROCEDURE - 234)) | (1usize << (PRIVILEGES - 234)) | (1usize << (PROPERTIES - 234)) | (1usize << (PRUNE - 234)) | (1usize << (QUOTES - 234)) | (1usize << (RANGE - 234)) | (1usize << (READ - 234)) | (1usize << (REFRESH - 234)) | (1usize << (RENAME - 234)) | (1usize << (REPEATABLE - 234)) | (1usize << (REPLACE - 234)) | (1usize << (RESET - 234)) | (1usize << (RESPECT - 234)) | (1usize << (RESTRICT - 234)) | (1usize << (RETURNING - 234)) | (1usize << (REVOKE - 234)) | (1usize << (RIGHT - 234)) | (1usize << (RLS - 234)) | (1usize << (ROLE - 234)) | (1usize << (ROLES - 234)) | (1usize << (ROLLBACK - 234)) | (1usize << (ROLLUP - 234)) | (1usize << (ROW - 234)) | (1usize << (ROWS - 234)) | (1usize << (RUNNING - 234)))) != 0) || ((((_la - 266)) & !0x3f) == 0 && ((1usize << (_la - 266)) & ((1usize << (S - 266)) | (1usize << (SCALAR - 266)) | (1usize << (SEC - 266)) | (1usize << (SECOND - 266)) | (1usize << (SECONDS - 266)) | (1usize << (SCHEMA - 266)) | (1usize << (SCHEMAS - 266)) | (1usize << (SECURITY - 266)) | (1usize << (SEEK - 266)) | (1usize << (SEMI - 266)) | (1usize << (SERIALIZABLE - 266)) | (1usize << (SESSION - 266)) | (1usize << (SET - 266)) | (1usize << (SETS - 266)) | (1usize << (SHOW - 266)) | (1usize << (SNAPSHOT - 266)) | (1usize << (SOME - 266)) | (1usize << (START - 266)) | (1usize << (STATS - 266)) | (1usize << (STRUCT - 266)) | (1usize << (SUBSET - 266)) | (1usize << (SUBSTRING - 266)) | (1usize << (SYSTEM - 266)) | (1usize << (SYSTEM_TIME - 266)))) != 0) || ((((_la - 298)) & !0x3f) == 0 && ((1usize << (_la - 298)) & ((1usize << (TABLES - 298)) | (1usize << (TABLESAMPLE - 298)) | (1usize << (TEMP - 298)) | (1usize << (TEMPORARY - 298)) | (1usize << (TEXT - 298)) | (1usize << (STRING_KW - 298)) | (1usize << (TIES - 298)) | (1usize << (TIME - 298)) | (1usize << (TIMESTAMP - 298)) | (1usize << (TO - 298)) | (1usize << (TRAILING - 298)) | (1usize << (TRANSACTION - 298)) | (1usize << (TRIM - 298)) | (1usize << (TRUE - 298)) | (1usize << (TRUNCATE - 298)) | (1usize << (TRY_CAST - 298)) | (1usize << (TUPLE - 298)) | (1usize << (TYPE - 298)) | (1usize << (UNBOUNDED - 298)) | (1usize << (UNCOMMITTED - 298)) | (1usize << (UNCONDITIONAL - 298)) | (1usize << (UNIQUE - 298)) | (1usize << (UNKNOWN - 298)) | (1usize << (UNLOAD - 298)) | (1usize << (UNMATCHED - 298)))) != 0) || ((((_la - 330)) & !0x3f) == 0 && ((1usize << (_la - 330)) & ((1usize << (UPDATE - 330)) | (1usize << (USE - 330)) | (1usize << (USER - 330)) | (1usize << (UTF16 - 330)) | (1usize << (UTF32 - 330)) | (1usize << (UTF8 - 330)) | (1usize << (VACUUM - 330)) | (1usize << (VALIDATE - 330)) | (1usize << (VALUE - 330)) | (1usize << (VARYING - 330)) | (1usize << (VERBOSE - 330)) | (1usize << (VERSION - 330)) | (1usize << (VIEW - 330)) | (1usize << (WEEK - 330)) | (1usize << (WINDOW - 330)) | (1usize << (WITHIN - 330)) | (1usize << (WITHOUT - 330)) | (1usize << (WORK - 330)) | (1usize << (WRAPPER - 330)) | (1usize << (WRITE - 330)) | (1usize << (XZ - 330)) | (1usize << (YEAR - 330)) | (1usize << (YEARS - 330)) | (1usize << (ZONE - 330)) | (1usize << (ZSTD - 330)) | (1usize << (LPAREN - 330)))) != 0) || ((((_la - 363)) & !0x3f) == 0 && ((1usize << (_la - 363)) & ((1usize << (LBRACKET - 363)) | (1usize << (PLUS - 363)) | (1usize << (MINUS - 363)) | (1usize << (POSIX - 363)) | (1usize << (STRING - 363)) | (1usize << (UNICODE_STRING - 363)) | (1usize << (BINARY_LITERAL - 363)) | (1usize << (INTEGER_VALUE - 363)) | (1usize << (DECIMAL_VALUE - 363)) | (1usize << (DOUBLE_VALUE - 363)) | (1usize << (IDENTIFIER - 363)) | (1usize << (QUOTED_IDENTIFIER - 363)) | (1usize << (VARIABLE - 363)))) != 0) {
						{
						/*InvokeRule expression*/
						recog.base.set_state(2193);
						recog.expression()?;

						recog.base.set_state(2198);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(284,&mut recog.base)?;
						while { _alt!=2 && _alt!=INVALID_ALT } {
							if _alt==1 {
								{
								{
								recog.base.set_state(2194);
								recog.base.match_token(COMMA,&mut recog.err_handler)?;

								/*InvokeRule expression*/
								recog.base.set_state(2195);
								recog.expression()?;

								}
								} 
							}
							recog.base.set_state(2200);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(284,&mut recog.base)?;
						}
						}
					}

					recog.base.set_state(2204);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(2203);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						if let PrimaryExpressionContextAll::ArrayConstructorContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
						ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(2206);
					recog.base.match_token(RBRACKET,&mut recog.err_handler)?;

					}
				}
			,
				31 =>{
					{
					let mut tmp = ColumnReferenceContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					/*InvokeRule columnName*/
					recog.base.set_state(2207);
					recog.columnName()?;

					}
				}
			,
				32 =>{
					{
					let mut tmp = ParenthesizedExpressionContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2208);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule expression*/
					recog.base.set_state(2209);
					recog.expression()?;

					recog.base.set_state(2210);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				33 =>{
					{
					let mut tmp = JsonExistsContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2212);
					recog.base.match_token(JSON_EXISTS,&mut recog.err_handler)?;

					recog.base.set_state(2213);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule jsonPathInvocation*/
					recog.base.set_state(2214);
					recog.jsonPathInvocation()?;

					recog.base.set_state(2219);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==ERROR || _la==FALSE || _la==TRUE || _la==UNKNOWN {
						{
						/*InvokeRule jsonExistsErrorBehavior*/
						recog.base.set_state(2215);
						recog.jsonExistsErrorBehavior()?;

						recog.base.set_state(2216);
						recog.base.match_token(ON,&mut recog.err_handler)?;

						recog.base.set_state(2217);
						recog.base.match_token(ERROR,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(2221);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				34 =>{
					{
					let mut tmp = JsonValueContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2223);
					recog.base.match_token(JSON_VALUE,&mut recog.err_handler)?;

					recog.base.set_state(2224);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule jsonPathInvocation*/
					recog.base.set_state(2225);
					recog.jsonPathInvocation()?;

					recog.base.set_state(2228);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==RETURNING {
						{
						recog.base.set_state(2226);
						recog.base.match_token(RETURNING,&mut recog.err_handler)?;

						/*InvokeRule type_*/
						recog.base.set_state(2227);
						recog.type_()?;

						}
					}

					recog.base.set_state(2234);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(289,&mut recog.base)? {
						x if x == 1=>{
							{
							/*InvokeRule jsonValueBehavior*/
							recog.base.set_state(2230);
							let tmp = recog.jsonValueBehavior()?;
							if let PrimaryExpressionContextAll::JsonValueContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
							ctx.emptyBehavior = Some(tmp.clone()); } else {unreachable!("cant cast");}  

							recog.base.set_state(2231);
							recog.base.match_token(ON,&mut recog.err_handler)?;

							recog.base.set_state(2232);
							recog.base.match_token(EMPTY,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					recog.base.set_state(2240);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==DEFAULT || _la==ERROR || _la==NULL {
						{
						/*InvokeRule jsonValueBehavior*/
						recog.base.set_state(2236);
						let tmp = recog.jsonValueBehavior()?;
						if let PrimaryExpressionContextAll::JsonValueContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
						ctx.errorBehavior = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						recog.base.set_state(2237);
						recog.base.match_token(ON,&mut recog.err_handler)?;

						recog.base.set_state(2238);
						recog.base.match_token(ERROR,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(2242);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				35 =>{
					{
					let mut tmp = JsonQueryContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2244);
					recog.base.match_token(JSON_QUERY,&mut recog.err_handler)?;

					recog.base.set_state(2245);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule jsonPathInvocation*/
					recog.base.set_state(2246);
					recog.jsonPathInvocation()?;

					recog.base.set_state(2253);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==RETURNING {
						{
						recog.base.set_state(2247);
						recog.base.match_token(RETURNING,&mut recog.err_handler)?;

						/*InvokeRule type_*/
						recog.base.set_state(2248);
						recog.type_()?;

						recog.base.set_state(2251);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==FORMAT {
							{
							recog.base.set_state(2249);
							recog.base.match_token(FORMAT,&mut recog.err_handler)?;

							/*InvokeRule jsonRepresentation*/
							recog.base.set_state(2250);
							recog.jsonRepresentation()?;

							}
						}

						}
					}

					recog.base.set_state(2258);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==WITH || _la==WITHOUT {
						{
						/*InvokeRule jsonQueryWrapperBehavior*/
						recog.base.set_state(2255);
						recog.jsonQueryWrapperBehavior()?;

						recog.base.set_state(2256);
						recog.base.match_token(WRAPPER,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(2267);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==KEEP || _la==OMIT {
						{
						recog.base.set_state(2260);
						_la = recog.base.input.la(1);
						if { !(_la==KEEP || _la==OMIT) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						recog.base.set_state(2261);
						recog.base.match_token(QUOTES,&mut recog.err_handler)?;

						recog.base.set_state(2265);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==ON {
							{
							recog.base.set_state(2262);
							recog.base.match_token(ON,&mut recog.err_handler)?;

							recog.base.set_state(2263);
							recog.base.match_token(SCALAR,&mut recog.err_handler)?;

							recog.base.set_state(2264);
							recog.base.match_token(STRING_KW,&mut recog.err_handler)?;

							}
						}

						}
					}

					recog.base.set_state(2273);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(296,&mut recog.base)? {
						x if x == 1=>{
							{
							/*InvokeRule jsonQueryBehavior*/
							recog.base.set_state(2269);
							let tmp = recog.jsonQueryBehavior()?;
							if let PrimaryExpressionContextAll::JsonQueryContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
							ctx.emptyBehavior = Some(tmp.clone()); } else {unreachable!("cant cast");}  

							recog.base.set_state(2270);
							recog.base.match_token(ON,&mut recog.err_handler)?;

							recog.base.set_state(2271);
							recog.base.match_token(EMPTY,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					recog.base.set_state(2279);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==EMPTY || _la==ERROR || _la==NULL {
						{
						/*InvokeRule jsonQueryBehavior*/
						recog.base.set_state(2275);
						let tmp = recog.jsonQueryBehavior()?;
						if let PrimaryExpressionContextAll::JsonQueryContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
						ctx.errorBehavior = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						recog.base.set_state(2276);
						recog.base.match_token(ON,&mut recog.err_handler)?;

						recog.base.set_state(2277);
						recog.base.match_token(ERROR,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(2281);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				36 =>{
					{
					let mut tmp = JsonObjectContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2283);
					recog.base.match_token(JSON_OBJECT,&mut recog.err_handler)?;

					recog.base.set_state(2284);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					recog.base.set_state(2316);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(304,&mut recog.base)? {
						x if x == 1=>{
							{
							/*InvokeRule jsonObjectMember*/
							recog.base.set_state(2285);
							recog.jsonObjectMember()?;

							recog.base.set_state(2290);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(298,&mut recog.base)?;
							while { _alt!=2 && _alt!=INVALID_ALT } {
								if _alt==1 {
									{
									{
									recog.base.set_state(2286);
									recog.base.match_token(COMMA,&mut recog.err_handler)?;

									/*InvokeRule jsonObjectMember*/
									recog.base.set_state(2287);
									recog.jsonObjectMember()?;

									}
									} 
								}
								recog.base.set_state(2292);
								recog.err_handler.sync(&mut recog.base)?;
								_alt = recog.interpreter.adaptive_predict(298,&mut recog.base)?;
							}
							recog.base.set_state(2294);
							recog.err_handler.sync(&mut recog.base)?;
							_la = recog.base.input.la(1);
							if _la==COMMA {
								{
								recog.base.set_state(2293);
								let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
								if let PrimaryExpressionContextAll::JsonObjectContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
								ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

								}
							}

							recog.base.set_state(2302);
							recog.err_handler.sync(&mut recog.base)?;
							match recog.base.input.la(1) {
							 NULL 
								=> {
							    	{
							    	recog.base.set_state(2296);
							    	recog.base.match_token(NULL,&mut recog.err_handler)?;

							    	recog.base.set_state(2297);
							    	recog.base.match_token(ON,&mut recog.err_handler)?;

							    	recog.base.set_state(2298);
							    	recog.base.match_token(NULL,&mut recog.err_handler)?;

							    	}
							    }

							 ABSENT 
								=> {
							    	{
							    	recog.base.set_state(2299);
							    	recog.base.match_token(ABSENT,&mut recog.err_handler)?;

							    	recog.base.set_state(2300);
							    	recog.base.match_token(ON,&mut recog.err_handler)?;

							    	recog.base.set_state(2301);
							    	recog.base.match_token(NULL,&mut recog.err_handler)?;

							    	}
							    }

							 RETURNING | WITH | WITHOUT | RPAREN 
								=> {
							    }

								_ => {}
							}
							recog.base.set_state(2314);
							recog.err_handler.sync(&mut recog.base)?;
							match recog.base.input.la(1) {
							 WITH 
								=> {
							    	{
							    	recog.base.set_state(2304);
							    	recog.base.match_token(WITH,&mut recog.err_handler)?;

							    	recog.base.set_state(2305);
							    	recog.base.match_token(UNIQUE,&mut recog.err_handler)?;

							    	recog.base.set_state(2307);
							    	recog.err_handler.sync(&mut recog.base)?;
							    	_la = recog.base.input.la(1);
							    	if _la==KEYS {
							    		{
							    		recog.base.set_state(2306);
							    		recog.base.match_token(KEYS,&mut recog.err_handler)?;

							    		}
							    	}

							    	}
							    }

							 WITHOUT 
								=> {
							    	{
							    	recog.base.set_state(2309);
							    	recog.base.match_token(WITHOUT,&mut recog.err_handler)?;

							    	recog.base.set_state(2310);
							    	recog.base.match_token(UNIQUE,&mut recog.err_handler)?;

							    	recog.base.set_state(2312);
							    	recog.err_handler.sync(&mut recog.base)?;
							    	_la = recog.base.input.la(1);
							    	if _la==KEYS {
							    		{
							    		recog.base.set_state(2311);
							    		recog.base.match_token(KEYS,&mut recog.err_handler)?;

							    		}
							    	}

							    	}
							    }

							 RETURNING | RPAREN 
								=> {
							    }

								_ => {}
							}
							}
						}

						_ => {}
					}
					recog.base.set_state(2324);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==RETURNING {
						{
						recog.base.set_state(2318);
						recog.base.match_token(RETURNING,&mut recog.err_handler)?;

						/*InvokeRule type_*/
						recog.base.set_state(2319);
						recog.type_()?;

						recog.base.set_state(2322);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==FORMAT {
							{
							recog.base.set_state(2320);
							recog.base.match_token(FORMAT,&mut recog.err_handler)?;

							/*InvokeRule jsonRepresentation*/
							recog.base.set_state(2321);
							recog.jsonRepresentation()?;

							}
						}

						}
					}

					recog.base.set_state(2326);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				37 =>{
					{
					let mut tmp = JsonArrayContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2327);
					recog.base.match_token(JSON_ARRAY,&mut recog.err_handler)?;

					recog.base.set_state(2328);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					recog.base.set_state(2348);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(310,&mut recog.base)? {
						x if x == 1=>{
							{
							/*InvokeRule jsonValueExpression*/
							recog.base.set_state(2329);
							recog.jsonValueExpression()?;

							recog.base.set_state(2334);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(307,&mut recog.base)?;
							while { _alt!=2 && _alt!=INVALID_ALT } {
								if _alt==1 {
									{
									{
									recog.base.set_state(2330);
									recog.base.match_token(COMMA,&mut recog.err_handler)?;

									/*InvokeRule jsonValueExpression*/
									recog.base.set_state(2331);
									recog.jsonValueExpression()?;

									}
									} 
								}
								recog.base.set_state(2336);
								recog.err_handler.sync(&mut recog.base)?;
								_alt = recog.interpreter.adaptive_predict(307,&mut recog.base)?;
							}
							recog.base.set_state(2338);
							recog.err_handler.sync(&mut recog.base)?;
							_la = recog.base.input.la(1);
							if _la==COMMA {
								{
								recog.base.set_state(2337);
								let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
								if let PrimaryExpressionContextAll::JsonArrayContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
								ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

								}
							}

							recog.base.set_state(2346);
							recog.err_handler.sync(&mut recog.base)?;
							match recog.base.input.la(1) {
							 NULL 
								=> {
							    	{
							    	recog.base.set_state(2340);
							    	recog.base.match_token(NULL,&mut recog.err_handler)?;

							    	recog.base.set_state(2341);
							    	recog.base.match_token(ON,&mut recog.err_handler)?;

							    	recog.base.set_state(2342);
							    	recog.base.match_token(NULL,&mut recog.err_handler)?;

							    	}
							    }

							 ABSENT 
								=> {
							    	{
							    	recog.base.set_state(2343);
							    	recog.base.match_token(ABSENT,&mut recog.err_handler)?;

							    	recog.base.set_state(2344);
							    	recog.base.match_token(ON,&mut recog.err_handler)?;

							    	recog.base.set_state(2345);
							    	recog.base.match_token(NULL,&mut recog.err_handler)?;

							    	}
							    }

							 RETURNING | RPAREN 
								=> {
							    }

								_ => {}
							}
							}
						}

						_ => {}
					}
					recog.base.set_state(2356);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==RETURNING {
						{
						recog.base.set_state(2350);
						recog.base.match_token(RETURNING,&mut recog.err_handler)?;

						/*InvokeRule type_*/
						recog.base.set_state(2351);
						recog.type_()?;

						recog.base.set_state(2354);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==FORMAT {
							{
							recog.base.set_state(2352);
							recog.base.match_token(FORMAT,&mut recog.err_handler)?;

							/*InvokeRule jsonRepresentation*/
							recog.base.set_state(2353);
							recog.jsonRepresentation()?;

							}
						}

						}
					}

					recog.base.set_state(2358);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				38 =>{
					{
					let mut tmp = ArrayContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2359);
					recog.base.match_token(LBRACKET,&mut recog.err_handler)?;

					recog.base.set_state(2371);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if ((((_la - 9)) & !0x3f) == 0 && ((1usize << (_la - 9)) & ((1usize << (ABORT - 9)) | (1usize << (ABSENT - 9)) | (1usize << (ADD - 9)) | (1usize << (ADMIN - 9)) | (1usize << (AFTER - 9)) | (1usize << (ALL - 9)) | (1usize << (ANALYZE - 9)) | (1usize << (ANTI - 9)) | (1usize << (ANY - 9)) | (1usize << (ARRAY - 9)) | (1usize << (ASC - 9)) | (1usize << (AT - 9)) | (1usize << (ATTACH - 9)) | (1usize << (AUTHORIZATION - 9)) | (1usize << (BEGIN - 9)) | (1usize << (BERNOULLI - 9)) | (1usize << (BOTH - 9)) | (1usize << (BZIP2 - 9)) | (1usize << (CALL - 9)) | (1usize << (CANCEL - 9)) | (1usize << (CASCADE - 9)) | (1usize << (CASE - 9)) | (1usize << (CAST - 9)))) != 0) || ((((_la - 41)) & !0x3f) == 0 && ((1usize << (_la - 41)) & ((1usize << (CATALOGS - 41)) | (1usize << (CHARACTER - 41)) | (1usize << (CLONE - 41)) | (1usize << (CLOSE - 41)) | (1usize << (CLUSTER - 41)) | (1usize << (COLUMN - 41)) | (1usize << (COLUMNS - 41)) | (1usize << (COMMENT - 41)) | (1usize << (COMMIT - 41)) | (1usize << (COMMITTED - 41)) | (1usize << (COMPRESSION - 41)) | (1usize << (CONDITIONAL - 41)) | (1usize << (CONNECTION - 41)) | (1usize << (COPARTITION - 41)) | (1usize << (COPY - 41)) | (1usize << (COUNT - 41)) | (1usize << (CURRENT - 41)) | (1usize << (DATA - 41)) | (1usize << (DATABASE - 41)) | (1usize << (DATASHARE - 41)) | (1usize << (DATE - 41)) | (1usize << (DAY - 41)) | (1usize << (DAYS - 41)))) != 0) || ((((_la - 74)) & !0x3f) == 0 && ((1usize << (_la - 74)) & ((1usize << (DECLARE - 74)) | (1usize << (DEFAULT - 74)) | (1usize << (DEFINE - 74)) | (1usize << (DEFINER - 74)) | (1usize << (DELIMITER - 74)) | (1usize << (DENY - 74)) | (1usize << (DESC - 74)) | (1usize << (DESCRIBE - 74)) | (1usize << (DESCRIPTOR - 74)) | (1usize << (DISTRIBUTED - 74)) | (1usize << (DETACH - 74)) | (1usize << (DOUBLE - 74)) | (1usize << (EMPTY - 74)) | (1usize << (ENCODING - 74)) | (1usize << (END - 74)) | (1usize << (ERROR - 74)) | (1usize << (EXCLUDING - 74)) | (1usize << (EXECUTE - 74)) | (1usize << (EXISTS - 74)) | (1usize << (EXPLAIN - 74)))) != 0) || ((((_la - 106)) & !0x3f) == 0 && ((1usize << (_la - 106)) & ((1usize << (EXTERNAL - 106)) | (1usize << (EXTRACT - 106)) | (1usize << (FALSE - 106)) | (1usize << (FETCH - 106)) | (1usize << (FILTER - 106)) | (1usize << (FINAL - 106)) | (1usize << (FIRST - 106)) | (1usize << (FOLLOWING - 106)) | (1usize << (FORMAT - 106)) | (1usize << (FUNCTIONS - 106)) | (1usize << (GRACE - 106)) | (1usize << (GRANT - 106)) | (1usize << (GRANTED - 106)) | (1usize << (GRANTS - 106)) | (1usize << (GRAPHVIZ - 106)) | (1usize << (GROUPING - 106)) | (1usize << (GROUPS - 106)) | (1usize << (GZIP - 106)) | (1usize << (HOUR - 106)) | (1usize << (HOURS - 106)) | (1usize << (IF - 106)) | (1usize << (IGNORE - 106)))) != 0) || ((((_la - 138)) & !0x3f) == 0 && ((1usize << (_la - 138)) & ((1usize << (INCLUDING - 138)) | (1usize << (INITIAL - 138)) | (1usize << (INPUT - 138)) | (1usize << (INTEGER - 138)) | (1usize << (INTERVAL - 138)) | (1usize << (INVOKER - 138)) | (1usize << (IO - 138)) | (1usize << (ISOLATION - 138)) | (1usize << (JSON - 138)) | (1usize << (JSON_ARRAY - 138)) | (1usize << (JSON_EXISTS - 138)) | (1usize << (JSON_OBJECT - 138)) | (1usize << (JSON_QUERY - 138)) | (1usize << (JSON_VALUE - 138)) | (1usize << (KEEP - 138)) | (1usize << (KEY - 138)) | (1usize << (KEYS - 138)) | (1usize << (LAMBDA - 138)) | (1usize << (LAST - 138)) | (1usize << (LATERAL - 138)) | (1usize << (LEADING - 138)) | (1usize << (LEFT - 138)) | (1usize << (LEVEL - 138)))) != 0) || ((((_la - 170)) & !0x3f) == 0 && ((1usize << (_la - 170)) & ((1usize << (LIBRARY - 170)) | (1usize << (LIMIT - 170)) | (1usize << (LISTAGG - 170)) | (1usize << (LOCAL - 170)) | (1usize << (LOCATION - 170)) | (1usize << (LOCK - 170)) | (1usize << (LOGICAL - 170)) | (1usize << (M - 170)) | (1usize << (MAP - 170)) | (1usize << (MASKING - 170)) | (1usize << (MATCH - 170)) | (1usize << (MATCHED - 170)) | (1usize << (MATCHES - 170)) | (1usize << (MATCH_RECOGNIZE - 170)) | (1usize << (MATERIALIZED - 170)) | (1usize << (MAX - 170)) | (1usize << (MEASURES - 170)) | (1usize << (MERGE - 170)) | (1usize << (MIN - 170)) | (1usize << (MINUS_KW - 170)) | (1usize << (MINUTE - 170)) | (1usize << (MINUTES - 170)) | (1usize << (MODEL - 170)) | (1usize << (MONTH - 170)) | (1usize << (MONTHS - 170)) | (1usize << (NEXT - 170)) | (1usize << (NFC - 170)) | (1usize << (NFD - 170)) | (1usize << (NFKC - 170)) | (1usize << (NFKD - 170)))) != 0) || ((((_la - 202)) & !0x3f) == 0 && ((1usize << (_la - 202)) & ((1usize << (NO - 202)) | (1usize << (NONE - 202)) | (1usize << (NORMALIZE - 202)) | (1usize << (NOT - 202)) | (1usize << (NULL - 202)) | (1usize << (NULLS - 202)) | (1usize << (OBJECT - 202)) | (1usize << (OF - 202)) | (1usize << (OFFSET - 202)) | (1usize << (OMIT - 202)) | (1usize << (ONE - 202)) | (1usize << (ONLY - 202)) | (1usize << (OPTION - 202)) | (1usize << (ORDINALITY - 202)) | (1usize << (OUTPUT - 202)) | (1usize << (OVER - 202)) | (1usize << (OVERFLOW - 202)) | (1usize << (PARTITION - 202)) | (1usize << (PARTITIONS - 202)) | (1usize << (PASSING - 202)) | (1usize << (PAST - 202)) | (1usize << (PATH - 202)) | (1usize << (PATTERN - 202)) | (1usize << (PER - 202)) | (1usize << (PERIOD - 202)))) != 0) || ((((_la - 234)) & !0x3f) == 0 && ((1usize << (_la - 234)) & ((1usize << (PERMUTE - 234)) | (1usize << (POSITION - 234)) | (1usize << (PRECEDING - 234)) | (1usize << (PRECISION - 234)) | (1usize << (PROCEDURE - 234)) | (1usize << (PRIVILEGES - 234)) | (1usize << (PROPERTIES - 234)) | (1usize << (PRUNE - 234)) | (1usize << (QUOTES - 234)) | (1usize << (RANGE - 234)) | (1usize << (READ - 234)) | (1usize << (REFRESH - 234)) | (1usize << (RENAME - 234)) | (1usize << (REPEATABLE - 234)) | (1usize << (REPLACE - 234)) | (1usize << (RESET - 234)) | (1usize << (RESPECT - 234)) | (1usize << (RESTRICT - 234)) | (1usize << (RETURNING - 234)) | (1usize << (REVOKE - 234)) | (1usize << (RIGHT - 234)) | (1usize << (RLS - 234)) | (1usize << (ROLE - 234)) | (1usize << (ROLES - 234)) | (1usize << (ROLLBACK - 234)) | (1usize << (ROLLUP - 234)) | (1usize << (ROW - 234)) | (1usize << (ROWS - 234)) | (1usize << (RUNNING - 234)))) != 0) || ((((_la - 266)) & !0x3f) == 0 && ((1usize << (_la - 266)) & ((1usize << (S - 266)) | (1usize << (SCALAR - 266)) | (1usize << (SEC - 266)) | (1usize << (SECOND - 266)) | (1usize << (SECONDS - 266)) | (1usize << (SCHEMA - 266)) | (1usize << (SCHEMAS - 266)) | (1usize << (SECURITY - 266)) | (1usize << (SEEK - 266)) | (1usize << (SEMI - 266)) | (1usize << (SERIALIZABLE - 266)) | (1usize << (SESSION - 266)) | (1usize << (SET - 266)) | (1usize << (SETS - 266)) | (1usize << (SHOW - 266)) | (1usize << (SNAPSHOT - 266)) | (1usize << (SOME - 266)) | (1usize << (START - 266)) | (1usize << (STATS - 266)) | (1usize << (STRUCT - 266)) | (1usize << (SUBSET - 266)) | (1usize << (SUBSTRING - 266)) | (1usize << (SYSTEM - 266)) | (1usize << (SYSTEM_TIME - 266)))) != 0) || ((((_la - 298)) & !0x3f) == 0 && ((1usize << (_la - 298)) & ((1usize << (TABLES - 298)) | (1usize << (TABLESAMPLE - 298)) | (1usize << (TEMP - 298)) | (1usize << (TEMPORARY - 298)) | (1usize << (TEXT - 298)) | (1usize << (STRING_KW - 298)) | (1usize << (TIES - 298)) | (1usize << (TIME - 298)) | (1usize << (TIMESTAMP - 298)) | (1usize << (TO - 298)) | (1usize << (TRAILING - 298)) | (1usize << (TRANSACTION - 298)) | (1usize << (TRIM - 298)) | (1usize << (TRUE - 298)) | (1usize << (TRUNCATE - 298)) | (1usize << (TRY_CAST - 298)) | (1usize << (TUPLE - 298)) | (1usize << (TYPE - 298)) | (1usize << (UNBOUNDED - 298)) | (1usize << (UNCOMMITTED - 298)) | (1usize << (UNCONDITIONAL - 298)) | (1usize << (UNIQUE - 298)) | (1usize << (UNKNOWN - 298)) | (1usize << (UNLOAD - 298)) | (1usize << (UNMATCHED - 298)))) != 0) || ((((_la - 330)) & !0x3f) == 0 && ((1usize << (_la - 330)) & ((1usize << (UPDATE - 330)) | (1usize << (USE - 330)) | (1usize << (USER - 330)) | (1usize << (UTF16 - 330)) | (1usize << (UTF32 - 330)) | (1usize << (UTF8 - 330)) | (1usize << (VACUUM - 330)) | (1usize << (VALIDATE - 330)) | (1usize << (VALUE - 330)) | (1usize << (VARYING - 330)) | (1usize << (VERBOSE - 330)) | (1usize << (VERSION - 330)) | (1usize << (VIEW - 330)) | (1usize << (WEEK - 330)) | (1usize << (WINDOW - 330)) | (1usize << (WITHIN - 330)) | (1usize << (WITHOUT - 330)) | (1usize << (WORK - 330)) | (1usize << (WRAPPER - 330)) | (1usize << (WRITE - 330)) | (1usize << (XZ - 330)) | (1usize << (YEAR - 330)) | (1usize << (YEARS - 330)) | (1usize << (ZONE - 330)) | (1usize << (ZSTD - 330)) | (1usize << (LPAREN - 330)))) != 0) || ((((_la - 363)) & !0x3f) == 0 && ((1usize << (_la - 363)) & ((1usize << (LBRACKET - 363)) | (1usize << (PLUS - 363)) | (1usize << (MINUS - 363)) | (1usize << (POSIX - 363)) | (1usize << (STRING - 363)) | (1usize << (UNICODE_STRING - 363)) | (1usize << (BINARY_LITERAL - 363)) | (1usize << (INTEGER_VALUE - 363)) | (1usize << (DECIMAL_VALUE - 363)) | (1usize << (DOUBLE_VALUE - 363)) | (1usize << (IDENTIFIER - 363)) | (1usize << (QUOTED_IDENTIFIER - 363)) | (1usize << (VARIABLE - 363)))) != 0) {
						{
						/*InvokeRule expression*/
						recog.base.set_state(2360);
						recog.expression()?;

						recog.base.set_state(2365);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(313,&mut recog.base)?;
						while { _alt!=2 && _alt!=INVALID_ALT } {
							if _alt==1 {
								{
								{
								recog.base.set_state(2361);
								recog.base.match_token(COMMA,&mut recog.err_handler)?;

								/*InvokeRule expression*/
								recog.base.set_state(2362);
								recog.expression()?;

								}
								} 
							}
							recog.base.set_state(2367);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(313,&mut recog.base)?;
						}
						recog.base.set_state(2369);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==COMMA {
							{
							recog.base.set_state(2368);
							let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
							if let PrimaryExpressionContextAll::ArrayContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
							ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

							}
						}

						}
					}

					recog.base.set_state(2373);
					recog.base.match_token(RBRACKET,&mut recog.err_handler)?;

					}
				}
			,
				39 =>{
					{
					let mut tmp = VariableContextExt::new(&**_localctx);
					recog.ctx = Some(tmp.clone());
					_localctx = tmp;
					_prevctx = _localctx.clone();
					recog.base.set_state(2374);
					recog.base.match_token(VARIABLE,&mut recog.err_handler)?;

					}
				}

				_ => {}
			}

			let tmp = recog.input.lt(-1).cloned();
			recog.ctx.as_ref().unwrap().set_stop(tmp);
			recog.base.set_state(2387);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(318,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					recog.trigger_exit_rule_event();
					_prevctx = _localctx.clone();
					{
					recog.base.set_state(2385);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(317,&mut recog.base)? {
						1 =>{
							{
							/*recRuleLabeledAltStartAction*/
							let mut tmp = SubscriptContextExt::new(&**PrimaryExpressionContextExt::new(_parentctx.clone(), _parentState));
							if let PrimaryExpressionContextAll::SubscriptContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut tmp){
								ctx.value = Some(_prevctx.clone());
							} else {unreachable!("cant cast");}
							recog.push_new_recursion_context(tmp.clone(), _startState, RULE_primaryExpression);
							_localctx = tmp;
							recog.base.set_state(2377);
							if !({recog.precpred(None, 11)}) {
								Err(FailedPredicateError::new(&mut recog.base, Some("recog.precpred(None, 11)".to_owned()), None))?;
							}
							recog.base.set_state(2378);
							recog.base.match_token(LBRACKET,&mut recog.err_handler)?;

							/*InvokeRule valueExpression*/
							recog.base.set_state(2379);
							let tmp = recog.valueExpression_rec(0)?;
							if let PrimaryExpressionContextAll::SubscriptContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
							ctx.index = Some(tmp.clone()); } else {unreachable!("cant cast");}  

							recog.base.set_state(2380);
							recog.base.match_token(RBRACKET,&mut recog.err_handler)?;

							}
						}
					,
						2 =>{
							{
							/*recRuleLabeledAltStartAction*/
							let mut tmp = DereferenceContextExt::new(&**PrimaryExpressionContextExt::new(_parentctx.clone(), _parentState));
							if let PrimaryExpressionContextAll::DereferenceContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut tmp){
								ctx.base_ = Some(_prevctx.clone());
							} else {unreachable!("cant cast");}
							recog.push_new_recursion_context(tmp.clone(), _startState, RULE_primaryExpression);
							_localctx = tmp;
							recog.base.set_state(2382);
							if !({recog.precpred(None, 10)}) {
								Err(FailedPredicateError::new(&mut recog.base, Some("recog.precpred(None, 10)".to_owned()), None))?;
							}
							recog.base.set_state(2383);
							recog.base.match_token(DOT,&mut recog.err_handler)?;

							/*InvokeRule columnNameComponent*/
							recog.base.set_state(2384);
							let tmp = recog.columnNameComponent()?;
							if let PrimaryExpressionContextAll::DereferenceContext(ctx) = cast_mut::<_,PrimaryExpressionContextAll >(&mut _localctx){
							ctx.fieldName = Some(tmp.clone()); } else {unreachable!("cant cast");}  

							}
						}

						_ => {}
					}
					} 
				}
				recog.base.set_state(2389);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(318,&mut recog.base)?;
			}
			}
			Ok(())
		})();
		match result {
		Ok(_) => {},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re)=>{
			//_localctx.exception = re;
			recog.err_handler.report_error(&mut recog.base, re);
	        recog.err_handler.recover(&mut recog.base, re)?;}
		}
		recog.base.unroll_recursion_context(_parentctx);

		Ok(_localctx)
	}
}
//------------------- functionCallHead ----------------
pub type FunctionCallHeadContextAll<'input> = FunctionCallHeadContext<'input>;


pub type FunctionCallHeadContext<'input> = BaseParserRuleContext<'input,FunctionCallHeadContextExt<'input>>;

#[derive(Clone)]
pub struct FunctionCallHeadContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for FunctionCallHeadContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for FunctionCallHeadContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_functionCallHead(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_functionCallHead(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for FunctionCallHeadContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_functionCallHead(self);
	}
}

impl<'input> CustomRuleContext<'input> for FunctionCallHeadContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_functionCallHead }
	//fn type_rule_index() -> usize where Self: Sized { RULE_functionCallHead }
}
antlr_rust::tid!{FunctionCallHeadContextExt<'a>}

impl<'input> FunctionCallHeadContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<FunctionCallHeadContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,FunctionCallHeadContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait FunctionCallHeadContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<FunctionCallHeadContextExt<'input>>{

fn processingMode(&self) -> Option<Rc<ProcessingModeContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> FunctionCallHeadContextAttrs<'input> for FunctionCallHeadContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn functionCallHead(&mut self,)
	-> Result<Rc<FunctionCallHeadContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = FunctionCallHeadContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 182, RULE_functionCallHead);
        let mut _localctx: Rc<FunctionCallHeadContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2391);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(319,&mut recog.base)? {
				x if x == 1=>{
					{
					/*InvokeRule processingMode*/
					recog.base.set_state(2390);
					recog.processingMode()?;

					}
				}

				_ => {}
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- functionCallTail ----------------
pub type FunctionCallTailContextAll<'input> = FunctionCallTailContext<'input>;


pub type FunctionCallTailContext<'input> = BaseParserRuleContext<'input,FunctionCallTailContextExt<'input>>;

#[derive(Clone)]
pub struct FunctionCallTailContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for FunctionCallTailContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for FunctionCallTailContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_functionCallTail(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_functionCallTail(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for FunctionCallTailContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_functionCallTail(self);
	}
}

impl<'input> CustomRuleContext<'input> for FunctionCallTailContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_functionCallTail }
	//fn type_rule_index() -> usize where Self: Sized { RULE_functionCallTail }
}
antlr_rust::tid!{FunctionCallTailContextExt<'a>}

impl<'input> FunctionCallTailContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<FunctionCallTailContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,FunctionCallTailContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait FunctionCallTailContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<FunctionCallTailContextExt<'input>>{

fn filter(&self) -> Option<Rc<FilterContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn over(&self) -> Option<Rc<OverContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn nullTreatment(&self) -> Option<Rc<NullTreatmentContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> FunctionCallTailContextAttrs<'input> for FunctionCallTailContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn functionCallTail(&mut self,)
	-> Result<Rc<FunctionCallTailContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = FunctionCallTailContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 184, RULE_functionCallTail);
        let mut _localctx: Rc<FunctionCallTailContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2394);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(320,&mut recog.base)? {
				x if x == 1=>{
					{
					/*InvokeRule filter*/
					recog.base.set_state(2393);
					recog.filter()?;

					}
				}

				_ => {}
			}
			recog.base.set_state(2400);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(322,&mut recog.base)? {
				x if x == 1=>{
					{
					recog.base.set_state(2397);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==IGNORE || _la==RESPECT {
						{
						/*InvokeRule nullTreatment*/
						recog.base.set_state(2396);
						recog.nullTreatment()?;

						}
					}

					/*InvokeRule over*/
					recog.base.set_state(2399);
					recog.over()?;

					}
				}

				_ => {}
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- callArgument ----------------
#[derive(Debug)]
pub enum CallArgumentContextAll<'input>{
	PositionalArgumentContext(PositionalArgumentContext<'input>),
Error(CallArgumentContext<'input>)
}
antlr_rust::tid!{CallArgumentContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for CallArgumentContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for CallArgumentContextAll<'input>{}

impl<'input> Deref for CallArgumentContextAll<'input>{
	type Target = dyn CallArgumentContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use CallArgumentContextAll::*;
		match self{
			PositionalArgumentContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CallArgumentContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CallArgumentContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type CallArgumentContext<'input> = BaseParserRuleContext<'input,CallArgumentContextExt<'input>>;

#[derive(Clone)]
pub struct CallArgumentContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for CallArgumentContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CallArgumentContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CallArgumentContext<'input>{
}

impl<'input> CustomRuleContext<'input> for CallArgumentContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_callArgument }
	//fn type_rule_index() -> usize where Self: Sized { RULE_callArgument }
}
antlr_rust::tid!{CallArgumentContextExt<'a>}

impl<'input> CallArgumentContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<CallArgumentContextAll<'input>> {
		Rc::new(
		CallArgumentContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,CallArgumentContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait CallArgumentContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<CallArgumentContextExt<'input>>{


}

impl<'input> CallArgumentContextAttrs<'input> for CallArgumentContext<'input>{}

pub type PositionalArgumentContext<'input> = BaseParserRuleContext<'input,PositionalArgumentContextExt<'input>>;

pub trait PositionalArgumentContextAttrs<'input>: TrinoParserContext<'input>{
	fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> PositionalArgumentContextAttrs<'input> for PositionalArgumentContext<'input>{}

pub struct PositionalArgumentContextExt<'input>{
	base:CallArgumentContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PositionalArgumentContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PositionalArgumentContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PositionalArgumentContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_positionalArgument(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_positionalArgument(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PositionalArgumentContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_positionalArgument(self);
	}
}

impl<'input> CustomRuleContext<'input> for PositionalArgumentContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_callArgument }
	//fn type_rule_index() -> usize where Self: Sized { RULE_callArgument }
}

impl<'input> Borrow<CallArgumentContextExt<'input>> for PositionalArgumentContext<'input>{
	fn borrow(&self) -> &CallArgumentContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<CallArgumentContextExt<'input>> for PositionalArgumentContext<'input>{
	fn borrow_mut(&mut self) -> &mut CallArgumentContextExt<'input> { &mut self.base }
}

impl<'input> CallArgumentContextAttrs<'input> for PositionalArgumentContext<'input> {}

impl<'input> PositionalArgumentContextExt<'input>{
	fn new(ctx: &dyn CallArgumentContextAttrs<'input>) -> Rc<CallArgumentContextAll<'input>>  {
		Rc::new(
			CallArgumentContextAll::PositionalArgumentContext(
				BaseParserRuleContext::copy_from(ctx,PositionalArgumentContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn callArgument(&mut self,)
	-> Result<Rc<CallArgumentContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = CallArgumentContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 186, RULE_callArgument);
        let mut _localctx: Rc<CallArgumentContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			let tmp = PositionalArgumentContextExt::new(&**_localctx);
			recog.base.enter_outer_alt(Some(tmp.clone()), 1);
			_localctx = tmp;
			{
			/*InvokeRule expression*/
			recog.base.set_state(2402);
			recog.expression()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- functionExtraArguments ----------------
pub type FunctionExtraArgumentsContextAll<'input> = FunctionExtraArgumentsContext<'input>;


pub type FunctionExtraArgumentsContext<'input> = BaseParserRuleContext<'input,FunctionExtraArgumentsContextExt<'input>>;

#[derive(Clone)]
pub struct FunctionExtraArgumentsContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for FunctionExtraArgumentsContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for FunctionExtraArgumentsContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_functionExtraArguments(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_functionExtraArguments(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for FunctionExtraArgumentsContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_functionExtraArguments(self);
	}
}

impl<'input> CustomRuleContext<'input> for FunctionExtraArgumentsContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_functionExtraArguments }
	//fn type_rule_index() -> usize where Self: Sized { RULE_functionExtraArguments }
}
antlr_rust::tid!{FunctionExtraArgumentsContextExt<'a>}

impl<'input> FunctionExtraArgumentsContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<FunctionExtraArgumentsContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,FunctionExtraArgumentsContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait FunctionExtraArgumentsContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<FunctionExtraArgumentsContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token ORDER
/// Returns `None` if there is no child corresponding to token ORDER
fn ORDER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ORDER, 0)
}
/// Retrieves first TerminalNode corresponding to token BY
/// Returns `None` if there is no child corresponding to token BY
fn BY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(BY, 0)
}
fn sortItem_all(&self) ->  Vec<Rc<SortItemContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn sortItem(&self, i: usize) -> Option<Rc<SortItemContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> FunctionExtraArgumentsContextAttrs<'input> for FunctionExtraArgumentsContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn functionExtraArguments(&mut self,)
	-> Result<Rc<FunctionExtraArgumentsContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = FunctionExtraArgumentsContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 188, RULE_functionExtraArguments);
        let mut _localctx: Rc<FunctionExtraArgumentsContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2414);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==ORDER {
				{
				recog.base.set_state(2404);
				recog.base.match_token(ORDER,&mut recog.err_handler)?;

				recog.base.set_state(2405);
				recog.base.match_token(BY,&mut recog.err_handler)?;

				/*InvokeRule sortItem*/
				recog.base.set_state(2406);
				recog.sortItem()?;

				recog.base.set_state(2411);
				recog.err_handler.sync(&mut recog.base)?;
				_la = recog.base.input.la(1);
				while _la==COMMA {
					{
					{
					recog.base.set_state(2407);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule sortItem*/
					recog.base.set_state(2408);
					recog.sortItem()?;

					}
					}
					recog.base.set_state(2413);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
				}
				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- functionName ----------------
pub type FunctionNameContextAll<'input> = FunctionNameContext<'input>;


pub type FunctionNameContext<'input> = BaseParserRuleContext<'input,FunctionNameContextExt<'input>>;

#[derive(Clone)]
pub struct FunctionNameContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for FunctionNameContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for FunctionNameContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_functionName(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_functionName(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for FunctionNameContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_functionName(self);
	}
}

impl<'input> CustomRuleContext<'input> for FunctionNameContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_functionName }
	//fn type_rule_index() -> usize where Self: Sized { RULE_functionName }
}
antlr_rust::tid!{FunctionNameContextExt<'a>}

impl<'input> FunctionNameContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<FunctionNameContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,FunctionNameContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait FunctionNameContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<FunctionNameContextExt<'input>>{

fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token LEFT
/// Returns `None` if there is no child corresponding to token LEFT
fn LEFT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LEFT, 0)
}
/// Retrieves first TerminalNode corresponding to token RIGHT
/// Returns `None` if there is no child corresponding to token RIGHT
fn RIGHT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RIGHT, 0)
}
/// Retrieves first TerminalNode corresponding to token IF
/// Returns `None` if there is no child corresponding to token IF
fn IF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(IF, 0)
}
/// Retrieves first TerminalNode corresponding to token REPLACE
/// Returns `None` if there is no child corresponding to token REPLACE
fn REPLACE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(REPLACE, 0)
}
/// Retrieves first TerminalNode corresponding to token GROUPING
/// Returns `None` if there is no child corresponding to token GROUPING
fn GROUPING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(GROUPING, 0)
}

}

impl<'input> FunctionNameContextAttrs<'input> for FunctionNameContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn functionName(&mut self,)
	-> Result<Rc<FunctionNameContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = FunctionNameContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 190, RULE_functionName);
        let mut _localctx: Rc<FunctionNameContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2422);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(325,&mut recog.base)? {
				1 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					/*InvokeRule qualifiedName*/
					recog.base.set_state(2416);
					recog.qualifiedName()?;

					}
				}
			,
				2 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(2417);
					recog.base.match_token(LEFT,&mut recog.err_handler)?;

					}
				}
			,
				3 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 3);
					recog.base.enter_outer_alt(None, 3);
					{
					recog.base.set_state(2418);
					recog.base.match_token(RIGHT,&mut recog.err_handler)?;

					}
				}
			,
				4 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 4);
					recog.base.enter_outer_alt(None, 4);
					{
					recog.base.set_state(2419);
					recog.base.match_token(IF,&mut recog.err_handler)?;

					}
				}
			,
				5 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 5);
					recog.base.enter_outer_alt(None, 5);
					{
					recog.base.set_state(2420);
					recog.base.match_token(REPLACE,&mut recog.err_handler)?;

					}
				}
			,
				6 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 6);
					recog.base.enter_outer_alt(None, 6);
					{
					recog.base.set_state(2421);
					recog.base.match_token(GROUPING,&mut recog.err_handler)?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- field ----------------
pub type FieldContextAll<'input> = FieldContext<'input>;


pub type FieldContext<'input> = BaseParserRuleContext<'input,FieldContextExt<'input>>;

#[derive(Clone)]
pub struct FieldContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for FieldContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for FieldContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_field(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_field(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for FieldContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_field(self);
	}
}

impl<'input> CustomRuleContext<'input> for FieldContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_field }
	//fn type_rule_index() -> usize where Self: Sized { RULE_field }
}
antlr_rust::tid!{FieldContextExt<'a>}

impl<'input> FieldContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<FieldContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,FieldContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait FieldContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<FieldContextExt<'input>>{

fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token AS
/// Returns `None` if there is no child corresponding to token AS
fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(AS, 0)
}
fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> FieldContextAttrs<'input> for FieldContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn field(&mut self,)
	-> Result<Rc<FieldContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = FieldContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 192, RULE_field);
        let mut _localctx: Rc<FieldContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule expression*/
			recog.base.set_state(2424);
			recog.expression()?;

			recog.base.set_state(2427);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==AS {
				{
				recog.base.set_state(2425);
				recog.base.match_token(AS,&mut recog.err_handler)?;

				/*InvokeRule identifier*/
				recog.base.set_state(2426);
				recog.identifier()?;

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- jsonPathInvocation ----------------
pub type JsonPathInvocationContextAll<'input> = JsonPathInvocationContext<'input>;


pub type JsonPathInvocationContext<'input> = BaseParserRuleContext<'input,JsonPathInvocationContextExt<'input>>;

#[derive(Clone)]
pub struct JsonPathInvocationContextExt<'input>{
	pub path: Option<Rc<StringContextAll<'input>>>,
	pub COMMA: Option<TokenType<'input>>,
	pub tail:Vec<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for JsonPathInvocationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JsonPathInvocationContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_jsonPathInvocation(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_jsonPathInvocation(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JsonPathInvocationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_jsonPathInvocation(self);
	}
}

impl<'input> CustomRuleContext<'input> for JsonPathInvocationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_jsonPathInvocation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_jsonPathInvocation }
}
antlr_rust::tid!{JsonPathInvocationContextExt<'a>}

impl<'input> JsonPathInvocationContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<JsonPathInvocationContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,JsonPathInvocationContextExt{
				COMMA: None, 
				tail: Vec::new(), 
				path: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait JsonPathInvocationContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<JsonPathInvocationContextExt<'input>>{

fn jsonValueExpression(&self) -> Option<Rc<JsonValueExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}
fn string(&self) -> Option<Rc<StringContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token PASSING
/// Returns `None` if there is no child corresponding to token PASSING
fn PASSING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PASSING, 0)
}
fn jsonArgument_all(&self) ->  Vec<Rc<JsonArgumentContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn jsonArgument(&self, i: usize) -> Option<Rc<JsonArgumentContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}

}

impl<'input> JsonPathInvocationContextAttrs<'input> for JsonPathInvocationContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn jsonPathInvocation(&mut self,)
	-> Result<Rc<JsonPathInvocationContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = JsonPathInvocationContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 194, RULE_jsonPathInvocation);
        let mut _localctx: Rc<JsonPathInvocationContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule jsonValueExpression*/
			recog.base.set_state(2429);
			recog.jsonValueExpression()?;

			recog.base.set_state(2430);
			recog.base.match_token(COMMA,&mut recog.err_handler)?;

			/*InvokeRule string*/
			recog.base.set_state(2431);
			let tmp = recog.string()?;
			 cast_mut::<_,JsonPathInvocationContext >(&mut _localctx).path = Some(tmp.clone());
			  

			recog.base.set_state(2433);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(327,&mut recog.base)? {
				x if x == 1=>{
					{
					recog.base.set_state(2432);
					let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
					 cast_mut::<_,JsonPathInvocationContext >(&mut _localctx).COMMA = Some(tmp);
					  

					let temp =  cast_mut::<_,JsonPathInvocationContext >(&mut _localctx).COMMA.clone().unwrap()
					 ;
					 cast_mut::<_,JsonPathInvocationContext >(&mut _localctx).tail.push(temp);
					  
					}
				}

				_ => {}
			}
			recog.base.set_state(2444);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==PASSING {
				{
				recog.base.set_state(2435);
				recog.base.match_token(PASSING,&mut recog.err_handler)?;

				/*InvokeRule jsonArgument*/
				recog.base.set_state(2436);
				recog.jsonArgument()?;

				recog.base.set_state(2441);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(328,&mut recog.base)?;
				while { _alt!=2 && _alt!=INVALID_ALT } {
					if _alt==1 {
						{
						{
						recog.base.set_state(2437);
						recog.base.match_token(COMMA,&mut recog.err_handler)?;

						/*InvokeRule jsonArgument*/
						recog.base.set_state(2438);
						recog.jsonArgument()?;

						}
						} 
					}
					recog.base.set_state(2443);
					recog.err_handler.sync(&mut recog.base)?;
					_alt = recog.interpreter.adaptive_predict(328,&mut recog.base)?;
				}
				}
			}

			recog.base.set_state(2447);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==COMMA {
				{
				recog.base.set_state(2446);
				let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
				 cast_mut::<_,JsonPathInvocationContext >(&mut _localctx).COMMA = Some(tmp);
				  

				let temp =  cast_mut::<_,JsonPathInvocationContext >(&mut _localctx).COMMA.clone().unwrap()
				 ;
				 cast_mut::<_,JsonPathInvocationContext >(&mut _localctx).tail.push(temp);
				  
				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- jsonValueExpression ----------------
pub type JsonValueExpressionContextAll<'input> = JsonValueExpressionContext<'input>;


pub type JsonValueExpressionContext<'input> = BaseParserRuleContext<'input,JsonValueExpressionContextExt<'input>>;

#[derive(Clone)]
pub struct JsonValueExpressionContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for JsonValueExpressionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JsonValueExpressionContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_jsonValueExpression(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_jsonValueExpression(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JsonValueExpressionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_jsonValueExpression(self);
	}
}

impl<'input> CustomRuleContext<'input> for JsonValueExpressionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_jsonValueExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_jsonValueExpression }
}
antlr_rust::tid!{JsonValueExpressionContextExt<'a>}

impl<'input> JsonValueExpressionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<JsonValueExpressionContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,JsonValueExpressionContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait JsonValueExpressionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<JsonValueExpressionContextExt<'input>>{

fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token FORMAT
/// Returns `None` if there is no child corresponding to token FORMAT
fn FORMAT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FORMAT, 0)
}
fn jsonRepresentation(&self) -> Option<Rc<JsonRepresentationContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> JsonValueExpressionContextAttrs<'input> for JsonValueExpressionContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn jsonValueExpression(&mut self,)
	-> Result<Rc<JsonValueExpressionContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = JsonValueExpressionContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 196, RULE_jsonValueExpression);
        let mut _localctx: Rc<JsonValueExpressionContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule expression*/
			recog.base.set_state(2449);
			recog.expression()?;

			recog.base.set_state(2452);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==FORMAT {
				{
				recog.base.set_state(2450);
				recog.base.match_token(FORMAT,&mut recog.err_handler)?;

				/*InvokeRule jsonRepresentation*/
				recog.base.set_state(2451);
				recog.jsonRepresentation()?;

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- jsonRepresentation ----------------
pub type JsonRepresentationContextAll<'input> = JsonRepresentationContext<'input>;


pub type JsonRepresentationContext<'input> = BaseParserRuleContext<'input,JsonRepresentationContextExt<'input>>;

#[derive(Clone)]
pub struct JsonRepresentationContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for JsonRepresentationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JsonRepresentationContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_jsonRepresentation(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_jsonRepresentation(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JsonRepresentationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_jsonRepresentation(self);
	}
}

impl<'input> CustomRuleContext<'input> for JsonRepresentationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_jsonRepresentation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_jsonRepresentation }
}
antlr_rust::tid!{JsonRepresentationContextExt<'a>}

impl<'input> JsonRepresentationContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<JsonRepresentationContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,JsonRepresentationContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait JsonRepresentationContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<JsonRepresentationContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token JSON
/// Returns `None` if there is no child corresponding to token JSON
fn JSON(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(JSON, 0)
}
/// Retrieves first TerminalNode corresponding to token ENCODING
/// Returns `None` if there is no child corresponding to token ENCODING
fn ENCODING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ENCODING, 0)
}
/// Retrieves first TerminalNode corresponding to token UTF8
/// Returns `None` if there is no child corresponding to token UTF8
fn UTF8(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UTF8, 0)
}
/// Retrieves first TerminalNode corresponding to token UTF16
/// Returns `None` if there is no child corresponding to token UTF16
fn UTF16(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UTF16, 0)
}
/// Retrieves first TerminalNode corresponding to token UTF32
/// Returns `None` if there is no child corresponding to token UTF32
fn UTF32(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UTF32, 0)
}

}

impl<'input> JsonRepresentationContextAttrs<'input> for JsonRepresentationContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn jsonRepresentation(&mut self,)
	-> Result<Rc<JsonRepresentationContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = JsonRepresentationContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 198, RULE_jsonRepresentation);
        let mut _localctx: Rc<JsonRepresentationContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2454);
			recog.base.match_token(JSON,&mut recog.err_handler)?;

			recog.base.set_state(2457);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==ENCODING {
				{
				recog.base.set_state(2455);
				recog.base.match_token(ENCODING,&mut recog.err_handler)?;

				recog.base.set_state(2456);
				_la = recog.base.input.la(1);
				if { !(((((_la - 334)) & !0x3f) == 0 && ((1usize << (_la - 334)) & ((1usize << (UTF16 - 334)) | (1usize << (UTF32 - 334)) | (1usize << (UTF8 - 334)))) != 0)) } {
					recog.err_handler.recover_inline(&mut recog.base)?;

				}
				else {
					if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
					recog.err_handler.report_match(&mut recog.base);
					recog.base.consume(&mut recog.err_handler);
				}
				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- jsonArgument ----------------
pub type JsonArgumentContextAll<'input> = JsonArgumentContext<'input>;


pub type JsonArgumentContext<'input> = BaseParserRuleContext<'input,JsonArgumentContextExt<'input>>;

#[derive(Clone)]
pub struct JsonArgumentContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for JsonArgumentContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JsonArgumentContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_jsonArgument(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_jsonArgument(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JsonArgumentContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_jsonArgument(self);
	}
}

impl<'input> CustomRuleContext<'input> for JsonArgumentContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_jsonArgument }
	//fn type_rule_index() -> usize where Self: Sized { RULE_jsonArgument }
}
antlr_rust::tid!{JsonArgumentContextExt<'a>}

impl<'input> JsonArgumentContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<JsonArgumentContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,JsonArgumentContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait JsonArgumentContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<JsonArgumentContextExt<'input>>{

fn jsonValueExpression(&self) -> Option<Rc<JsonValueExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token AS
/// Returns `None` if there is no child corresponding to token AS
fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(AS, 0)
}
fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> JsonArgumentContextAttrs<'input> for JsonArgumentContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn jsonArgument(&mut self,)
	-> Result<Rc<JsonArgumentContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = JsonArgumentContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 200, RULE_jsonArgument);
        let mut _localctx: Rc<JsonArgumentContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule jsonValueExpression*/
			recog.base.set_state(2459);
			recog.jsonValueExpression()?;

			recog.base.set_state(2460);
			recog.base.match_token(AS,&mut recog.err_handler)?;

			/*InvokeRule identifier*/
			recog.base.set_state(2461);
			recog.identifier()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- jsonExistsErrorBehavior ----------------
pub type JsonExistsErrorBehaviorContextAll<'input> = JsonExistsErrorBehaviorContext<'input>;


pub type JsonExistsErrorBehaviorContext<'input> = BaseParserRuleContext<'input,JsonExistsErrorBehaviorContextExt<'input>>;

#[derive(Clone)]
pub struct JsonExistsErrorBehaviorContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for JsonExistsErrorBehaviorContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JsonExistsErrorBehaviorContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_jsonExistsErrorBehavior(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_jsonExistsErrorBehavior(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JsonExistsErrorBehaviorContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_jsonExistsErrorBehavior(self);
	}
}

impl<'input> CustomRuleContext<'input> for JsonExistsErrorBehaviorContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_jsonExistsErrorBehavior }
	//fn type_rule_index() -> usize where Self: Sized { RULE_jsonExistsErrorBehavior }
}
antlr_rust::tid!{JsonExistsErrorBehaviorContextExt<'a>}

impl<'input> JsonExistsErrorBehaviorContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<JsonExistsErrorBehaviorContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,JsonExistsErrorBehaviorContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait JsonExistsErrorBehaviorContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<JsonExistsErrorBehaviorContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token TRUE
/// Returns `None` if there is no child corresponding to token TRUE
fn TRUE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TRUE, 0)
}
/// Retrieves first TerminalNode corresponding to token FALSE
/// Returns `None` if there is no child corresponding to token FALSE
fn FALSE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FALSE, 0)
}
/// Retrieves first TerminalNode corresponding to token UNKNOWN
/// Returns `None` if there is no child corresponding to token UNKNOWN
fn UNKNOWN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UNKNOWN, 0)
}
/// Retrieves first TerminalNode corresponding to token ERROR
/// Returns `None` if there is no child corresponding to token ERROR
fn ERROR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ERROR, 0)
}

}

impl<'input> JsonExistsErrorBehaviorContextAttrs<'input> for JsonExistsErrorBehaviorContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn jsonExistsErrorBehavior(&mut self,)
	-> Result<Rc<JsonExistsErrorBehaviorContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = JsonExistsErrorBehaviorContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 202, RULE_jsonExistsErrorBehavior);
        let mut _localctx: Rc<JsonExistsErrorBehaviorContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2463);
			_la = recog.base.input.la(1);
			if { !(_la==ERROR || _la==FALSE || _la==TRUE || _la==UNKNOWN) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- jsonValueBehavior ----------------
pub type JsonValueBehaviorContextAll<'input> = JsonValueBehaviorContext<'input>;


pub type JsonValueBehaviorContext<'input> = BaseParserRuleContext<'input,JsonValueBehaviorContextExt<'input>>;

#[derive(Clone)]
pub struct JsonValueBehaviorContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for JsonValueBehaviorContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JsonValueBehaviorContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_jsonValueBehavior(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_jsonValueBehavior(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JsonValueBehaviorContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_jsonValueBehavior(self);
	}
}

impl<'input> CustomRuleContext<'input> for JsonValueBehaviorContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_jsonValueBehavior }
	//fn type_rule_index() -> usize where Self: Sized { RULE_jsonValueBehavior }
}
antlr_rust::tid!{JsonValueBehaviorContextExt<'a>}

impl<'input> JsonValueBehaviorContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<JsonValueBehaviorContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,JsonValueBehaviorContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait JsonValueBehaviorContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<JsonValueBehaviorContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token ERROR
/// Returns `None` if there is no child corresponding to token ERROR
fn ERROR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ERROR, 0)
}
/// Retrieves first TerminalNode corresponding to token NULL
/// Returns `None` if there is no child corresponding to token NULL
fn NULL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NULL, 0)
}
/// Retrieves first TerminalNode corresponding to token DEFAULT
/// Returns `None` if there is no child corresponding to token DEFAULT
fn DEFAULT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DEFAULT, 0)
}
fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> JsonValueBehaviorContextAttrs<'input> for JsonValueBehaviorContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn jsonValueBehavior(&mut self,)
	-> Result<Rc<JsonValueBehaviorContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = JsonValueBehaviorContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 204, RULE_jsonValueBehavior);
        let mut _localctx: Rc<JsonValueBehaviorContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2469);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 ERROR 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(2465);
					recog.base.match_token(ERROR,&mut recog.err_handler)?;

					}
				}

			 NULL 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(2466);
					recog.base.match_token(NULL,&mut recog.err_handler)?;

					}
				}

			 DEFAULT 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 3);
					recog.base.enter_outer_alt(None, 3);
					{
					recog.base.set_state(2467);
					recog.base.match_token(DEFAULT,&mut recog.err_handler)?;

					/*InvokeRule expression*/
					recog.base.set_state(2468);
					recog.expression()?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- jsonQueryWrapperBehavior ----------------
pub type JsonQueryWrapperBehaviorContextAll<'input> = JsonQueryWrapperBehaviorContext<'input>;


pub type JsonQueryWrapperBehaviorContext<'input> = BaseParserRuleContext<'input,JsonQueryWrapperBehaviorContextExt<'input>>;

#[derive(Clone)]
pub struct JsonQueryWrapperBehaviorContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for JsonQueryWrapperBehaviorContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JsonQueryWrapperBehaviorContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_jsonQueryWrapperBehavior(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_jsonQueryWrapperBehavior(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JsonQueryWrapperBehaviorContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_jsonQueryWrapperBehavior(self);
	}
}

impl<'input> CustomRuleContext<'input> for JsonQueryWrapperBehaviorContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_jsonQueryWrapperBehavior }
	//fn type_rule_index() -> usize where Self: Sized { RULE_jsonQueryWrapperBehavior }
}
antlr_rust::tid!{JsonQueryWrapperBehaviorContextExt<'a>}

impl<'input> JsonQueryWrapperBehaviorContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<JsonQueryWrapperBehaviorContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,JsonQueryWrapperBehaviorContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait JsonQueryWrapperBehaviorContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<JsonQueryWrapperBehaviorContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token WITHOUT
/// Returns `None` if there is no child corresponding to token WITHOUT
fn WITHOUT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WITHOUT, 0)
}
/// Retrieves first TerminalNode corresponding to token ARRAY
/// Returns `None` if there is no child corresponding to token ARRAY
fn ARRAY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ARRAY, 0)
}
/// Retrieves first TerminalNode corresponding to token WITH
/// Returns `None` if there is no child corresponding to token WITH
fn WITH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WITH, 0)
}
/// Retrieves first TerminalNode corresponding to token CONDITIONAL
/// Returns `None` if there is no child corresponding to token CONDITIONAL
fn CONDITIONAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(CONDITIONAL, 0)
}
/// Retrieves first TerminalNode corresponding to token UNCONDITIONAL
/// Returns `None` if there is no child corresponding to token UNCONDITIONAL
fn UNCONDITIONAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UNCONDITIONAL, 0)
}

}

impl<'input> JsonQueryWrapperBehaviorContextAttrs<'input> for JsonQueryWrapperBehaviorContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn jsonQueryWrapperBehavior(&mut self,)
	-> Result<Rc<JsonQueryWrapperBehaviorContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = JsonQueryWrapperBehaviorContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 206, RULE_jsonQueryWrapperBehavior);
        let mut _localctx: Rc<JsonQueryWrapperBehaviorContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2482);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 WITHOUT 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(2471);
					recog.base.match_token(WITHOUT,&mut recog.err_handler)?;

					recog.base.set_state(2473);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==ARRAY {
						{
						recog.base.set_state(2472);
						recog.base.match_token(ARRAY,&mut recog.err_handler)?;

						}
					}

					}
				}

			 WITH 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(2475);
					recog.base.match_token(WITH,&mut recog.err_handler)?;

					recog.base.set_state(2477);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==CONDITIONAL || _la==UNCONDITIONAL {
						{
						recog.base.set_state(2476);
						_la = recog.base.input.la(1);
						if { !(_la==CONDITIONAL || _la==UNCONDITIONAL) } {
							recog.err_handler.recover_inline(&mut recog.base)?;

						}
						else {
							if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
							recog.err_handler.report_match(&mut recog.base);
							recog.base.consume(&mut recog.err_handler);
						}
						}
					}

					recog.base.set_state(2480);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==ARRAY {
						{
						recog.base.set_state(2479);
						recog.base.match_token(ARRAY,&mut recog.err_handler)?;

						}
					}

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- jsonQueryBehavior ----------------
pub type JsonQueryBehaviorContextAll<'input> = JsonQueryBehaviorContext<'input>;


pub type JsonQueryBehaviorContext<'input> = BaseParserRuleContext<'input,JsonQueryBehaviorContextExt<'input>>;

#[derive(Clone)]
pub struct JsonQueryBehaviorContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for JsonQueryBehaviorContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JsonQueryBehaviorContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_jsonQueryBehavior(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_jsonQueryBehavior(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JsonQueryBehaviorContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_jsonQueryBehavior(self);
	}
}

impl<'input> CustomRuleContext<'input> for JsonQueryBehaviorContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_jsonQueryBehavior }
	//fn type_rule_index() -> usize where Self: Sized { RULE_jsonQueryBehavior }
}
antlr_rust::tid!{JsonQueryBehaviorContextExt<'a>}

impl<'input> JsonQueryBehaviorContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<JsonQueryBehaviorContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,JsonQueryBehaviorContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait JsonQueryBehaviorContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<JsonQueryBehaviorContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token ERROR
/// Returns `None` if there is no child corresponding to token ERROR
fn ERROR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ERROR, 0)
}
/// Retrieves first TerminalNode corresponding to token NULL
/// Returns `None` if there is no child corresponding to token NULL
fn NULL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NULL, 0)
}
/// Retrieves first TerminalNode corresponding to token EMPTY
/// Returns `None` if there is no child corresponding to token EMPTY
fn EMPTY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EMPTY, 0)
}
/// Retrieves first TerminalNode corresponding to token ARRAY
/// Returns `None` if there is no child corresponding to token ARRAY
fn ARRAY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ARRAY, 0)
}
/// Retrieves first TerminalNode corresponding to token OBJECT
/// Returns `None` if there is no child corresponding to token OBJECT
fn OBJECT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(OBJECT, 0)
}

}

impl<'input> JsonQueryBehaviorContextAttrs<'input> for JsonQueryBehaviorContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn jsonQueryBehavior(&mut self,)
	-> Result<Rc<JsonQueryBehaviorContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = JsonQueryBehaviorContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 208, RULE_jsonQueryBehavior);
        let mut _localctx: Rc<JsonQueryBehaviorContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2490);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(338,&mut recog.base)? {
				1 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(2484);
					recog.base.match_token(ERROR,&mut recog.err_handler)?;

					}
				}
			,
				2 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(2485);
					recog.base.match_token(NULL,&mut recog.err_handler)?;

					}
				}
			,
				3 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 3);
					recog.base.enter_outer_alt(None, 3);
					{
					recog.base.set_state(2486);
					recog.base.match_token(EMPTY,&mut recog.err_handler)?;

					recog.base.set_state(2487);
					recog.base.match_token(ARRAY,&mut recog.err_handler)?;

					}
				}
			,
				4 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 4);
					recog.base.enter_outer_alt(None, 4);
					{
					recog.base.set_state(2488);
					recog.base.match_token(EMPTY,&mut recog.err_handler)?;

					recog.base.set_state(2489);
					recog.base.match_token(OBJECT,&mut recog.err_handler)?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- jsonObjectMember ----------------
pub type JsonObjectMemberContextAll<'input> = JsonObjectMemberContext<'input>;


pub type JsonObjectMemberContext<'input> = BaseParserRuleContext<'input,JsonObjectMemberContextExt<'input>>;

#[derive(Clone)]
pub struct JsonObjectMemberContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for JsonObjectMemberContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for JsonObjectMemberContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_jsonObjectMember(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_jsonObjectMember(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for JsonObjectMemberContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_jsonObjectMember(self);
	}
}

impl<'input> CustomRuleContext<'input> for JsonObjectMemberContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_jsonObjectMember }
	//fn type_rule_index() -> usize where Self: Sized { RULE_jsonObjectMember }
}
antlr_rust::tid!{JsonObjectMemberContextExt<'a>}

impl<'input> JsonObjectMemberContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<JsonObjectMemberContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,JsonObjectMemberContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait JsonObjectMemberContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<JsonObjectMemberContextExt<'input>>{

fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token VALUE
/// Returns `None` if there is no child corresponding to token VALUE
fn VALUE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(VALUE, 0)
}
fn jsonValueExpression(&self) -> Option<Rc<JsonValueExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token KEY
/// Returns `None` if there is no child corresponding to token KEY
fn KEY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(KEY, 0)
}
/// Retrieves first TerminalNode corresponding to token COLON
/// Returns `None` if there is no child corresponding to token COLON
fn COLON(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COLON, 0)
}

}

impl<'input> JsonObjectMemberContextAttrs<'input> for JsonObjectMemberContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn jsonObjectMember(&mut self,)
	-> Result<Rc<JsonObjectMemberContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = JsonObjectMemberContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 210, RULE_jsonObjectMember);
        let mut _localctx: Rc<JsonObjectMemberContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2503);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(340,&mut recog.base)? {
				1 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(2493);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(339,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(2492);
							recog.base.match_token(KEY,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					/*InvokeRule expression*/
					recog.base.set_state(2495);
					recog.expression()?;

					recog.base.set_state(2496);
					recog.base.match_token(VALUE,&mut recog.err_handler)?;

					/*InvokeRule jsonValueExpression*/
					recog.base.set_state(2497);
					recog.jsonValueExpression()?;

					}
				}
			,
				2 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					/*InvokeRule expression*/
					recog.base.set_state(2499);
					recog.expression()?;

					recog.base.set_state(2500);
					recog.base.match_token(COLON,&mut recog.err_handler)?;

					/*InvokeRule jsonValueExpression*/
					recog.base.set_state(2501);
					recog.jsonValueExpression()?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- processingMode ----------------
pub type ProcessingModeContextAll<'input> = ProcessingModeContext<'input>;


pub type ProcessingModeContext<'input> = BaseParserRuleContext<'input,ProcessingModeContextExt<'input>>;

#[derive(Clone)]
pub struct ProcessingModeContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ProcessingModeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ProcessingModeContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_processingMode(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_processingMode(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ProcessingModeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_processingMode(self);
	}
}

impl<'input> CustomRuleContext<'input> for ProcessingModeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_processingMode }
	//fn type_rule_index() -> usize where Self: Sized { RULE_processingMode }
}
antlr_rust::tid!{ProcessingModeContextExt<'a>}

impl<'input> ProcessingModeContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ProcessingModeContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ProcessingModeContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait ProcessingModeContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ProcessingModeContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token RUNNING
/// Returns `None` if there is no child corresponding to token RUNNING
fn RUNNING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RUNNING, 0)
}
/// Retrieves first TerminalNode corresponding to token FINAL
/// Returns `None` if there is no child corresponding to token FINAL
fn FINAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FINAL, 0)
}

}

impl<'input> ProcessingModeContextAttrs<'input> for ProcessingModeContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn processingMode(&mut self,)
	-> Result<Rc<ProcessingModeContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = ProcessingModeContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 212, RULE_processingMode);
        let mut _localctx: Rc<ProcessingModeContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2505);
			_la = recog.base.input.la(1);
			if { !(_la==FINAL || _la==RUNNING) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- nullTreatment ----------------
pub type NullTreatmentContextAll<'input> = NullTreatmentContext<'input>;


pub type NullTreatmentContext<'input> = BaseParserRuleContext<'input,NullTreatmentContextExt<'input>>;

#[derive(Clone)]
pub struct NullTreatmentContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for NullTreatmentContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for NullTreatmentContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_nullTreatment(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_nullTreatment(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for NullTreatmentContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_nullTreatment(self);
	}
}

impl<'input> CustomRuleContext<'input> for NullTreatmentContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_nullTreatment }
	//fn type_rule_index() -> usize where Self: Sized { RULE_nullTreatment }
}
antlr_rust::tid!{NullTreatmentContextExt<'a>}

impl<'input> NullTreatmentContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<NullTreatmentContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,NullTreatmentContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait NullTreatmentContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<NullTreatmentContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token IGNORE
/// Returns `None` if there is no child corresponding to token IGNORE
fn IGNORE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(IGNORE, 0)
}
/// Retrieves first TerminalNode corresponding to token NULLS
/// Returns `None` if there is no child corresponding to token NULLS
fn NULLS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NULLS, 0)
}
/// Retrieves first TerminalNode corresponding to token RESPECT
/// Returns `None` if there is no child corresponding to token RESPECT
fn RESPECT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RESPECT, 0)
}

}

impl<'input> NullTreatmentContextAttrs<'input> for NullTreatmentContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn nullTreatment(&mut self,)
	-> Result<Rc<NullTreatmentContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = NullTreatmentContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 214, RULE_nullTreatment);
        let mut _localctx: Rc<NullTreatmentContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2511);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 IGNORE 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(2507);
					recog.base.match_token(IGNORE,&mut recog.err_handler)?;

					recog.base.set_state(2508);
					recog.base.match_token(NULLS,&mut recog.err_handler)?;

					}
				}

			 RESPECT 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(2509);
					recog.base.match_token(RESPECT,&mut recog.err_handler)?;

					recog.base.set_state(2510);
					recog.base.match_token(NULLS,&mut recog.err_handler)?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- string ----------------
#[derive(Debug)]
pub enum StringContextAll<'input>{
	UnicodeStringLiteralContext(UnicodeStringLiteralContext<'input>),
	BasicStringLiteralContext(BasicStringLiteralContext<'input>),
Error(StringContext<'input>)
}
antlr_rust::tid!{StringContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for StringContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for StringContextAll<'input>{}

impl<'input> Deref for StringContextAll<'input>{
	type Target = dyn StringContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use StringContextAll::*;
		match self{
			UnicodeStringLiteralContext(inner) => inner,
			BasicStringLiteralContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for StringContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for StringContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type StringContext<'input> = BaseParserRuleContext<'input,StringContextExt<'input>>;

#[derive(Clone)]
pub struct StringContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for StringContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for StringContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for StringContext<'input>{
}

impl<'input> CustomRuleContext<'input> for StringContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_string }
	//fn type_rule_index() -> usize where Self: Sized { RULE_string }
}
antlr_rust::tid!{StringContextExt<'a>}

impl<'input> StringContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<StringContextAll<'input>> {
		Rc::new(
		StringContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,StringContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait StringContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<StringContextExt<'input>>{


}

impl<'input> StringContextAttrs<'input> for StringContext<'input>{}

pub type UnicodeStringLiteralContext<'input> = BaseParserRuleContext<'input,UnicodeStringLiteralContextExt<'input>>;

pub trait UnicodeStringLiteralContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token UNICODE_STRING
	/// Returns `None` if there is no child corresponding to token UNICODE_STRING
	fn UNICODE_STRING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(UNICODE_STRING, 0)
	}
	/// Retrieves first TerminalNode corresponding to token UESCAPE
	/// Returns `None` if there is no child corresponding to token UESCAPE
	fn UESCAPE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(UESCAPE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token STRING
	/// Returns `None` if there is no child corresponding to token STRING
	fn STRING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(STRING, 0)
	}
}

impl<'input> UnicodeStringLiteralContextAttrs<'input> for UnicodeStringLiteralContext<'input>{}

pub struct UnicodeStringLiteralContextExt<'input>{
	base:StringContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{UnicodeStringLiteralContextExt<'a>}

impl<'input> TrinoParserContext<'input> for UnicodeStringLiteralContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for UnicodeStringLiteralContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_unicodeStringLiteral(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_unicodeStringLiteral(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for UnicodeStringLiteralContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_unicodeStringLiteral(self);
	}
}

impl<'input> CustomRuleContext<'input> for UnicodeStringLiteralContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_string }
	//fn type_rule_index() -> usize where Self: Sized { RULE_string }
}

impl<'input> Borrow<StringContextExt<'input>> for UnicodeStringLiteralContext<'input>{
	fn borrow(&self) -> &StringContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StringContextExt<'input>> for UnicodeStringLiteralContext<'input>{
	fn borrow_mut(&mut self) -> &mut StringContextExt<'input> { &mut self.base }
}

impl<'input> StringContextAttrs<'input> for UnicodeStringLiteralContext<'input> {}

impl<'input> UnicodeStringLiteralContextExt<'input>{
	fn new(ctx: &dyn StringContextAttrs<'input>) -> Rc<StringContextAll<'input>>  {
		Rc::new(
			StringContextAll::UnicodeStringLiteralContext(
				BaseParserRuleContext::copy_from(ctx,UnicodeStringLiteralContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type BasicStringLiteralContext<'input> = BaseParserRuleContext<'input,BasicStringLiteralContextExt<'input>>;

pub trait BasicStringLiteralContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token STRING
	/// Returns `None` if there is no child corresponding to token STRING
	fn STRING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(STRING, 0)
	}
}

impl<'input> BasicStringLiteralContextAttrs<'input> for BasicStringLiteralContext<'input>{}

pub struct BasicStringLiteralContextExt<'input>{
	base:StringContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{BasicStringLiteralContextExt<'a>}

impl<'input> TrinoParserContext<'input> for BasicStringLiteralContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for BasicStringLiteralContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_basicStringLiteral(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_basicStringLiteral(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for BasicStringLiteralContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_basicStringLiteral(self);
	}
}

impl<'input> CustomRuleContext<'input> for BasicStringLiteralContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_string }
	//fn type_rule_index() -> usize where Self: Sized { RULE_string }
}

impl<'input> Borrow<StringContextExt<'input>> for BasicStringLiteralContext<'input>{
	fn borrow(&self) -> &StringContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<StringContextExt<'input>> for BasicStringLiteralContext<'input>{
	fn borrow_mut(&mut self) -> &mut StringContextExt<'input> { &mut self.base }
}

impl<'input> StringContextAttrs<'input> for BasicStringLiteralContext<'input> {}

impl<'input> BasicStringLiteralContextExt<'input>{
	fn new(ctx: &dyn StringContextAttrs<'input>) -> Rc<StringContextAll<'input>>  {
		Rc::new(
			StringContextAll::BasicStringLiteralContext(
				BaseParserRuleContext::copy_from(ctx,BasicStringLiteralContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn string(&mut self,)
	-> Result<Rc<StringContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = StringContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 216, RULE_string);
        let mut _localctx: Rc<StringContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2519);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 STRING 
				=> {
					let tmp = BasicStringLiteralContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					recog.base.set_state(2513);
					recog.base.match_token(STRING,&mut recog.err_handler)?;

					}
				}

			 UNICODE_STRING 
				=> {
					let tmp = UnicodeStringLiteralContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(2514);
					recog.base.match_token(UNICODE_STRING,&mut recog.err_handler)?;

					recog.base.set_state(2517);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(342,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(2515);
							recog.base.match_token(UESCAPE,&mut recog.err_handler)?;

							recog.base.set_state(2516);
							recog.base.match_token(STRING,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- timeZoneSpecifier ----------------
pub type TimeZoneSpecifierContextAll<'input> = TimeZoneSpecifierContext<'input>;


pub type TimeZoneSpecifierContext<'input> = BaseParserRuleContext<'input,TimeZoneSpecifierContextExt<'input>>;

#[derive(Clone)]
pub struct TimeZoneSpecifierContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for TimeZoneSpecifierContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TimeZoneSpecifierContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_timeZoneSpecifier(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_timeZoneSpecifier(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TimeZoneSpecifierContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_timeZoneSpecifier(self);
	}
}

impl<'input> CustomRuleContext<'input> for TimeZoneSpecifierContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_timeZoneSpecifier }
	//fn type_rule_index() -> usize where Self: Sized { RULE_timeZoneSpecifier }
}
antlr_rust::tid!{TimeZoneSpecifierContextExt<'a>}

impl<'input> TimeZoneSpecifierContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<TimeZoneSpecifierContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,TimeZoneSpecifierContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait TimeZoneSpecifierContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<TimeZoneSpecifierContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token TIME
/// Returns `None` if there is no child corresponding to token TIME
fn TIME(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TIME, 0)
}
/// Retrieves first TerminalNode corresponding to token ZONE
/// Returns `None` if there is no child corresponding to token ZONE
fn ZONE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ZONE, 0)
}
fn interval(&self) -> Option<Rc<IntervalContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn string(&self) -> Option<Rc<StringContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> TimeZoneSpecifierContextAttrs<'input> for TimeZoneSpecifierContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn timeZoneSpecifier(&mut self,)
	-> Result<Rc<TimeZoneSpecifierContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = TimeZoneSpecifierContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 218, RULE_timeZoneSpecifier);
        let mut _localctx: Rc<TimeZoneSpecifierContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2527);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(344,&mut recog.base)? {
				1 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(2521);
					recog.base.match_token(TIME,&mut recog.err_handler)?;

					recog.base.set_state(2522);
					recog.base.match_token(ZONE,&mut recog.err_handler)?;

					/*InvokeRule interval*/
					recog.base.set_state(2523);
					recog.interval()?;

					}
				}
			,
				2 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(2524);
					recog.base.match_token(TIME,&mut recog.err_handler)?;

					recog.base.set_state(2525);
					recog.base.match_token(ZONE,&mut recog.err_handler)?;

					/*InvokeRule string*/
					recog.base.set_state(2526);
					recog.string()?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- comparisonOperator ----------------
pub type ComparisonOperatorContextAll<'input> = ComparisonOperatorContext<'input>;


pub type ComparisonOperatorContext<'input> = BaseParserRuleContext<'input,ComparisonOperatorContextExt<'input>>;

#[derive(Clone)]
pub struct ComparisonOperatorContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ComparisonOperatorContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ComparisonOperatorContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_comparisonOperator(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_comparisonOperator(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ComparisonOperatorContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_comparisonOperator(self);
	}
}

impl<'input> CustomRuleContext<'input> for ComparisonOperatorContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_comparisonOperator }
	//fn type_rule_index() -> usize where Self: Sized { RULE_comparisonOperator }
}
antlr_rust::tid!{ComparisonOperatorContextExt<'a>}

impl<'input> ComparisonOperatorContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ComparisonOperatorContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ComparisonOperatorContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait ComparisonOperatorContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ComparisonOperatorContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token EQ
/// Returns `None` if there is no child corresponding to token EQ
fn EQ(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EQ, 0)
}
/// Retrieves first TerminalNode corresponding to token NEQ
/// Returns `None` if there is no child corresponding to token NEQ
fn NEQ(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NEQ, 0)
}
/// Retrieves first TerminalNode corresponding to token LT
/// Returns `None` if there is no child corresponding to token LT
fn LT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LT, 0)
}
/// Retrieves first TerminalNode corresponding to token LTE
/// Returns `None` if there is no child corresponding to token LTE
fn LTE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LTE, 0)
}
/// Retrieves first TerminalNode corresponding to token GT
/// Returns `None` if there is no child corresponding to token GT
fn GT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(GT, 0)
}
/// Retrieves first TerminalNode corresponding to token GTE
/// Returns `None` if there is no child corresponding to token GTE
fn GTE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(GTE, 0)
}

}

impl<'input> ComparisonOperatorContextAttrs<'input> for ComparisonOperatorContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn comparisonOperator(&mut self,)
	-> Result<Rc<ComparisonOperatorContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = ComparisonOperatorContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 220, RULE_comparisonOperator);
        let mut _localctx: Rc<ComparisonOperatorContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2529);
			_la = recog.base.input.la(1);
			if { !(((((_la - 366)) & !0x3f) == 0 && ((1usize << (_la - 366)) & ((1usize << (EQ - 366)) | (1usize << (NEQ - 366)) | (1usize << (LT - 366)) | (1usize << (LTE - 366)) | (1usize << (GT - 366)) | (1usize << (GTE - 366)))) != 0)) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- comparisonQuantifier ----------------
pub type ComparisonQuantifierContextAll<'input> = ComparisonQuantifierContext<'input>;


pub type ComparisonQuantifierContext<'input> = BaseParserRuleContext<'input,ComparisonQuantifierContextExt<'input>>;

#[derive(Clone)]
pub struct ComparisonQuantifierContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ComparisonQuantifierContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ComparisonQuantifierContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_comparisonQuantifier(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_comparisonQuantifier(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ComparisonQuantifierContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_comparisonQuantifier(self);
	}
}

impl<'input> CustomRuleContext<'input> for ComparisonQuantifierContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_comparisonQuantifier }
	//fn type_rule_index() -> usize where Self: Sized { RULE_comparisonQuantifier }
}
antlr_rust::tid!{ComparisonQuantifierContextExt<'a>}

impl<'input> ComparisonQuantifierContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ComparisonQuantifierContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ComparisonQuantifierContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait ComparisonQuantifierContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ComparisonQuantifierContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token ALL
/// Returns `None` if there is no child corresponding to token ALL
fn ALL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ALL, 0)
}
/// Retrieves first TerminalNode corresponding to token SOME
/// Returns `None` if there is no child corresponding to token SOME
fn SOME(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SOME, 0)
}
/// Retrieves first TerminalNode corresponding to token ANY
/// Returns `None` if there is no child corresponding to token ANY
fn ANY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ANY, 0)
}

}

impl<'input> ComparisonQuantifierContextAttrs<'input> for ComparisonQuantifierContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn comparisonQuantifier(&mut self,)
	-> Result<Rc<ComparisonQuantifierContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = ComparisonQuantifierContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 222, RULE_comparisonQuantifier);
        let mut _localctx: Rc<ComparisonQuantifierContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2531);
			_la = recog.base.input.la(1);
			if { !(_la==ALL || _la==ANY || _la==SOME) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- booleanValue ----------------
pub type BooleanValueContextAll<'input> = BooleanValueContext<'input>;


pub type BooleanValueContext<'input> = BaseParserRuleContext<'input,BooleanValueContextExt<'input>>;

#[derive(Clone)]
pub struct BooleanValueContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for BooleanValueContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for BooleanValueContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_booleanValue(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_booleanValue(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for BooleanValueContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_booleanValue(self);
	}
}

impl<'input> CustomRuleContext<'input> for BooleanValueContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_booleanValue }
	//fn type_rule_index() -> usize where Self: Sized { RULE_booleanValue }
}
antlr_rust::tid!{BooleanValueContextExt<'a>}

impl<'input> BooleanValueContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<BooleanValueContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,BooleanValueContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait BooleanValueContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<BooleanValueContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token TRUE
/// Returns `None` if there is no child corresponding to token TRUE
fn TRUE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TRUE, 0)
}
/// Retrieves first TerminalNode corresponding to token FALSE
/// Returns `None` if there is no child corresponding to token FALSE
fn FALSE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FALSE, 0)
}

}

impl<'input> BooleanValueContextAttrs<'input> for BooleanValueContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn booleanValue(&mut self,)
	-> Result<Rc<BooleanValueContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = BooleanValueContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 224, RULE_booleanValue);
        let mut _localctx: Rc<BooleanValueContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2533);
			_la = recog.base.input.la(1);
			if { !(_la==FALSE || _la==TRUE) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- interval ----------------
pub type IntervalContextAll<'input> = IntervalContext<'input>;


pub type IntervalContext<'input> = BaseParserRuleContext<'input,IntervalContextExt<'input>>;

#[derive(Clone)]
pub struct IntervalContextExt<'input>{
	pub sign: Option<TokenType<'input>>,
	pub from: Option<Rc<IntervalFieldContextAll<'input>>>,
	pub to: Option<Rc<IntervalFieldContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for IntervalContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for IntervalContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_interval(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_interval(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for IntervalContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_interval(self);
	}
}

impl<'input> CustomRuleContext<'input> for IntervalContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_interval }
	//fn type_rule_index() -> usize where Self: Sized { RULE_interval }
}
antlr_rust::tid!{IntervalContextExt<'a>}

impl<'input> IntervalContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<IntervalContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,IntervalContextExt{
				sign: None, 
				from: None, to: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait IntervalContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<IntervalContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token INTERVAL
/// Returns `None` if there is no child corresponding to token INTERVAL
fn INTERVAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(INTERVAL, 0)
}
fn intervalField_all(&self) ->  Vec<Rc<IntervalFieldContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn intervalField(&self, i: usize) -> Option<Rc<IntervalFieldContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
fn string(&self) -> Option<Rc<StringContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token INTEGER_VALUE
/// Returns `None` if there is no child corresponding to token INTEGER_VALUE
fn INTEGER_VALUE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(INTEGER_VALUE, 0)
}
/// Retrieves first TerminalNode corresponding to token TO
/// Returns `None` if there is no child corresponding to token TO
fn TO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TO, 0)
}
/// Retrieves first TerminalNode corresponding to token PLUS
/// Returns `None` if there is no child corresponding to token PLUS
fn PLUS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PLUS, 0)
}
/// Retrieves first TerminalNode corresponding to token MINUS
/// Returns `None` if there is no child corresponding to token MINUS
fn MINUS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MINUS, 0)
}

}

impl<'input> IntervalContextAttrs<'input> for IntervalContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn interval(&mut self,)
	-> Result<Rc<IntervalContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = IntervalContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 226, RULE_interval);
        let mut _localctx: Rc<IntervalContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2535);
			recog.base.match_token(INTERVAL,&mut recog.err_handler)?;

			recog.base.set_state(2537);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==PLUS || _la==MINUS {
				{
				recog.base.set_state(2536);
				 cast_mut::<_,IntervalContext >(&mut _localctx).sign = recog.base.input.lt(1).cloned();
				 
				_la = recog.base.input.la(1);
				if { !(_la==PLUS || _la==MINUS) } {
					let tmp = recog.err_handler.recover_inline(&mut recog.base)?;
					 cast_mut::<_,IntervalContext >(&mut _localctx).sign = Some(tmp);
					  

				}
				else {
					if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
					recog.err_handler.report_match(&mut recog.base);
					recog.base.consume(&mut recog.err_handler);
				}
				}
			}

			recog.base.set_state(2541);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 STRING | UNICODE_STRING 
				=> {
					{
					/*InvokeRule string*/
					recog.base.set_state(2539);
					recog.string()?;

					}
				}

			 INTEGER_VALUE 
				=> {
					{
					recog.base.set_state(2540);
					recog.base.match_token(INTEGER_VALUE,&mut recog.err_handler)?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			/*InvokeRule intervalField*/
			recog.base.set_state(2543);
			let tmp = recog.intervalField()?;
			 cast_mut::<_,IntervalContext >(&mut _localctx).from = Some(tmp.clone());
			  

			recog.base.set_state(2546);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(347,&mut recog.base)? {
				x if x == 1=>{
					{
					recog.base.set_state(2544);
					recog.base.match_token(TO,&mut recog.err_handler)?;

					/*InvokeRule intervalField*/
					recog.base.set_state(2545);
					let tmp = recog.intervalField()?;
					 cast_mut::<_,IntervalContext >(&mut _localctx).to = Some(tmp.clone());
					  

					}
				}

				_ => {}
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- intervalField ----------------
pub type IntervalFieldContextAll<'input> = IntervalFieldContext<'input>;


pub type IntervalFieldContext<'input> = BaseParserRuleContext<'input,IntervalFieldContextExt<'input>>;

#[derive(Clone)]
pub struct IntervalFieldContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for IntervalFieldContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for IntervalFieldContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_intervalField(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_intervalField(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for IntervalFieldContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_intervalField(self);
	}
}

impl<'input> CustomRuleContext<'input> for IntervalFieldContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_intervalField }
	//fn type_rule_index() -> usize where Self: Sized { RULE_intervalField }
}
antlr_rust::tid!{IntervalFieldContextExt<'a>}

impl<'input> IntervalFieldContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<IntervalFieldContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,IntervalFieldContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait IntervalFieldContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<IntervalFieldContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token YEAR
/// Returns `None` if there is no child corresponding to token YEAR
fn YEAR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(YEAR, 0)
}
/// Retrieves first TerminalNode corresponding to token MONTH
/// Returns `None` if there is no child corresponding to token MONTH
fn MONTH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MONTH, 0)
}
/// Retrieves first TerminalNode corresponding to token DAY
/// Returns `None` if there is no child corresponding to token DAY
fn DAY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DAY, 0)
}
/// Retrieves first TerminalNode corresponding to token HOUR
/// Returns `None` if there is no child corresponding to token HOUR
fn HOUR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(HOUR, 0)
}
/// Retrieves first TerminalNode corresponding to token M
/// Returns `None` if there is no child corresponding to token M
fn M(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(M, 0)
}
/// Retrieves first TerminalNode corresponding to token MIN
/// Returns `None` if there is no child corresponding to token MIN
fn MIN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MIN, 0)
}
/// Retrieves first TerminalNode corresponding to token MINUTE
/// Returns `None` if there is no child corresponding to token MINUTE
fn MINUTE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MINUTE, 0)
}
/// Retrieves first TerminalNode corresponding to token S
/// Returns `None` if there is no child corresponding to token S
fn S(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(S, 0)
}
/// Retrieves first TerminalNode corresponding to token SEC
/// Returns `None` if there is no child corresponding to token SEC
fn SEC(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SEC, 0)
}
/// Retrieves first TerminalNode corresponding to token SECOND
/// Returns `None` if there is no child corresponding to token SECOND
fn SECOND(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SECOND, 0)
}
/// Retrieves first TerminalNode corresponding to token YEARS
/// Returns `None` if there is no child corresponding to token YEARS
fn YEARS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(YEARS, 0)
}
/// Retrieves first TerminalNode corresponding to token MONTHS
/// Returns `None` if there is no child corresponding to token MONTHS
fn MONTHS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MONTHS, 0)
}
/// Retrieves first TerminalNode corresponding to token DAYS
/// Returns `None` if there is no child corresponding to token DAYS
fn DAYS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DAYS, 0)
}
/// Retrieves first TerminalNode corresponding to token HOURS
/// Returns `None` if there is no child corresponding to token HOURS
fn HOURS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(HOURS, 0)
}
/// Retrieves first TerminalNode corresponding to token MINUTES
/// Returns `None` if there is no child corresponding to token MINUTES
fn MINUTES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MINUTES, 0)
}
/// Retrieves first TerminalNode corresponding to token SECONDS
/// Returns `None` if there is no child corresponding to token SECONDS
fn SECONDS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SECONDS, 0)
}
/// Retrieves first TerminalNode corresponding to token WEEK
/// Returns `None` if there is no child corresponding to token WEEK
fn WEEK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WEEK, 0)
}

}

impl<'input> IntervalFieldContextAttrs<'input> for IntervalFieldContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn intervalField(&mut self,)
	-> Result<Rc<IntervalFieldContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = IntervalFieldContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 228, RULE_intervalField);
        let mut _localctx: Rc<IntervalFieldContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2548);
			_la = recog.base.input.la(1);
			if { !(_la==DAY || _la==DAYS || _la==HOUR || _la==HOURS || ((((_la - 178)) & !0x3f) == 0 && ((1usize << (_la - 178)) & ((1usize << (M - 178)) | (1usize << (MIN - 178)) | (1usize << (MINUTE - 178)) | (1usize << (MINUTES - 178)) | (1usize << (MONTH - 178)) | (1usize << (MONTHS - 178)))) != 0) || ((((_la - 266)) & !0x3f) == 0 && ((1usize << (_la - 266)) & ((1usize << (S - 266)) | (1usize << (SEC - 266)) | (1usize << (SECOND - 266)) | (1usize << (SECONDS - 266)))) != 0) || ((((_la - 345)) & !0x3f) == 0 && ((1usize << (_la - 345)) & ((1usize << (WEEK - 345)) | (1usize << (YEAR - 345)) | (1usize << (YEARS - 345)))) != 0)) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- normalForm ----------------
pub type NormalFormContextAll<'input> = NormalFormContext<'input>;


pub type NormalFormContext<'input> = BaseParserRuleContext<'input,NormalFormContextExt<'input>>;

#[derive(Clone)]
pub struct NormalFormContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for NormalFormContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for NormalFormContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_normalForm(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_normalForm(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for NormalFormContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_normalForm(self);
	}
}

impl<'input> CustomRuleContext<'input> for NormalFormContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_normalForm }
	//fn type_rule_index() -> usize where Self: Sized { RULE_normalForm }
}
antlr_rust::tid!{NormalFormContextExt<'a>}

impl<'input> NormalFormContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<NormalFormContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,NormalFormContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait NormalFormContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<NormalFormContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token NFD
/// Returns `None` if there is no child corresponding to token NFD
fn NFD(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NFD, 0)
}
/// Retrieves first TerminalNode corresponding to token NFC
/// Returns `None` if there is no child corresponding to token NFC
fn NFC(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NFC, 0)
}
/// Retrieves first TerminalNode corresponding to token NFKD
/// Returns `None` if there is no child corresponding to token NFKD
fn NFKD(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NFKD, 0)
}
/// Retrieves first TerminalNode corresponding to token NFKC
/// Returns `None` if there is no child corresponding to token NFKC
fn NFKC(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NFKC, 0)
}

}

impl<'input> NormalFormContextAttrs<'input> for NormalFormContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn normalForm(&mut self,)
	-> Result<Rc<NormalFormContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = NormalFormContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 230, RULE_normalForm);
        let mut _localctx: Rc<NormalFormContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2550);
			_la = recog.base.input.la(1);
			if { !(((((_la - 198)) & !0x3f) == 0 && ((1usize << (_la - 198)) & ((1usize << (NFC - 198)) | (1usize << (NFD - 198)) | (1usize << (NFKC - 198)) | (1usize << (NFKD - 198)))) != 0)) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- typeIdentifier ----------------
pub type TypeIdentifierContextAll<'input> = TypeIdentifierContext<'input>;


pub type TypeIdentifierContext<'input> = BaseParserRuleContext<'input,TypeIdentifierContextExt<'input>>;

#[derive(Clone)]
pub struct TypeIdentifierContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for TypeIdentifierContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TypeIdentifierContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_typeIdentifier(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_typeIdentifier(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TypeIdentifierContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_typeIdentifier(self);
	}
}

impl<'input> CustomRuleContext<'input> for TypeIdentifierContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_typeIdentifier }
	//fn type_rule_index() -> usize where Self: Sized { RULE_typeIdentifier }
}
antlr_rust::tid!{TypeIdentifierContextExt<'a>}

impl<'input> TypeIdentifierContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<TypeIdentifierContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,TypeIdentifierContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait TypeIdentifierContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<TypeIdentifierContextExt<'input>>{

fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> TypeIdentifierContextAttrs<'input> for TypeIdentifierContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn typeIdentifier(&mut self,)
	-> Result<Rc<TypeIdentifierContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = TypeIdentifierContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 232, RULE_typeIdentifier);
        let mut _localctx: Rc<TypeIdentifierContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule identifier*/
			recog.base.set_state(2552);
			recog.identifier()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- type_ ----------------
#[derive(Debug)]
pub enum Type_ContextAll<'input>{
	TypeNotNullContext(TypeNotNullContext<'input>),
	TypeNullContext(TypeNullContext<'input>),
Error(Type_Context<'input>)
}
antlr_rust::tid!{Type_ContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for Type_ContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for Type_ContextAll<'input>{}

impl<'input> Deref for Type_ContextAll<'input>{
	type Target = dyn Type_ContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use Type_ContextAll::*;
		match self{
			TypeNotNullContext(inner) => inner,
			TypeNullContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for Type_ContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for Type_ContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type Type_Context<'input> = BaseParserRuleContext<'input,Type_ContextExt<'input>>;

#[derive(Clone)]
pub struct Type_ContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for Type_Context<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for Type_Context<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for Type_Context<'input>{
}

impl<'input> CustomRuleContext<'input> for Type_ContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_type_ }
	//fn type_rule_index() -> usize where Self: Sized { RULE_type_ }
}
antlr_rust::tid!{Type_ContextExt<'a>}

impl<'input> Type_ContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<Type_ContextAll<'input>> {
		Rc::new(
		Type_ContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,Type_ContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait Type_ContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<Type_ContextExt<'input>>{


}

impl<'input> Type_ContextAttrs<'input> for Type_Context<'input>{}

pub type TypeNotNullContext<'input> = BaseParserRuleContext<'input,TypeNotNullContextExt<'input>>;

pub trait TypeNotNullContextAttrs<'input>: TrinoParserContext<'input>{
	fn nonnullableType(&self) -> Option<Rc<NonnullableTypeContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token NOT
	/// Returns `None` if there is no child corresponding to token NOT
	fn NOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NOT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token NULL
	/// Returns `None` if there is no child corresponding to token NULL
	fn NULL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NULL, 0)
	}
}

impl<'input> TypeNotNullContextAttrs<'input> for TypeNotNullContext<'input>{}

pub struct TypeNotNullContextExt<'input>{
	base:Type_ContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{TypeNotNullContextExt<'a>}

impl<'input> TrinoParserContext<'input> for TypeNotNullContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TypeNotNullContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_typeNotNull(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_typeNotNull(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TypeNotNullContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_typeNotNull(self);
	}
}

impl<'input> CustomRuleContext<'input> for TypeNotNullContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_type_ }
	//fn type_rule_index() -> usize where Self: Sized { RULE_type_ }
}

impl<'input> Borrow<Type_ContextExt<'input>> for TypeNotNullContext<'input>{
	fn borrow(&self) -> &Type_ContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<Type_ContextExt<'input>> for TypeNotNullContext<'input>{
	fn borrow_mut(&mut self) -> &mut Type_ContextExt<'input> { &mut self.base }
}

impl<'input> Type_ContextAttrs<'input> for TypeNotNullContext<'input> {}

impl<'input> TypeNotNullContextExt<'input>{
	fn new(ctx: &dyn Type_ContextAttrs<'input>) -> Rc<Type_ContextAll<'input>>  {
		Rc::new(
			Type_ContextAll::TypeNotNullContext(
				BaseParserRuleContext::copy_from(ctx,TypeNotNullContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type TypeNullContext<'input> = BaseParserRuleContext<'input,TypeNullContextExt<'input>>;

pub trait TypeNullContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token NULL
	/// Returns `None` if there is no child corresponding to token NULL
	fn NULL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(NULL, 0)
	}
}

impl<'input> TypeNullContextAttrs<'input> for TypeNullContext<'input>{}

pub struct TypeNullContextExt<'input>{
	base:Type_ContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{TypeNullContextExt<'a>}

impl<'input> TrinoParserContext<'input> for TypeNullContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TypeNullContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_typeNull(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_typeNull(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TypeNullContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_typeNull(self);
	}
}

impl<'input> CustomRuleContext<'input> for TypeNullContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_type_ }
	//fn type_rule_index() -> usize where Self: Sized { RULE_type_ }
}

impl<'input> Borrow<Type_ContextExt<'input>> for TypeNullContext<'input>{
	fn borrow(&self) -> &Type_ContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<Type_ContextExt<'input>> for TypeNullContext<'input>{
	fn borrow_mut(&mut self) -> &mut Type_ContextExt<'input> { &mut self.base }
}

impl<'input> Type_ContextAttrs<'input> for TypeNullContext<'input> {}

impl<'input> TypeNullContextExt<'input>{
	fn new(ctx: &dyn Type_ContextAttrs<'input>) -> Rc<Type_ContextAll<'input>>  {
		Rc::new(
			Type_ContextAll::TypeNullContext(
				BaseParserRuleContext::copy_from(ctx,TypeNullContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn type_(&mut self,)
	-> Result<Rc<Type_ContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = Type_ContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 234, RULE_type_);
        let mut _localctx: Rc<Type_ContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2560);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 ABORT | ABSENT | ADD | ADMIN | AFTER | ALL | ANALYZE | ANTI | ANY | ARRAY |
			 ASC | AT | ATTACH | AUTHORIZATION | BEGIN | BERNOULLI | BOTH | BZIP2 |
			 CALL | CANCEL | CASCADE | CATALOGS | CHARACTER | CLONE | CLOSE | CLUSTER |
			 COLUMN | COLUMNS | COMMENT | COMMIT | COMMITTED | COMPRESSION | CONDITIONAL |
			 CONNECTION | COPARTITION | COPY | COUNT | CURRENT | DATA | DATABASE |
			 DATASHARE | DATE | DAY | DAYS | DECLARE | DEFAULT | DEFINE | DEFINER |
			 DELIMITER | DENY | DESC | DESCRIBE | DESCRIPTOR | DISTRIBUTED | DETACH |
			 DOUBLE | EMPTY | ENCODING | END | ERROR | EXCLUDING | EXECUTE | EXPLAIN |
			 EXTERNAL | FETCH | FILTER | FINAL | FIRST | FOLLOWING | FORMAT | FUNCTION |
			 FUNCTIONS | GRACE | GRANT | GRANTED | GRANTS | GRAPHVIZ | GROUPS | GZIP |
			 HOUR | HOURS | IF | IGNORE | INCLUDING | INITIAL | INPUT | INTEGER |
			 INTERVAL | INVOKER | IO | ISOLATION | JSON | KEEP | KEY | KEYS | LAMBDA |
			 LAST | LATERAL | LEADING | LEVEL | LIBRARY | LIMIT | LOCAL | LOCATION |
			 LOCK | LOGICAL | M | MAP | MASKING | MATCH | MATCHED | MATCHES | MATCH_RECOGNIZE |
			 MATERIALIZED | MAX | MEASURES | MERGE | MIN | MINUS_KW | MINUTE | MINUTES |
			 MODEL | MONTH | MONTHS | NEXT | NFC | NFD | NFKC | NFKD | NO | NONE |
			 NULLS | OBJECT | OF | OFFSET | OMIT | ONE | ONLY | OPTION | ORDINALITY |
			 OUTPUT | OVER | OVERFLOW | PARTITION | PARTITIONS | PASSING | PAST |
			 PATH | PATTERN | PER | PERIOD | PERMUTE | POSITION | PRECEDING | PRECISION |
			 PROCEDURE | PRIVILEGES | PROPERTIES | PRUNE | QUOTES | RANGE | READ |
			 REFRESH | RENAME | REPEATABLE | REPLACE | RESET | RESPECT | RESTRICT |
			 RETURNING | REVOKE | RLS | ROLE | ROLES | ROLLBACK | ROLLUP | ROW | ROWS |
			 RUNNING | S | SCALAR | SEC | SECOND | SECONDS | SCHEMA | SCHEMAS | SECURITY |
			 SEEK | SEMI | SERIALIZABLE | SESSION | SET | SETS | SHOW | SNAPSHOT |
			 SOME | START | STATS | STRUCT | SUBSET | SUBSTRING | SYSTEM | SYSTEM_TIME |
			 TABLES | TABLESAMPLE | TEMP | TEMPORARY | TEXT | STRING_KW | TIES | TIME |
			 TIMESTAMP | TO | TRAILING | TRANSACTION | TRUNCATE | TRY_CAST | TUPLE |
			 TYPE | UNBOUNDED | UNCOMMITTED | UNCONDITIONAL | UNIQUE | UNKNOWN | UNLOAD |
			 UNMATCHED | UPDATE | USE | USER | UTF16 | UTF32 | UTF8 | VACUUM | VALIDATE |
			 VALUE | VARYING | VERBOSE | VERSION | VIEW | WEEK | WINDOW | WITHIN |
			 WITHOUT | WORK | WRAPPER | WRITE | XZ | YEAR | YEARS | ZONE | ZSTD |
			 DOLLAR | IDENTIFIER | QUOTED_IDENTIFIER 
				=> {
					let tmp = TypeNotNullContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					/*InvokeRule nonnullableType*/
					recog.base.set_state(2554);
					recog.nonnullableType()?;

					recog.base.set_state(2557);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(348,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(2555);
							recog.base.match_token(NOT,&mut recog.err_handler)?;

							recog.base.set_state(2556);
							recog.base.match_token(NULL,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					}
				}

			 NULL 
				=> {
					let tmp = TypeNullContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(2559);
					recog.base.match_token(NULL,&mut recog.err_handler)?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- nonnullableType ----------------
#[derive(Debug)]
pub enum NonnullableTypeContextAll<'input>{
	RowTypeContext(RowTypeContext<'input>),
	LambdaTypeContext(LambdaTypeContext<'input>),
	IntervalTypeContext(IntervalTypeContext<'input>),
	FunctionSignatureGenericTypeContext(FunctionSignatureGenericTypeContext<'input>),
	DoublePrecisionTypeContext(DoublePrecisionTypeContext<'input>),
	LegacyArrayTypeContext(LegacyArrayTypeContext<'input>),
	PrimitiveTypeContext(PrimitiveTypeContext<'input>),
	DateTimeTypeContext(DateTimeTypeContext<'input>),
	LegacyMapTypeContext(LegacyMapTypeContext<'input>),
Error(NonnullableTypeContext<'input>)
}
antlr_rust::tid!{NonnullableTypeContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for NonnullableTypeContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for NonnullableTypeContextAll<'input>{}

impl<'input> Deref for NonnullableTypeContextAll<'input>{
	type Target = dyn NonnullableTypeContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use NonnullableTypeContextAll::*;
		match self{
			RowTypeContext(inner) => inner,
			LambdaTypeContext(inner) => inner,
			IntervalTypeContext(inner) => inner,
			FunctionSignatureGenericTypeContext(inner) => inner,
			DoublePrecisionTypeContext(inner) => inner,
			LegacyArrayTypeContext(inner) => inner,
			PrimitiveTypeContext(inner) => inner,
			DateTimeTypeContext(inner) => inner,
			LegacyMapTypeContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for NonnullableTypeContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for NonnullableTypeContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type NonnullableTypeContext<'input> = BaseParserRuleContext<'input,NonnullableTypeContextExt<'input>>;

#[derive(Clone)]
pub struct NonnullableTypeContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for NonnullableTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for NonnullableTypeContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for NonnullableTypeContext<'input>{
}

impl<'input> CustomRuleContext<'input> for NonnullableTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_nonnullableType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_nonnullableType }
}
antlr_rust::tid!{NonnullableTypeContextExt<'a>}

impl<'input> NonnullableTypeContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<NonnullableTypeContextAll<'input>> {
		Rc::new(
		NonnullableTypeContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,NonnullableTypeContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait NonnullableTypeContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<NonnullableTypeContextExt<'input>>{


}

impl<'input> NonnullableTypeContextAttrs<'input> for NonnullableTypeContext<'input>{}

pub type RowTypeContext<'input> = BaseParserRuleContext<'input,RowTypeContextExt<'input>>;

pub trait RowTypeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ROW
	/// Returns `None` if there is no child corresponding to token ROW
	fn ROW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ROW, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn rowField_all(&self) ->  Vec<Rc<RowFieldContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn rowField(&self, i: usize) -> Option<Rc<RowFieldContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> RowTypeContextAttrs<'input> for RowTypeContext<'input>{}

pub struct RowTypeContextExt<'input>{
	base:NonnullableTypeContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{RowTypeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for RowTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RowTypeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_rowType(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_rowType(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RowTypeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_rowType(self);
	}
}

impl<'input> CustomRuleContext<'input> for RowTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_nonnullableType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_nonnullableType }
}

impl<'input> Borrow<NonnullableTypeContextExt<'input>> for RowTypeContext<'input>{
	fn borrow(&self) -> &NonnullableTypeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<NonnullableTypeContextExt<'input>> for RowTypeContext<'input>{
	fn borrow_mut(&mut self) -> &mut NonnullableTypeContextExt<'input> { &mut self.base }
}

impl<'input> NonnullableTypeContextAttrs<'input> for RowTypeContext<'input> {}

impl<'input> RowTypeContextExt<'input>{
	fn new(ctx: &dyn NonnullableTypeContextAttrs<'input>) -> Rc<NonnullableTypeContextAll<'input>>  {
		Rc::new(
			NonnullableTypeContextAll::RowTypeContext(
				BaseParserRuleContext::copy_from(ctx,RowTypeContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type LambdaTypeContext<'input> = BaseParserRuleContext<'input,LambdaTypeContextExt<'input>>;

pub trait LambdaTypeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token FUNCTION
	/// Returns `None` if there is no child corresponding to token FUNCTION
	fn FUNCTION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(FUNCTION, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn type__all(&self) ->  Vec<Rc<Type_ContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn type_(&self, i: usize) -> Option<Rc<Type_ContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> LambdaTypeContextAttrs<'input> for LambdaTypeContext<'input>{}

pub struct LambdaTypeContextExt<'input>{
	base:NonnullableTypeContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{LambdaTypeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for LambdaTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for LambdaTypeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_lambdaType(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_lambdaType(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for LambdaTypeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_lambdaType(self);
	}
}

impl<'input> CustomRuleContext<'input> for LambdaTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_nonnullableType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_nonnullableType }
}

impl<'input> Borrow<NonnullableTypeContextExt<'input>> for LambdaTypeContext<'input>{
	fn borrow(&self) -> &NonnullableTypeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<NonnullableTypeContextExt<'input>> for LambdaTypeContext<'input>{
	fn borrow_mut(&mut self) -> &mut NonnullableTypeContextExt<'input> { &mut self.base }
}

impl<'input> NonnullableTypeContextAttrs<'input> for LambdaTypeContext<'input> {}

impl<'input> LambdaTypeContextExt<'input>{
	fn new(ctx: &dyn NonnullableTypeContextAttrs<'input>) -> Rc<NonnullableTypeContextAll<'input>>  {
		Rc::new(
			NonnullableTypeContextAll::LambdaTypeContext(
				BaseParserRuleContext::copy_from(ctx,LambdaTypeContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type IntervalTypeContext<'input> = BaseParserRuleContext<'input,IntervalTypeContextExt<'input>>;

pub trait IntervalTypeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token INTERVAL
	/// Returns `None` if there is no child corresponding to token INTERVAL
	fn INTERVAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(INTERVAL, 0)
	}
	fn intervalField_all(&self) ->  Vec<Rc<IntervalFieldContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn intervalField(&self, i: usize) -> Option<Rc<IntervalFieldContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token TO
	/// Returns `None` if there is no child corresponding to token TO
	fn TO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TO, 0)
	}
}

impl<'input> IntervalTypeContextAttrs<'input> for IntervalTypeContext<'input>{}

pub struct IntervalTypeContextExt<'input>{
	base:NonnullableTypeContextExt<'input>,
	pub from: Option<Rc<IntervalFieldContextAll<'input>>>,
	pub to: Option<Rc<IntervalFieldContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{IntervalTypeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for IntervalTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for IntervalTypeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_intervalType(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_intervalType(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for IntervalTypeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_intervalType(self);
	}
}

impl<'input> CustomRuleContext<'input> for IntervalTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_nonnullableType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_nonnullableType }
}

impl<'input> Borrow<NonnullableTypeContextExt<'input>> for IntervalTypeContext<'input>{
	fn borrow(&self) -> &NonnullableTypeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<NonnullableTypeContextExt<'input>> for IntervalTypeContext<'input>{
	fn borrow_mut(&mut self) -> &mut NonnullableTypeContextExt<'input> { &mut self.base }
}

impl<'input> NonnullableTypeContextAttrs<'input> for IntervalTypeContext<'input> {}

impl<'input> IntervalTypeContextExt<'input>{
	fn new(ctx: &dyn NonnullableTypeContextAttrs<'input>) -> Rc<NonnullableTypeContextAll<'input>>  {
		Rc::new(
			NonnullableTypeContextAll::IntervalTypeContext(
				BaseParserRuleContext::copy_from(ctx,IntervalTypeContextExt{
        			from:None, to:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type FunctionSignatureGenericTypeContext<'input> = BaseParserRuleContext<'input,FunctionSignatureGenericTypeContextExt<'input>>;

pub trait FunctionSignatureGenericTypeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DOLLAR
	/// Returns `None` if there is no child corresponding to token DOLLAR
	fn DOLLAR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DOLLAR, 0)
	}
	/// Retrieves first TerminalNode corresponding to token INTEGER_VALUE
	/// Returns `None` if there is no child corresponding to token INTEGER_VALUE
	fn INTEGER_VALUE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(INTEGER_VALUE, 0)
	}
}

impl<'input> FunctionSignatureGenericTypeContextAttrs<'input> for FunctionSignatureGenericTypeContext<'input>{}

pub struct FunctionSignatureGenericTypeContextExt<'input>{
	base:NonnullableTypeContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{FunctionSignatureGenericTypeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for FunctionSignatureGenericTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for FunctionSignatureGenericTypeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_functionSignatureGenericType(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_functionSignatureGenericType(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for FunctionSignatureGenericTypeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_functionSignatureGenericType(self);
	}
}

impl<'input> CustomRuleContext<'input> for FunctionSignatureGenericTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_nonnullableType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_nonnullableType }
}

impl<'input> Borrow<NonnullableTypeContextExt<'input>> for FunctionSignatureGenericTypeContext<'input>{
	fn borrow(&self) -> &NonnullableTypeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<NonnullableTypeContextExt<'input>> for FunctionSignatureGenericTypeContext<'input>{
	fn borrow_mut(&mut self) -> &mut NonnullableTypeContextExt<'input> { &mut self.base }
}

impl<'input> NonnullableTypeContextAttrs<'input> for FunctionSignatureGenericTypeContext<'input> {}

impl<'input> FunctionSignatureGenericTypeContextExt<'input>{
	fn new(ctx: &dyn NonnullableTypeContextAttrs<'input>) -> Rc<NonnullableTypeContextAll<'input>>  {
		Rc::new(
			NonnullableTypeContextAll::FunctionSignatureGenericTypeContext(
				BaseParserRuleContext::copy_from(ctx,FunctionSignatureGenericTypeContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type DoublePrecisionTypeContext<'input> = BaseParserRuleContext<'input,DoublePrecisionTypeContextExt<'input>>;

pub trait DoublePrecisionTypeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DOUBLE
	/// Returns `None` if there is no child corresponding to token DOUBLE
	fn DOUBLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DOUBLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token PRECISION
	/// Returns `None` if there is no child corresponding to token PRECISION
	fn PRECISION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(PRECISION, 0)
	}
}

impl<'input> DoublePrecisionTypeContextAttrs<'input> for DoublePrecisionTypeContext<'input>{}

pub struct DoublePrecisionTypeContextExt<'input>{
	base:NonnullableTypeContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DoublePrecisionTypeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DoublePrecisionTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DoublePrecisionTypeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_doublePrecisionType(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_doublePrecisionType(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DoublePrecisionTypeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_doublePrecisionType(self);
	}
}

impl<'input> CustomRuleContext<'input> for DoublePrecisionTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_nonnullableType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_nonnullableType }
}

impl<'input> Borrow<NonnullableTypeContextExt<'input>> for DoublePrecisionTypeContext<'input>{
	fn borrow(&self) -> &NonnullableTypeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<NonnullableTypeContextExt<'input>> for DoublePrecisionTypeContext<'input>{
	fn borrow_mut(&mut self) -> &mut NonnullableTypeContextExt<'input> { &mut self.base }
}

impl<'input> NonnullableTypeContextAttrs<'input> for DoublePrecisionTypeContext<'input> {}

impl<'input> DoublePrecisionTypeContextExt<'input>{
	fn new(ctx: &dyn NonnullableTypeContextAttrs<'input>) -> Rc<NonnullableTypeContextAll<'input>>  {
		Rc::new(
			NonnullableTypeContextAll::DoublePrecisionTypeContext(
				BaseParserRuleContext::copy_from(ctx,DoublePrecisionTypeContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type LegacyArrayTypeContext<'input> = BaseParserRuleContext<'input,LegacyArrayTypeContextExt<'input>>;

pub trait LegacyArrayTypeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ARRAY
	/// Returns `None` if there is no child corresponding to token ARRAY
	fn ARRAY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ARRAY, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LT
	/// Returns `None` if there is no child corresponding to token LT
	fn LT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LT, 0)
	}
	fn type_(&self) -> Option<Rc<Type_ContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token GT
	/// Returns `None` if there is no child corresponding to token GT
	fn GT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(GT, 0)
	}
}

impl<'input> LegacyArrayTypeContextAttrs<'input> for LegacyArrayTypeContext<'input>{}

pub struct LegacyArrayTypeContextExt<'input>{
	base:NonnullableTypeContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{LegacyArrayTypeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for LegacyArrayTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for LegacyArrayTypeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_legacyArrayType(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_legacyArrayType(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for LegacyArrayTypeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_legacyArrayType(self);
	}
}

impl<'input> CustomRuleContext<'input> for LegacyArrayTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_nonnullableType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_nonnullableType }
}

impl<'input> Borrow<NonnullableTypeContextExt<'input>> for LegacyArrayTypeContext<'input>{
	fn borrow(&self) -> &NonnullableTypeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<NonnullableTypeContextExt<'input>> for LegacyArrayTypeContext<'input>{
	fn borrow_mut(&mut self) -> &mut NonnullableTypeContextExt<'input> { &mut self.base }
}

impl<'input> NonnullableTypeContextAttrs<'input> for LegacyArrayTypeContext<'input> {}

impl<'input> LegacyArrayTypeContextExt<'input>{
	fn new(ctx: &dyn NonnullableTypeContextAttrs<'input>) -> Rc<NonnullableTypeContextAll<'input>>  {
		Rc::new(
			NonnullableTypeContextAll::LegacyArrayTypeContext(
				BaseParserRuleContext::copy_from(ctx,LegacyArrayTypeContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type PrimitiveTypeContext<'input> = BaseParserRuleContext<'input,PrimitiveTypeContextExt<'input>>;

pub trait PrimitiveTypeContextAttrs<'input>: TrinoParserContext<'input>{
	fn typeIdentifier(&self) -> Option<Rc<TypeIdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn typeParameter_all(&self) ->  Vec<Rc<TypeParameterContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn typeParameter(&self, i: usize) -> Option<Rc<TypeParameterContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> PrimitiveTypeContextAttrs<'input> for PrimitiveTypeContext<'input>{}

pub struct PrimitiveTypeContextExt<'input>{
	base:NonnullableTypeContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PrimitiveTypeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PrimitiveTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrimitiveTypeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_primitiveType(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_primitiveType(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrimitiveTypeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_primitiveType(self);
	}
}

impl<'input> CustomRuleContext<'input> for PrimitiveTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_nonnullableType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_nonnullableType }
}

impl<'input> Borrow<NonnullableTypeContextExt<'input>> for PrimitiveTypeContext<'input>{
	fn borrow(&self) -> &NonnullableTypeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<NonnullableTypeContextExt<'input>> for PrimitiveTypeContext<'input>{
	fn borrow_mut(&mut self) -> &mut NonnullableTypeContextExt<'input> { &mut self.base }
}

impl<'input> NonnullableTypeContextAttrs<'input> for PrimitiveTypeContext<'input> {}

impl<'input> PrimitiveTypeContextExt<'input>{
	fn new(ctx: &dyn NonnullableTypeContextAttrs<'input>) -> Rc<NonnullableTypeContextAll<'input>>  {
		Rc::new(
			NonnullableTypeContextAll::PrimitiveTypeContext(
				BaseParserRuleContext::copy_from(ctx,PrimitiveTypeContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type DateTimeTypeContext<'input> = BaseParserRuleContext<'input,DateTimeTypeContextExt<'input>>;

pub trait DateTimeTypeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token TIMESTAMP
	/// Returns `None` if there is no child corresponding to token TIMESTAMP
	fn TIMESTAMP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TIMESTAMP, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token WITHOUT
	/// Returns `None` if there is no child corresponding to token WITHOUT
	fn WITHOUT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(WITHOUT, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token TIME in current rule
	fn TIME_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token TIME, starting from 0.
	/// Returns `None` if number of children corresponding to token TIME is less or equal than `i`.
	fn TIME(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TIME, i)
	}
	/// Retrieves first TerminalNode corresponding to token ZONE
	/// Returns `None` if there is no child corresponding to token ZONE
	fn ZONE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ZONE, 0)
	}
	fn typeParameter(&self) -> Option<Rc<TypeParameterContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token WITH
	/// Returns `None` if there is no child corresponding to token WITH
	fn WITH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(WITH, 0)
	}
}

impl<'input> DateTimeTypeContextAttrs<'input> for DateTimeTypeContext<'input>{}

pub struct DateTimeTypeContextExt<'input>{
	base:NonnullableTypeContextExt<'input>,
	pub base_: Option<TokenType<'input>>,
	pub precision: Option<Rc<TypeParameterContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DateTimeTypeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DateTimeTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DateTimeTypeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_dateTimeType(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_dateTimeType(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DateTimeTypeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_dateTimeType(self);
	}
}

impl<'input> CustomRuleContext<'input> for DateTimeTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_nonnullableType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_nonnullableType }
}

impl<'input> Borrow<NonnullableTypeContextExt<'input>> for DateTimeTypeContext<'input>{
	fn borrow(&self) -> &NonnullableTypeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<NonnullableTypeContextExt<'input>> for DateTimeTypeContext<'input>{
	fn borrow_mut(&mut self) -> &mut NonnullableTypeContextExt<'input> { &mut self.base }
}

impl<'input> NonnullableTypeContextAttrs<'input> for DateTimeTypeContext<'input> {}

impl<'input> DateTimeTypeContextExt<'input>{
	fn new(ctx: &dyn NonnullableTypeContextAttrs<'input>) -> Rc<NonnullableTypeContextAll<'input>>  {
		Rc::new(
			NonnullableTypeContextAll::DateTimeTypeContext(
				BaseParserRuleContext::copy_from(ctx,DateTimeTypeContextExt{
					base_:None, 
        			precision:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type LegacyMapTypeContext<'input> = BaseParserRuleContext<'input,LegacyMapTypeContextExt<'input>>;

pub trait LegacyMapTypeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token MAP
	/// Returns `None` if there is no child corresponding to token MAP
	fn MAP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(MAP, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LT
	/// Returns `None` if there is no child corresponding to token LT
	fn LT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LT, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
	/// Retrieves first TerminalNode corresponding to token GT
	/// Returns `None` if there is no child corresponding to token GT
	fn GT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(GT, 0)
	}
	fn type__all(&self) ->  Vec<Rc<Type_ContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn type_(&self, i: usize) -> Option<Rc<Type_ContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
}

impl<'input> LegacyMapTypeContextAttrs<'input> for LegacyMapTypeContext<'input>{}

pub struct LegacyMapTypeContextExt<'input>{
	base:NonnullableTypeContextExt<'input>,
	pub keyType: Option<Rc<Type_ContextAll<'input>>>,
	pub valueType: Option<Rc<Type_ContextAll<'input>>>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{LegacyMapTypeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for LegacyMapTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for LegacyMapTypeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_legacyMapType(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_legacyMapType(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for LegacyMapTypeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_legacyMapType(self);
	}
}

impl<'input> CustomRuleContext<'input> for LegacyMapTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_nonnullableType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_nonnullableType }
}

impl<'input> Borrow<NonnullableTypeContextExt<'input>> for LegacyMapTypeContext<'input>{
	fn borrow(&self) -> &NonnullableTypeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<NonnullableTypeContextExt<'input>> for LegacyMapTypeContext<'input>{
	fn borrow_mut(&mut self) -> &mut NonnullableTypeContextExt<'input> { &mut self.base }
}

impl<'input> NonnullableTypeContextAttrs<'input> for LegacyMapTypeContext<'input> {}

impl<'input> LegacyMapTypeContextExt<'input>{
	fn new(ctx: &dyn NonnullableTypeContextAttrs<'input>) -> Rc<NonnullableTypeContextAll<'input>>  {
		Rc::new(
			NonnullableTypeContextAll::LegacyMapTypeContext(
				BaseParserRuleContext::copy_from(ctx,LegacyMapTypeContextExt{
					tail:None, 
        			keyType:None, valueType:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn nonnullableType(&mut self,)
	-> Result<Rc<NonnullableTypeContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = NonnullableTypeContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 236, RULE_nonnullableType);
        let mut _localctx: Rc<NonnullableTypeContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			recog.base.set_state(2675);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(364,&mut recog.base)? {
				1 =>{
					let tmp = FunctionSignatureGenericTypeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					recog.base.set_state(2562);
					recog.base.match_token(DOLLAR,&mut recog.err_handler)?;

					recog.base.set_state(2563);
					recog.base.match_token(INTEGER_VALUE,&mut recog.err_handler)?;

					}
				}
			,
				2 =>{
					let tmp = RowTypeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(2564);
					recog.base.match_token(ROW,&mut recog.err_handler)?;

					recog.base.set_state(2565);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule rowField*/
					recog.base.set_state(2566);
					recog.rowField()?;

					recog.base.set_state(2571);
					recog.err_handler.sync(&mut recog.base)?;
					_alt = recog.interpreter.adaptive_predict(350,&mut recog.base)?;
					while { _alt!=2 && _alt!=INVALID_ALT } {
						if _alt==1 {
							{
							{
							recog.base.set_state(2567);
							recog.base.match_token(COMMA,&mut recog.err_handler)?;

							/*InvokeRule rowField*/
							recog.base.set_state(2568);
							recog.rowField()?;

							}
							} 
						}
						recog.base.set_state(2573);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(350,&mut recog.base)?;
					}
					recog.base.set_state(2575);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(2574);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						if let NonnullableTypeContextAll::RowTypeContext(ctx) = cast_mut::<_,NonnullableTypeContextAll >(&mut _localctx){
						ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(2577);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				3 =>{
					let tmp = IntervalTypeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 3);
					_localctx = tmp;
					{
					recog.base.set_state(2579);
					recog.base.match_token(INTERVAL,&mut recog.err_handler)?;

					/*InvokeRule intervalField*/
					recog.base.set_state(2580);
					let tmp = recog.intervalField()?;
					if let NonnullableTypeContextAll::IntervalTypeContext(ctx) = cast_mut::<_,NonnullableTypeContextAll >(&mut _localctx){
					ctx.from = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(2583);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==TO {
						{
						recog.base.set_state(2581);
						recog.base.match_token(TO,&mut recog.err_handler)?;

						/*InvokeRule intervalField*/
						recog.base.set_state(2582);
						let tmp = recog.intervalField()?;
						if let NonnullableTypeContextAll::IntervalTypeContext(ctx) = cast_mut::<_,NonnullableTypeContextAll >(&mut _localctx){
						ctx.to = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						}
					}

					}
				}
			,
				4 =>{
					let tmp = DateTimeTypeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 4);
					_localctx = tmp;
					{
					recog.base.set_state(2585);
					let tmp = recog.base.match_token(TIMESTAMP,&mut recog.err_handler)?;
					if let NonnullableTypeContextAll::DateTimeTypeContext(ctx) = cast_mut::<_,NonnullableTypeContextAll >(&mut _localctx){
					ctx.base_ = Some(tmp); } else {unreachable!("cant cast");}  

					recog.base.set_state(2590);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==LPAREN {
						{
						recog.base.set_state(2586);
						recog.base.match_token(LPAREN,&mut recog.err_handler)?;

						/*InvokeRule typeParameter*/
						recog.base.set_state(2587);
						let tmp = recog.typeParameter()?;
						if let NonnullableTypeContextAll::DateTimeTypeContext(ctx) = cast_mut::<_,NonnullableTypeContextAll >(&mut _localctx){
						ctx.precision = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						recog.base.set_state(2588);
						recog.base.match_token(RPAREN,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(2595);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(354,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(2592);
							recog.base.match_token(WITHOUT,&mut recog.err_handler)?;

							recog.base.set_state(2593);
							recog.base.match_token(TIME,&mut recog.err_handler)?;

							recog.base.set_state(2594);
							recog.base.match_token(ZONE,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					}
				}
			,
				5 =>{
					let tmp = DateTimeTypeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 5);
					_localctx = tmp;
					{
					recog.base.set_state(2597);
					let tmp = recog.base.match_token(TIMESTAMP,&mut recog.err_handler)?;
					if let NonnullableTypeContextAll::DateTimeTypeContext(ctx) = cast_mut::<_,NonnullableTypeContextAll >(&mut _localctx){
					ctx.base_ = Some(tmp); } else {unreachable!("cant cast");}  

					recog.base.set_state(2602);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==LPAREN {
						{
						recog.base.set_state(2598);
						recog.base.match_token(LPAREN,&mut recog.err_handler)?;

						/*InvokeRule typeParameter*/
						recog.base.set_state(2599);
						let tmp = recog.typeParameter()?;
						if let NonnullableTypeContextAll::DateTimeTypeContext(ctx) = cast_mut::<_,NonnullableTypeContextAll >(&mut _localctx){
						ctx.precision = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						recog.base.set_state(2600);
						recog.base.match_token(RPAREN,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(2604);
					recog.base.match_token(WITH,&mut recog.err_handler)?;

					recog.base.set_state(2605);
					recog.base.match_token(TIME,&mut recog.err_handler)?;

					recog.base.set_state(2606);
					recog.base.match_token(ZONE,&mut recog.err_handler)?;

					}
				}
			,
				6 =>{
					let tmp = DateTimeTypeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 6);
					_localctx = tmp;
					{
					recog.base.set_state(2607);
					let tmp = recog.base.match_token(TIME,&mut recog.err_handler)?;
					if let NonnullableTypeContextAll::DateTimeTypeContext(ctx) = cast_mut::<_,NonnullableTypeContextAll >(&mut _localctx){
					ctx.base_ = Some(tmp); } else {unreachable!("cant cast");}  

					recog.base.set_state(2612);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==LPAREN {
						{
						recog.base.set_state(2608);
						recog.base.match_token(LPAREN,&mut recog.err_handler)?;

						/*InvokeRule typeParameter*/
						recog.base.set_state(2609);
						let tmp = recog.typeParameter()?;
						if let NonnullableTypeContextAll::DateTimeTypeContext(ctx) = cast_mut::<_,NonnullableTypeContextAll >(&mut _localctx){
						ctx.precision = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						recog.base.set_state(2610);
						recog.base.match_token(RPAREN,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(2617);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(357,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(2614);
							recog.base.match_token(WITHOUT,&mut recog.err_handler)?;

							recog.base.set_state(2615);
							recog.base.match_token(TIME,&mut recog.err_handler)?;

							recog.base.set_state(2616);
							recog.base.match_token(ZONE,&mut recog.err_handler)?;

							}
						}

						_ => {}
					}
					}
				}
			,
				7 =>{
					let tmp = DateTimeTypeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 7);
					_localctx = tmp;
					{
					recog.base.set_state(2619);
					let tmp = recog.base.match_token(TIME,&mut recog.err_handler)?;
					if let NonnullableTypeContextAll::DateTimeTypeContext(ctx) = cast_mut::<_,NonnullableTypeContextAll >(&mut _localctx){
					ctx.base_ = Some(tmp); } else {unreachable!("cant cast");}  

					recog.base.set_state(2624);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==LPAREN {
						{
						recog.base.set_state(2620);
						recog.base.match_token(LPAREN,&mut recog.err_handler)?;

						/*InvokeRule typeParameter*/
						recog.base.set_state(2621);
						let tmp = recog.typeParameter()?;
						if let NonnullableTypeContextAll::DateTimeTypeContext(ctx) = cast_mut::<_,NonnullableTypeContextAll >(&mut _localctx){
						ctx.precision = Some(tmp.clone()); } else {unreachable!("cant cast");}  

						recog.base.set_state(2622);
						recog.base.match_token(RPAREN,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(2626);
					recog.base.match_token(WITH,&mut recog.err_handler)?;

					recog.base.set_state(2627);
					recog.base.match_token(TIME,&mut recog.err_handler)?;

					recog.base.set_state(2628);
					recog.base.match_token(ZONE,&mut recog.err_handler)?;

					}
				}
			,
				8 =>{
					let tmp = DoublePrecisionTypeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 8);
					_localctx = tmp;
					{
					recog.base.set_state(2629);
					recog.base.match_token(DOUBLE,&mut recog.err_handler)?;

					recog.base.set_state(2630);
					recog.base.match_token(PRECISION,&mut recog.err_handler)?;

					}
				}
			,
				9 =>{
					let tmp = LegacyMapTypeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 9);
					_localctx = tmp;
					{
					recog.base.set_state(2631);
					recog.base.match_token(MAP,&mut recog.err_handler)?;

					recog.base.set_state(2632);
					recog.base.match_token(LT,&mut recog.err_handler)?;

					/*InvokeRule type_*/
					recog.base.set_state(2633);
					let tmp = recog.type_()?;
					if let NonnullableTypeContextAll::LegacyMapTypeContext(ctx) = cast_mut::<_,NonnullableTypeContextAll >(&mut _localctx){
					ctx.keyType = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(2634);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule type_*/
					recog.base.set_state(2635);
					let tmp = recog.type_()?;
					if let NonnullableTypeContextAll::LegacyMapTypeContext(ctx) = cast_mut::<_,NonnullableTypeContextAll >(&mut _localctx){
					ctx.valueType = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(2637);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(2636);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						if let NonnullableTypeContextAll::LegacyMapTypeContext(ctx) = cast_mut::<_,NonnullableTypeContextAll >(&mut _localctx){
						ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(2639);
					recog.base.match_token(GT,&mut recog.err_handler)?;

					}
				}
			,
				10 =>{
					let tmp = LegacyArrayTypeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 10);
					_localctx = tmp;
					{
					recog.base.set_state(2641);
					recog.base.match_token(ARRAY,&mut recog.err_handler)?;

					recog.base.set_state(2642);
					recog.base.match_token(LT,&mut recog.err_handler)?;

					/*InvokeRule type_*/
					recog.base.set_state(2643);
					recog.type_()?;

					recog.base.set_state(2644);
					recog.base.match_token(GT,&mut recog.err_handler)?;

					}
				}
			,
				11 =>{
					let tmp = PrimitiveTypeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 11);
					_localctx = tmp;
					{
					/*InvokeRule typeIdentifier*/
					recog.base.set_state(2646);
					recog.typeIdentifier()?;

					recog.base.set_state(2661);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==LPAREN {
						{
						recog.base.set_state(2647);
						recog.base.match_token(LPAREN,&mut recog.err_handler)?;

						/*InvokeRule typeParameter*/
						recog.base.set_state(2648);
						recog.typeParameter()?;

						recog.base.set_state(2653);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(360,&mut recog.base)?;
						while { _alt!=2 && _alt!=INVALID_ALT } {
							if _alt==1 {
								{
								{
								recog.base.set_state(2649);
								recog.base.match_token(COMMA,&mut recog.err_handler)?;

								/*InvokeRule typeParameter*/
								recog.base.set_state(2650);
								recog.typeParameter()?;

								}
								} 
							}
							recog.base.set_state(2655);
							recog.err_handler.sync(&mut recog.base)?;
							_alt = recog.interpreter.adaptive_predict(360,&mut recog.base)?;
						}
						recog.base.set_state(2657);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
						if _la==COMMA {
							{
							recog.base.set_state(2656);
							let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
							if let NonnullableTypeContextAll::PrimitiveTypeContext(ctx) = cast_mut::<_,NonnullableTypeContextAll >(&mut _localctx){
							ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

							}
						}

						recog.base.set_state(2659);
						recog.base.match_token(RPAREN,&mut recog.err_handler)?;

						}
					}

					}
				}
			,
				12 =>{
					let tmp = LambdaTypeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 12);
					_localctx = tmp;
					{
					recog.base.set_state(2663);
					recog.base.match_token(FUNCTION,&mut recog.err_handler)?;

					recog.base.set_state(2664);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule type_*/
					recog.base.set_state(2665);
					recog.type_()?;

					recog.base.set_state(2670);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while _la==COMMA {
						{
						{
						recog.base.set_state(2666);
						recog.base.match_token(COMMA,&mut recog.err_handler)?;

						/*InvokeRule type_*/
						recog.base.set_state(2667);
						recog.type_()?;

						}
						}
						recog.base.set_state(2672);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					recog.base.set_state(2673);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- rowField ----------------
pub type RowFieldContextAll<'input> = RowFieldContext<'input>;


pub type RowFieldContext<'input> = BaseParserRuleContext<'input,RowFieldContextExt<'input>>;

#[derive(Clone)]
pub struct RowFieldContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for RowFieldContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RowFieldContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_rowField(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_rowField(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RowFieldContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_rowField(self);
	}
}

impl<'input> CustomRuleContext<'input> for RowFieldContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_rowField }
	//fn type_rule_index() -> usize where Self: Sized { RULE_rowField }
}
antlr_rust::tid!{RowFieldContextExt<'a>}

impl<'input> RowFieldContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<RowFieldContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,RowFieldContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait RowFieldContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<RowFieldContextExt<'input>>{

fn type_(&self) -> Option<Rc<Type_ContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> RowFieldContextAttrs<'input> for RowFieldContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn rowField(&mut self,)
	-> Result<Rc<RowFieldContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = RowFieldContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 238, RULE_rowField);
        let mut _localctx: Rc<RowFieldContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2681);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(365,&mut recog.base)? {
				1 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					/*InvokeRule type_*/
					recog.base.set_state(2677);
					recog.type_()?;

					}
				}
			,
				2 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					/*InvokeRule identifier*/
					recog.base.set_state(2678);
					recog.identifier()?;

					/*InvokeRule type_*/
					recog.base.set_state(2679);
					recog.type_()?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- typeParameter ----------------
pub type TypeParameterContextAll<'input> = TypeParameterContext<'input>;


pub type TypeParameterContext<'input> = BaseParserRuleContext<'input,TypeParameterContextExt<'input>>;

#[derive(Clone)]
pub struct TypeParameterContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for TypeParameterContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TypeParameterContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_typeParameter(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_typeParameter(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TypeParameterContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_typeParameter(self);
	}
}

impl<'input> CustomRuleContext<'input> for TypeParameterContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_typeParameter }
	//fn type_rule_index() -> usize where Self: Sized { RULE_typeParameter }
}
antlr_rust::tid!{TypeParameterContextExt<'a>}

impl<'input> TypeParameterContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<TypeParameterContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,TypeParameterContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait TypeParameterContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<TypeParameterContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token INTEGER_VALUE
/// Returns `None` if there is no child corresponding to token INTEGER_VALUE
fn INTEGER_VALUE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(INTEGER_VALUE, 0)
}
fn type_(&self) -> Option<Rc<Type_ContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> TypeParameterContextAttrs<'input> for TypeParameterContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn typeParameter(&mut self,)
	-> Result<Rc<TypeParameterContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = TypeParameterContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 240, RULE_typeParameter);
        let mut _localctx: Rc<TypeParameterContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2685);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 INTEGER_VALUE 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(2683);
					recog.base.match_token(INTEGER_VALUE,&mut recog.err_handler)?;

					}
				}

			 ABORT | ABSENT | ADD | ADMIN | AFTER | ALL | ANALYZE | ANTI | ANY | ARRAY |
			 ASC | AT | ATTACH | AUTHORIZATION | BEGIN | BERNOULLI | BOTH | BZIP2 |
			 CALL | CANCEL | CASCADE | CATALOGS | CHARACTER | CLONE | CLOSE | CLUSTER |
			 COLUMN | COLUMNS | COMMENT | COMMIT | COMMITTED | COMPRESSION | CONDITIONAL |
			 CONNECTION | COPARTITION | COPY | COUNT | CURRENT | DATA | DATABASE |
			 DATASHARE | DATE | DAY | DAYS | DECLARE | DEFAULT | DEFINE | DEFINER |
			 DELIMITER | DENY | DESC | DESCRIBE | DESCRIPTOR | DISTRIBUTED | DETACH |
			 DOUBLE | EMPTY | ENCODING | END | ERROR | EXCLUDING | EXECUTE | EXPLAIN |
			 EXTERNAL | FETCH | FILTER | FINAL | FIRST | FOLLOWING | FORMAT | FUNCTION |
			 FUNCTIONS | GRACE | GRANT | GRANTED | GRANTS | GRAPHVIZ | GROUPS | GZIP |
			 HOUR | HOURS | IF | IGNORE | INCLUDING | INITIAL | INPUT | INTEGER |
			 INTERVAL | INVOKER | IO | ISOLATION | JSON | KEEP | KEY | KEYS | LAMBDA |
			 LAST | LATERAL | LEADING | LEVEL | LIBRARY | LIMIT | LOCAL | LOCATION |
			 LOCK | LOGICAL | M | MAP | MASKING | MATCH | MATCHED | MATCHES | MATCH_RECOGNIZE |
			 MATERIALIZED | MAX | MEASURES | MERGE | MIN | MINUS_KW | MINUTE | MINUTES |
			 MODEL | MONTH | MONTHS | NEXT | NFC | NFD | NFKC | NFKD | NO | NONE |
			 NULL | NULLS | OBJECT | OF | OFFSET | OMIT | ONE | ONLY | OPTION | ORDINALITY |
			 OUTPUT | OVER | OVERFLOW | PARTITION | PARTITIONS | PASSING | PAST |
			 PATH | PATTERN | PER | PERIOD | PERMUTE | POSITION | PRECEDING | PRECISION |
			 PROCEDURE | PRIVILEGES | PROPERTIES | PRUNE | QUOTES | RANGE | READ |
			 REFRESH | RENAME | REPEATABLE | REPLACE | RESET | RESPECT | RESTRICT |
			 RETURNING | REVOKE | RLS | ROLE | ROLES | ROLLBACK | ROLLUP | ROW | ROWS |
			 RUNNING | S | SCALAR | SEC | SECOND | SECONDS | SCHEMA | SCHEMAS | SECURITY |
			 SEEK | SEMI | SERIALIZABLE | SESSION | SET | SETS | SHOW | SNAPSHOT |
			 SOME | START | STATS | STRUCT | SUBSET | SUBSTRING | SYSTEM | SYSTEM_TIME |
			 TABLES | TABLESAMPLE | TEMP | TEMPORARY | TEXT | STRING_KW | TIES | TIME |
			 TIMESTAMP | TO | TRAILING | TRANSACTION | TRUNCATE | TRY_CAST | TUPLE |
			 TYPE | UNBOUNDED | UNCOMMITTED | UNCONDITIONAL | UNIQUE | UNKNOWN | UNLOAD |
			 UNMATCHED | UPDATE | USE | USER | UTF16 | UTF32 | UTF8 | VACUUM | VALIDATE |
			 VALUE | VARYING | VERBOSE | VERSION | VIEW | WEEK | WINDOW | WITHIN |
			 WITHOUT | WORK | WRAPPER | WRITE | XZ | YEAR | YEARS | ZONE | ZSTD |
			 DOLLAR | IDENTIFIER | QUOTED_IDENTIFIER 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					/*InvokeRule type_*/
					recog.base.set_state(2684);
					recog.type_()?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- whenClause ----------------
pub type WhenClauseContextAll<'input> = WhenClauseContext<'input>;


pub type WhenClauseContext<'input> = BaseParserRuleContext<'input,WhenClauseContextExt<'input>>;

#[derive(Clone)]
pub struct WhenClauseContextExt<'input>{
	pub condition: Option<Rc<ExpressionContextAll<'input>>>,
	pub result: Option<Rc<ExpressionContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for WhenClauseContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for WhenClauseContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_whenClause(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_whenClause(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for WhenClauseContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_whenClause(self);
	}
}

impl<'input> CustomRuleContext<'input> for WhenClauseContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_whenClause }
	//fn type_rule_index() -> usize where Self: Sized { RULE_whenClause }
}
antlr_rust::tid!{WhenClauseContextExt<'a>}

impl<'input> WhenClauseContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<WhenClauseContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,WhenClauseContextExt{
				condition: None, result: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait WhenClauseContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<WhenClauseContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token WHEN
/// Returns `None` if there is no child corresponding to token WHEN
fn WHEN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WHEN, 0)
}
/// Retrieves first TerminalNode corresponding to token THEN
/// Returns `None` if there is no child corresponding to token THEN
fn THEN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(THEN, 0)
}
fn expression_all(&self) ->  Vec<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn expression(&self, i: usize) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}

}

impl<'input> WhenClauseContextAttrs<'input> for WhenClauseContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn whenClause(&mut self,)
	-> Result<Rc<WhenClauseContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = WhenClauseContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 242, RULE_whenClause);
        let mut _localctx: Rc<WhenClauseContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2687);
			recog.base.match_token(WHEN,&mut recog.err_handler)?;

			/*InvokeRule expression*/
			recog.base.set_state(2688);
			let tmp = recog.expression()?;
			 cast_mut::<_,WhenClauseContext >(&mut _localctx).condition = Some(tmp.clone());
			  

			recog.base.set_state(2689);
			recog.base.match_token(THEN,&mut recog.err_handler)?;

			/*InvokeRule expression*/
			recog.base.set_state(2690);
			let tmp = recog.expression()?;
			 cast_mut::<_,WhenClauseContext >(&mut _localctx).result = Some(tmp.clone());
			  

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- filter ----------------
pub type FilterContextAll<'input> = FilterContext<'input>;


pub type FilterContext<'input> = BaseParserRuleContext<'input,FilterContextExt<'input>>;

#[derive(Clone)]
pub struct FilterContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for FilterContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for FilterContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_filter(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_filter(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for FilterContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_filter(self);
	}
}

impl<'input> CustomRuleContext<'input> for FilterContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_filter }
	//fn type_rule_index() -> usize where Self: Sized { RULE_filter }
}
antlr_rust::tid!{FilterContextExt<'a>}

impl<'input> FilterContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<FilterContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,FilterContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait FilterContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<FilterContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token FILTER
/// Returns `None` if there is no child corresponding to token FILTER
fn FILTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FILTER, 0)
}
/// Retrieves first TerminalNode corresponding to token LPAREN
/// Returns `None` if there is no child corresponding to token LPAREN
fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, 0)
}
/// Retrieves first TerminalNode corresponding to token WHERE
/// Returns `None` if there is no child corresponding to token WHERE
fn WHERE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WHERE, 0)
}
fn booleanExpression(&self) -> Option<Rc<BooleanExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token RPAREN
/// Returns `None` if there is no child corresponding to token RPAREN
fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, 0)
}

}

impl<'input> FilterContextAttrs<'input> for FilterContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn filter(&mut self,)
	-> Result<Rc<FilterContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = FilterContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 244, RULE_filter);
        let mut _localctx: Rc<FilterContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2692);
			recog.base.match_token(FILTER,&mut recog.err_handler)?;

			recog.base.set_state(2693);
			recog.base.match_token(LPAREN,&mut recog.err_handler)?;

			recog.base.set_state(2694);
			recog.base.match_token(WHERE,&mut recog.err_handler)?;

			/*InvokeRule booleanExpression*/
			recog.base.set_state(2695);
			recog.booleanExpression_rec(0)?;

			recog.base.set_state(2696);
			recog.base.match_token(RPAREN,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- over ----------------
pub type OverContextAll<'input> = OverContext<'input>;


pub type OverContext<'input> = BaseParserRuleContext<'input,OverContextExt<'input>>;

#[derive(Clone)]
pub struct OverContextExt<'input>{
	pub windowName: Option<Rc<IdentifierContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for OverContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for OverContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_over(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_over(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for OverContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_over(self);
	}
}

impl<'input> CustomRuleContext<'input> for OverContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_over }
	//fn type_rule_index() -> usize where Self: Sized { RULE_over }
}
antlr_rust::tid!{OverContextExt<'a>}

impl<'input> OverContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<OverContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,OverContextExt{
				windowName: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait OverContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<OverContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token OVER
/// Returns `None` if there is no child corresponding to token OVER
fn OVER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(OVER, 0)
}
/// Retrieves first TerminalNode corresponding to token LPAREN
/// Returns `None` if there is no child corresponding to token LPAREN
fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, 0)
}
fn windowSpecification(&self) -> Option<Rc<WindowSpecificationContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token RPAREN
/// Returns `None` if there is no child corresponding to token RPAREN
fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, 0)
}
fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> OverContextAttrs<'input> for OverContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn over(&mut self,)
	-> Result<Rc<OverContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = OverContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 246, RULE_over);
        let mut _localctx: Rc<OverContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2698);
			recog.base.match_token(OVER,&mut recog.err_handler)?;

			recog.base.set_state(2704);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 ABORT | ABSENT | ADD | ADMIN | AFTER | ALL | ANALYZE | ANTI | ANY | ARRAY |
			 ASC | AT | ATTACH | AUTHORIZATION | BEGIN | BERNOULLI | BOTH | BZIP2 |
			 CALL | CANCEL | CASCADE | CATALOGS | CHARACTER | CLONE | CLOSE | CLUSTER |
			 COLUMN | COLUMNS | COMMENT | COMMIT | COMMITTED | COMPRESSION | CONDITIONAL |
			 CONNECTION | COPARTITION | COPY | COUNT | CURRENT | DATA | DATABASE |
			 DATASHARE | DATE | DAY | DAYS | DECLARE | DEFAULT | DEFINE | DEFINER |
			 DELIMITER | DENY | DESC | DESCRIBE | DESCRIPTOR | DISTRIBUTED | DETACH |
			 DOUBLE | EMPTY | ENCODING | END | ERROR | EXCLUDING | EXECUTE | EXPLAIN |
			 EXTERNAL | FETCH | FILTER | FINAL | FIRST | FOLLOWING | FORMAT | FUNCTIONS |
			 GRACE | GRANT | GRANTED | GRANTS | GRAPHVIZ | GROUPS | GZIP | HOUR |
			 HOURS | IF | IGNORE | INCLUDING | INITIAL | INPUT | INTEGER | INTERVAL |
			 INVOKER | IO | ISOLATION | JSON | KEEP | KEY | KEYS | LAMBDA | LAST |
			 LATERAL | LEADING | LEVEL | LIBRARY | LIMIT | LOCAL | LOCATION | LOCK |
			 LOGICAL | M | MAP | MASKING | MATCH | MATCHED | MATCHES | MATCH_RECOGNIZE |
			 MATERIALIZED | MAX | MEASURES | MERGE | MIN | MINUS_KW | MINUTE | MINUTES |
			 MODEL | MONTH | MONTHS | NEXT | NFC | NFD | NFKC | NFKD | NO | NONE |
			 NULLS | OBJECT | OF | OFFSET | OMIT | ONE | ONLY | OPTION | ORDINALITY |
			 OUTPUT | OVER | OVERFLOW | PARTITION | PARTITIONS | PASSING | PAST |
			 PATH | PATTERN | PER | PERIOD | PERMUTE | POSITION | PRECEDING | PRECISION |
			 PROCEDURE | PRIVILEGES | PROPERTIES | PRUNE | QUOTES | RANGE | READ |
			 REFRESH | RENAME | REPEATABLE | REPLACE | RESET | RESPECT | RESTRICT |
			 RETURNING | REVOKE | RLS | ROLE | ROLES | ROLLBACK | ROLLUP | ROW | ROWS |
			 RUNNING | S | SCALAR | SEC | SECOND | SECONDS | SCHEMA | SCHEMAS | SECURITY |
			 SEEK | SEMI | SERIALIZABLE | SESSION | SET | SETS | SHOW | SNAPSHOT |
			 SOME | START | STATS | STRUCT | SUBSET | SUBSTRING | SYSTEM | SYSTEM_TIME |
			 TABLES | TABLESAMPLE | TEMP | TEMPORARY | TEXT | STRING_KW | TIES | TIME |
			 TIMESTAMP | TO | TRAILING | TRANSACTION | TRUNCATE | TRY_CAST | TUPLE |
			 TYPE | UNBOUNDED | UNCOMMITTED | UNCONDITIONAL | UNIQUE | UNKNOWN | UNLOAD |
			 UNMATCHED | UPDATE | USE | USER | UTF16 | UTF32 | UTF8 | VACUUM | VALIDATE |
			 VALUE | VARYING | VERBOSE | VERSION | VIEW | WEEK | WINDOW | WITHIN |
			 WITHOUT | WORK | WRAPPER | WRITE | XZ | YEAR | YEARS | ZONE | ZSTD |
			 IDENTIFIER | QUOTED_IDENTIFIER 
				=> {
					{
					/*InvokeRule identifier*/
					recog.base.set_state(2699);
					let tmp = recog.identifier()?;
					 cast_mut::<_,OverContext >(&mut _localctx).windowName = Some(tmp.clone());
					  

					}
				}

			 LPAREN 
				=> {
					{
					recog.base.set_state(2700);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule windowSpecification*/
					recog.base.set_state(2701);
					recog.windowSpecification()?;

					recog.base.set_state(2702);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- windowFrame ----------------
pub type WindowFrameContextAll<'input> = WindowFrameContext<'input>;


pub type WindowFrameContext<'input> = BaseParserRuleContext<'input,WindowFrameContextExt<'input>>;

#[derive(Clone)]
pub struct WindowFrameContextExt<'input>{
	pub COMMA: Option<TokenType<'input>>,
	pub tail:Vec<TokenType<'input>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for WindowFrameContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for WindowFrameContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_windowFrame(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_windowFrame(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for WindowFrameContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_windowFrame(self);
	}
}

impl<'input> CustomRuleContext<'input> for WindowFrameContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_windowFrame }
	//fn type_rule_index() -> usize where Self: Sized { RULE_windowFrame }
}
antlr_rust::tid!{WindowFrameContextExt<'a>}

impl<'input> WindowFrameContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<WindowFrameContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,WindowFrameContextExt{
				COMMA: None, 
				tail: Vec::new(), 
				ph:PhantomData
			}),
		)
	}
}

pub trait WindowFrameContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<WindowFrameContextExt<'input>>{

fn frameExtent(&self) -> Option<Rc<FrameExtentContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token MEASURES
/// Returns `None` if there is no child corresponding to token MEASURES
fn MEASURES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MEASURES, 0)
}
fn measureDefinition_all(&self) ->  Vec<Rc<MeasureDefinitionContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn measureDefinition(&self, i: usize) -> Option<Rc<MeasureDefinitionContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves first TerminalNode corresponding to token AFTER
/// Returns `None` if there is no child corresponding to token AFTER
fn AFTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(AFTER, 0)
}
/// Retrieves first TerminalNode corresponding to token MATCH
/// Returns `None` if there is no child corresponding to token MATCH
fn MATCH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MATCH, 0)
}
fn skipTo(&self) -> Option<Rc<SkipToContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token PATTERN
/// Returns `None` if there is no child corresponding to token PATTERN
fn PATTERN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PATTERN, 0)
}
/// Retrieves first TerminalNode corresponding to token LPAREN
/// Returns `None` if there is no child corresponding to token LPAREN
fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, 0)
}
fn rowPattern(&self) -> Option<Rc<RowPatternContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token RPAREN
/// Returns `None` if there is no child corresponding to token RPAREN
fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, 0)
}
/// Retrieves first TerminalNode corresponding to token SUBSET
/// Returns `None` if there is no child corresponding to token SUBSET
fn SUBSET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SUBSET, 0)
}
fn subsetDefinition_all(&self) ->  Vec<Rc<SubsetDefinitionContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn subsetDefinition(&self, i: usize) -> Option<Rc<SubsetDefinitionContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves first TerminalNode corresponding to token DEFINE
/// Returns `None` if there is no child corresponding to token DEFINE
fn DEFINE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DEFINE, 0)
}
fn variableDefinition_all(&self) ->  Vec<Rc<VariableDefinitionContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn variableDefinition(&self, i: usize) -> Option<Rc<VariableDefinitionContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves first TerminalNode corresponding to token INITIAL
/// Returns `None` if there is no child corresponding to token INITIAL
fn INITIAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(INITIAL, 0)
}
/// Retrieves first TerminalNode corresponding to token SEEK
/// Returns `None` if there is no child corresponding to token SEEK
fn SEEK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SEEK, 0)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> WindowFrameContextAttrs<'input> for WindowFrameContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn windowFrame(&mut self,)
	-> Result<Rc<WindowFrameContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = WindowFrameContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 248, RULE_windowFrame);
        let mut _localctx: Rc<WindowFrameContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2718);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==MEASURES {
				{
				recog.base.set_state(2706);
				recog.base.match_token(MEASURES,&mut recog.err_handler)?;

				/*InvokeRule measureDefinition*/
				recog.base.set_state(2707);
				recog.measureDefinition()?;

				recog.base.set_state(2712);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(368,&mut recog.base)?;
				while { _alt!=2 && _alt!=INVALID_ALT } {
					if _alt==1 {
						{
						{
						recog.base.set_state(2708);
						recog.base.match_token(COMMA,&mut recog.err_handler)?;

						/*InvokeRule measureDefinition*/
						recog.base.set_state(2709);
						recog.measureDefinition()?;

						}
						} 
					}
					recog.base.set_state(2714);
					recog.err_handler.sync(&mut recog.base)?;
					_alt = recog.interpreter.adaptive_predict(368,&mut recog.base)?;
				}
				recog.base.set_state(2716);
				recog.err_handler.sync(&mut recog.base)?;
				_la = recog.base.input.la(1);
				if _la==COMMA {
					{
					recog.base.set_state(2715);
					let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
					 cast_mut::<_,WindowFrameContext >(&mut _localctx).COMMA = Some(tmp);
					  

					let temp =  cast_mut::<_,WindowFrameContext >(&mut _localctx).COMMA.clone().unwrap()
					 ;
					 cast_mut::<_,WindowFrameContext >(&mut _localctx).tail.push(temp);
					  
					}
				}

				}
			}

			/*InvokeRule frameExtent*/
			recog.base.set_state(2720);
			recog.frameExtent()?;

			recog.base.set_state(2724);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==AFTER {
				{
				recog.base.set_state(2721);
				recog.base.match_token(AFTER,&mut recog.err_handler)?;

				recog.base.set_state(2722);
				recog.base.match_token(MATCH,&mut recog.err_handler)?;

				/*InvokeRule skipTo*/
				recog.base.set_state(2723);
				recog.skipTo()?;

				}
			}

			recog.base.set_state(2727);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==INITIAL || _la==SEEK {
				{
				recog.base.set_state(2726);
				_la = recog.base.input.la(1);
				if { !(_la==INITIAL || _la==SEEK) } {
					recog.err_handler.recover_inline(&mut recog.base)?;

				}
				else {
					if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
					recog.err_handler.report_match(&mut recog.base);
					recog.base.consume(&mut recog.err_handler);
				}
				}
			}

			recog.base.set_state(2734);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==PATTERN {
				{
				recog.base.set_state(2729);
				recog.base.match_token(PATTERN,&mut recog.err_handler)?;

				recog.base.set_state(2730);
				recog.base.match_token(LPAREN,&mut recog.err_handler)?;

				/*InvokeRule rowPattern*/
				recog.base.set_state(2731);
				recog.rowPattern_rec(0)?;

				recog.base.set_state(2732);
				recog.base.match_token(RPAREN,&mut recog.err_handler)?;

				}
			}

			recog.base.set_state(2748);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==SUBSET {
				{
				recog.base.set_state(2736);
				recog.base.match_token(SUBSET,&mut recog.err_handler)?;

				/*InvokeRule subsetDefinition*/
				recog.base.set_state(2737);
				recog.subsetDefinition()?;

				recog.base.set_state(2742);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(374,&mut recog.base)?;
				while { _alt!=2 && _alt!=INVALID_ALT } {
					if _alt==1 {
						{
						{
						recog.base.set_state(2738);
						recog.base.match_token(COMMA,&mut recog.err_handler)?;

						/*InvokeRule subsetDefinition*/
						recog.base.set_state(2739);
						recog.subsetDefinition()?;

						}
						} 
					}
					recog.base.set_state(2744);
					recog.err_handler.sync(&mut recog.base)?;
					_alt = recog.interpreter.adaptive_predict(374,&mut recog.base)?;
				}
				recog.base.set_state(2746);
				recog.err_handler.sync(&mut recog.base)?;
				_la = recog.base.input.la(1);
				if _la==COMMA {
					{
					recog.base.set_state(2745);
					let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
					 cast_mut::<_,WindowFrameContext >(&mut _localctx).COMMA = Some(tmp);
					  

					let temp =  cast_mut::<_,WindowFrameContext >(&mut _localctx).COMMA.clone().unwrap()
					 ;
					 cast_mut::<_,WindowFrameContext >(&mut _localctx).tail.push(temp);
					  
					}
				}

				}
			}

			recog.base.set_state(2762);
			recog.err_handler.sync(&mut recog.base)?;
			_la = recog.base.input.la(1);
			if _la==DEFINE {
				{
				recog.base.set_state(2750);
				recog.base.match_token(DEFINE,&mut recog.err_handler)?;

				/*InvokeRule variableDefinition*/
				recog.base.set_state(2751);
				recog.variableDefinition()?;

				recog.base.set_state(2756);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(377,&mut recog.base)?;
				while { _alt!=2 && _alt!=INVALID_ALT } {
					if _alt==1 {
						{
						{
						recog.base.set_state(2752);
						recog.base.match_token(COMMA,&mut recog.err_handler)?;

						/*InvokeRule variableDefinition*/
						recog.base.set_state(2753);
						recog.variableDefinition()?;

						}
						} 
					}
					recog.base.set_state(2758);
					recog.err_handler.sync(&mut recog.base)?;
					_alt = recog.interpreter.adaptive_predict(377,&mut recog.base)?;
				}
				recog.base.set_state(2760);
				recog.err_handler.sync(&mut recog.base)?;
				_la = recog.base.input.la(1);
				if _la==COMMA {
					{
					recog.base.set_state(2759);
					let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
					 cast_mut::<_,WindowFrameContext >(&mut _localctx).COMMA = Some(tmp);
					  

					let temp =  cast_mut::<_,WindowFrameContext >(&mut _localctx).COMMA.clone().unwrap()
					 ;
					 cast_mut::<_,WindowFrameContext >(&mut _localctx).tail.push(temp);
					  
					}
				}

				}
			}

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- frameExtent ----------------
pub type FrameExtentContextAll<'input> = FrameExtentContext<'input>;


pub type FrameExtentContext<'input> = BaseParserRuleContext<'input,FrameExtentContextExt<'input>>;

#[derive(Clone)]
pub struct FrameExtentContextExt<'input>{
	pub frameType: Option<TokenType<'input>>,
	pub start: Option<Rc<FrameBoundContextAll<'input>>>,
	pub end: Option<Rc<FrameBoundContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for FrameExtentContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for FrameExtentContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_frameExtent(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_frameExtent(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for FrameExtentContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_frameExtent(self);
	}
}

impl<'input> CustomRuleContext<'input> for FrameExtentContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_frameExtent }
	//fn type_rule_index() -> usize where Self: Sized { RULE_frameExtent }
}
antlr_rust::tid!{FrameExtentContextExt<'a>}

impl<'input> FrameExtentContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<FrameExtentContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,FrameExtentContextExt{
				frameType: None, 
				start: None, end: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait FrameExtentContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<FrameExtentContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token RANGE
/// Returns `None` if there is no child corresponding to token RANGE
fn RANGE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RANGE, 0)
}
fn frameBound_all(&self) ->  Vec<Rc<FrameBoundContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn frameBound(&self, i: usize) -> Option<Rc<FrameBoundContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves first TerminalNode corresponding to token ROWS
/// Returns `None` if there is no child corresponding to token ROWS
fn ROWS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ROWS, 0)
}
/// Retrieves first TerminalNode corresponding to token GROUPS
/// Returns `None` if there is no child corresponding to token GROUPS
fn GROUPS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(GROUPS, 0)
}
/// Retrieves first TerminalNode corresponding to token BETWEEN
/// Returns `None` if there is no child corresponding to token BETWEEN
fn BETWEEN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(BETWEEN, 0)
}
/// Retrieves first TerminalNode corresponding to token AND
/// Returns `None` if there is no child corresponding to token AND
fn AND(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(AND, 0)
}

}

impl<'input> FrameExtentContextAttrs<'input> for FrameExtentContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn frameExtent(&mut self,)
	-> Result<Rc<FrameExtentContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = FrameExtentContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 250, RULE_frameExtent);
        let mut _localctx: Rc<FrameExtentContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2788);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(380,&mut recog.base)? {
				1 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					recog.base.set_state(2764);
					let tmp = recog.base.match_token(RANGE,&mut recog.err_handler)?;
					 cast_mut::<_,FrameExtentContext >(&mut _localctx).frameType = Some(tmp);
					  

					/*InvokeRule frameBound*/
					recog.base.set_state(2765);
					let tmp = recog.frameBound()?;
					 cast_mut::<_,FrameExtentContext >(&mut _localctx).start = Some(tmp.clone());
					  

					}
				}
			,
				2 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(2766);
					let tmp = recog.base.match_token(ROWS,&mut recog.err_handler)?;
					 cast_mut::<_,FrameExtentContext >(&mut _localctx).frameType = Some(tmp);
					  

					/*InvokeRule frameBound*/
					recog.base.set_state(2767);
					let tmp = recog.frameBound()?;
					 cast_mut::<_,FrameExtentContext >(&mut _localctx).start = Some(tmp.clone());
					  

					}
				}
			,
				3 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 3);
					recog.base.enter_outer_alt(None, 3);
					{
					recog.base.set_state(2768);
					let tmp = recog.base.match_token(GROUPS,&mut recog.err_handler)?;
					 cast_mut::<_,FrameExtentContext >(&mut _localctx).frameType = Some(tmp);
					  

					/*InvokeRule frameBound*/
					recog.base.set_state(2769);
					let tmp = recog.frameBound()?;
					 cast_mut::<_,FrameExtentContext >(&mut _localctx).start = Some(tmp.clone());
					  

					}
				}
			,
				4 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 4);
					recog.base.enter_outer_alt(None, 4);
					{
					recog.base.set_state(2770);
					let tmp = recog.base.match_token(RANGE,&mut recog.err_handler)?;
					 cast_mut::<_,FrameExtentContext >(&mut _localctx).frameType = Some(tmp);
					  

					recog.base.set_state(2771);
					recog.base.match_token(BETWEEN,&mut recog.err_handler)?;

					/*InvokeRule frameBound*/
					recog.base.set_state(2772);
					let tmp = recog.frameBound()?;
					 cast_mut::<_,FrameExtentContext >(&mut _localctx).start = Some(tmp.clone());
					  

					recog.base.set_state(2773);
					recog.base.match_token(AND,&mut recog.err_handler)?;

					/*InvokeRule frameBound*/
					recog.base.set_state(2774);
					let tmp = recog.frameBound()?;
					 cast_mut::<_,FrameExtentContext >(&mut _localctx).end = Some(tmp.clone());
					  

					}
				}
			,
				5 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 5);
					recog.base.enter_outer_alt(None, 5);
					{
					recog.base.set_state(2776);
					let tmp = recog.base.match_token(ROWS,&mut recog.err_handler)?;
					 cast_mut::<_,FrameExtentContext >(&mut _localctx).frameType = Some(tmp);
					  

					recog.base.set_state(2777);
					recog.base.match_token(BETWEEN,&mut recog.err_handler)?;

					/*InvokeRule frameBound*/
					recog.base.set_state(2778);
					let tmp = recog.frameBound()?;
					 cast_mut::<_,FrameExtentContext >(&mut _localctx).start = Some(tmp.clone());
					  

					recog.base.set_state(2779);
					recog.base.match_token(AND,&mut recog.err_handler)?;

					/*InvokeRule frameBound*/
					recog.base.set_state(2780);
					let tmp = recog.frameBound()?;
					 cast_mut::<_,FrameExtentContext >(&mut _localctx).end = Some(tmp.clone());
					  

					}
				}
			,
				6 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 6);
					recog.base.enter_outer_alt(None, 6);
					{
					recog.base.set_state(2782);
					let tmp = recog.base.match_token(GROUPS,&mut recog.err_handler)?;
					 cast_mut::<_,FrameExtentContext >(&mut _localctx).frameType = Some(tmp);
					  

					recog.base.set_state(2783);
					recog.base.match_token(BETWEEN,&mut recog.err_handler)?;

					/*InvokeRule frameBound*/
					recog.base.set_state(2784);
					let tmp = recog.frameBound()?;
					 cast_mut::<_,FrameExtentContext >(&mut _localctx).start = Some(tmp.clone());
					  

					recog.base.set_state(2785);
					recog.base.match_token(AND,&mut recog.err_handler)?;

					/*InvokeRule frameBound*/
					recog.base.set_state(2786);
					let tmp = recog.frameBound()?;
					 cast_mut::<_,FrameExtentContext >(&mut _localctx).end = Some(tmp.clone());
					  

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- frameBound ----------------
#[derive(Debug)]
pub enum FrameBoundContextAll<'input>{
	BoundedFrameContext(BoundedFrameContext<'input>),
	UnboundedFrameContext(UnboundedFrameContext<'input>),
	CurrentRowBoundContext(CurrentRowBoundContext<'input>),
Error(FrameBoundContext<'input>)
}
antlr_rust::tid!{FrameBoundContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for FrameBoundContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for FrameBoundContextAll<'input>{}

impl<'input> Deref for FrameBoundContextAll<'input>{
	type Target = dyn FrameBoundContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use FrameBoundContextAll::*;
		match self{
			BoundedFrameContext(inner) => inner,
			UnboundedFrameContext(inner) => inner,
			CurrentRowBoundContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for FrameBoundContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for FrameBoundContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type FrameBoundContext<'input> = BaseParserRuleContext<'input,FrameBoundContextExt<'input>>;

#[derive(Clone)]
pub struct FrameBoundContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for FrameBoundContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for FrameBoundContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for FrameBoundContext<'input>{
}

impl<'input> CustomRuleContext<'input> for FrameBoundContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_frameBound }
	//fn type_rule_index() -> usize where Self: Sized { RULE_frameBound }
}
antlr_rust::tid!{FrameBoundContextExt<'a>}

impl<'input> FrameBoundContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<FrameBoundContextAll<'input>> {
		Rc::new(
		FrameBoundContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,FrameBoundContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait FrameBoundContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<FrameBoundContextExt<'input>>{


}

impl<'input> FrameBoundContextAttrs<'input> for FrameBoundContext<'input>{}

pub type BoundedFrameContext<'input> = BaseParserRuleContext<'input,BoundedFrameContextExt<'input>>;

pub trait BoundedFrameContextAttrs<'input>: TrinoParserContext<'input>{
	fn expression(&self) -> Option<Rc<ExpressionContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token PRECEDING
	/// Returns `None` if there is no child corresponding to token PRECEDING
	fn PRECEDING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(PRECEDING, 0)
	}
	/// Retrieves first TerminalNode corresponding to token FOLLOWING
	/// Returns `None` if there is no child corresponding to token FOLLOWING
	fn FOLLOWING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(FOLLOWING, 0)
	}
}

impl<'input> BoundedFrameContextAttrs<'input> for BoundedFrameContext<'input>{}

pub struct BoundedFrameContextExt<'input>{
	base:FrameBoundContextExt<'input>,
	pub boundType: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{BoundedFrameContextExt<'a>}

impl<'input> TrinoParserContext<'input> for BoundedFrameContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for BoundedFrameContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_boundedFrame(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_boundedFrame(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for BoundedFrameContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_boundedFrame(self);
	}
}

impl<'input> CustomRuleContext<'input> for BoundedFrameContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_frameBound }
	//fn type_rule_index() -> usize where Self: Sized { RULE_frameBound }
}

impl<'input> Borrow<FrameBoundContextExt<'input>> for BoundedFrameContext<'input>{
	fn borrow(&self) -> &FrameBoundContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<FrameBoundContextExt<'input>> for BoundedFrameContext<'input>{
	fn borrow_mut(&mut self) -> &mut FrameBoundContextExt<'input> { &mut self.base }
}

impl<'input> FrameBoundContextAttrs<'input> for BoundedFrameContext<'input> {}

impl<'input> BoundedFrameContextExt<'input>{
	fn new(ctx: &dyn FrameBoundContextAttrs<'input>) -> Rc<FrameBoundContextAll<'input>>  {
		Rc::new(
			FrameBoundContextAll::BoundedFrameContext(
				BaseParserRuleContext::copy_from(ctx,BoundedFrameContextExt{
					boundType:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type UnboundedFrameContext<'input> = BaseParserRuleContext<'input,UnboundedFrameContextExt<'input>>;

pub trait UnboundedFrameContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token UNBOUNDED
	/// Returns `None` if there is no child corresponding to token UNBOUNDED
	fn UNBOUNDED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(UNBOUNDED, 0)
	}
	/// Retrieves first TerminalNode corresponding to token PRECEDING
	/// Returns `None` if there is no child corresponding to token PRECEDING
	fn PRECEDING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(PRECEDING, 0)
	}
	/// Retrieves first TerminalNode corresponding to token FOLLOWING
	/// Returns `None` if there is no child corresponding to token FOLLOWING
	fn FOLLOWING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(FOLLOWING, 0)
	}
}

impl<'input> UnboundedFrameContextAttrs<'input> for UnboundedFrameContext<'input>{}

pub struct UnboundedFrameContextExt<'input>{
	base:FrameBoundContextExt<'input>,
	pub boundType: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{UnboundedFrameContextExt<'a>}

impl<'input> TrinoParserContext<'input> for UnboundedFrameContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for UnboundedFrameContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_unboundedFrame(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_unboundedFrame(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for UnboundedFrameContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_unboundedFrame(self);
	}
}

impl<'input> CustomRuleContext<'input> for UnboundedFrameContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_frameBound }
	//fn type_rule_index() -> usize where Self: Sized { RULE_frameBound }
}

impl<'input> Borrow<FrameBoundContextExt<'input>> for UnboundedFrameContext<'input>{
	fn borrow(&self) -> &FrameBoundContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<FrameBoundContextExt<'input>> for UnboundedFrameContext<'input>{
	fn borrow_mut(&mut self) -> &mut FrameBoundContextExt<'input> { &mut self.base }
}

impl<'input> FrameBoundContextAttrs<'input> for UnboundedFrameContext<'input> {}

impl<'input> UnboundedFrameContextExt<'input>{
	fn new(ctx: &dyn FrameBoundContextAttrs<'input>) -> Rc<FrameBoundContextAll<'input>>  {
		Rc::new(
			FrameBoundContextAll::UnboundedFrameContext(
				BaseParserRuleContext::copy_from(ctx,UnboundedFrameContextExt{
					boundType:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type CurrentRowBoundContext<'input> = BaseParserRuleContext<'input,CurrentRowBoundContextExt<'input>>;

pub trait CurrentRowBoundContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token CURRENT
	/// Returns `None` if there is no child corresponding to token CURRENT
	fn CURRENT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(CURRENT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ROW
	/// Returns `None` if there is no child corresponding to token ROW
	fn ROW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ROW, 0)
	}
}

impl<'input> CurrentRowBoundContextAttrs<'input> for CurrentRowBoundContext<'input>{}

pub struct CurrentRowBoundContextExt<'input>{
	base:FrameBoundContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{CurrentRowBoundContextExt<'a>}

impl<'input> TrinoParserContext<'input> for CurrentRowBoundContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for CurrentRowBoundContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_currentRowBound(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_currentRowBound(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for CurrentRowBoundContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_currentRowBound(self);
	}
}

impl<'input> CustomRuleContext<'input> for CurrentRowBoundContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_frameBound }
	//fn type_rule_index() -> usize where Self: Sized { RULE_frameBound }
}

impl<'input> Borrow<FrameBoundContextExt<'input>> for CurrentRowBoundContext<'input>{
	fn borrow(&self) -> &FrameBoundContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<FrameBoundContextExt<'input>> for CurrentRowBoundContext<'input>{
	fn borrow_mut(&mut self) -> &mut FrameBoundContextExt<'input> { &mut self.base }
}

impl<'input> FrameBoundContextAttrs<'input> for CurrentRowBoundContext<'input> {}

impl<'input> CurrentRowBoundContextExt<'input>{
	fn new(ctx: &dyn FrameBoundContextAttrs<'input>) -> Rc<FrameBoundContextAll<'input>>  {
		Rc::new(
			FrameBoundContextAll::CurrentRowBoundContext(
				BaseParserRuleContext::copy_from(ctx,CurrentRowBoundContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn frameBound(&mut self,)
	-> Result<Rc<FrameBoundContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = FrameBoundContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 252, RULE_frameBound);
        let mut _localctx: Rc<FrameBoundContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2799);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(381,&mut recog.base)? {
				1 =>{
					let tmp = UnboundedFrameContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					recog.base.set_state(2790);
					recog.base.match_token(UNBOUNDED,&mut recog.err_handler)?;

					recog.base.set_state(2791);
					let tmp = recog.base.match_token(PRECEDING,&mut recog.err_handler)?;
					if let FrameBoundContextAll::UnboundedFrameContext(ctx) = cast_mut::<_,FrameBoundContextAll >(&mut _localctx){
					ctx.boundType = Some(tmp); } else {unreachable!("cant cast");}  

					}
				}
			,
				2 =>{
					let tmp = UnboundedFrameContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(2792);
					recog.base.match_token(UNBOUNDED,&mut recog.err_handler)?;

					recog.base.set_state(2793);
					let tmp = recog.base.match_token(FOLLOWING,&mut recog.err_handler)?;
					if let FrameBoundContextAll::UnboundedFrameContext(ctx) = cast_mut::<_,FrameBoundContextAll >(&mut _localctx){
					ctx.boundType = Some(tmp); } else {unreachable!("cant cast");}  

					}
				}
			,
				3 =>{
					let tmp = CurrentRowBoundContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 3);
					_localctx = tmp;
					{
					recog.base.set_state(2794);
					recog.base.match_token(CURRENT,&mut recog.err_handler)?;

					recog.base.set_state(2795);
					recog.base.match_token(ROW,&mut recog.err_handler)?;

					}
				}
			,
				4 =>{
					let tmp = BoundedFrameContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 4);
					_localctx = tmp;
					{
					/*InvokeRule expression*/
					recog.base.set_state(2796);
					recog.expression()?;

					recog.base.set_state(2797);
					if let FrameBoundContextAll::BoundedFrameContext(ctx) = cast_mut::<_,FrameBoundContextAll >(&mut _localctx){
					ctx.boundType = recog.base.input.lt(1).cloned(); } else {unreachable!("cant cast");} 
					_la = recog.base.input.la(1);
					if { !(_la==FOLLOWING || _la==PRECEDING) } {
						let tmp = recog.err_handler.recover_inline(&mut recog.base)?;
						if let FrameBoundContextAll::BoundedFrameContext(ctx) = cast_mut::<_,FrameBoundContextAll >(&mut _localctx){
						ctx.boundType = Some(tmp); } else {unreachable!("cant cast");}  

					}
					else {
						if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
						recog.err_handler.report_match(&mut recog.base);
						recog.base.consume(&mut recog.err_handler);
					}
					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- rowPattern ----------------
#[derive(Debug)]
pub enum RowPatternContextAll<'input>{
	QuantifiedPrimaryContext(QuantifiedPrimaryContext<'input>),
	PatternConcatenationContext(PatternConcatenationContext<'input>),
	PatternAlternationContext(PatternAlternationContext<'input>),
Error(RowPatternContext<'input>)
}
antlr_rust::tid!{RowPatternContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for RowPatternContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for RowPatternContextAll<'input>{}

impl<'input> Deref for RowPatternContextAll<'input>{
	type Target = dyn RowPatternContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use RowPatternContextAll::*;
		match self{
			QuantifiedPrimaryContext(inner) => inner,
			PatternConcatenationContext(inner) => inner,
			PatternAlternationContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RowPatternContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RowPatternContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type RowPatternContext<'input> = BaseParserRuleContext<'input,RowPatternContextExt<'input>>;

#[derive(Clone)]
pub struct RowPatternContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for RowPatternContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RowPatternContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RowPatternContext<'input>{
}

impl<'input> CustomRuleContext<'input> for RowPatternContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_rowPattern }
	//fn type_rule_index() -> usize where Self: Sized { RULE_rowPattern }
}
antlr_rust::tid!{RowPatternContextExt<'a>}

impl<'input> RowPatternContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<RowPatternContextAll<'input>> {
		Rc::new(
		RowPatternContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,RowPatternContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait RowPatternContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<RowPatternContextExt<'input>>{


}

impl<'input> RowPatternContextAttrs<'input> for RowPatternContext<'input>{}

pub type QuantifiedPrimaryContext<'input> = BaseParserRuleContext<'input,QuantifiedPrimaryContextExt<'input>>;

pub trait QuantifiedPrimaryContextAttrs<'input>: TrinoParserContext<'input>{
	fn patternPrimary(&self) -> Option<Rc<PatternPrimaryContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	fn patternQuantifier(&self) -> Option<Rc<PatternQuantifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> QuantifiedPrimaryContextAttrs<'input> for QuantifiedPrimaryContext<'input>{}

pub struct QuantifiedPrimaryContextExt<'input>{
	base:RowPatternContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{QuantifiedPrimaryContextExt<'a>}

impl<'input> TrinoParserContext<'input> for QuantifiedPrimaryContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QuantifiedPrimaryContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_quantifiedPrimary(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_quantifiedPrimary(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QuantifiedPrimaryContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_quantifiedPrimary(self);
	}
}

impl<'input> CustomRuleContext<'input> for QuantifiedPrimaryContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_rowPattern }
	//fn type_rule_index() -> usize where Self: Sized { RULE_rowPattern }
}

impl<'input> Borrow<RowPatternContextExt<'input>> for QuantifiedPrimaryContext<'input>{
	fn borrow(&self) -> &RowPatternContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<RowPatternContextExt<'input>> for QuantifiedPrimaryContext<'input>{
	fn borrow_mut(&mut self) -> &mut RowPatternContextExt<'input> { &mut self.base }
}

impl<'input> RowPatternContextAttrs<'input> for QuantifiedPrimaryContext<'input> {}

impl<'input> QuantifiedPrimaryContextExt<'input>{
	fn new(ctx: &dyn RowPatternContextAttrs<'input>) -> Rc<RowPatternContextAll<'input>>  {
		Rc::new(
			RowPatternContextAll::QuantifiedPrimaryContext(
				BaseParserRuleContext::copy_from(ctx,QuantifiedPrimaryContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type PatternConcatenationContext<'input> = BaseParserRuleContext<'input,PatternConcatenationContextExt<'input>>;

pub trait PatternConcatenationContextAttrs<'input>: TrinoParserContext<'input>{
	fn rowPattern_all(&self) ->  Vec<Rc<RowPatternContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn rowPattern(&self, i: usize) -> Option<Rc<RowPatternContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
}

impl<'input> PatternConcatenationContextAttrs<'input> for PatternConcatenationContext<'input>{}

pub struct PatternConcatenationContextExt<'input>{
	base:RowPatternContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PatternConcatenationContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PatternConcatenationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PatternConcatenationContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_patternConcatenation(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_patternConcatenation(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PatternConcatenationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_patternConcatenation(self);
	}
}

impl<'input> CustomRuleContext<'input> for PatternConcatenationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_rowPattern }
	//fn type_rule_index() -> usize where Self: Sized { RULE_rowPattern }
}

impl<'input> Borrow<RowPatternContextExt<'input>> for PatternConcatenationContext<'input>{
	fn borrow(&self) -> &RowPatternContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<RowPatternContextExt<'input>> for PatternConcatenationContext<'input>{
	fn borrow_mut(&mut self) -> &mut RowPatternContextExt<'input> { &mut self.base }
}

impl<'input> RowPatternContextAttrs<'input> for PatternConcatenationContext<'input> {}

impl<'input> PatternConcatenationContextExt<'input>{
	fn new(ctx: &dyn RowPatternContextAttrs<'input>) -> Rc<RowPatternContextAll<'input>>  {
		Rc::new(
			RowPatternContextAll::PatternConcatenationContext(
				BaseParserRuleContext::copy_from(ctx,PatternConcatenationContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type PatternAlternationContext<'input> = BaseParserRuleContext<'input,PatternAlternationContextExt<'input>>;

pub trait PatternAlternationContextAttrs<'input>: TrinoParserContext<'input>{
	fn rowPattern_all(&self) ->  Vec<Rc<RowPatternContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn rowPattern(&self, i: usize) -> Option<Rc<RowPatternContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
}

impl<'input> PatternAlternationContextAttrs<'input> for PatternAlternationContext<'input>{}

pub struct PatternAlternationContextExt<'input>{
	base:RowPatternContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PatternAlternationContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PatternAlternationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PatternAlternationContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_patternAlternation(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_patternAlternation(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PatternAlternationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_patternAlternation(self);
	}
}

impl<'input> CustomRuleContext<'input> for PatternAlternationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_rowPattern }
	//fn type_rule_index() -> usize where Self: Sized { RULE_rowPattern }
}

impl<'input> Borrow<RowPatternContextExt<'input>> for PatternAlternationContext<'input>{
	fn borrow(&self) -> &RowPatternContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<RowPatternContextExt<'input>> for PatternAlternationContext<'input>{
	fn borrow_mut(&mut self) -> &mut RowPatternContextExt<'input> { &mut self.base }
}

impl<'input> RowPatternContextAttrs<'input> for PatternAlternationContext<'input> {}

impl<'input> PatternAlternationContextExt<'input>{
	fn new(ctx: &dyn RowPatternContextAttrs<'input>) -> Rc<RowPatternContextAll<'input>>  {
		Rc::new(
			RowPatternContextAll::PatternAlternationContext(
				BaseParserRuleContext::copy_from(ctx,PatternAlternationContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn  rowPattern(&mut self,)
	-> Result<Rc<RowPatternContextAll<'input>>,ANTLRError> {
		self.rowPattern_rec(0)
	}

	fn rowPattern_rec(&mut self, _p: isize)
	-> Result<Rc<RowPatternContextAll<'input>>,ANTLRError> {
		let recog = self;
		let _parentctx = recog.ctx.take();
		let _parentState = recog.base.get_state();
		let mut _localctx = RowPatternContextExt::new(_parentctx.clone(), recog.base.get_state());
		recog.base.enter_recursion_rule(_localctx.clone(), 254, RULE_rowPattern, _p);
	    let mut _localctx: Rc<RowPatternContextAll> = _localctx;
        let mut _prevctx = _localctx.clone();
		let _startState = 254;
		let result: Result<(), ANTLRError> = (|| {
			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			{
			let mut tmp = QuantifiedPrimaryContextExt::new(&**_localctx);
			recog.ctx = Some(tmp.clone());
			_localctx = tmp;
			_prevctx = _localctx.clone();


			/*InvokeRule patternPrimary*/
			recog.base.set_state(2802);
			recog.patternPrimary()?;

			recog.base.set_state(2804);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(382,&mut recog.base)? {
				x if x == 1=>{
					{
					/*InvokeRule patternQuantifier*/
					recog.base.set_state(2803);
					recog.patternQuantifier()?;

					}
				}

				_ => {}
			}
			}

			let tmp = recog.input.lt(-1).cloned();
			recog.ctx.as_ref().unwrap().set_stop(tmp);
			recog.base.set_state(2813);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(384,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					recog.trigger_exit_rule_event();
					_prevctx = _localctx.clone();
					{
					recog.base.set_state(2811);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(383,&mut recog.base)? {
						1 =>{
							{
							/*recRuleLabeledAltStartAction*/
							let mut tmp = PatternConcatenationContextExt::new(&**RowPatternContextExt::new(_parentctx.clone(), _parentState));
							recog.push_new_recursion_context(tmp.clone(), _startState, RULE_rowPattern);
							_localctx = tmp;
							recog.base.set_state(2806);
							if !({recog.precpred(None, 2)}) {
								Err(FailedPredicateError::new(&mut recog.base, Some("recog.precpred(None, 2)".to_owned()), None))?;
							}
							/*InvokeRule rowPattern*/
							recog.base.set_state(2807);
							recog.rowPattern_rec(3)?;

							}
						}
					,
						2 =>{
							{
							/*recRuleLabeledAltStartAction*/
							let mut tmp = PatternAlternationContextExt::new(&**RowPatternContextExt::new(_parentctx.clone(), _parentState));
							recog.push_new_recursion_context(tmp.clone(), _startState, RULE_rowPattern);
							_localctx = tmp;
							recog.base.set_state(2808);
							if !({recog.precpred(None, 1)}) {
								Err(FailedPredicateError::new(&mut recog.base, Some("recog.precpred(None, 1)".to_owned()), None))?;
							}
							recog.base.set_state(2809);
							recog.base.match_token(T__2,&mut recog.err_handler)?;

							/*InvokeRule rowPattern*/
							recog.base.set_state(2810);
							recog.rowPattern_rec(2)?;

							}
						}

						_ => {}
					}
					} 
				}
				recog.base.set_state(2815);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(384,&mut recog.base)?;
			}
			}
			Ok(())
		})();
		match result {
		Ok(_) => {},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re)=>{
			//_localctx.exception = re;
			recog.err_handler.report_error(&mut recog.base, re);
	        recog.err_handler.recover(&mut recog.base, re)?;}
		}
		recog.base.unroll_recursion_context(_parentctx);

		Ok(_localctx)
	}
}
//------------------- patternPrimary ----------------
#[derive(Debug)]
pub enum PatternPrimaryContextAll<'input>{
	PatternPermutationContext(PatternPermutationContext<'input>),
	PartitionEndAnchorContext(PartitionEndAnchorContext<'input>),
	PatternVariableContext(PatternVariableContext<'input>),
	ExcludedPatternContext(ExcludedPatternContext<'input>),
	PartitionStartAnchorContext(PartitionStartAnchorContext<'input>),
	EmptyPatternContext(EmptyPatternContext<'input>),
	GroupedPatternContext(GroupedPatternContext<'input>),
Error(PatternPrimaryContext<'input>)
}
antlr_rust::tid!{PatternPrimaryContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for PatternPrimaryContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for PatternPrimaryContextAll<'input>{}

impl<'input> Deref for PatternPrimaryContextAll<'input>{
	type Target = dyn PatternPrimaryContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use PatternPrimaryContextAll::*;
		match self{
			PatternPermutationContext(inner) => inner,
			PartitionEndAnchorContext(inner) => inner,
			PatternVariableContext(inner) => inner,
			ExcludedPatternContext(inner) => inner,
			PartitionStartAnchorContext(inner) => inner,
			EmptyPatternContext(inner) => inner,
			GroupedPatternContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PatternPrimaryContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PatternPrimaryContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type PatternPrimaryContext<'input> = BaseParserRuleContext<'input,PatternPrimaryContextExt<'input>>;

#[derive(Clone)]
pub struct PatternPrimaryContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PatternPrimaryContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PatternPrimaryContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PatternPrimaryContext<'input>{
}

impl<'input> CustomRuleContext<'input> for PatternPrimaryContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_patternPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_patternPrimary }
}
antlr_rust::tid!{PatternPrimaryContextExt<'a>}

impl<'input> PatternPrimaryContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PatternPrimaryContextAll<'input>> {
		Rc::new(
		PatternPrimaryContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PatternPrimaryContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait PatternPrimaryContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PatternPrimaryContextExt<'input>>{


}

impl<'input> PatternPrimaryContextAttrs<'input> for PatternPrimaryContext<'input>{}

pub type PatternPermutationContext<'input> = BaseParserRuleContext<'input,PatternPermutationContextExt<'input>>;

pub trait PatternPermutationContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token PERMUTE
	/// Returns `None` if there is no child corresponding to token PERMUTE
	fn PERMUTE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(PERMUTE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn rowPattern_all(&self) ->  Vec<Rc<RowPatternContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn rowPattern(&self, i: usize) -> Option<Rc<RowPatternContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> PatternPermutationContextAttrs<'input> for PatternPermutationContext<'input>{}

pub struct PatternPermutationContextExt<'input>{
	base:PatternPrimaryContextExt<'input>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PatternPermutationContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PatternPermutationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PatternPermutationContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_patternPermutation(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_patternPermutation(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PatternPermutationContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_patternPermutation(self);
	}
}

impl<'input> CustomRuleContext<'input> for PatternPermutationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_patternPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_patternPrimary }
}

impl<'input> Borrow<PatternPrimaryContextExt<'input>> for PatternPermutationContext<'input>{
	fn borrow(&self) -> &PatternPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PatternPrimaryContextExt<'input>> for PatternPermutationContext<'input>{
	fn borrow_mut(&mut self) -> &mut PatternPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> PatternPrimaryContextAttrs<'input> for PatternPermutationContext<'input> {}

impl<'input> PatternPermutationContextExt<'input>{
	fn new(ctx: &dyn PatternPrimaryContextAttrs<'input>) -> Rc<PatternPrimaryContextAll<'input>>  {
		Rc::new(
			PatternPrimaryContextAll::PatternPermutationContext(
				BaseParserRuleContext::copy_from(ctx,PatternPermutationContextExt{
					tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type PartitionEndAnchorContext<'input> = BaseParserRuleContext<'input,PartitionEndAnchorContextExt<'input>>;

pub trait PartitionEndAnchorContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DOLLAR
	/// Returns `None` if there is no child corresponding to token DOLLAR
	fn DOLLAR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DOLLAR, 0)
	}
}

impl<'input> PartitionEndAnchorContextAttrs<'input> for PartitionEndAnchorContext<'input>{}

pub struct PartitionEndAnchorContextExt<'input>{
	base:PatternPrimaryContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PartitionEndAnchorContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PartitionEndAnchorContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PartitionEndAnchorContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_partitionEndAnchor(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_partitionEndAnchor(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PartitionEndAnchorContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_partitionEndAnchor(self);
	}
}

impl<'input> CustomRuleContext<'input> for PartitionEndAnchorContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_patternPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_patternPrimary }
}

impl<'input> Borrow<PatternPrimaryContextExt<'input>> for PartitionEndAnchorContext<'input>{
	fn borrow(&self) -> &PatternPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PatternPrimaryContextExt<'input>> for PartitionEndAnchorContext<'input>{
	fn borrow_mut(&mut self) -> &mut PatternPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> PatternPrimaryContextAttrs<'input> for PartitionEndAnchorContext<'input> {}

impl<'input> PartitionEndAnchorContextExt<'input>{
	fn new(ctx: &dyn PatternPrimaryContextAttrs<'input>) -> Rc<PatternPrimaryContextAll<'input>>  {
		Rc::new(
			PatternPrimaryContextAll::PartitionEndAnchorContext(
				BaseParserRuleContext::copy_from(ctx,PartitionEndAnchorContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type PatternVariableContext<'input> = BaseParserRuleContext<'input,PatternVariableContextExt<'input>>;

pub trait PatternVariableContextAttrs<'input>: TrinoParserContext<'input>{
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> PatternVariableContextAttrs<'input> for PatternVariableContext<'input>{}

pub struct PatternVariableContextExt<'input>{
	base:PatternPrimaryContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PatternVariableContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PatternVariableContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PatternVariableContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_patternVariable(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_patternVariable(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PatternVariableContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_patternVariable(self);
	}
}

impl<'input> CustomRuleContext<'input> for PatternVariableContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_patternPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_patternPrimary }
}

impl<'input> Borrow<PatternPrimaryContextExt<'input>> for PatternVariableContext<'input>{
	fn borrow(&self) -> &PatternPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PatternPrimaryContextExt<'input>> for PatternVariableContext<'input>{
	fn borrow_mut(&mut self) -> &mut PatternPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> PatternPrimaryContextAttrs<'input> for PatternVariableContext<'input> {}

impl<'input> PatternVariableContextExt<'input>{
	fn new(ctx: &dyn PatternPrimaryContextAttrs<'input>) -> Rc<PatternPrimaryContextAll<'input>>  {
		Rc::new(
			PatternPrimaryContextAll::PatternVariableContext(
				BaseParserRuleContext::copy_from(ctx,PatternVariableContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ExcludedPatternContext<'input> = BaseParserRuleContext<'input,ExcludedPatternContextExt<'input>>;

pub trait ExcludedPatternContextAttrs<'input>: TrinoParserContext<'input>{
	fn rowPattern(&self) -> Option<Rc<RowPatternContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> ExcludedPatternContextAttrs<'input> for ExcludedPatternContext<'input>{}

pub struct ExcludedPatternContextExt<'input>{
	base:PatternPrimaryContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ExcludedPatternContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ExcludedPatternContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ExcludedPatternContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_excludedPattern(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_excludedPattern(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ExcludedPatternContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_excludedPattern(self);
	}
}

impl<'input> CustomRuleContext<'input> for ExcludedPatternContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_patternPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_patternPrimary }
}

impl<'input> Borrow<PatternPrimaryContextExt<'input>> for ExcludedPatternContext<'input>{
	fn borrow(&self) -> &PatternPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PatternPrimaryContextExt<'input>> for ExcludedPatternContext<'input>{
	fn borrow_mut(&mut self) -> &mut PatternPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> PatternPrimaryContextAttrs<'input> for ExcludedPatternContext<'input> {}

impl<'input> ExcludedPatternContextExt<'input>{
	fn new(ctx: &dyn PatternPrimaryContextAttrs<'input>) -> Rc<PatternPrimaryContextAll<'input>>  {
		Rc::new(
			PatternPrimaryContextAll::ExcludedPatternContext(
				BaseParserRuleContext::copy_from(ctx,ExcludedPatternContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type PartitionStartAnchorContext<'input> = BaseParserRuleContext<'input,PartitionStartAnchorContextExt<'input>>;

pub trait PartitionStartAnchorContextAttrs<'input>: TrinoParserContext<'input>{
}

impl<'input> PartitionStartAnchorContextAttrs<'input> for PartitionStartAnchorContext<'input>{}

pub struct PartitionStartAnchorContextExt<'input>{
	base:PatternPrimaryContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PartitionStartAnchorContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PartitionStartAnchorContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PartitionStartAnchorContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_partitionStartAnchor(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_partitionStartAnchor(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PartitionStartAnchorContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_partitionStartAnchor(self);
	}
}

impl<'input> CustomRuleContext<'input> for PartitionStartAnchorContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_patternPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_patternPrimary }
}

impl<'input> Borrow<PatternPrimaryContextExt<'input>> for PartitionStartAnchorContext<'input>{
	fn borrow(&self) -> &PatternPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PatternPrimaryContextExt<'input>> for PartitionStartAnchorContext<'input>{
	fn borrow_mut(&mut self) -> &mut PatternPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> PatternPrimaryContextAttrs<'input> for PartitionStartAnchorContext<'input> {}

impl<'input> PartitionStartAnchorContextExt<'input>{
	fn new(ctx: &dyn PatternPrimaryContextAttrs<'input>) -> Rc<PatternPrimaryContextAll<'input>>  {
		Rc::new(
			PatternPrimaryContextAll::PartitionStartAnchorContext(
				BaseParserRuleContext::copy_from(ctx,PartitionStartAnchorContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type EmptyPatternContext<'input> = BaseParserRuleContext<'input,EmptyPatternContextExt<'input>>;

pub trait EmptyPatternContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
}

impl<'input> EmptyPatternContextAttrs<'input> for EmptyPatternContext<'input>{}

pub struct EmptyPatternContextExt<'input>{
	base:PatternPrimaryContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{EmptyPatternContextExt<'a>}

impl<'input> TrinoParserContext<'input> for EmptyPatternContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for EmptyPatternContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_emptyPattern(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_emptyPattern(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for EmptyPatternContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_emptyPattern(self);
	}
}

impl<'input> CustomRuleContext<'input> for EmptyPatternContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_patternPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_patternPrimary }
}

impl<'input> Borrow<PatternPrimaryContextExt<'input>> for EmptyPatternContext<'input>{
	fn borrow(&self) -> &PatternPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PatternPrimaryContextExt<'input>> for EmptyPatternContext<'input>{
	fn borrow_mut(&mut self) -> &mut PatternPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> PatternPrimaryContextAttrs<'input> for EmptyPatternContext<'input> {}

impl<'input> EmptyPatternContextExt<'input>{
	fn new(ctx: &dyn PatternPrimaryContextAttrs<'input>) -> Rc<PatternPrimaryContextAll<'input>>  {
		Rc::new(
			PatternPrimaryContextAll::EmptyPatternContext(
				BaseParserRuleContext::copy_from(ctx,EmptyPatternContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type GroupedPatternContext<'input> = BaseParserRuleContext<'input,GroupedPatternContextExt<'input>>;

pub trait GroupedPatternContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn rowPattern(&self) -> Option<Rc<RowPatternContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
}

impl<'input> GroupedPatternContextAttrs<'input> for GroupedPatternContext<'input>{}

pub struct GroupedPatternContextExt<'input>{
	base:PatternPrimaryContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{GroupedPatternContextExt<'a>}

impl<'input> TrinoParserContext<'input> for GroupedPatternContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for GroupedPatternContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_groupedPattern(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_groupedPattern(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for GroupedPatternContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_groupedPattern(self);
	}
}

impl<'input> CustomRuleContext<'input> for GroupedPatternContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_patternPrimary }
	//fn type_rule_index() -> usize where Self: Sized { RULE_patternPrimary }
}

impl<'input> Borrow<PatternPrimaryContextExt<'input>> for GroupedPatternContext<'input>{
	fn borrow(&self) -> &PatternPrimaryContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PatternPrimaryContextExt<'input>> for GroupedPatternContext<'input>{
	fn borrow_mut(&mut self) -> &mut PatternPrimaryContextExt<'input> { &mut self.base }
}

impl<'input> PatternPrimaryContextAttrs<'input> for GroupedPatternContext<'input> {}

impl<'input> GroupedPatternContextExt<'input>{
	fn new(ctx: &dyn PatternPrimaryContextAttrs<'input>) -> Rc<PatternPrimaryContextAll<'input>>  {
		Rc::new(
			PatternPrimaryContextAll::GroupedPatternContext(
				BaseParserRuleContext::copy_from(ctx,GroupedPatternContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn patternPrimary(&mut self,)
	-> Result<Rc<PatternPrimaryContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PatternPrimaryContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 256, RULE_patternPrimary);
        let mut _localctx: Rc<PatternPrimaryContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			recog.base.set_state(2844);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(387,&mut recog.base)? {
				1 =>{
					let tmp = PatternVariableContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					/*InvokeRule identifier*/
					recog.base.set_state(2816);
					recog.identifier()?;

					}
				}
			,
				2 =>{
					let tmp = EmptyPatternContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(2817);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					recog.base.set_state(2818);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				3 =>{
					let tmp = PatternPermutationContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 3);
					_localctx = tmp;
					{
					recog.base.set_state(2819);
					recog.base.match_token(PERMUTE,&mut recog.err_handler)?;

					recog.base.set_state(2820);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule rowPattern*/
					recog.base.set_state(2821);
					recog.rowPattern_rec(0)?;

					recog.base.set_state(2826);
					recog.err_handler.sync(&mut recog.base)?;
					_alt = recog.interpreter.adaptive_predict(385,&mut recog.base)?;
					while { _alt!=2 && _alt!=INVALID_ALT } {
						if _alt==1 {
							{
							{
							recog.base.set_state(2822);
							recog.base.match_token(COMMA,&mut recog.err_handler)?;

							/*InvokeRule rowPattern*/
							recog.base.set_state(2823);
							recog.rowPattern_rec(0)?;

							}
							} 
						}
						recog.base.set_state(2828);
						recog.err_handler.sync(&mut recog.base)?;
						_alt = recog.interpreter.adaptive_predict(385,&mut recog.base)?;
					}
					recog.base.set_state(2830);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(2829);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						if let PatternPrimaryContextAll::PatternPermutationContext(ctx) = cast_mut::<_,PatternPrimaryContextAll >(&mut _localctx){
						ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(2832);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				4 =>{
					let tmp = GroupedPatternContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 4);
					_localctx = tmp;
					{
					recog.base.set_state(2834);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule rowPattern*/
					recog.base.set_state(2835);
					recog.rowPattern_rec(0)?;

					recog.base.set_state(2836);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				5 =>{
					let tmp = PartitionStartAnchorContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 5);
					_localctx = tmp;
					{
					recog.base.set_state(2838);
					recog.base.match_token(T__3,&mut recog.err_handler)?;

					}
				}
			,
				6 =>{
					let tmp = PartitionEndAnchorContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 6);
					_localctx = tmp;
					{
					recog.base.set_state(2839);
					recog.base.match_token(DOLLAR,&mut recog.err_handler)?;

					}
				}
			,
				7 =>{
					let tmp = ExcludedPatternContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 7);
					_localctx = tmp;
					{
					recog.base.set_state(2840);
					recog.base.match_token(T__4,&mut recog.err_handler)?;

					/*InvokeRule rowPattern*/
					recog.base.set_state(2841);
					recog.rowPattern_rec(0)?;

					recog.base.set_state(2842);
					recog.base.match_token(T__5,&mut recog.err_handler)?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- patternQuantifier ----------------
#[derive(Debug)]
pub enum PatternQuantifierContextAll<'input>{
	ZeroOrMoreQuantifierContext(ZeroOrMoreQuantifierContext<'input>),
	OneOrMoreQuantifierContext(OneOrMoreQuantifierContext<'input>),
	ZeroOrOneQuantifierContext(ZeroOrOneQuantifierContext<'input>),
	RangeQuantifierContext(RangeQuantifierContext<'input>),
Error(PatternQuantifierContext<'input>)
}
antlr_rust::tid!{PatternQuantifierContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for PatternQuantifierContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for PatternQuantifierContextAll<'input>{}

impl<'input> Deref for PatternQuantifierContextAll<'input>{
	type Target = dyn PatternQuantifierContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use PatternQuantifierContextAll::*;
		match self{
			ZeroOrMoreQuantifierContext(inner) => inner,
			OneOrMoreQuantifierContext(inner) => inner,
			ZeroOrOneQuantifierContext(inner) => inner,
			RangeQuantifierContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PatternQuantifierContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PatternQuantifierContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type PatternQuantifierContext<'input> = BaseParserRuleContext<'input,PatternQuantifierContextExt<'input>>;

#[derive(Clone)]
pub struct PatternQuantifierContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PatternQuantifierContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PatternQuantifierContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PatternQuantifierContext<'input>{
}

impl<'input> CustomRuleContext<'input> for PatternQuantifierContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_patternQuantifier }
	//fn type_rule_index() -> usize where Self: Sized { RULE_patternQuantifier }
}
antlr_rust::tid!{PatternQuantifierContextExt<'a>}

impl<'input> PatternQuantifierContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PatternQuantifierContextAll<'input>> {
		Rc::new(
		PatternQuantifierContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PatternQuantifierContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait PatternQuantifierContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PatternQuantifierContextExt<'input>>{


}

impl<'input> PatternQuantifierContextAttrs<'input> for PatternQuantifierContext<'input>{}

pub type ZeroOrMoreQuantifierContext<'input> = BaseParserRuleContext<'input,ZeroOrMoreQuantifierContextExt<'input>>;

pub trait ZeroOrMoreQuantifierContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ASTERISK
	/// Returns `None` if there is no child corresponding to token ASTERISK
	fn ASTERISK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ASTERISK, 0)
	}
	/// Retrieves first TerminalNode corresponding to token QUESTION_MARK
	/// Returns `None` if there is no child corresponding to token QUESTION_MARK
	fn QUESTION_MARK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(QUESTION_MARK, 0)
	}
}

impl<'input> ZeroOrMoreQuantifierContextAttrs<'input> for ZeroOrMoreQuantifierContext<'input>{}

pub struct ZeroOrMoreQuantifierContextExt<'input>{
	base:PatternQuantifierContextExt<'input>,
	pub reluctant: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ZeroOrMoreQuantifierContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ZeroOrMoreQuantifierContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ZeroOrMoreQuantifierContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_zeroOrMoreQuantifier(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_zeroOrMoreQuantifier(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ZeroOrMoreQuantifierContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_zeroOrMoreQuantifier(self);
	}
}

impl<'input> CustomRuleContext<'input> for ZeroOrMoreQuantifierContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_patternQuantifier }
	//fn type_rule_index() -> usize where Self: Sized { RULE_patternQuantifier }
}

impl<'input> Borrow<PatternQuantifierContextExt<'input>> for ZeroOrMoreQuantifierContext<'input>{
	fn borrow(&self) -> &PatternQuantifierContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PatternQuantifierContextExt<'input>> for ZeroOrMoreQuantifierContext<'input>{
	fn borrow_mut(&mut self) -> &mut PatternQuantifierContextExt<'input> { &mut self.base }
}

impl<'input> PatternQuantifierContextAttrs<'input> for ZeroOrMoreQuantifierContext<'input> {}

impl<'input> ZeroOrMoreQuantifierContextExt<'input>{
	fn new(ctx: &dyn PatternQuantifierContextAttrs<'input>) -> Rc<PatternQuantifierContextAll<'input>>  {
		Rc::new(
			PatternQuantifierContextAll::ZeroOrMoreQuantifierContext(
				BaseParserRuleContext::copy_from(ctx,ZeroOrMoreQuantifierContextExt{
					reluctant:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type OneOrMoreQuantifierContext<'input> = BaseParserRuleContext<'input,OneOrMoreQuantifierContextExt<'input>>;

pub trait OneOrMoreQuantifierContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token PLUS
	/// Returns `None` if there is no child corresponding to token PLUS
	fn PLUS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(PLUS, 0)
	}
	/// Retrieves first TerminalNode corresponding to token QUESTION_MARK
	/// Returns `None` if there is no child corresponding to token QUESTION_MARK
	fn QUESTION_MARK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(QUESTION_MARK, 0)
	}
}

impl<'input> OneOrMoreQuantifierContextAttrs<'input> for OneOrMoreQuantifierContext<'input>{}

pub struct OneOrMoreQuantifierContextExt<'input>{
	base:PatternQuantifierContextExt<'input>,
	pub reluctant: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{OneOrMoreQuantifierContextExt<'a>}

impl<'input> TrinoParserContext<'input> for OneOrMoreQuantifierContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for OneOrMoreQuantifierContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_oneOrMoreQuantifier(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_oneOrMoreQuantifier(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for OneOrMoreQuantifierContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_oneOrMoreQuantifier(self);
	}
}

impl<'input> CustomRuleContext<'input> for OneOrMoreQuantifierContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_patternQuantifier }
	//fn type_rule_index() -> usize where Self: Sized { RULE_patternQuantifier }
}

impl<'input> Borrow<PatternQuantifierContextExt<'input>> for OneOrMoreQuantifierContext<'input>{
	fn borrow(&self) -> &PatternQuantifierContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PatternQuantifierContextExt<'input>> for OneOrMoreQuantifierContext<'input>{
	fn borrow_mut(&mut self) -> &mut PatternQuantifierContextExt<'input> { &mut self.base }
}

impl<'input> PatternQuantifierContextAttrs<'input> for OneOrMoreQuantifierContext<'input> {}

impl<'input> OneOrMoreQuantifierContextExt<'input>{
	fn new(ctx: &dyn PatternQuantifierContextAttrs<'input>) -> Rc<PatternQuantifierContextAll<'input>>  {
		Rc::new(
			PatternQuantifierContextAll::OneOrMoreQuantifierContext(
				BaseParserRuleContext::copy_from(ctx,OneOrMoreQuantifierContextExt{
					reluctant:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ZeroOrOneQuantifierContext<'input> = BaseParserRuleContext<'input,ZeroOrOneQuantifierContextExt<'input>>;

pub trait ZeroOrOneQuantifierContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves all `TerminalNode`s corresponding to token QUESTION_MARK in current rule
	fn QUESTION_MARK_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token QUESTION_MARK, starting from 0.
	/// Returns `None` if number of children corresponding to token QUESTION_MARK is less or equal than `i`.
	fn QUESTION_MARK(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(QUESTION_MARK, i)
	}
}

impl<'input> ZeroOrOneQuantifierContextAttrs<'input> for ZeroOrOneQuantifierContext<'input>{}

pub struct ZeroOrOneQuantifierContextExt<'input>{
	base:PatternQuantifierContextExt<'input>,
	pub reluctant: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ZeroOrOneQuantifierContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ZeroOrOneQuantifierContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ZeroOrOneQuantifierContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_zeroOrOneQuantifier(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_zeroOrOneQuantifier(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ZeroOrOneQuantifierContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_zeroOrOneQuantifier(self);
	}
}

impl<'input> CustomRuleContext<'input> for ZeroOrOneQuantifierContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_patternQuantifier }
	//fn type_rule_index() -> usize where Self: Sized { RULE_patternQuantifier }
}

impl<'input> Borrow<PatternQuantifierContextExt<'input>> for ZeroOrOneQuantifierContext<'input>{
	fn borrow(&self) -> &PatternQuantifierContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PatternQuantifierContextExt<'input>> for ZeroOrOneQuantifierContext<'input>{
	fn borrow_mut(&mut self) -> &mut PatternQuantifierContextExt<'input> { &mut self.base }
}

impl<'input> PatternQuantifierContextAttrs<'input> for ZeroOrOneQuantifierContext<'input> {}

impl<'input> ZeroOrOneQuantifierContextExt<'input>{
	fn new(ctx: &dyn PatternQuantifierContextAttrs<'input>) -> Rc<PatternQuantifierContextAll<'input>>  {
		Rc::new(
			PatternQuantifierContextAll::ZeroOrOneQuantifierContext(
				BaseParserRuleContext::copy_from(ctx,ZeroOrOneQuantifierContextExt{
					reluctant:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type RangeQuantifierContext<'input> = BaseParserRuleContext<'input,RangeQuantifierContextExt<'input>>;

pub trait RangeQuantifierContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves all `TerminalNode`s corresponding to token INTEGER_VALUE in current rule
	fn INTEGER_VALUE_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token INTEGER_VALUE, starting from 0.
	/// Returns `None` if number of children corresponding to token INTEGER_VALUE is less or equal than `i`.
	fn INTEGER_VALUE(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(INTEGER_VALUE, i)
	}
	/// Retrieves first TerminalNode corresponding to token QUESTION_MARK
	/// Returns `None` if there is no child corresponding to token QUESTION_MARK
	fn QUESTION_MARK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(QUESTION_MARK, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> RangeQuantifierContextAttrs<'input> for RangeQuantifierContext<'input>{}

pub struct RangeQuantifierContextExt<'input>{
	base:PatternQuantifierContextExt<'input>,
	pub exactly: Option<TokenType<'input>>,
	pub reluctant: Option<TokenType<'input>>,
	pub atLeast: Option<TokenType<'input>>,
	pub atMost: Option<TokenType<'input>>,
	pub tail: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{RangeQuantifierContextExt<'a>}

impl<'input> TrinoParserContext<'input> for RangeQuantifierContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RangeQuantifierContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_rangeQuantifier(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_rangeQuantifier(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RangeQuantifierContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_rangeQuantifier(self);
	}
}

impl<'input> CustomRuleContext<'input> for RangeQuantifierContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_patternQuantifier }
	//fn type_rule_index() -> usize where Self: Sized { RULE_patternQuantifier }
}

impl<'input> Borrow<PatternQuantifierContextExt<'input>> for RangeQuantifierContext<'input>{
	fn borrow(&self) -> &PatternQuantifierContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PatternQuantifierContextExt<'input>> for RangeQuantifierContext<'input>{
	fn borrow_mut(&mut self) -> &mut PatternQuantifierContextExt<'input> { &mut self.base }
}

impl<'input> PatternQuantifierContextAttrs<'input> for RangeQuantifierContext<'input> {}

impl<'input> RangeQuantifierContextExt<'input>{
	fn new(ctx: &dyn PatternQuantifierContextAttrs<'input>) -> Rc<PatternQuantifierContextAll<'input>>  {
		Rc::new(
			PatternQuantifierContextAll::RangeQuantifierContext(
				BaseParserRuleContext::copy_from(ctx,RangeQuantifierContextExt{
					exactly:None, reluctant:None, atLeast:None, atMost:None, tail:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn patternQuantifier(&mut self,)
	-> Result<Rc<PatternQuantifierContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PatternQuantifierContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 258, RULE_patternQuantifier);
        let mut _localctx: Rc<PatternQuantifierContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2879);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(396,&mut recog.base)? {
				1 =>{
					let tmp = ZeroOrMoreQuantifierContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					recog.base.set_state(2846);
					recog.base.match_token(ASTERISK,&mut recog.err_handler)?;

					recog.base.set_state(2848);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(388,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(2847);
							let tmp = recog.base.match_token(QUESTION_MARK,&mut recog.err_handler)?;
							if let PatternQuantifierContextAll::ZeroOrMoreQuantifierContext(ctx) = cast_mut::<_,PatternQuantifierContextAll >(&mut _localctx){
							ctx.reluctant = Some(tmp); } else {unreachable!("cant cast");}  

							}
						}

						_ => {}
					}
					}
				}
			,
				2 =>{
					let tmp = OneOrMoreQuantifierContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(2850);
					recog.base.match_token(PLUS,&mut recog.err_handler)?;

					recog.base.set_state(2852);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(389,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(2851);
							let tmp = recog.base.match_token(QUESTION_MARK,&mut recog.err_handler)?;
							if let PatternQuantifierContextAll::OneOrMoreQuantifierContext(ctx) = cast_mut::<_,PatternQuantifierContextAll >(&mut _localctx){
							ctx.reluctant = Some(tmp); } else {unreachable!("cant cast");}  

							}
						}

						_ => {}
					}
					}
				}
			,
				3 =>{
					let tmp = ZeroOrOneQuantifierContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 3);
					_localctx = tmp;
					{
					recog.base.set_state(2854);
					recog.base.match_token(QUESTION_MARK,&mut recog.err_handler)?;

					recog.base.set_state(2856);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(390,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(2855);
							let tmp = recog.base.match_token(QUESTION_MARK,&mut recog.err_handler)?;
							if let PatternQuantifierContextAll::ZeroOrOneQuantifierContext(ctx) = cast_mut::<_,PatternQuantifierContextAll >(&mut _localctx){
							ctx.reluctant = Some(tmp); } else {unreachable!("cant cast");}  

							}
						}

						_ => {}
					}
					}
				}
			,
				4 =>{
					let tmp = RangeQuantifierContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 4);
					_localctx = tmp;
					{
					recog.base.set_state(2858);
					recog.base.match_token(T__6,&mut recog.err_handler)?;

					recog.base.set_state(2859);
					let tmp = recog.base.match_token(INTEGER_VALUE,&mut recog.err_handler)?;
					if let PatternQuantifierContextAll::RangeQuantifierContext(ctx) = cast_mut::<_,PatternQuantifierContextAll >(&mut _localctx){
					ctx.exactly = Some(tmp); } else {unreachable!("cant cast");}  

					recog.base.set_state(2860);
					recog.base.match_token(T__7,&mut recog.err_handler)?;

					recog.base.set_state(2862);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(391,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(2861);
							let tmp = recog.base.match_token(QUESTION_MARK,&mut recog.err_handler)?;
							if let PatternQuantifierContextAll::RangeQuantifierContext(ctx) = cast_mut::<_,PatternQuantifierContextAll >(&mut _localctx){
							ctx.reluctant = Some(tmp); } else {unreachable!("cant cast");}  

							}
						}

						_ => {}
					}
					}
				}
			,
				5 =>{
					let tmp = RangeQuantifierContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 5);
					_localctx = tmp;
					{
					recog.base.set_state(2864);
					recog.base.match_token(T__6,&mut recog.err_handler)?;

					recog.base.set_state(2866);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==INTEGER_VALUE {
						{
						recog.base.set_state(2865);
						let tmp = recog.base.match_token(INTEGER_VALUE,&mut recog.err_handler)?;
						if let PatternQuantifierContextAll::RangeQuantifierContext(ctx) = cast_mut::<_,PatternQuantifierContextAll >(&mut _localctx){
						ctx.atLeast = Some(tmp); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(2868);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					recog.base.set_state(2870);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==INTEGER_VALUE {
						{
						recog.base.set_state(2869);
						let tmp = recog.base.match_token(INTEGER_VALUE,&mut recog.err_handler)?;
						if let PatternQuantifierContextAll::RangeQuantifierContext(ctx) = cast_mut::<_,PatternQuantifierContextAll >(&mut _localctx){
						ctx.atMost = Some(tmp); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(2873);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==COMMA {
						{
						recog.base.set_state(2872);
						let tmp = recog.base.match_token(COMMA,&mut recog.err_handler)?;
						if let PatternQuantifierContextAll::RangeQuantifierContext(ctx) = cast_mut::<_,PatternQuantifierContextAll >(&mut _localctx){
						ctx.tail = Some(tmp); } else {unreachable!("cant cast");}  

						}
					}

					recog.base.set_state(2875);
					recog.base.match_token(T__7,&mut recog.err_handler)?;

					recog.base.set_state(2877);
					recog.err_handler.sync(&mut recog.base)?;
					match  recog.interpreter.adaptive_predict(395,&mut recog.base)? {
						x if x == 1=>{
							{
							recog.base.set_state(2876);
							let tmp = recog.base.match_token(QUESTION_MARK,&mut recog.err_handler)?;
							if let PatternQuantifierContextAll::RangeQuantifierContext(ctx) = cast_mut::<_,PatternQuantifierContextAll >(&mut _localctx){
							ctx.reluctant = Some(tmp); } else {unreachable!("cant cast");}  

							}
						}

						_ => {}
					}
					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- transactionMode ----------------
#[derive(Debug)]
pub enum TransactionModeContextAll<'input>{
	TransactionAccessModeContext(TransactionAccessModeContext<'input>),
	IsolationLevelContext(IsolationLevelContext<'input>),
Error(TransactionModeContext<'input>)
}
antlr_rust::tid!{TransactionModeContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for TransactionModeContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for TransactionModeContextAll<'input>{}

impl<'input> Deref for TransactionModeContextAll<'input>{
	type Target = dyn TransactionModeContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use TransactionModeContextAll::*;
		match self{
			TransactionAccessModeContext(inner) => inner,
			IsolationLevelContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TransactionModeContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TransactionModeContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type TransactionModeContext<'input> = BaseParserRuleContext<'input,TransactionModeContextExt<'input>>;

#[derive(Clone)]
pub struct TransactionModeContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for TransactionModeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TransactionModeContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TransactionModeContext<'input>{
}

impl<'input> CustomRuleContext<'input> for TransactionModeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_transactionMode }
	//fn type_rule_index() -> usize where Self: Sized { RULE_transactionMode }
}
antlr_rust::tid!{TransactionModeContextExt<'a>}

impl<'input> TransactionModeContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<TransactionModeContextAll<'input>> {
		Rc::new(
		TransactionModeContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,TransactionModeContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait TransactionModeContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<TransactionModeContextExt<'input>>{


}

impl<'input> TransactionModeContextAttrs<'input> for TransactionModeContext<'input>{}

pub type TransactionAccessModeContext<'input> = BaseParserRuleContext<'input,TransactionAccessModeContextExt<'input>>;

pub trait TransactionAccessModeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token READ
	/// Returns `None` if there is no child corresponding to token READ
	fn READ(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(READ, 0)
	}
	/// Retrieves first TerminalNode corresponding to token ONLY
	/// Returns `None` if there is no child corresponding to token ONLY
	fn ONLY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ONLY, 0)
	}
	/// Retrieves first TerminalNode corresponding to token WRITE
	/// Returns `None` if there is no child corresponding to token WRITE
	fn WRITE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(WRITE, 0)
	}
}

impl<'input> TransactionAccessModeContextAttrs<'input> for TransactionAccessModeContext<'input>{}

pub struct TransactionAccessModeContextExt<'input>{
	base:TransactionModeContextExt<'input>,
	pub accessMode: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{TransactionAccessModeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for TransactionAccessModeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for TransactionAccessModeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_transactionAccessMode(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_transactionAccessMode(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for TransactionAccessModeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_transactionAccessMode(self);
	}
}

impl<'input> CustomRuleContext<'input> for TransactionAccessModeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_transactionMode }
	//fn type_rule_index() -> usize where Self: Sized { RULE_transactionMode }
}

impl<'input> Borrow<TransactionModeContextExt<'input>> for TransactionAccessModeContext<'input>{
	fn borrow(&self) -> &TransactionModeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<TransactionModeContextExt<'input>> for TransactionAccessModeContext<'input>{
	fn borrow_mut(&mut self) -> &mut TransactionModeContextExt<'input> { &mut self.base }
}

impl<'input> TransactionModeContextAttrs<'input> for TransactionAccessModeContext<'input> {}

impl<'input> TransactionAccessModeContextExt<'input>{
	fn new(ctx: &dyn TransactionModeContextAttrs<'input>) -> Rc<TransactionModeContextAll<'input>>  {
		Rc::new(
			TransactionModeContextAll::TransactionAccessModeContext(
				BaseParserRuleContext::copy_from(ctx,TransactionAccessModeContextExt{
					accessMode:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type IsolationLevelContext<'input> = BaseParserRuleContext<'input,IsolationLevelContextExt<'input>>;

pub trait IsolationLevelContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ISOLATION
	/// Returns `None` if there is no child corresponding to token ISOLATION
	fn ISOLATION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ISOLATION, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LEVEL
	/// Returns `None` if there is no child corresponding to token LEVEL
	fn LEVEL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LEVEL, 0)
	}
	fn levelOfIsolation(&self) -> Option<Rc<LevelOfIsolationContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> IsolationLevelContextAttrs<'input> for IsolationLevelContext<'input>{}

pub struct IsolationLevelContextExt<'input>{
	base:TransactionModeContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{IsolationLevelContextExt<'a>}

impl<'input> TrinoParserContext<'input> for IsolationLevelContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for IsolationLevelContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_isolationLevel(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_isolationLevel(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for IsolationLevelContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_isolationLevel(self);
	}
}

impl<'input> CustomRuleContext<'input> for IsolationLevelContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_transactionMode }
	//fn type_rule_index() -> usize where Self: Sized { RULE_transactionMode }
}

impl<'input> Borrow<TransactionModeContextExt<'input>> for IsolationLevelContext<'input>{
	fn borrow(&self) -> &TransactionModeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<TransactionModeContextExt<'input>> for IsolationLevelContext<'input>{
	fn borrow_mut(&mut self) -> &mut TransactionModeContextExt<'input> { &mut self.base }
}

impl<'input> TransactionModeContextAttrs<'input> for IsolationLevelContext<'input> {}

impl<'input> IsolationLevelContextExt<'input>{
	fn new(ctx: &dyn TransactionModeContextAttrs<'input>) -> Rc<TransactionModeContextAll<'input>>  {
		Rc::new(
			TransactionModeContextAll::IsolationLevelContext(
				BaseParserRuleContext::copy_from(ctx,IsolationLevelContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn transactionMode(&mut self,)
	-> Result<Rc<TransactionModeContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = TransactionModeContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 260, RULE_transactionMode);
        let mut _localctx: Rc<TransactionModeContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2886);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 ISOLATION 
				=> {
					let tmp = IsolationLevelContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					recog.base.set_state(2881);
					recog.base.match_token(ISOLATION,&mut recog.err_handler)?;

					recog.base.set_state(2882);
					recog.base.match_token(LEVEL,&mut recog.err_handler)?;

					/*InvokeRule levelOfIsolation*/
					recog.base.set_state(2883);
					recog.levelOfIsolation()?;

					}
				}

			 READ 
				=> {
					let tmp = TransactionAccessModeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(2884);
					recog.base.match_token(READ,&mut recog.err_handler)?;

					recog.base.set_state(2885);
					if let TransactionModeContextAll::TransactionAccessModeContext(ctx) = cast_mut::<_,TransactionModeContextAll >(&mut _localctx){
					ctx.accessMode = recog.base.input.lt(1).cloned(); } else {unreachable!("cant cast");} 
					_la = recog.base.input.la(1);
					if { !(_la==ONLY || _la==WRITE) } {
						let tmp = recog.err_handler.recover_inline(&mut recog.base)?;
						if let TransactionModeContextAll::TransactionAccessModeContext(ctx) = cast_mut::<_,TransactionModeContextAll >(&mut _localctx){
						ctx.accessMode = Some(tmp); } else {unreachable!("cant cast");}  

					}
					else {
						if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
						recog.err_handler.report_match(&mut recog.base);
						recog.base.consume(&mut recog.err_handler);
					}
					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- levelOfIsolation ----------------
#[derive(Debug)]
pub enum LevelOfIsolationContextAll<'input>{
	ReadUncommittedContext(ReadUncommittedContext<'input>),
	SerializableContext(SerializableContext<'input>),
	ReadCommittedContext(ReadCommittedContext<'input>),
	RepeatableReadContext(RepeatableReadContext<'input>),
Error(LevelOfIsolationContext<'input>)
}
antlr_rust::tid!{LevelOfIsolationContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for LevelOfIsolationContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for LevelOfIsolationContextAll<'input>{}

impl<'input> Deref for LevelOfIsolationContextAll<'input>{
	type Target = dyn LevelOfIsolationContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use LevelOfIsolationContextAll::*;
		match self{
			ReadUncommittedContext(inner) => inner,
			SerializableContext(inner) => inner,
			ReadCommittedContext(inner) => inner,
			RepeatableReadContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for LevelOfIsolationContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for LevelOfIsolationContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type LevelOfIsolationContext<'input> = BaseParserRuleContext<'input,LevelOfIsolationContextExt<'input>>;

#[derive(Clone)]
pub struct LevelOfIsolationContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for LevelOfIsolationContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for LevelOfIsolationContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for LevelOfIsolationContext<'input>{
}

impl<'input> CustomRuleContext<'input> for LevelOfIsolationContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_levelOfIsolation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_levelOfIsolation }
}
antlr_rust::tid!{LevelOfIsolationContextExt<'a>}

impl<'input> LevelOfIsolationContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<LevelOfIsolationContextAll<'input>> {
		Rc::new(
		LevelOfIsolationContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,LevelOfIsolationContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait LevelOfIsolationContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<LevelOfIsolationContextExt<'input>>{


}

impl<'input> LevelOfIsolationContextAttrs<'input> for LevelOfIsolationContext<'input>{}

pub type ReadUncommittedContext<'input> = BaseParserRuleContext<'input,ReadUncommittedContextExt<'input>>;

pub trait ReadUncommittedContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token READ
	/// Returns `None` if there is no child corresponding to token READ
	fn READ(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(READ, 0)
	}
	/// Retrieves first TerminalNode corresponding to token UNCOMMITTED
	/// Returns `None` if there is no child corresponding to token UNCOMMITTED
	fn UNCOMMITTED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(UNCOMMITTED, 0)
	}
}

impl<'input> ReadUncommittedContextAttrs<'input> for ReadUncommittedContext<'input>{}

pub struct ReadUncommittedContextExt<'input>{
	base:LevelOfIsolationContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ReadUncommittedContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ReadUncommittedContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ReadUncommittedContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_readUncommitted(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_readUncommitted(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ReadUncommittedContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_readUncommitted(self);
	}
}

impl<'input> CustomRuleContext<'input> for ReadUncommittedContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_levelOfIsolation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_levelOfIsolation }
}

impl<'input> Borrow<LevelOfIsolationContextExt<'input>> for ReadUncommittedContext<'input>{
	fn borrow(&self) -> &LevelOfIsolationContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<LevelOfIsolationContextExt<'input>> for ReadUncommittedContext<'input>{
	fn borrow_mut(&mut self) -> &mut LevelOfIsolationContextExt<'input> { &mut self.base }
}

impl<'input> LevelOfIsolationContextAttrs<'input> for ReadUncommittedContext<'input> {}

impl<'input> ReadUncommittedContextExt<'input>{
	fn new(ctx: &dyn LevelOfIsolationContextAttrs<'input>) -> Rc<LevelOfIsolationContextAll<'input>>  {
		Rc::new(
			LevelOfIsolationContextAll::ReadUncommittedContext(
				BaseParserRuleContext::copy_from(ctx,ReadUncommittedContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type SerializableContext<'input> = BaseParserRuleContext<'input,SerializableContextExt<'input>>;

pub trait SerializableContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token SERIALIZABLE
	/// Returns `None` if there is no child corresponding to token SERIALIZABLE
	fn SERIALIZABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(SERIALIZABLE, 0)
	}
}

impl<'input> SerializableContextAttrs<'input> for SerializableContext<'input>{}

pub struct SerializableContextExt<'input>{
	base:LevelOfIsolationContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{SerializableContextExt<'a>}

impl<'input> TrinoParserContext<'input> for SerializableContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for SerializableContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_serializable(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_serializable(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for SerializableContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_serializable(self);
	}
}

impl<'input> CustomRuleContext<'input> for SerializableContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_levelOfIsolation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_levelOfIsolation }
}

impl<'input> Borrow<LevelOfIsolationContextExt<'input>> for SerializableContext<'input>{
	fn borrow(&self) -> &LevelOfIsolationContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<LevelOfIsolationContextExt<'input>> for SerializableContext<'input>{
	fn borrow_mut(&mut self) -> &mut LevelOfIsolationContextExt<'input> { &mut self.base }
}

impl<'input> LevelOfIsolationContextAttrs<'input> for SerializableContext<'input> {}

impl<'input> SerializableContextExt<'input>{
	fn new(ctx: &dyn LevelOfIsolationContextAttrs<'input>) -> Rc<LevelOfIsolationContextAll<'input>>  {
		Rc::new(
			LevelOfIsolationContextAll::SerializableContext(
				BaseParserRuleContext::copy_from(ctx,SerializableContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ReadCommittedContext<'input> = BaseParserRuleContext<'input,ReadCommittedContextExt<'input>>;

pub trait ReadCommittedContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token READ
	/// Returns `None` if there is no child corresponding to token READ
	fn READ(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(READ, 0)
	}
	/// Retrieves first TerminalNode corresponding to token COMMITTED
	/// Returns `None` if there is no child corresponding to token COMMITTED
	fn COMMITTED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMITTED, 0)
	}
}

impl<'input> ReadCommittedContextAttrs<'input> for ReadCommittedContext<'input>{}

pub struct ReadCommittedContextExt<'input>{
	base:LevelOfIsolationContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ReadCommittedContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ReadCommittedContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ReadCommittedContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_readCommitted(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_readCommitted(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ReadCommittedContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_readCommitted(self);
	}
}

impl<'input> CustomRuleContext<'input> for ReadCommittedContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_levelOfIsolation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_levelOfIsolation }
}

impl<'input> Borrow<LevelOfIsolationContextExt<'input>> for ReadCommittedContext<'input>{
	fn borrow(&self) -> &LevelOfIsolationContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<LevelOfIsolationContextExt<'input>> for ReadCommittedContext<'input>{
	fn borrow_mut(&mut self) -> &mut LevelOfIsolationContextExt<'input> { &mut self.base }
}

impl<'input> LevelOfIsolationContextAttrs<'input> for ReadCommittedContext<'input> {}

impl<'input> ReadCommittedContextExt<'input>{
	fn new(ctx: &dyn LevelOfIsolationContextAttrs<'input>) -> Rc<LevelOfIsolationContextAll<'input>>  {
		Rc::new(
			LevelOfIsolationContextAll::ReadCommittedContext(
				BaseParserRuleContext::copy_from(ctx,ReadCommittedContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type RepeatableReadContext<'input> = BaseParserRuleContext<'input,RepeatableReadContextExt<'input>>;

pub trait RepeatableReadContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token REPEATABLE
	/// Returns `None` if there is no child corresponding to token REPEATABLE
	fn REPEATABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(REPEATABLE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token READ
	/// Returns `None` if there is no child corresponding to token READ
	fn READ(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(READ, 0)
	}
}

impl<'input> RepeatableReadContextAttrs<'input> for RepeatableReadContext<'input>{}

pub struct RepeatableReadContextExt<'input>{
	base:LevelOfIsolationContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{RepeatableReadContextExt<'a>}

impl<'input> TrinoParserContext<'input> for RepeatableReadContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RepeatableReadContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_repeatableRead(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_repeatableRead(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RepeatableReadContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_repeatableRead(self);
	}
}

impl<'input> CustomRuleContext<'input> for RepeatableReadContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_levelOfIsolation }
	//fn type_rule_index() -> usize where Self: Sized { RULE_levelOfIsolation }
}

impl<'input> Borrow<LevelOfIsolationContextExt<'input>> for RepeatableReadContext<'input>{
	fn borrow(&self) -> &LevelOfIsolationContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<LevelOfIsolationContextExt<'input>> for RepeatableReadContext<'input>{
	fn borrow_mut(&mut self) -> &mut LevelOfIsolationContextExt<'input> { &mut self.base }
}

impl<'input> LevelOfIsolationContextAttrs<'input> for RepeatableReadContext<'input> {}

impl<'input> RepeatableReadContextExt<'input>{
	fn new(ctx: &dyn LevelOfIsolationContextAttrs<'input>) -> Rc<LevelOfIsolationContextAll<'input>>  {
		Rc::new(
			LevelOfIsolationContextAll::RepeatableReadContext(
				BaseParserRuleContext::copy_from(ctx,RepeatableReadContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn levelOfIsolation(&mut self,)
	-> Result<Rc<LevelOfIsolationContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = LevelOfIsolationContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 262, RULE_levelOfIsolation);
        let mut _localctx: Rc<LevelOfIsolationContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2895);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(398,&mut recog.base)? {
				1 =>{
					let tmp = ReadUncommittedContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					recog.base.set_state(2888);
					recog.base.match_token(READ,&mut recog.err_handler)?;

					recog.base.set_state(2889);
					recog.base.match_token(UNCOMMITTED,&mut recog.err_handler)?;

					}
				}
			,
				2 =>{
					let tmp = ReadCommittedContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(2890);
					recog.base.match_token(READ,&mut recog.err_handler)?;

					recog.base.set_state(2891);
					recog.base.match_token(COMMITTED,&mut recog.err_handler)?;

					}
				}
			,
				3 =>{
					let tmp = RepeatableReadContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 3);
					_localctx = tmp;
					{
					recog.base.set_state(2892);
					recog.base.match_token(REPEATABLE,&mut recog.err_handler)?;

					recog.base.set_state(2893);
					recog.base.match_token(READ,&mut recog.err_handler)?;

					}
				}
			,
				4 =>{
					let tmp = SerializableContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 4);
					_localctx = tmp;
					{
					recog.base.set_state(2894);
					recog.base.match_token(SERIALIZABLE,&mut recog.err_handler)?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- explainOption ----------------
#[derive(Debug)]
pub enum ExplainOptionContextAll<'input>{
	ExplainFormatContext(ExplainFormatContext<'input>),
	ExplainTypeContext(ExplainTypeContext<'input>),
Error(ExplainOptionContext<'input>)
}
antlr_rust::tid!{ExplainOptionContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for ExplainOptionContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for ExplainOptionContextAll<'input>{}

impl<'input> Deref for ExplainOptionContextAll<'input>{
	type Target = dyn ExplainOptionContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use ExplainOptionContextAll::*;
		match self{
			ExplainFormatContext(inner) => inner,
			ExplainTypeContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ExplainOptionContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ExplainOptionContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type ExplainOptionContext<'input> = BaseParserRuleContext<'input,ExplainOptionContextExt<'input>>;

#[derive(Clone)]
pub struct ExplainOptionContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for ExplainOptionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ExplainOptionContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ExplainOptionContext<'input>{
}

impl<'input> CustomRuleContext<'input> for ExplainOptionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_explainOption }
	//fn type_rule_index() -> usize where Self: Sized { RULE_explainOption }
}
antlr_rust::tid!{ExplainOptionContextExt<'a>}

impl<'input> ExplainOptionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<ExplainOptionContextAll<'input>> {
		Rc::new(
		ExplainOptionContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,ExplainOptionContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait ExplainOptionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<ExplainOptionContextExt<'input>>{


}

impl<'input> ExplainOptionContextAttrs<'input> for ExplainOptionContext<'input>{}

pub type ExplainFormatContext<'input> = BaseParserRuleContext<'input,ExplainFormatContextExt<'input>>;

pub trait ExplainFormatContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token FORMAT
	/// Returns `None` if there is no child corresponding to token FORMAT
	fn FORMAT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(FORMAT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token TEXT
	/// Returns `None` if there is no child corresponding to token TEXT
	fn TEXT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TEXT, 0)
	}
	/// Retrieves first TerminalNode corresponding to token GRAPHVIZ
	/// Returns `None` if there is no child corresponding to token GRAPHVIZ
	fn GRAPHVIZ(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(GRAPHVIZ, 0)
	}
	/// Retrieves first TerminalNode corresponding to token JSON
	/// Returns `None` if there is no child corresponding to token JSON
	fn JSON(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(JSON, 0)
	}
}

impl<'input> ExplainFormatContextAttrs<'input> for ExplainFormatContext<'input>{}

pub struct ExplainFormatContextExt<'input>{
	base:ExplainOptionContextExt<'input>,
	pub value: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ExplainFormatContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ExplainFormatContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ExplainFormatContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_explainFormat(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_explainFormat(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ExplainFormatContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_explainFormat(self);
	}
}

impl<'input> CustomRuleContext<'input> for ExplainFormatContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_explainOption }
	//fn type_rule_index() -> usize where Self: Sized { RULE_explainOption }
}

impl<'input> Borrow<ExplainOptionContextExt<'input>> for ExplainFormatContext<'input>{
	fn borrow(&self) -> &ExplainOptionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<ExplainOptionContextExt<'input>> for ExplainFormatContext<'input>{
	fn borrow_mut(&mut self) -> &mut ExplainOptionContextExt<'input> { &mut self.base }
}

impl<'input> ExplainOptionContextAttrs<'input> for ExplainFormatContext<'input> {}

impl<'input> ExplainFormatContextExt<'input>{
	fn new(ctx: &dyn ExplainOptionContextAttrs<'input>) -> Rc<ExplainOptionContextAll<'input>>  {
		Rc::new(
			ExplainOptionContextAll::ExplainFormatContext(
				BaseParserRuleContext::copy_from(ctx,ExplainFormatContextExt{
					value:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type ExplainTypeContext<'input> = BaseParserRuleContext<'input,ExplainTypeContextExt<'input>>;

pub trait ExplainTypeContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token TYPE
	/// Returns `None` if there is no child corresponding to token TYPE
	fn TYPE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(TYPE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LOGICAL
	/// Returns `None` if there is no child corresponding to token LOGICAL
	fn LOGICAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LOGICAL, 0)
	}
	/// Retrieves first TerminalNode corresponding to token DISTRIBUTED
	/// Returns `None` if there is no child corresponding to token DISTRIBUTED
	fn DISTRIBUTED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DISTRIBUTED, 0)
	}
	/// Retrieves first TerminalNode corresponding to token VALIDATE
	/// Returns `None` if there is no child corresponding to token VALIDATE
	fn VALIDATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(VALIDATE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token IO
	/// Returns `None` if there is no child corresponding to token IO
	fn IO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IO, 0)
	}
}

impl<'input> ExplainTypeContextAttrs<'input> for ExplainTypeContext<'input>{}

pub struct ExplainTypeContextExt<'input>{
	base:ExplainOptionContextExt<'input>,
	pub value: Option<TokenType<'input>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{ExplainTypeContextExt<'a>}

impl<'input> TrinoParserContext<'input> for ExplainTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for ExplainTypeContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_explainType(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_explainType(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for ExplainTypeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_explainType(self);
	}
}

impl<'input> CustomRuleContext<'input> for ExplainTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_explainOption }
	//fn type_rule_index() -> usize where Self: Sized { RULE_explainOption }
}

impl<'input> Borrow<ExplainOptionContextExt<'input>> for ExplainTypeContext<'input>{
	fn borrow(&self) -> &ExplainOptionContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<ExplainOptionContextExt<'input>> for ExplainTypeContext<'input>{
	fn borrow_mut(&mut self) -> &mut ExplainOptionContextExt<'input> { &mut self.base }
}

impl<'input> ExplainOptionContextAttrs<'input> for ExplainTypeContext<'input> {}

impl<'input> ExplainTypeContextExt<'input>{
	fn new(ctx: &dyn ExplainOptionContextAttrs<'input>) -> Rc<ExplainOptionContextAll<'input>>  {
		Rc::new(
			ExplainOptionContextAll::ExplainTypeContext(
				BaseParserRuleContext::copy_from(ctx,ExplainTypeContextExt{
					value:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn explainOption(&mut self,)
	-> Result<Rc<ExplainOptionContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = ExplainOptionContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 264, RULE_explainOption);
        let mut _localctx: Rc<ExplainOptionContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2901);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 FORMAT 
				=> {
					let tmp = ExplainFormatContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					recog.base.set_state(2897);
					recog.base.match_token(FORMAT,&mut recog.err_handler)?;

					recog.base.set_state(2898);
					if let ExplainOptionContextAll::ExplainFormatContext(ctx) = cast_mut::<_,ExplainOptionContextAll >(&mut _localctx){
					ctx.value = recog.base.input.lt(1).cloned(); } else {unreachable!("cant cast");} 
					_la = recog.base.input.la(1);
					if { !(_la==GRAPHVIZ || _la==JSON || _la==TEXT) } {
						let tmp = recog.err_handler.recover_inline(&mut recog.base)?;
						if let ExplainOptionContextAll::ExplainFormatContext(ctx) = cast_mut::<_,ExplainOptionContextAll >(&mut _localctx){
						ctx.value = Some(tmp); } else {unreachable!("cant cast");}  

					}
					else {
						if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
						recog.err_handler.report_match(&mut recog.base);
						recog.base.consume(&mut recog.err_handler);
					}
					}
				}

			 TYPE 
				=> {
					let tmp = ExplainTypeContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(2899);
					recog.base.match_token(TYPE,&mut recog.err_handler)?;

					recog.base.set_state(2900);
					if let ExplainOptionContextAll::ExplainTypeContext(ctx) = cast_mut::<_,ExplainOptionContextAll >(&mut _localctx){
					ctx.value = recog.base.input.lt(1).cloned(); } else {unreachable!("cant cast");} 
					_la = recog.base.input.la(1);
					if { !(_la==DISTRIBUTED || _la==IO || _la==LOGICAL || _la==VALIDATE) } {
						let tmp = recog.err_handler.recover_inline(&mut recog.base)?;
						if let ExplainOptionContextAll::ExplainTypeContext(ctx) = cast_mut::<_,ExplainOptionContextAll >(&mut _localctx){
						ctx.value = Some(tmp); } else {unreachable!("cant cast");}  

					}
					else {
						if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
						recog.err_handler.report_match(&mut recog.base);
						recog.base.consume(&mut recog.err_handler);
					}
					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- privilege ----------------
pub type PrivilegeContextAll<'input> = PrivilegeContext<'input>;


pub type PrivilegeContext<'input> = BaseParserRuleContext<'input,PrivilegeContextExt<'input>>;

#[derive(Clone)]
pub struct PrivilegeContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PrivilegeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrivilegeContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_privilege(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_privilege(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrivilegeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_privilege(self);
	}
}

impl<'input> CustomRuleContext<'input> for PrivilegeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_privilege }
	//fn type_rule_index() -> usize where Self: Sized { RULE_privilege }
}
antlr_rust::tid!{PrivilegeContextExt<'a>}

impl<'input> PrivilegeContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PrivilegeContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PrivilegeContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait PrivilegeContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PrivilegeContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token CREATE
/// Returns `None` if there is no child corresponding to token CREATE
fn CREATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(CREATE, 0)
}
/// Retrieves first TerminalNode corresponding to token SELECT
/// Returns `None` if there is no child corresponding to token SELECT
fn SELECT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SELECT, 0)
}
/// Retrieves first TerminalNode corresponding to token DELETE
/// Returns `None` if there is no child corresponding to token DELETE
fn DELETE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DELETE, 0)
}
/// Retrieves first TerminalNode corresponding to token INSERT
/// Returns `None` if there is no child corresponding to token INSERT
fn INSERT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(INSERT, 0)
}
/// Retrieves first TerminalNode corresponding to token UPDATE
/// Returns `None` if there is no child corresponding to token UPDATE
fn UPDATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UPDATE, 0)
}

}

impl<'input> PrivilegeContextAttrs<'input> for PrivilegeContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn privilege(&mut self,)
	-> Result<Rc<PrivilegeContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PrivilegeContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 266, RULE_privilege);
        let mut _localctx: Rc<PrivilegeContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2903);
			_la = recog.base.input.la(1);
			if { !(_la==CREATE || _la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- qualifiedName ----------------
#[derive(Debug)]
pub enum QualifiedNameContextAll<'input>{
	QualifiedNameDefaultContext(QualifiedNameDefaultContext<'input>),
Error(QualifiedNameContext<'input>)
}
antlr_rust::tid!{QualifiedNameContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for QualifiedNameContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for QualifiedNameContextAll<'input>{}

impl<'input> Deref for QualifiedNameContextAll<'input>{
	type Target = dyn QualifiedNameContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use QualifiedNameContextAll::*;
		match self{
			QualifiedNameDefaultContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QualifiedNameContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QualifiedNameContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type QualifiedNameContext<'input> = BaseParserRuleContext<'input,QualifiedNameContextExt<'input>>;

#[derive(Clone)]
pub struct QualifiedNameContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for QualifiedNameContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QualifiedNameContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QualifiedNameContext<'input>{
}

impl<'input> CustomRuleContext<'input> for QualifiedNameContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_qualifiedName }
	//fn type_rule_index() -> usize where Self: Sized { RULE_qualifiedName }
}
antlr_rust::tid!{QualifiedNameContextExt<'a>}

impl<'input> QualifiedNameContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<QualifiedNameContextAll<'input>> {
		Rc::new(
		QualifiedNameContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,QualifiedNameContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait QualifiedNameContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<QualifiedNameContextExt<'input>>{


}

impl<'input> QualifiedNameContextAttrs<'input> for QualifiedNameContext<'input>{}

pub type QualifiedNameDefaultContext<'input> = BaseParserRuleContext<'input,QualifiedNameDefaultContextExt<'input>>;

pub trait QualifiedNameDefaultContextAttrs<'input>: TrinoParserContext<'input>{
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token DOT in current rule
	fn DOT_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token DOT, starting from 0.
	/// Returns `None` if number of children corresponding to token DOT is less or equal than `i`.
	fn DOT(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DOT, i)
	}
	fn pathComponent_all(&self) ->  Vec<Rc<PathComponentContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn pathComponent(&self, i: usize) -> Option<Rc<PathComponentContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
}

impl<'input> QualifiedNameDefaultContextAttrs<'input> for QualifiedNameDefaultContext<'input>{}

pub struct QualifiedNameDefaultContextExt<'input>{
	base:QualifiedNameContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{QualifiedNameDefaultContextExt<'a>}

impl<'input> TrinoParserContext<'input> for QualifiedNameDefaultContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QualifiedNameDefaultContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_qualifiedNameDefault(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_qualifiedNameDefault(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QualifiedNameDefaultContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_qualifiedNameDefault(self);
	}
}

impl<'input> CustomRuleContext<'input> for QualifiedNameDefaultContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_qualifiedName }
	//fn type_rule_index() -> usize where Self: Sized { RULE_qualifiedName }
}

impl<'input> Borrow<QualifiedNameContextExt<'input>> for QualifiedNameDefaultContext<'input>{
	fn borrow(&self) -> &QualifiedNameContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<QualifiedNameContextExt<'input>> for QualifiedNameDefaultContext<'input>{
	fn borrow_mut(&mut self) -> &mut QualifiedNameContextExt<'input> { &mut self.base }
}

impl<'input> QualifiedNameContextAttrs<'input> for QualifiedNameDefaultContext<'input> {}

impl<'input> QualifiedNameDefaultContextExt<'input>{
	fn new(ctx: &dyn QualifiedNameContextAttrs<'input>) -> Rc<QualifiedNameContextAll<'input>>  {
		Rc::new(
			QualifiedNameContextAll::QualifiedNameDefaultContext(
				BaseParserRuleContext::copy_from(ctx,QualifiedNameDefaultContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn qualifiedName(&mut self,)
	-> Result<Rc<QualifiedNameContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = QualifiedNameContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 268, RULE_qualifiedName);
        let mut _localctx: Rc<QualifiedNameContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			let tmp = QualifiedNameDefaultContextExt::new(&**_localctx);
			recog.base.enter_outer_alt(Some(tmp.clone()), 1);
			_localctx = tmp;
			{
			/*InvokeRule identifier*/
			recog.base.set_state(2905);
			recog.identifier()?;

			recog.base.set_state(2910);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(400,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					{
					{
					recog.base.set_state(2906);
					recog.base.match_token(DOT,&mut recog.err_handler)?;

					/*InvokeRule pathComponent*/
					recog.base.set_state(2907);
					recog.pathComponent()?;

					}
					} 
				}
				recog.base.set_state(2912);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(400,&mut recog.base)?;
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- pathExpression ----------------
pub type PathExpressionContextAll<'input> = PathExpressionContext<'input>;


pub type PathExpressionContext<'input> = BaseParserRuleContext<'input,PathExpressionContextExt<'input>>;

#[derive(Clone)]
pub struct PathExpressionContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PathExpressionContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PathExpressionContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_pathExpression(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_pathExpression(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PathExpressionContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_pathExpression(self);
	}
}

impl<'input> CustomRuleContext<'input> for PathExpressionContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_pathExpression }
	//fn type_rule_index() -> usize where Self: Sized { RULE_pathExpression }
}
antlr_rust::tid!{PathExpressionContextExt<'a>}

impl<'input> PathExpressionContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PathExpressionContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PathExpressionContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait PathExpressionContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PathExpressionContextExt<'input>>{

fn qualifiedName(&self) -> Option<Rc<QualifiedNameContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> PathExpressionContextAttrs<'input> for PathExpressionContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn pathExpression(&mut self,)
	-> Result<Rc<PathExpressionContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PathExpressionContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 270, RULE_pathExpression);
        let mut _localctx: Rc<PathExpressionContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule qualifiedName*/
			recog.base.set_state(2913);
			recog.qualifiedName()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- queryPeriod ----------------
pub type QueryPeriodContextAll<'input> = QueryPeriodContext<'input>;


pub type QueryPeriodContext<'input> = BaseParserRuleContext<'input,QueryPeriodContextExt<'input>>;

#[derive(Clone)]
pub struct QueryPeriodContextExt<'input>{
	pub end: Option<Rc<ValueExpressionContextAll<'input>>>,
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for QueryPeriodContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QueryPeriodContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_queryPeriod(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_queryPeriod(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QueryPeriodContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_queryPeriod(self);
	}
}

impl<'input> CustomRuleContext<'input> for QueryPeriodContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_queryPeriod }
	//fn type_rule_index() -> usize where Self: Sized { RULE_queryPeriod }
}
antlr_rust::tid!{QueryPeriodContextExt<'a>}

impl<'input> QueryPeriodContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<QueryPeriodContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,QueryPeriodContextExt{
				end: None, 
				ph:PhantomData
			}),
		)
	}
}

pub trait QueryPeriodContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<QueryPeriodContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token FOR
/// Returns `None` if there is no child corresponding to token FOR
fn FOR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FOR, 0)
}
fn rangeType(&self) -> Option<Rc<RangeTypeContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token AS
/// Returns `None` if there is no child corresponding to token AS
fn AS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(AS, 0)
}
/// Retrieves first TerminalNode corresponding to token OF
/// Returns `None` if there is no child corresponding to token OF
fn OF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(OF, 0)
}
fn valueExpression(&self) -> Option<Rc<ValueExpressionContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> QueryPeriodContextAttrs<'input> for QueryPeriodContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn queryPeriod(&mut self,)
	-> Result<Rc<QueryPeriodContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = QueryPeriodContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 272, RULE_queryPeriod);
        let mut _localctx: Rc<QueryPeriodContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2915);
			recog.base.match_token(FOR,&mut recog.err_handler)?;

			/*InvokeRule rangeType*/
			recog.base.set_state(2916);
			recog.rangeType()?;

			recog.base.set_state(2917);
			recog.base.match_token(AS,&mut recog.err_handler)?;

			recog.base.set_state(2918);
			recog.base.match_token(OF,&mut recog.err_handler)?;

			/*InvokeRule valueExpression*/
			recog.base.set_state(2919);
			let tmp = recog.valueExpression_rec(0)?;
			 cast_mut::<_,QueryPeriodContext >(&mut _localctx).end = Some(tmp.clone());
			  

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- rangeType ----------------
pub type RangeTypeContextAll<'input> = RangeTypeContext<'input>;


pub type RangeTypeContext<'input> = BaseParserRuleContext<'input,RangeTypeContextExt<'input>>;

#[derive(Clone)]
pub struct RangeTypeContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for RangeTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RangeTypeContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_rangeType(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_rangeType(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RangeTypeContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_rangeType(self);
	}
}

impl<'input> CustomRuleContext<'input> for RangeTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_rangeType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_rangeType }
}
antlr_rust::tid!{RangeTypeContextExt<'a>}

impl<'input> RangeTypeContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<RangeTypeContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,RangeTypeContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait RangeTypeContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<RangeTypeContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token TIMESTAMP
/// Returns `None` if there is no child corresponding to token TIMESTAMP
fn TIMESTAMP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TIMESTAMP, 0)
}
/// Retrieves first TerminalNode corresponding to token VERSION
/// Returns `None` if there is no child corresponding to token VERSION
fn VERSION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(VERSION, 0)
}

}

impl<'input> RangeTypeContextAttrs<'input> for RangeTypeContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn rangeType(&mut self,)
	-> Result<Rc<RangeTypeContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = RangeTypeContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 274, RULE_rangeType);
        let mut _localctx: Rc<RangeTypeContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2921);
			_la = recog.base.input.la(1);
			if { !(_la==TIMESTAMP || _la==VERSION) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- principal ----------------
#[derive(Debug)]
pub enum PrincipalContextAll<'input>{
	UnspecifiedPrincipalContext(UnspecifiedPrincipalContext<'input>),
	UserPrincipalContext(UserPrincipalContext<'input>),
	RolePrincipalContext(RolePrincipalContext<'input>),
Error(PrincipalContext<'input>)
}
antlr_rust::tid!{PrincipalContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for PrincipalContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for PrincipalContextAll<'input>{}

impl<'input> Deref for PrincipalContextAll<'input>{
	type Target = dyn PrincipalContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use PrincipalContextAll::*;
		match self{
			UnspecifiedPrincipalContext(inner) => inner,
			UserPrincipalContext(inner) => inner,
			RolePrincipalContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrincipalContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrincipalContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type PrincipalContext<'input> = BaseParserRuleContext<'input,PrincipalContextExt<'input>>;

#[derive(Clone)]
pub struct PrincipalContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PrincipalContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrincipalContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrincipalContext<'input>{
}

impl<'input> CustomRuleContext<'input> for PrincipalContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_principal }
	//fn type_rule_index() -> usize where Self: Sized { RULE_principal }
}
antlr_rust::tid!{PrincipalContextExt<'a>}

impl<'input> PrincipalContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PrincipalContextAll<'input>> {
		Rc::new(
		PrincipalContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PrincipalContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait PrincipalContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PrincipalContextExt<'input>>{


}

impl<'input> PrincipalContextAttrs<'input> for PrincipalContext<'input>{}

pub type UnspecifiedPrincipalContext<'input> = BaseParserRuleContext<'input,UnspecifiedPrincipalContextExt<'input>>;

pub trait UnspecifiedPrincipalContextAttrs<'input>: TrinoParserContext<'input>{
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> UnspecifiedPrincipalContextAttrs<'input> for UnspecifiedPrincipalContext<'input>{}

pub struct UnspecifiedPrincipalContextExt<'input>{
	base:PrincipalContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{UnspecifiedPrincipalContextExt<'a>}

impl<'input> TrinoParserContext<'input> for UnspecifiedPrincipalContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for UnspecifiedPrincipalContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_unspecifiedPrincipal(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_unspecifiedPrincipal(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for UnspecifiedPrincipalContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_unspecifiedPrincipal(self);
	}
}

impl<'input> CustomRuleContext<'input> for UnspecifiedPrincipalContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_principal }
	//fn type_rule_index() -> usize where Self: Sized { RULE_principal }
}

impl<'input> Borrow<PrincipalContextExt<'input>> for UnspecifiedPrincipalContext<'input>{
	fn borrow(&self) -> &PrincipalContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrincipalContextExt<'input>> for UnspecifiedPrincipalContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrincipalContextExt<'input> { &mut self.base }
}

impl<'input> PrincipalContextAttrs<'input> for UnspecifiedPrincipalContext<'input> {}

impl<'input> UnspecifiedPrincipalContextExt<'input>{
	fn new(ctx: &dyn PrincipalContextAttrs<'input>) -> Rc<PrincipalContextAll<'input>>  {
		Rc::new(
			PrincipalContextAll::UnspecifiedPrincipalContext(
				BaseParserRuleContext::copy_from(ctx,UnspecifiedPrincipalContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type UserPrincipalContext<'input> = BaseParserRuleContext<'input,UserPrincipalContextExt<'input>>;

pub trait UserPrincipalContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token USER
	/// Returns `None` if there is no child corresponding to token USER
	fn USER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(USER, 0)
	}
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> UserPrincipalContextAttrs<'input> for UserPrincipalContext<'input>{}

pub struct UserPrincipalContextExt<'input>{
	base:PrincipalContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{UserPrincipalContextExt<'a>}

impl<'input> TrinoParserContext<'input> for UserPrincipalContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for UserPrincipalContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_userPrincipal(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_userPrincipal(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for UserPrincipalContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_userPrincipal(self);
	}
}

impl<'input> CustomRuleContext<'input> for UserPrincipalContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_principal }
	//fn type_rule_index() -> usize where Self: Sized { RULE_principal }
}

impl<'input> Borrow<PrincipalContextExt<'input>> for UserPrincipalContext<'input>{
	fn borrow(&self) -> &PrincipalContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrincipalContextExt<'input>> for UserPrincipalContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrincipalContextExt<'input> { &mut self.base }
}

impl<'input> PrincipalContextAttrs<'input> for UserPrincipalContext<'input> {}

impl<'input> UserPrincipalContextExt<'input>{
	fn new(ctx: &dyn PrincipalContextAttrs<'input>) -> Rc<PrincipalContextAll<'input>>  {
		Rc::new(
			PrincipalContextAll::UserPrincipalContext(
				BaseParserRuleContext::copy_from(ctx,UserPrincipalContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type RolePrincipalContext<'input> = BaseParserRuleContext<'input,RolePrincipalContextExt<'input>>;

pub trait RolePrincipalContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ROLE
	/// Returns `None` if there is no child corresponding to token ROLE
	fn ROLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ROLE, 0)
	}
	fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> RolePrincipalContextAttrs<'input> for RolePrincipalContext<'input>{}

pub struct RolePrincipalContextExt<'input>{
	base:PrincipalContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{RolePrincipalContextExt<'a>}

impl<'input> TrinoParserContext<'input> for RolePrincipalContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for RolePrincipalContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_rolePrincipal(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_rolePrincipal(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for RolePrincipalContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_rolePrincipal(self);
	}
}

impl<'input> CustomRuleContext<'input> for RolePrincipalContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_principal }
	//fn type_rule_index() -> usize where Self: Sized { RULE_principal }
}

impl<'input> Borrow<PrincipalContextExt<'input>> for RolePrincipalContext<'input>{
	fn borrow(&self) -> &PrincipalContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrincipalContextExt<'input>> for RolePrincipalContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrincipalContextExt<'input> { &mut self.base }
}

impl<'input> PrincipalContextAttrs<'input> for RolePrincipalContext<'input> {}

impl<'input> RolePrincipalContextExt<'input>{
	fn new(ctx: &dyn PrincipalContextAttrs<'input>) -> Rc<PrincipalContextAll<'input>>  {
		Rc::new(
			PrincipalContextAll::RolePrincipalContext(
				BaseParserRuleContext::copy_from(ctx,RolePrincipalContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn principal(&mut self,)
	-> Result<Rc<PrincipalContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PrincipalContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 276, RULE_principal);
        let mut _localctx: Rc<PrincipalContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2928);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(401,&mut recog.base)? {
				1 =>{
					let tmp = UnspecifiedPrincipalContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					/*InvokeRule identifier*/
					recog.base.set_state(2923);
					recog.identifier()?;

					}
				}
			,
				2 =>{
					let tmp = UserPrincipalContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(2924);
					recog.base.match_token(USER,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(2925);
					recog.identifier()?;

					}
				}
			,
				3 =>{
					let tmp = RolePrincipalContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 3);
					_localctx = tmp;
					{
					recog.base.set_state(2926);
					recog.base.match_token(ROLE,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(2927);
					recog.identifier()?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- identifier ----------------
#[derive(Debug)]
pub enum IdentifierContextAll<'input>{
	QuotedIdentifierDefaultContext(QuotedIdentifierDefaultContext<'input>),
	UnquotedIdentifierContext(UnquotedIdentifierContext<'input>),
Error(IdentifierContext<'input>)
}
antlr_rust::tid!{IdentifierContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for IdentifierContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for IdentifierContextAll<'input>{}

impl<'input> Deref for IdentifierContextAll<'input>{
	type Target = dyn IdentifierContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use IdentifierContextAll::*;
		match self{
			QuotedIdentifierDefaultContext(inner) => inner,
			UnquotedIdentifierContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for IdentifierContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for IdentifierContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type IdentifierContext<'input> = BaseParserRuleContext<'input,IdentifierContextExt<'input>>;

#[derive(Clone)]
pub struct IdentifierContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for IdentifierContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for IdentifierContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for IdentifierContext<'input>{
}

impl<'input> CustomRuleContext<'input> for IdentifierContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_identifier }
	//fn type_rule_index() -> usize where Self: Sized { RULE_identifier }
}
antlr_rust::tid!{IdentifierContextExt<'a>}

impl<'input> IdentifierContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<IdentifierContextAll<'input>> {
		Rc::new(
		IdentifierContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,IdentifierContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait IdentifierContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<IdentifierContextExt<'input>>{


}

impl<'input> IdentifierContextAttrs<'input> for IdentifierContext<'input>{}

pub type QuotedIdentifierDefaultContext<'input> = BaseParserRuleContext<'input,QuotedIdentifierDefaultContextExt<'input>>;

pub trait QuotedIdentifierDefaultContextAttrs<'input>: TrinoParserContext<'input>{
	fn quotedIdentifier(&self) -> Option<Rc<QuotedIdentifierContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> QuotedIdentifierDefaultContextAttrs<'input> for QuotedIdentifierDefaultContext<'input>{}

pub struct QuotedIdentifierDefaultContextExt<'input>{
	base:IdentifierContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{QuotedIdentifierDefaultContextExt<'a>}

impl<'input> TrinoParserContext<'input> for QuotedIdentifierDefaultContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QuotedIdentifierDefaultContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_quotedIdentifierDefault(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_quotedIdentifierDefault(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QuotedIdentifierDefaultContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_quotedIdentifierDefault(self);
	}
}

impl<'input> CustomRuleContext<'input> for QuotedIdentifierDefaultContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_identifier }
	//fn type_rule_index() -> usize where Self: Sized { RULE_identifier }
}

impl<'input> Borrow<IdentifierContextExt<'input>> for QuotedIdentifierDefaultContext<'input>{
	fn borrow(&self) -> &IdentifierContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<IdentifierContextExt<'input>> for QuotedIdentifierDefaultContext<'input>{
	fn borrow_mut(&mut self) -> &mut IdentifierContextExt<'input> { &mut self.base }
}

impl<'input> IdentifierContextAttrs<'input> for QuotedIdentifierDefaultContext<'input> {}

impl<'input> QuotedIdentifierDefaultContextExt<'input>{
	fn new(ctx: &dyn IdentifierContextAttrs<'input>) -> Rc<IdentifierContextAll<'input>>  {
		Rc::new(
			IdentifierContextAll::QuotedIdentifierDefaultContext(
				BaseParserRuleContext::copy_from(ctx,QuotedIdentifierDefaultContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type UnquotedIdentifierContext<'input> = BaseParserRuleContext<'input,UnquotedIdentifierContextExt<'input>>;

pub trait UnquotedIdentifierContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token IDENTIFIER
	/// Returns `None` if there is no child corresponding to token IDENTIFIER
	fn IDENTIFIER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(IDENTIFIER, 0)
	}
	fn nonReserved(&self) -> Option<Rc<NonReservedContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> UnquotedIdentifierContextAttrs<'input> for UnquotedIdentifierContext<'input>{}

pub struct UnquotedIdentifierContextExt<'input>{
	base:IdentifierContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{UnquotedIdentifierContextExt<'a>}

impl<'input> TrinoParserContext<'input> for UnquotedIdentifierContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for UnquotedIdentifierContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_unquotedIdentifier(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_unquotedIdentifier(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for UnquotedIdentifierContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_unquotedIdentifier(self);
	}
}

impl<'input> CustomRuleContext<'input> for UnquotedIdentifierContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_identifier }
	//fn type_rule_index() -> usize where Self: Sized { RULE_identifier }
}

impl<'input> Borrow<IdentifierContextExt<'input>> for UnquotedIdentifierContext<'input>{
	fn borrow(&self) -> &IdentifierContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<IdentifierContextExt<'input>> for UnquotedIdentifierContext<'input>{
	fn borrow_mut(&mut self) -> &mut IdentifierContextExt<'input> { &mut self.base }
}

impl<'input> IdentifierContextAttrs<'input> for UnquotedIdentifierContext<'input> {}

impl<'input> UnquotedIdentifierContextExt<'input>{
	fn new(ctx: &dyn IdentifierContextAttrs<'input>) -> Rc<IdentifierContextAll<'input>>  {
		Rc::new(
			IdentifierContextAll::UnquotedIdentifierContext(
				BaseParserRuleContext::copy_from(ctx,UnquotedIdentifierContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn identifier(&mut self,)
	-> Result<Rc<IdentifierContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = IdentifierContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 278, RULE_identifier);
        let mut _localctx: Rc<IdentifierContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2933);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 IDENTIFIER 
				=> {
					let tmp = UnquotedIdentifierContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					recog.base.set_state(2930);
					recog.base.match_token(IDENTIFIER,&mut recog.err_handler)?;

					}
				}

			 QUOTED_IDENTIFIER 
				=> {
					let tmp = QuotedIdentifierDefaultContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					/*InvokeRule quotedIdentifier*/
					recog.base.set_state(2931);
					recog.quotedIdentifier()?;

					}
				}

			 ABORT | ABSENT | ADD | ADMIN | AFTER | ALL | ANALYZE | ANTI | ANY | ARRAY |
			 ASC | AT | ATTACH | AUTHORIZATION | BEGIN | BERNOULLI | BOTH | BZIP2 |
			 CALL | CANCEL | CASCADE | CATALOGS | CHARACTER | CLONE | CLOSE | CLUSTER |
			 COLUMN | COLUMNS | COMMENT | COMMIT | COMMITTED | COMPRESSION | CONDITIONAL |
			 CONNECTION | COPARTITION | COPY | COUNT | CURRENT | DATA | DATABASE |
			 DATASHARE | DATE | DAY | DAYS | DECLARE | DEFAULT | DEFINE | DEFINER |
			 DELIMITER | DENY | DESC | DESCRIBE | DESCRIPTOR | DISTRIBUTED | DETACH |
			 DOUBLE | EMPTY | ENCODING | END | ERROR | EXCLUDING | EXECUTE | EXPLAIN |
			 EXTERNAL | FETCH | FILTER | FINAL | FIRST | FOLLOWING | FORMAT | FUNCTIONS |
			 GRACE | GRANT | GRANTED | GRANTS | GRAPHVIZ | GROUPS | GZIP | HOUR |
			 HOURS | IF | IGNORE | INCLUDING | INITIAL | INPUT | INTEGER | INTERVAL |
			 INVOKER | IO | ISOLATION | JSON | KEEP | KEY | KEYS | LAMBDA | LAST |
			 LATERAL | LEADING | LEVEL | LIBRARY | LIMIT | LOCAL | LOCATION | LOCK |
			 LOGICAL | M | MAP | MASKING | MATCH | MATCHED | MATCHES | MATCH_RECOGNIZE |
			 MATERIALIZED | MAX | MEASURES | MERGE | MIN | MINUS_KW | MINUTE | MINUTES |
			 MODEL | MONTH | MONTHS | NEXT | NFC | NFD | NFKC | NFKD | NO | NONE |
			 NULLS | OBJECT | OF | OFFSET | OMIT | ONE | ONLY | OPTION | ORDINALITY |
			 OUTPUT | OVER | OVERFLOW | PARTITION | PARTITIONS | PASSING | PAST |
			 PATH | PATTERN | PER | PERIOD | PERMUTE | POSITION | PRECEDING | PRECISION |
			 PROCEDURE | PRIVILEGES | PROPERTIES | PRUNE | QUOTES | RANGE | READ |
			 REFRESH | RENAME | REPEATABLE | REPLACE | RESET | RESPECT | RESTRICT |
			 RETURNING | REVOKE | RLS | ROLE | ROLES | ROLLBACK | ROLLUP | ROW | ROWS |
			 RUNNING | S | SCALAR | SEC | SECOND | SECONDS | SCHEMA | SCHEMAS | SECURITY |
			 SEEK | SEMI | SERIALIZABLE | SESSION | SET | SETS | SHOW | SNAPSHOT |
			 SOME | START | STATS | STRUCT | SUBSET | SUBSTRING | SYSTEM | SYSTEM_TIME |
			 TABLES | TABLESAMPLE | TEMP | TEMPORARY | TEXT | STRING_KW | TIES | TIME |
			 TIMESTAMP | TO | TRAILING | TRANSACTION | TRUNCATE | TRY_CAST | TUPLE |
			 TYPE | UNBOUNDED | UNCOMMITTED | UNCONDITIONAL | UNIQUE | UNKNOWN | UNLOAD |
			 UNMATCHED | UPDATE | USE | USER | UTF16 | UTF32 | UTF8 | VACUUM | VALIDATE |
			 VALUE | VARYING | VERBOSE | VERSION | VIEW | WEEK | WINDOW | WITHIN |
			 WITHOUT | WORK | WRAPPER | WRITE | XZ | YEAR | YEARS | ZONE | ZSTD 
				=> {
					let tmp = UnquotedIdentifierContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 3);
					_localctx = tmp;
					{
					/*InvokeRule nonReserved*/
					recog.base.set_state(2932);
					recog.nonReserved()?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- quotedIdentifier ----------------
pub type QuotedIdentifierContextAll<'input> = QuotedIdentifierContext<'input>;


pub type QuotedIdentifierContext<'input> = BaseParserRuleContext<'input,QuotedIdentifierContextExt<'input>>;

#[derive(Clone)]
pub struct QuotedIdentifierContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for QuotedIdentifierContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for QuotedIdentifierContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_quotedIdentifier(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_quotedIdentifier(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for QuotedIdentifierContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_quotedIdentifier(self);
	}
}

impl<'input> CustomRuleContext<'input> for QuotedIdentifierContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_quotedIdentifier }
	//fn type_rule_index() -> usize where Self: Sized { RULE_quotedIdentifier }
}
antlr_rust::tid!{QuotedIdentifierContextExt<'a>}

impl<'input> QuotedIdentifierContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<QuotedIdentifierContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,QuotedIdentifierContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait QuotedIdentifierContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<QuotedIdentifierContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token QUOTED_IDENTIFIER
/// Returns `None` if there is no child corresponding to token QUOTED_IDENTIFIER
fn QUOTED_IDENTIFIER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(QUOTED_IDENTIFIER, 0)
}

}

impl<'input> QuotedIdentifierContextAttrs<'input> for QuotedIdentifierContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn quotedIdentifier(&mut self,)
	-> Result<Rc<QuotedIdentifierContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = QuotedIdentifierContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 280, RULE_quotedIdentifier);
        let mut _localctx: Rc<QuotedIdentifierContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2935);
			recog.base.match_token(QUOTED_IDENTIFIER,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- pathComponent ----------------
pub type PathComponentContextAll<'input> = PathComponentContext<'input>;


pub type PathComponentContext<'input> = BaseParserRuleContext<'input,PathComponentContextExt<'input>>;

#[derive(Clone)]
pub struct PathComponentContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PathComponentContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PathComponentContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_pathComponent(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_pathComponent(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PathComponentContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_pathComponent(self);
	}
}

impl<'input> CustomRuleContext<'input> for PathComponentContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_pathComponent }
	//fn type_rule_index() -> usize where Self: Sized { RULE_pathComponent }
}
antlr_rust::tid!{PathComponentContextExt<'a>}

impl<'input> PathComponentContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PathComponentContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PathComponentContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait PathComponentContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PathComponentContextExt<'input>>{

fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> PathComponentContextAttrs<'input> for PathComponentContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn pathComponent(&mut self,)
	-> Result<Rc<PathComponentContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PathComponentContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 282, RULE_pathComponent);
        let mut _localctx: Rc<PathComponentContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule identifier*/
			recog.base.set_state(2937);
			recog.identifier()?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- standaloneIdentifier ----------------
pub type StandaloneIdentifierContextAll<'input> = StandaloneIdentifierContext<'input>;


pub type StandaloneIdentifierContext<'input> = BaseParserRuleContext<'input,StandaloneIdentifierContextExt<'input>>;

#[derive(Clone)]
pub struct StandaloneIdentifierContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for StandaloneIdentifierContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for StandaloneIdentifierContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_standaloneIdentifier(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_standaloneIdentifier(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for StandaloneIdentifierContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_standaloneIdentifier(self);
	}
}

impl<'input> CustomRuleContext<'input> for StandaloneIdentifierContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_standaloneIdentifier }
	//fn type_rule_index() -> usize where Self: Sized { RULE_standaloneIdentifier }
}
antlr_rust::tid!{StandaloneIdentifierContextExt<'a>}

impl<'input> StandaloneIdentifierContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<StandaloneIdentifierContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,StandaloneIdentifierContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait StandaloneIdentifierContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<StandaloneIdentifierContextExt<'input>>{

fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token EOF
/// Returns `None` if there is no child corresponding to token EOF
fn EOF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EOF, 0)
}

}

impl<'input> StandaloneIdentifierContextAttrs<'input> for StandaloneIdentifierContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn standaloneIdentifier(&mut self,)
	-> Result<Rc<StandaloneIdentifierContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = StandaloneIdentifierContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 284, RULE_standaloneIdentifier);
        let mut _localctx: Rc<StandaloneIdentifierContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule identifier*/
			recog.base.set_state(2939);
			recog.identifier()?;

			recog.base.set_state(2940);
			recog.base.match_token(EOF,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- identifierList ----------------
pub type IdentifierListContextAll<'input> = IdentifierListContext<'input>;


pub type IdentifierListContext<'input> = BaseParserRuleContext<'input,IdentifierListContextExt<'input>>;

#[derive(Clone)]
pub struct IdentifierListContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for IdentifierListContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for IdentifierListContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_identifierList(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_identifierList(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for IdentifierListContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_identifierList(self);
	}
}

impl<'input> CustomRuleContext<'input> for IdentifierListContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_identifierList }
	//fn type_rule_index() -> usize where Self: Sized { RULE_identifierList }
}
antlr_rust::tid!{IdentifierListContextExt<'a>}

impl<'input> IdentifierListContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<IdentifierListContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,IdentifierListContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait IdentifierListContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<IdentifierListContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token LPAREN
/// Returns `None` if there is no child corresponding to token LPAREN
fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LPAREN, 0)
}
fn identifierSeq(&self) -> Option<Rc<IdentifierSeqContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
/// Retrieves first TerminalNode corresponding to token RPAREN
/// Returns `None` if there is no child corresponding to token RPAREN
fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RPAREN, 0)
}

}

impl<'input> IdentifierListContextAttrs<'input> for IdentifierListContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn identifierList(&mut self,)
	-> Result<Rc<IdentifierListContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = IdentifierListContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 286, RULE_identifierList);
        let mut _localctx: Rc<IdentifierListContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(2942);
			recog.base.match_token(LPAREN,&mut recog.err_handler)?;

			/*InvokeRule identifierSeq*/
			recog.base.set_state(2943);
			recog.identifierSeq()?;

			recog.base.set_state(2944);
			recog.base.match_token(RPAREN,&mut recog.err_handler)?;

			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- identifierSeq ----------------
pub type IdentifierSeqContextAll<'input> = IdentifierSeqContext<'input>;


pub type IdentifierSeqContext<'input> = BaseParserRuleContext<'input,IdentifierSeqContextExt<'input>>;

#[derive(Clone)]
pub struct IdentifierSeqContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for IdentifierSeqContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for IdentifierSeqContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_identifierSeq(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_identifierSeq(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for IdentifierSeqContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_identifierSeq(self);
	}
}

impl<'input> CustomRuleContext<'input> for IdentifierSeqContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_identifierSeq }
	//fn type_rule_index() -> usize where Self: Sized { RULE_identifierSeq }
}
antlr_rust::tid!{IdentifierSeqContextExt<'a>}

impl<'input> IdentifierSeqContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<IdentifierSeqContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,IdentifierSeqContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait IdentifierSeqContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<IdentifierSeqContextExt<'input>>{

fn identifier_all(&self) ->  Vec<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn identifier(&self, i: usize) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}

}

impl<'input> IdentifierSeqContextAttrs<'input> for IdentifierSeqContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn identifierSeq(&mut self,)
	-> Result<Rc<IdentifierSeqContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = IdentifierSeqContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 288, RULE_identifierSeq);
        let mut _localctx: Rc<IdentifierSeqContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			let mut _alt: isize;
			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			/*InvokeRule identifier*/
			recog.base.set_state(2946);
			recog.identifier()?;

			recog.base.set_state(2951);
			recog.err_handler.sync(&mut recog.base)?;
			_alt = recog.interpreter.adaptive_predict(403,&mut recog.base)?;
			while { _alt!=2 && _alt!=INVALID_ALT } {
				if _alt==1 {
					{
					{
					recog.base.set_state(2947);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule identifier*/
					recog.base.set_state(2948);
					recog.identifier()?;

					}
					} 
				}
				recog.base.set_state(2953);
				recog.err_handler.sync(&mut recog.base)?;
				_alt = recog.interpreter.adaptive_predict(403,&mut recog.base)?;
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- number ----------------
#[derive(Debug)]
pub enum NumberContextAll<'input>{
	DecimalLiteralContext(DecimalLiteralContext<'input>),
	DoubleLiteralContext(DoubleLiteralContext<'input>),
	IntegerLiteralContext(IntegerLiteralContext<'input>),
Error(NumberContext<'input>)
}
antlr_rust::tid!{NumberContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for NumberContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for NumberContextAll<'input>{}

impl<'input> Deref for NumberContextAll<'input>{
	type Target = dyn NumberContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use NumberContextAll::*;
		match self{
			DecimalLiteralContext(inner) => inner,
			DoubleLiteralContext(inner) => inner,
			IntegerLiteralContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for NumberContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for NumberContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type NumberContext<'input> = BaseParserRuleContext<'input,NumberContextExt<'input>>;

#[derive(Clone)]
pub struct NumberContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for NumberContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for NumberContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for NumberContext<'input>{
}

impl<'input> CustomRuleContext<'input> for NumberContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_number }
	//fn type_rule_index() -> usize where Self: Sized { RULE_number }
}
antlr_rust::tid!{NumberContextExt<'a>}

impl<'input> NumberContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<NumberContextAll<'input>> {
		Rc::new(
		NumberContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,NumberContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait NumberContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<NumberContextExt<'input>>{


}

impl<'input> NumberContextAttrs<'input> for NumberContext<'input>{}

pub type DecimalLiteralContext<'input> = BaseParserRuleContext<'input,DecimalLiteralContextExt<'input>>;

pub trait DecimalLiteralContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DECIMAL_VALUE
	/// Returns `None` if there is no child corresponding to token DECIMAL_VALUE
	fn DECIMAL_VALUE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DECIMAL_VALUE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token MINUS
	/// Returns `None` if there is no child corresponding to token MINUS
	fn MINUS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(MINUS, 0)
	}
}

impl<'input> DecimalLiteralContextAttrs<'input> for DecimalLiteralContext<'input>{}

pub struct DecimalLiteralContextExt<'input>{
	base:NumberContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DecimalLiteralContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DecimalLiteralContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DecimalLiteralContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_decimalLiteral(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_decimalLiteral(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DecimalLiteralContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_decimalLiteral(self);
	}
}

impl<'input> CustomRuleContext<'input> for DecimalLiteralContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_number }
	//fn type_rule_index() -> usize where Self: Sized { RULE_number }
}

impl<'input> Borrow<NumberContextExt<'input>> for DecimalLiteralContext<'input>{
	fn borrow(&self) -> &NumberContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<NumberContextExt<'input>> for DecimalLiteralContext<'input>{
	fn borrow_mut(&mut self) -> &mut NumberContextExt<'input> { &mut self.base }
}

impl<'input> NumberContextAttrs<'input> for DecimalLiteralContext<'input> {}

impl<'input> DecimalLiteralContextExt<'input>{
	fn new(ctx: &dyn NumberContextAttrs<'input>) -> Rc<NumberContextAll<'input>>  {
		Rc::new(
			NumberContextAll::DecimalLiteralContext(
				BaseParserRuleContext::copy_from(ctx,DecimalLiteralContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type DoubleLiteralContext<'input> = BaseParserRuleContext<'input,DoubleLiteralContextExt<'input>>;

pub trait DoubleLiteralContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token DOUBLE_VALUE
	/// Returns `None` if there is no child corresponding to token DOUBLE_VALUE
	fn DOUBLE_VALUE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(DOUBLE_VALUE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token MINUS
	/// Returns `None` if there is no child corresponding to token MINUS
	fn MINUS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(MINUS, 0)
	}
}

impl<'input> DoubleLiteralContextAttrs<'input> for DoubleLiteralContext<'input>{}

pub struct DoubleLiteralContextExt<'input>{
	base:NumberContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{DoubleLiteralContextExt<'a>}

impl<'input> TrinoParserContext<'input> for DoubleLiteralContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for DoubleLiteralContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_doubleLiteral(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_doubleLiteral(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for DoubleLiteralContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_doubleLiteral(self);
	}
}

impl<'input> CustomRuleContext<'input> for DoubleLiteralContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_number }
	//fn type_rule_index() -> usize where Self: Sized { RULE_number }
}

impl<'input> Borrow<NumberContextExt<'input>> for DoubleLiteralContext<'input>{
	fn borrow(&self) -> &NumberContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<NumberContextExt<'input>> for DoubleLiteralContext<'input>{
	fn borrow_mut(&mut self) -> &mut NumberContextExt<'input> { &mut self.base }
}

impl<'input> NumberContextAttrs<'input> for DoubleLiteralContext<'input> {}

impl<'input> DoubleLiteralContextExt<'input>{
	fn new(ctx: &dyn NumberContextAttrs<'input>) -> Rc<NumberContextAll<'input>>  {
		Rc::new(
			NumberContextAll::DoubleLiteralContext(
				BaseParserRuleContext::copy_from(ctx,DoubleLiteralContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type IntegerLiteralContext<'input> = BaseParserRuleContext<'input,IntegerLiteralContextExt<'input>>;

pub trait IntegerLiteralContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token INTEGER_VALUE
	/// Returns `None` if there is no child corresponding to token INTEGER_VALUE
	fn INTEGER_VALUE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(INTEGER_VALUE, 0)
	}
	/// Retrieves first TerminalNode corresponding to token MINUS
	/// Returns `None` if there is no child corresponding to token MINUS
	fn MINUS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(MINUS, 0)
	}
}

impl<'input> IntegerLiteralContextAttrs<'input> for IntegerLiteralContext<'input>{}

pub struct IntegerLiteralContextExt<'input>{
	base:NumberContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{IntegerLiteralContextExt<'a>}

impl<'input> TrinoParserContext<'input> for IntegerLiteralContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for IntegerLiteralContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_integerLiteral(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_integerLiteral(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for IntegerLiteralContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_integerLiteral(self);
	}
}

impl<'input> CustomRuleContext<'input> for IntegerLiteralContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_number }
	//fn type_rule_index() -> usize where Self: Sized { RULE_number }
}

impl<'input> Borrow<NumberContextExt<'input>> for IntegerLiteralContext<'input>{
	fn borrow(&self) -> &NumberContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<NumberContextExt<'input>> for IntegerLiteralContext<'input>{
	fn borrow_mut(&mut self) -> &mut NumberContextExt<'input> { &mut self.base }
}

impl<'input> NumberContextAttrs<'input> for IntegerLiteralContext<'input> {}

impl<'input> IntegerLiteralContextExt<'input>{
	fn new(ctx: &dyn NumberContextAttrs<'input>) -> Rc<NumberContextAll<'input>>  {
		Rc::new(
			NumberContextAll::IntegerLiteralContext(
				BaseParserRuleContext::copy_from(ctx,IntegerLiteralContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn number(&mut self,)
	-> Result<Rc<NumberContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = NumberContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 290, RULE_number);
        let mut _localctx: Rc<NumberContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(2966);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(407,&mut recog.base)? {
				1 =>{
					let tmp = DecimalLiteralContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					recog.base.set_state(2955);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==MINUS {
						{
						recog.base.set_state(2954);
						recog.base.match_token(MINUS,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(2957);
					recog.base.match_token(DECIMAL_VALUE,&mut recog.err_handler)?;

					}
				}
			,
				2 =>{
					let tmp = DoubleLiteralContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(2959);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==MINUS {
						{
						recog.base.set_state(2958);
						recog.base.match_token(MINUS,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(2961);
					recog.base.match_token(DOUBLE_VALUE,&mut recog.err_handler)?;

					}
				}
			,
				3 =>{
					let tmp = IntegerLiteralContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 3);
					_localctx = tmp;
					{
					recog.base.set_state(2963);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					if _la==MINUS {
						{
						recog.base.set_state(2962);
						recog.base.match_token(MINUS,&mut recog.err_handler)?;

						}
					}

					recog.base.set_state(2965);
					recog.base.match_token(INTEGER_VALUE,&mut recog.err_handler)?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- prestoShowFunctionType ----------------
#[derive(Debug)]
pub enum PrestoShowFunctionTypeContextAll<'input>{
	PrestoFunctionArgumentLambdaContext(PrestoFunctionArgumentLambdaContext<'input>),
	PrestoFunctionArgumentIntegerContext(PrestoFunctionArgumentIntegerContext<'input>),
	PrestoFunctionArgumentStructContext(PrestoFunctionArgumentStructContext<'input>),
	PrestoFunctionArgumentDefaultContext(PrestoFunctionArgumentDefaultContext<'input>),
	PrestoFunctionArgumentMapContext(PrestoFunctionArgumentMapContext<'input>),
	PrestoFunctionArgumentArrayContext(PrestoFunctionArgumentArrayContext<'input>),
Error(PrestoShowFunctionTypeContext<'input>)
}
antlr_rust::tid!{PrestoShowFunctionTypeContextAll<'a>}

impl<'input> antlr_rust::parser_rule_context::DerefSeal for PrestoShowFunctionTypeContextAll<'input>{}

impl<'input> TrinoParserContext<'input> for PrestoShowFunctionTypeContextAll<'input>{}

impl<'input> Deref for PrestoShowFunctionTypeContextAll<'input>{
	type Target = dyn PrestoShowFunctionTypeContextAttrs<'input> + 'input;
	fn deref(&self) -> &Self::Target{
		use PrestoShowFunctionTypeContextAll::*;
		match self{
			PrestoFunctionArgumentLambdaContext(inner) => inner,
			PrestoFunctionArgumentIntegerContext(inner) => inner,
			PrestoFunctionArgumentStructContext(inner) => inner,
			PrestoFunctionArgumentDefaultContext(inner) => inner,
			PrestoFunctionArgumentMapContext(inner) => inner,
			PrestoFunctionArgumentArrayContext(inner) => inner,
Error(inner) => inner
		}
	}
}
impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrestoShowFunctionTypeContextAll<'input>{
	fn accept(&self, visitor: &mut (dyn TrinoVisitor<'input> + 'a)) { self.deref().accept(visitor) }
}
impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrestoShowFunctionTypeContextAll<'input>{
    fn enter(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().enter(listener) }
    fn exit(&self, listener: &mut (dyn TrinoListener<'input> + 'a)) { self.deref().exit(listener) }
}



pub type PrestoShowFunctionTypeContext<'input> = BaseParserRuleContext<'input,PrestoShowFunctionTypeContextExt<'input>>;

#[derive(Clone)]
pub struct PrestoShowFunctionTypeContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PrestoShowFunctionTypeContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrestoShowFunctionTypeContext<'input>{
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrestoShowFunctionTypeContext<'input>{
}

impl<'input> CustomRuleContext<'input> for PrestoShowFunctionTypeContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_prestoShowFunctionType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_prestoShowFunctionType }
}
antlr_rust::tid!{PrestoShowFunctionTypeContextExt<'a>}

impl<'input> PrestoShowFunctionTypeContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PrestoShowFunctionTypeContextAll<'input>> {
		Rc::new(
		PrestoShowFunctionTypeContextAll::Error(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PrestoShowFunctionTypeContextExt{
				ph:PhantomData
			}),
		)
		)
	}
}

pub trait PrestoShowFunctionTypeContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PrestoShowFunctionTypeContextExt<'input>>{


}

impl<'input> PrestoShowFunctionTypeContextAttrs<'input> for PrestoShowFunctionTypeContext<'input>{}

pub type PrestoFunctionArgumentLambdaContext<'input> = BaseParserRuleContext<'input,PrestoFunctionArgumentLambdaContextExt<'input>>;

pub trait PrestoFunctionArgumentLambdaContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token FUNCTION
	/// Returns `None` if there is no child corresponding to token FUNCTION
	fn FUNCTION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(FUNCTION, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn prestoShowFunctionType_all(&self) ->  Vec<Rc<PrestoShowFunctionTypeContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn prestoShowFunctionType(&self, i: usize) -> Option<Rc<PrestoShowFunctionTypeContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> PrestoFunctionArgumentLambdaContextAttrs<'input> for PrestoFunctionArgumentLambdaContext<'input>{}

pub struct PrestoFunctionArgumentLambdaContextExt<'input>{
	base:PrestoShowFunctionTypeContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PrestoFunctionArgumentLambdaContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PrestoFunctionArgumentLambdaContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrestoFunctionArgumentLambdaContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_prestoFunctionArgumentLambda(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_prestoFunctionArgumentLambda(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrestoFunctionArgumentLambdaContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_prestoFunctionArgumentLambda(self);
	}
}

impl<'input> CustomRuleContext<'input> for PrestoFunctionArgumentLambdaContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_prestoShowFunctionType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_prestoShowFunctionType }
}

impl<'input> Borrow<PrestoShowFunctionTypeContextExt<'input>> for PrestoFunctionArgumentLambdaContext<'input>{
	fn borrow(&self) -> &PrestoShowFunctionTypeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrestoShowFunctionTypeContextExt<'input>> for PrestoFunctionArgumentLambdaContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrestoShowFunctionTypeContextExt<'input> { &mut self.base }
}

impl<'input> PrestoShowFunctionTypeContextAttrs<'input> for PrestoFunctionArgumentLambdaContext<'input> {}

impl<'input> PrestoFunctionArgumentLambdaContextExt<'input>{
	fn new(ctx: &dyn PrestoShowFunctionTypeContextAttrs<'input>) -> Rc<PrestoShowFunctionTypeContextAll<'input>>  {
		Rc::new(
			PrestoShowFunctionTypeContextAll::PrestoFunctionArgumentLambdaContext(
				BaseParserRuleContext::copy_from(ctx,PrestoFunctionArgumentLambdaContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type PrestoFunctionArgumentIntegerContext<'input> = BaseParserRuleContext<'input,PrestoFunctionArgumentIntegerContextExt<'input>>;

pub trait PrestoFunctionArgumentIntegerContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token INTEGER
	/// Returns `None` if there is no child corresponding to token INTEGER
	fn INTEGER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(INTEGER, 0)
	}
}

impl<'input> PrestoFunctionArgumentIntegerContextAttrs<'input> for PrestoFunctionArgumentIntegerContext<'input>{}

pub struct PrestoFunctionArgumentIntegerContextExt<'input>{
	base:PrestoShowFunctionTypeContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PrestoFunctionArgumentIntegerContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PrestoFunctionArgumentIntegerContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrestoFunctionArgumentIntegerContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_prestoFunctionArgumentInteger(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_prestoFunctionArgumentInteger(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrestoFunctionArgumentIntegerContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_prestoFunctionArgumentInteger(self);
	}
}

impl<'input> CustomRuleContext<'input> for PrestoFunctionArgumentIntegerContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_prestoShowFunctionType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_prestoShowFunctionType }
}

impl<'input> Borrow<PrestoShowFunctionTypeContextExt<'input>> for PrestoFunctionArgumentIntegerContext<'input>{
	fn borrow(&self) -> &PrestoShowFunctionTypeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrestoShowFunctionTypeContextExt<'input>> for PrestoFunctionArgumentIntegerContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrestoShowFunctionTypeContextExt<'input> { &mut self.base }
}

impl<'input> PrestoShowFunctionTypeContextAttrs<'input> for PrestoFunctionArgumentIntegerContext<'input> {}

impl<'input> PrestoFunctionArgumentIntegerContextExt<'input>{
	fn new(ctx: &dyn PrestoShowFunctionTypeContextAttrs<'input>) -> Rc<PrestoShowFunctionTypeContextAll<'input>>  {
		Rc::new(
			PrestoShowFunctionTypeContextAll::PrestoFunctionArgumentIntegerContext(
				BaseParserRuleContext::copy_from(ctx,PrestoFunctionArgumentIntegerContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type PrestoFunctionArgumentStructContext<'input> = BaseParserRuleContext<'input,PrestoFunctionArgumentStructContextExt<'input>>;

pub trait PrestoFunctionArgumentStructContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ROW
	/// Returns `None` if there is no child corresponding to token ROW
	fn ROW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ROW, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn prestoShowFunctionRowField_all(&self) ->  Vec<Rc<PrestoShowFunctionRowFieldContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn prestoShowFunctionRowField(&self, i: usize) -> Option<Rc<PrestoShowFunctionRowFieldContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
	fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
		self.children_of_type()
	}
	/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
	/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
	fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, i)
	}
}

impl<'input> PrestoFunctionArgumentStructContextAttrs<'input> for PrestoFunctionArgumentStructContext<'input>{}

pub struct PrestoFunctionArgumentStructContextExt<'input>{
	base:PrestoShowFunctionTypeContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PrestoFunctionArgumentStructContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PrestoFunctionArgumentStructContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrestoFunctionArgumentStructContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_prestoFunctionArgumentStruct(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_prestoFunctionArgumentStruct(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrestoFunctionArgumentStructContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_prestoFunctionArgumentStruct(self);
	}
}

impl<'input> CustomRuleContext<'input> for PrestoFunctionArgumentStructContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_prestoShowFunctionType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_prestoShowFunctionType }
}

impl<'input> Borrow<PrestoShowFunctionTypeContextExt<'input>> for PrestoFunctionArgumentStructContext<'input>{
	fn borrow(&self) -> &PrestoShowFunctionTypeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrestoShowFunctionTypeContextExt<'input>> for PrestoFunctionArgumentStructContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrestoShowFunctionTypeContextExt<'input> { &mut self.base }
}

impl<'input> PrestoShowFunctionTypeContextAttrs<'input> for PrestoFunctionArgumentStructContext<'input> {}

impl<'input> PrestoFunctionArgumentStructContextExt<'input>{
	fn new(ctx: &dyn PrestoShowFunctionTypeContextAttrs<'input>) -> Rc<PrestoShowFunctionTypeContextAll<'input>>  {
		Rc::new(
			PrestoShowFunctionTypeContextAll::PrestoFunctionArgumentStructContext(
				BaseParserRuleContext::copy_from(ctx,PrestoFunctionArgumentStructContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type PrestoFunctionArgumentDefaultContext<'input> = BaseParserRuleContext<'input,PrestoFunctionArgumentDefaultContextExt<'input>>;

pub trait PrestoFunctionArgumentDefaultContextAttrs<'input>: TrinoParserContext<'input>{
	fn type_(&self) -> Option<Rc<Type_ContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
}

impl<'input> PrestoFunctionArgumentDefaultContextAttrs<'input> for PrestoFunctionArgumentDefaultContext<'input>{}

pub struct PrestoFunctionArgumentDefaultContextExt<'input>{
	base:PrestoShowFunctionTypeContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PrestoFunctionArgumentDefaultContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PrestoFunctionArgumentDefaultContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrestoFunctionArgumentDefaultContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_prestoFunctionArgumentDefault(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_prestoFunctionArgumentDefault(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrestoFunctionArgumentDefaultContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_prestoFunctionArgumentDefault(self);
	}
}

impl<'input> CustomRuleContext<'input> for PrestoFunctionArgumentDefaultContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_prestoShowFunctionType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_prestoShowFunctionType }
}

impl<'input> Borrow<PrestoShowFunctionTypeContextExt<'input>> for PrestoFunctionArgumentDefaultContext<'input>{
	fn borrow(&self) -> &PrestoShowFunctionTypeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrestoShowFunctionTypeContextExt<'input>> for PrestoFunctionArgumentDefaultContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrestoShowFunctionTypeContextExt<'input> { &mut self.base }
}

impl<'input> PrestoShowFunctionTypeContextAttrs<'input> for PrestoFunctionArgumentDefaultContext<'input> {}

impl<'input> PrestoFunctionArgumentDefaultContextExt<'input>{
	fn new(ctx: &dyn PrestoShowFunctionTypeContextAttrs<'input>) -> Rc<PrestoShowFunctionTypeContextAll<'input>>  {
		Rc::new(
			PrestoShowFunctionTypeContextAll::PrestoFunctionArgumentDefaultContext(
				BaseParserRuleContext::copy_from(ctx,PrestoFunctionArgumentDefaultContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type PrestoFunctionArgumentMapContext<'input> = BaseParserRuleContext<'input,PrestoFunctionArgumentMapContextExt<'input>>;

pub trait PrestoFunctionArgumentMapContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token MAP
	/// Returns `None` if there is no child corresponding to token MAP
	fn MAP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(MAP, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	/// Retrieves first TerminalNode corresponding to token COMMA
	/// Returns `None` if there is no child corresponding to token COMMA
	fn COMMA(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(COMMA, 0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
	fn prestoShowFunctionType_all(&self) ->  Vec<Rc<PrestoShowFunctionTypeContextAll<'input>>> where Self:Sized{
		self.children_of_type()
	}
	fn prestoShowFunctionType(&self, i: usize) -> Option<Rc<PrestoShowFunctionTypeContextAll<'input>>> where Self:Sized{
		self.child_of_type(i)
	}
}

impl<'input> PrestoFunctionArgumentMapContextAttrs<'input> for PrestoFunctionArgumentMapContext<'input>{}

pub struct PrestoFunctionArgumentMapContextExt<'input>{
	base:PrestoShowFunctionTypeContextExt<'input>,
	pub key: Option<Rc<PrestoShowFunctionTypeContextAll<'input>>>,
	pub value: Option<Rc<PrestoShowFunctionTypeContextAll<'input>>>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PrestoFunctionArgumentMapContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PrestoFunctionArgumentMapContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrestoFunctionArgumentMapContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_prestoFunctionArgumentMap(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_prestoFunctionArgumentMap(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrestoFunctionArgumentMapContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_prestoFunctionArgumentMap(self);
	}
}

impl<'input> CustomRuleContext<'input> for PrestoFunctionArgumentMapContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_prestoShowFunctionType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_prestoShowFunctionType }
}

impl<'input> Borrow<PrestoShowFunctionTypeContextExt<'input>> for PrestoFunctionArgumentMapContext<'input>{
	fn borrow(&self) -> &PrestoShowFunctionTypeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrestoShowFunctionTypeContextExt<'input>> for PrestoFunctionArgumentMapContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrestoShowFunctionTypeContextExt<'input> { &mut self.base }
}

impl<'input> PrestoShowFunctionTypeContextAttrs<'input> for PrestoFunctionArgumentMapContext<'input> {}

impl<'input> PrestoFunctionArgumentMapContextExt<'input>{
	fn new(ctx: &dyn PrestoShowFunctionTypeContextAttrs<'input>) -> Rc<PrestoShowFunctionTypeContextAll<'input>>  {
		Rc::new(
			PrestoShowFunctionTypeContextAll::PrestoFunctionArgumentMapContext(
				BaseParserRuleContext::copy_from(ctx,PrestoFunctionArgumentMapContextExt{
        			key:None, value:None, 
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

pub type PrestoFunctionArgumentArrayContext<'input> = BaseParserRuleContext<'input,PrestoFunctionArgumentArrayContextExt<'input>>;

pub trait PrestoFunctionArgumentArrayContextAttrs<'input>: TrinoParserContext<'input>{
	/// Retrieves first TerminalNode corresponding to token ARRAY
	/// Returns `None` if there is no child corresponding to token ARRAY
	fn ARRAY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(ARRAY, 0)
	}
	/// Retrieves first TerminalNode corresponding to token LPAREN
	/// Returns `None` if there is no child corresponding to token LPAREN
	fn LPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(LPAREN, 0)
	}
	fn prestoShowFunctionType(&self) -> Option<Rc<PrestoShowFunctionTypeContextAll<'input>>> where Self:Sized{
		self.child_of_type(0)
	}
	/// Retrieves first TerminalNode corresponding to token RPAREN
	/// Returns `None` if there is no child corresponding to token RPAREN
	fn RPAREN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
		self.get_token(RPAREN, 0)
	}
}

impl<'input> PrestoFunctionArgumentArrayContextAttrs<'input> for PrestoFunctionArgumentArrayContext<'input>{}

pub struct PrestoFunctionArgumentArrayContextExt<'input>{
	base:PrestoShowFunctionTypeContextExt<'input>,
	ph:PhantomData<&'input str>
}

antlr_rust::tid!{PrestoFunctionArgumentArrayContextExt<'a>}

impl<'input> TrinoParserContext<'input> for PrestoFunctionArgumentArrayContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrestoFunctionArgumentArrayContext<'input>{
	fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.enter_every_rule(self);
		listener.enter_prestoFunctionArgumentArray(self);
	}
	fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
		listener.exit_prestoFunctionArgumentArray(self);
		listener.exit_every_rule(self);
	}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrestoFunctionArgumentArrayContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_prestoFunctionArgumentArray(self);
	}
}

impl<'input> CustomRuleContext<'input> for PrestoFunctionArgumentArrayContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_prestoShowFunctionType }
	//fn type_rule_index() -> usize where Self: Sized { RULE_prestoShowFunctionType }
}

impl<'input> Borrow<PrestoShowFunctionTypeContextExt<'input>> for PrestoFunctionArgumentArrayContext<'input>{
	fn borrow(&self) -> &PrestoShowFunctionTypeContextExt<'input> { &self.base }
}
impl<'input> BorrowMut<PrestoShowFunctionTypeContextExt<'input>> for PrestoFunctionArgumentArrayContext<'input>{
	fn borrow_mut(&mut self) -> &mut PrestoShowFunctionTypeContextExt<'input> { &mut self.base }
}

impl<'input> PrestoShowFunctionTypeContextAttrs<'input> for PrestoFunctionArgumentArrayContext<'input> {}

impl<'input> PrestoFunctionArgumentArrayContextExt<'input>{
	fn new(ctx: &dyn PrestoShowFunctionTypeContextAttrs<'input>) -> Rc<PrestoShowFunctionTypeContextAll<'input>>  {
		Rc::new(
			PrestoShowFunctionTypeContextAll::PrestoFunctionArgumentArrayContext(
				BaseParserRuleContext::copy_from(ctx,PrestoFunctionArgumentArrayContextExt{
        			base: ctx.borrow().clone(),
        			ph:PhantomData
				})
			)
		)
	}
}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn prestoShowFunctionType(&mut self,)
	-> Result<Rc<PrestoShowFunctionTypeContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PrestoShowFunctionTypeContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 292, RULE_prestoShowFunctionType);
        let mut _localctx: Rc<PrestoShowFunctionTypeContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(3006);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(410,&mut recog.base)? {
				1 =>{
					let tmp = PrestoFunctionArgumentStructContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 1);
					_localctx = tmp;
					{
					recog.base.set_state(2968);
					recog.base.match_token(ROW,&mut recog.err_handler)?;

					recog.base.set_state(2969);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule prestoShowFunctionRowField*/
					recog.base.set_state(2970);
					recog.prestoShowFunctionRowField()?;

					recog.base.set_state(2975);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while _la==COMMA {
						{
						{
						recog.base.set_state(2971);
						recog.base.match_token(COMMA,&mut recog.err_handler)?;

						/*InvokeRule prestoShowFunctionRowField*/
						recog.base.set_state(2972);
						recog.prestoShowFunctionRowField()?;

						}
						}
						recog.base.set_state(2977);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					recog.base.set_state(2978);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				2 =>{
					let tmp = PrestoFunctionArgumentMapContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 2);
					_localctx = tmp;
					{
					recog.base.set_state(2980);
					recog.base.match_token(MAP,&mut recog.err_handler)?;

					recog.base.set_state(2981);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule prestoShowFunctionType*/
					recog.base.set_state(2982);
					let tmp = recog.prestoShowFunctionType()?;
					if let PrestoShowFunctionTypeContextAll::PrestoFunctionArgumentMapContext(ctx) = cast_mut::<_,PrestoShowFunctionTypeContextAll >(&mut _localctx){
					ctx.key = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(2983);
					recog.base.match_token(COMMA,&mut recog.err_handler)?;

					/*InvokeRule prestoShowFunctionType*/
					recog.base.set_state(2984);
					let tmp = recog.prestoShowFunctionType()?;
					if let PrestoShowFunctionTypeContextAll::PrestoFunctionArgumentMapContext(ctx) = cast_mut::<_,PrestoShowFunctionTypeContextAll >(&mut _localctx){
					ctx.value = Some(tmp.clone()); } else {unreachable!("cant cast");}  

					recog.base.set_state(2985);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				3 =>{
					let tmp = PrestoFunctionArgumentArrayContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 3);
					_localctx = tmp;
					{
					recog.base.set_state(2987);
					recog.base.match_token(ARRAY,&mut recog.err_handler)?;

					recog.base.set_state(2988);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule prestoShowFunctionType*/
					recog.base.set_state(2989);
					recog.prestoShowFunctionType()?;

					recog.base.set_state(2990);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				4 =>{
					let tmp = PrestoFunctionArgumentLambdaContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 4);
					_localctx = tmp;
					{
					recog.base.set_state(2992);
					recog.base.match_token(FUNCTION,&mut recog.err_handler)?;

					recog.base.set_state(2993);
					recog.base.match_token(LPAREN,&mut recog.err_handler)?;

					/*InvokeRule prestoShowFunctionType*/
					recog.base.set_state(2994);
					recog.prestoShowFunctionType()?;

					recog.base.set_state(2999);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while _la==COMMA {
						{
						{
						recog.base.set_state(2995);
						recog.base.match_token(COMMA,&mut recog.err_handler)?;

						/*InvokeRule prestoShowFunctionType*/
						recog.base.set_state(2996);
						recog.prestoShowFunctionType()?;

						}
						}
						recog.base.set_state(3001);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					recog.base.set_state(3002);
					recog.base.match_token(RPAREN,&mut recog.err_handler)?;

					}
				}
			,
				5 =>{
					let tmp = PrestoFunctionArgumentIntegerContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 5);
					_localctx = tmp;
					{
					recog.base.set_state(3004);
					recog.base.match_token(INTEGER,&mut recog.err_handler)?;

					}
				}
			,
				6 =>{
					let tmp = PrestoFunctionArgumentDefaultContextExt::new(&**_localctx);
					recog.base.enter_outer_alt(Some(tmp.clone()), 6);
					_localctx = tmp;
					{
					/*InvokeRule type_*/
					recog.base.set_state(3005);
					recog.type_()?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- prestoShowFunctionRowField ----------------
pub type PrestoShowFunctionRowFieldContextAll<'input> = PrestoShowFunctionRowFieldContext<'input>;


pub type PrestoShowFunctionRowFieldContext<'input> = BaseParserRuleContext<'input,PrestoShowFunctionRowFieldContextExt<'input>>;

#[derive(Clone)]
pub struct PrestoShowFunctionRowFieldContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PrestoShowFunctionRowFieldContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrestoShowFunctionRowFieldContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_prestoShowFunctionRowField(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_prestoShowFunctionRowField(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrestoShowFunctionRowFieldContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_prestoShowFunctionRowField(self);
	}
}

impl<'input> CustomRuleContext<'input> for PrestoShowFunctionRowFieldContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_prestoShowFunctionRowField }
	//fn type_rule_index() -> usize where Self: Sized { RULE_prestoShowFunctionRowField }
}
antlr_rust::tid!{PrestoShowFunctionRowFieldContextExt<'a>}

impl<'input> PrestoShowFunctionRowFieldContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PrestoShowFunctionRowFieldContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PrestoShowFunctionRowFieldContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait PrestoShowFunctionRowFieldContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PrestoShowFunctionRowFieldContextExt<'input>>{

fn prestoShowFunctionType(&self) -> Option<Rc<PrestoShowFunctionTypeContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}
fn identifier(&self) -> Option<Rc<IdentifierContextAll<'input>>> where Self:Sized{
	self.child_of_type(0)
}

}

impl<'input> PrestoShowFunctionRowFieldContextAttrs<'input> for PrestoShowFunctionRowFieldContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn prestoShowFunctionRowField(&mut self,)
	-> Result<Rc<PrestoShowFunctionRowFieldContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PrestoShowFunctionRowFieldContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 294, RULE_prestoShowFunctionRowField);
        let mut _localctx: Rc<PrestoShowFunctionRowFieldContextAll> = _localctx;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(3012);
			recog.err_handler.sync(&mut recog.base)?;
			match  recog.interpreter.adaptive_predict(411,&mut recog.base)? {
				1 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					/*InvokeRule prestoShowFunctionType*/
					recog.base.set_state(3008);
					recog.prestoShowFunctionType()?;

					}
				}
			,
				2 =>{
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					/*InvokeRule identifier*/
					recog.base.set_state(3009);
					recog.identifier()?;

					/*InvokeRule prestoShowFunctionType*/
					recog.base.set_state(3010);
					recog.prestoShowFunctionType()?;

					}
				}

				_ => {}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- prestoShowFunctionTypes ----------------
pub type PrestoShowFunctionTypesContextAll<'input> = PrestoShowFunctionTypesContext<'input>;


pub type PrestoShowFunctionTypesContext<'input> = BaseParserRuleContext<'input,PrestoShowFunctionTypesContextExt<'input>>;

#[derive(Clone)]
pub struct PrestoShowFunctionTypesContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for PrestoShowFunctionTypesContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for PrestoShowFunctionTypesContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_prestoShowFunctionTypes(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_prestoShowFunctionTypes(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for PrestoShowFunctionTypesContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_prestoShowFunctionTypes(self);
	}
}

impl<'input> CustomRuleContext<'input> for PrestoShowFunctionTypesContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_prestoShowFunctionTypes }
	//fn type_rule_index() -> usize where Self: Sized { RULE_prestoShowFunctionTypes }
}
antlr_rust::tid!{PrestoShowFunctionTypesContextExt<'a>}

impl<'input> PrestoShowFunctionTypesContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<PrestoShowFunctionTypesContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,PrestoShowFunctionTypesContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait PrestoShowFunctionTypesContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<PrestoShowFunctionTypesContextExt<'input>>{

fn prestoShowFunctionType_all(&self) ->  Vec<Rc<PrestoShowFunctionTypeContextAll<'input>>> where Self:Sized{
	self.children_of_type()
}
fn prestoShowFunctionType(&self, i: usize) -> Option<Rc<PrestoShowFunctionTypeContextAll<'input>>> where Self:Sized{
	self.child_of_type(i)
}
/// Retrieves all `TerminalNode`s corresponding to token COMMA in current rule
fn COMMA_all(&self) -> Vec<Rc<TerminalNode<'input,TrinoParserContextType>>>  where Self:Sized{
	self.children_of_type()
}
/// Retrieves 'i's TerminalNode corresponding to token COMMA, starting from 0.
/// Returns `None` if number of children corresponding to token COMMA is less or equal than `i`.
fn COMMA(&self, i: usize) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMA, i)
}
/// Retrieves first TerminalNode corresponding to token EOF
/// Returns `None` if there is no child corresponding to token EOF
fn EOF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EOF, 0)
}

}

impl<'input> PrestoShowFunctionTypesContextAttrs<'input> for PrestoShowFunctionTypesContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn prestoShowFunctionTypes(&mut self,)
	-> Result<Rc<PrestoShowFunctionTypesContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = PrestoShowFunctionTypesContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 296, RULE_prestoShowFunctionTypes);
        let mut _localctx: Rc<PrestoShowFunctionTypesContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			recog.base.set_state(3023);
			recog.err_handler.sync(&mut recog.base)?;
			match recog.base.input.la(1) {
			 ABORT | ABSENT | ADD | ADMIN | AFTER | ALL | ANALYZE | ANTI | ANY | ARRAY |
			 ASC | AT | ATTACH | AUTHORIZATION | BEGIN | BERNOULLI | BOTH | BZIP2 |
			 CALL | CANCEL | CASCADE | CATALOGS | CHARACTER | CLONE | CLOSE | CLUSTER |
			 COLUMN | COLUMNS | COMMENT | COMMIT | COMMITTED | COMPRESSION | CONDITIONAL |
			 CONNECTION | COPARTITION | COPY | COUNT | CURRENT | DATA | DATABASE |
			 DATASHARE | DATE | DAY | DAYS | DECLARE | DEFAULT | DEFINE | DEFINER |
			 DELIMITER | DENY | DESC | DESCRIBE | DESCRIPTOR | DISTRIBUTED | DETACH |
			 DOUBLE | EMPTY | ENCODING | END | ERROR | EXCLUDING | EXECUTE | EXPLAIN |
			 EXTERNAL | FETCH | FILTER | FINAL | FIRST | FOLLOWING | FORMAT | FUNCTION |
			 FUNCTIONS | GRACE | GRANT | GRANTED | GRANTS | GRAPHVIZ | GROUPS | GZIP |
			 HOUR | HOURS | IF | IGNORE | INCLUDING | INITIAL | INPUT | INTEGER |
			 INTERVAL | INVOKER | IO | ISOLATION | JSON | KEEP | KEY | KEYS | LAMBDA |
			 LAST | LATERAL | LEADING | LEVEL | LIBRARY | LIMIT | LOCAL | LOCATION |
			 LOCK | LOGICAL | M | MAP | MASKING | MATCH | MATCHED | MATCHES | MATCH_RECOGNIZE |
			 MATERIALIZED | MAX | MEASURES | MERGE | MIN | MINUS_KW | MINUTE | MINUTES |
			 MODEL | MONTH | MONTHS | NEXT | NFC | NFD | NFKC | NFKD | NO | NONE |
			 NULL | NULLS | OBJECT | OF | OFFSET | OMIT | ONE | ONLY | OPTION | ORDINALITY |
			 OUTPUT | OVER | OVERFLOW | PARTITION | PARTITIONS | PASSING | PAST |
			 PATH | PATTERN | PER | PERIOD | PERMUTE | POSITION | PRECEDING | PRECISION |
			 PROCEDURE | PRIVILEGES | PROPERTIES | PRUNE | QUOTES | RANGE | READ |
			 REFRESH | RENAME | REPEATABLE | REPLACE | RESET | RESPECT | RESTRICT |
			 RETURNING | REVOKE | RLS | ROLE | ROLES | ROLLBACK | ROLLUP | ROW | ROWS |
			 RUNNING | S | SCALAR | SEC | SECOND | SECONDS | SCHEMA | SCHEMAS | SECURITY |
			 SEEK | SEMI | SERIALIZABLE | SESSION | SET | SETS | SHOW | SNAPSHOT |
			 SOME | START | STATS | STRUCT | SUBSET | SUBSTRING | SYSTEM | SYSTEM_TIME |
			 TABLES | TABLESAMPLE | TEMP | TEMPORARY | TEXT | STRING_KW | TIES | TIME |
			 TIMESTAMP | TO | TRAILING | TRANSACTION | TRUNCATE | TRY_CAST | TUPLE |
			 TYPE | UNBOUNDED | UNCOMMITTED | UNCONDITIONAL | UNIQUE | UNKNOWN | UNLOAD |
			 UNMATCHED | UPDATE | USE | USER | UTF16 | UTF32 | UTF8 | VACUUM | VALIDATE |
			 VALUE | VARYING | VERBOSE | VERSION | VIEW | WEEK | WINDOW | WITHIN |
			 WITHOUT | WORK | WRAPPER | WRITE | XZ | YEAR | YEARS | ZONE | ZSTD |
			 DOLLAR | IDENTIFIER | QUOTED_IDENTIFIER 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 1);
					recog.base.enter_outer_alt(None, 1);
					{
					/*InvokeRule prestoShowFunctionType*/
					recog.base.set_state(3014);
					recog.prestoShowFunctionType()?;

					recog.base.set_state(3019);
					recog.err_handler.sync(&mut recog.base)?;
					_la = recog.base.input.la(1);
					while _la==COMMA {
						{
						{
						recog.base.set_state(3015);
						recog.base.match_token(COMMA,&mut recog.err_handler)?;

						/*InvokeRule prestoShowFunctionType*/
						recog.base.set_state(3016);
						recog.prestoShowFunctionType()?;

						}
						}
						recog.base.set_state(3021);
						recog.err_handler.sync(&mut recog.base)?;
						_la = recog.base.input.la(1);
					}
					}
				}

			 EOF 
				=> {
					//recog.base.enter_outer_alt(_localctx.clone(), 2);
					recog.base.enter_outer_alt(None, 2);
					{
					recog.base.set_state(3022);
					recog.base.match_token(EOF,&mut recog.err_handler)?;

					}
				}

				_ => Err(ANTLRError::NoAltError(NoViableAltError::new(&mut recog.base)))?
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}
//------------------- nonReserved ----------------
pub type NonReservedContextAll<'input> = NonReservedContext<'input>;


pub type NonReservedContext<'input> = BaseParserRuleContext<'input,NonReservedContextExt<'input>>;

#[derive(Clone)]
pub struct NonReservedContextExt<'input>{
ph:PhantomData<&'input str>
}

impl<'input> TrinoParserContext<'input> for NonReservedContext<'input>{}

impl<'input,'a> Listenable<dyn TrinoListener<'input> + 'a> for NonReservedContext<'input>{
		fn enter(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.enter_every_rule(self);
			listener.enter_nonReserved(self);
		}
		fn exit(&self,listener: &mut (dyn TrinoListener<'input> + 'a)) {
			listener.exit_nonReserved(self);
			listener.exit_every_rule(self);
		}
}

impl<'input,'a> Visitable<dyn TrinoVisitor<'input> + 'a> for NonReservedContext<'input>{
	fn accept(&self,visitor: &mut (dyn TrinoVisitor<'input> + 'a)) {
		visitor.visit_nonReserved(self);
	}
}

impl<'input> CustomRuleContext<'input> for NonReservedContextExt<'input>{
	type TF = LocalTokenFactory<'input>;
	type Ctx = TrinoParserContextType;
	fn get_rule_index(&self) -> usize { RULE_nonReserved }
	//fn type_rule_index() -> usize where Self: Sized { RULE_nonReserved }
}
antlr_rust::tid!{NonReservedContextExt<'a>}

impl<'input> NonReservedContextExt<'input>{
	fn new(parent: Option<Rc<dyn TrinoParserContext<'input> + 'input > >, invoking_state: isize) -> Rc<NonReservedContextAll<'input>> {
		Rc::new(
			BaseParserRuleContext::new_parser_ctx(parent, invoking_state,NonReservedContextExt{
				ph:PhantomData
			}),
		)
	}
}

pub trait NonReservedContextAttrs<'input>: TrinoParserContext<'input> + BorrowMut<NonReservedContextExt<'input>>{

/// Retrieves first TerminalNode corresponding to token ABORT
/// Returns `None` if there is no child corresponding to token ABORT
fn ABORT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ABORT, 0)
}
/// Retrieves first TerminalNode corresponding to token ABSENT
/// Returns `None` if there is no child corresponding to token ABSENT
fn ABSENT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ABSENT, 0)
}
/// Retrieves first TerminalNode corresponding to token ADD
/// Returns `None` if there is no child corresponding to token ADD
fn ADD(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ADD, 0)
}
/// Retrieves first TerminalNode corresponding to token ADMIN
/// Returns `None` if there is no child corresponding to token ADMIN
fn ADMIN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ADMIN, 0)
}
/// Retrieves first TerminalNode corresponding to token AFTER
/// Returns `None` if there is no child corresponding to token AFTER
fn AFTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(AFTER, 0)
}
/// Retrieves first TerminalNode corresponding to token ALL
/// Returns `None` if there is no child corresponding to token ALL
fn ALL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ALL, 0)
}
/// Retrieves first TerminalNode corresponding to token ANALYZE
/// Returns `None` if there is no child corresponding to token ANALYZE
fn ANALYZE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ANALYZE, 0)
}
/// Retrieves first TerminalNode corresponding to token ANTI
/// Returns `None` if there is no child corresponding to token ANTI
fn ANTI(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ANTI, 0)
}
/// Retrieves first TerminalNode corresponding to token ANY
/// Returns `None` if there is no child corresponding to token ANY
fn ANY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ANY, 0)
}
/// Retrieves first TerminalNode corresponding to token ARRAY
/// Returns `None` if there is no child corresponding to token ARRAY
fn ARRAY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ARRAY, 0)
}
/// Retrieves first TerminalNode corresponding to token ASC
/// Returns `None` if there is no child corresponding to token ASC
fn ASC(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ASC, 0)
}
/// Retrieves first TerminalNode corresponding to token AT
/// Returns `None` if there is no child corresponding to token AT
fn AT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(AT, 0)
}
/// Retrieves first TerminalNode corresponding to token ATTACH
/// Returns `None` if there is no child corresponding to token ATTACH
fn ATTACH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ATTACH, 0)
}
/// Retrieves first TerminalNode corresponding to token AUTHORIZATION
/// Returns `None` if there is no child corresponding to token AUTHORIZATION
fn AUTHORIZATION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(AUTHORIZATION, 0)
}
/// Retrieves first TerminalNode corresponding to token BEGIN
/// Returns `None` if there is no child corresponding to token BEGIN
fn BEGIN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(BEGIN, 0)
}
/// Retrieves first TerminalNode corresponding to token BERNOULLI
/// Returns `None` if there is no child corresponding to token BERNOULLI
fn BERNOULLI(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(BERNOULLI, 0)
}
/// Retrieves first TerminalNode corresponding to token BOTH
/// Returns `None` if there is no child corresponding to token BOTH
fn BOTH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(BOTH, 0)
}
/// Retrieves first TerminalNode corresponding to token BZIP2
/// Returns `None` if there is no child corresponding to token BZIP2
fn BZIP2(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(BZIP2, 0)
}
/// Retrieves first TerminalNode corresponding to token CALL
/// Returns `None` if there is no child corresponding to token CALL
fn CALL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(CALL, 0)
}
/// Retrieves first TerminalNode corresponding to token CANCEL
/// Returns `None` if there is no child corresponding to token CANCEL
fn CANCEL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(CANCEL, 0)
}
/// Retrieves first TerminalNode corresponding to token CASCADE
/// Returns `None` if there is no child corresponding to token CASCADE
fn CASCADE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(CASCADE, 0)
}
/// Retrieves first TerminalNode corresponding to token CATALOGS
/// Returns `None` if there is no child corresponding to token CATALOGS
fn CATALOGS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(CATALOGS, 0)
}
/// Retrieves first TerminalNode corresponding to token CHARACTER
/// Returns `None` if there is no child corresponding to token CHARACTER
fn CHARACTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(CHARACTER, 0)
}
/// Retrieves first TerminalNode corresponding to token CLONE
/// Returns `None` if there is no child corresponding to token CLONE
fn CLONE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(CLONE, 0)
}
/// Retrieves first TerminalNode corresponding to token CLOSE
/// Returns `None` if there is no child corresponding to token CLOSE
fn CLOSE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(CLOSE, 0)
}
/// Retrieves first TerminalNode corresponding to token CLUSTER
/// Returns `None` if there is no child corresponding to token CLUSTER
fn CLUSTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(CLUSTER, 0)
}
/// Retrieves first TerminalNode corresponding to token COLUMN
/// Returns `None` if there is no child corresponding to token COLUMN
fn COLUMN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COLUMN, 0)
}
/// Retrieves first TerminalNode corresponding to token COLUMNS
/// Returns `None` if there is no child corresponding to token COLUMNS
fn COLUMNS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COLUMNS, 0)
}
/// Retrieves first TerminalNode corresponding to token COMMENT
/// Returns `None` if there is no child corresponding to token COMMENT
fn COMMENT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMENT, 0)
}
/// Retrieves first TerminalNode corresponding to token COMMIT
/// Returns `None` if there is no child corresponding to token COMMIT
fn COMMIT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMIT, 0)
}
/// Retrieves first TerminalNode corresponding to token COMMITTED
/// Returns `None` if there is no child corresponding to token COMMITTED
fn COMMITTED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMMITTED, 0)
}
/// Retrieves first TerminalNode corresponding to token COMPRESSION
/// Returns `None` if there is no child corresponding to token COMPRESSION
fn COMPRESSION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COMPRESSION, 0)
}
/// Retrieves first TerminalNode corresponding to token CONDITIONAL
/// Returns `None` if there is no child corresponding to token CONDITIONAL
fn CONDITIONAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(CONDITIONAL, 0)
}
/// Retrieves first TerminalNode corresponding to token CONNECTION
/// Returns `None` if there is no child corresponding to token CONNECTION
fn CONNECTION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(CONNECTION, 0)
}
/// Retrieves first TerminalNode corresponding to token COPARTITION
/// Returns `None` if there is no child corresponding to token COPARTITION
fn COPARTITION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COPARTITION, 0)
}
/// Retrieves first TerminalNode corresponding to token COPY
/// Returns `None` if there is no child corresponding to token COPY
fn COPY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COPY, 0)
}
/// Retrieves first TerminalNode corresponding to token COUNT
/// Returns `None` if there is no child corresponding to token COUNT
fn COUNT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(COUNT, 0)
}
/// Retrieves first TerminalNode corresponding to token CURRENT
/// Returns `None` if there is no child corresponding to token CURRENT
fn CURRENT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(CURRENT, 0)
}
/// Retrieves first TerminalNode corresponding to token DATA
/// Returns `None` if there is no child corresponding to token DATA
fn DATA(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DATA, 0)
}
/// Retrieves first TerminalNode corresponding to token DATABASE
/// Returns `None` if there is no child corresponding to token DATABASE
fn DATABASE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DATABASE, 0)
}
/// Retrieves first TerminalNode corresponding to token DATASHARE
/// Returns `None` if there is no child corresponding to token DATASHARE
fn DATASHARE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DATASHARE, 0)
}
/// Retrieves first TerminalNode corresponding to token DATE
/// Returns `None` if there is no child corresponding to token DATE
fn DATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DATE, 0)
}
/// Retrieves first TerminalNode corresponding to token DAY
/// Returns `None` if there is no child corresponding to token DAY
fn DAY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DAY, 0)
}
/// Retrieves first TerminalNode corresponding to token DAYS
/// Returns `None` if there is no child corresponding to token DAYS
fn DAYS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DAYS, 0)
}
/// Retrieves first TerminalNode corresponding to token DECLARE
/// Returns `None` if there is no child corresponding to token DECLARE
fn DECLARE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DECLARE, 0)
}
/// Retrieves first TerminalNode corresponding to token DEFAULT
/// Returns `None` if there is no child corresponding to token DEFAULT
fn DEFAULT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DEFAULT, 0)
}
/// Retrieves first TerminalNode corresponding to token DEFINE
/// Returns `None` if there is no child corresponding to token DEFINE
fn DEFINE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DEFINE, 0)
}
/// Retrieves first TerminalNode corresponding to token DEFINER
/// Returns `None` if there is no child corresponding to token DEFINER
fn DEFINER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DEFINER, 0)
}
/// Retrieves first TerminalNode corresponding to token DELIMITER
/// Returns `None` if there is no child corresponding to token DELIMITER
fn DELIMITER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DELIMITER, 0)
}
/// Retrieves first TerminalNode corresponding to token DENY
/// Returns `None` if there is no child corresponding to token DENY
fn DENY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DENY, 0)
}
/// Retrieves first TerminalNode corresponding to token DESC
/// Returns `None` if there is no child corresponding to token DESC
fn DESC(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DESC, 0)
}
/// Retrieves first TerminalNode corresponding to token DESCRIBE
/// Returns `None` if there is no child corresponding to token DESCRIBE
fn DESCRIBE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DESCRIBE, 0)
}
/// Retrieves first TerminalNode corresponding to token DESCRIPTOR
/// Returns `None` if there is no child corresponding to token DESCRIPTOR
fn DESCRIPTOR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DESCRIPTOR, 0)
}
/// Retrieves first TerminalNode corresponding to token DETACH
/// Returns `None` if there is no child corresponding to token DETACH
fn DETACH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DETACH, 0)
}
/// Retrieves first TerminalNode corresponding to token DISTRIBUTED
/// Returns `None` if there is no child corresponding to token DISTRIBUTED
fn DISTRIBUTED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DISTRIBUTED, 0)
}
/// Retrieves first TerminalNode corresponding to token DOUBLE
/// Returns `None` if there is no child corresponding to token DOUBLE
fn DOUBLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(DOUBLE, 0)
}
/// Retrieves first TerminalNode corresponding to token EMPTY
/// Returns `None` if there is no child corresponding to token EMPTY
fn EMPTY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EMPTY, 0)
}
/// Retrieves first TerminalNode corresponding to token ENCODING
/// Returns `None` if there is no child corresponding to token ENCODING
fn ENCODING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ENCODING, 0)
}
/// Retrieves first TerminalNode corresponding to token END
/// Returns `None` if there is no child corresponding to token END
fn END(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(END, 0)
}
/// Retrieves first TerminalNode corresponding to token ERROR
/// Returns `None` if there is no child corresponding to token ERROR
fn ERROR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ERROR, 0)
}
/// Retrieves first TerminalNode corresponding to token EXCLUDING
/// Returns `None` if there is no child corresponding to token EXCLUDING
fn EXCLUDING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EXCLUDING, 0)
}
/// Retrieves first TerminalNode corresponding to token EXECUTE
/// Returns `None` if there is no child corresponding to token EXECUTE
fn EXECUTE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EXECUTE, 0)
}
/// Retrieves first TerminalNode corresponding to token EXPLAIN
/// Returns `None` if there is no child corresponding to token EXPLAIN
fn EXPLAIN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EXPLAIN, 0)
}
/// Retrieves first TerminalNode corresponding to token EXTERNAL
/// Returns `None` if there is no child corresponding to token EXTERNAL
fn EXTERNAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(EXTERNAL, 0)
}
/// Retrieves first TerminalNode corresponding to token FETCH
/// Returns `None` if there is no child corresponding to token FETCH
fn FETCH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FETCH, 0)
}
/// Retrieves first TerminalNode corresponding to token FILTER
/// Returns `None` if there is no child corresponding to token FILTER
fn FILTER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FILTER, 0)
}
/// Retrieves first TerminalNode corresponding to token FINAL
/// Returns `None` if there is no child corresponding to token FINAL
fn FINAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FINAL, 0)
}
/// Retrieves first TerminalNode corresponding to token FIRST
/// Returns `None` if there is no child corresponding to token FIRST
fn FIRST(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FIRST, 0)
}
/// Retrieves first TerminalNode corresponding to token FOLLOWING
/// Returns `None` if there is no child corresponding to token FOLLOWING
fn FOLLOWING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FOLLOWING, 0)
}
/// Retrieves first TerminalNode corresponding to token FORMAT
/// Returns `None` if there is no child corresponding to token FORMAT
fn FORMAT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FORMAT, 0)
}
/// Retrieves first TerminalNode corresponding to token FUNCTIONS
/// Returns `None` if there is no child corresponding to token FUNCTIONS
fn FUNCTIONS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(FUNCTIONS, 0)
}
/// Retrieves first TerminalNode corresponding to token GRACE
/// Returns `None` if there is no child corresponding to token GRACE
fn GRACE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(GRACE, 0)
}
/// Retrieves first TerminalNode corresponding to token GRANT
/// Returns `None` if there is no child corresponding to token GRANT
fn GRANT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(GRANT, 0)
}
/// Retrieves first TerminalNode corresponding to token GRANTED
/// Returns `None` if there is no child corresponding to token GRANTED
fn GRANTED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(GRANTED, 0)
}
/// Retrieves first TerminalNode corresponding to token GRANTS
/// Returns `None` if there is no child corresponding to token GRANTS
fn GRANTS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(GRANTS, 0)
}
/// Retrieves first TerminalNode corresponding to token GRAPHVIZ
/// Returns `None` if there is no child corresponding to token GRAPHVIZ
fn GRAPHVIZ(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(GRAPHVIZ, 0)
}
/// Retrieves first TerminalNode corresponding to token GROUPS
/// Returns `None` if there is no child corresponding to token GROUPS
fn GROUPS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(GROUPS, 0)
}
/// Retrieves first TerminalNode corresponding to token GZIP
/// Returns `None` if there is no child corresponding to token GZIP
fn GZIP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(GZIP, 0)
}
/// Retrieves first TerminalNode corresponding to token HOUR
/// Returns `None` if there is no child corresponding to token HOUR
fn HOUR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(HOUR, 0)
}
/// Retrieves first TerminalNode corresponding to token HOURS
/// Returns `None` if there is no child corresponding to token HOURS
fn HOURS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(HOURS, 0)
}
/// Retrieves first TerminalNode corresponding to token IF
/// Returns `None` if there is no child corresponding to token IF
fn IF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(IF, 0)
}
/// Retrieves first TerminalNode corresponding to token IGNORE
/// Returns `None` if there is no child corresponding to token IGNORE
fn IGNORE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(IGNORE, 0)
}
/// Retrieves first TerminalNode corresponding to token INCLUDING
/// Returns `None` if there is no child corresponding to token INCLUDING
fn INCLUDING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(INCLUDING, 0)
}
/// Retrieves first TerminalNode corresponding to token INITIAL
/// Returns `None` if there is no child corresponding to token INITIAL
fn INITIAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(INITIAL, 0)
}
/// Retrieves first TerminalNode corresponding to token INPUT
/// Returns `None` if there is no child corresponding to token INPUT
fn INPUT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(INPUT, 0)
}
/// Retrieves first TerminalNode corresponding to token INTEGER
/// Returns `None` if there is no child corresponding to token INTEGER
fn INTEGER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(INTEGER, 0)
}
/// Retrieves first TerminalNode corresponding to token INTERVAL
/// Returns `None` if there is no child corresponding to token INTERVAL
fn INTERVAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(INTERVAL, 0)
}
/// Retrieves first TerminalNode corresponding to token INVOKER
/// Returns `None` if there is no child corresponding to token INVOKER
fn INVOKER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(INVOKER, 0)
}
/// Retrieves first TerminalNode corresponding to token IO
/// Returns `None` if there is no child corresponding to token IO
fn IO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(IO, 0)
}
/// Retrieves first TerminalNode corresponding to token ISOLATION
/// Returns `None` if there is no child corresponding to token ISOLATION
fn ISOLATION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ISOLATION, 0)
}
/// Retrieves first TerminalNode corresponding to token JSON
/// Returns `None` if there is no child corresponding to token JSON
fn JSON(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(JSON, 0)
}
/// Retrieves first TerminalNode corresponding to token KEEP
/// Returns `None` if there is no child corresponding to token KEEP
fn KEEP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(KEEP, 0)
}
/// Retrieves first TerminalNode corresponding to token KEY
/// Returns `None` if there is no child corresponding to token KEY
fn KEY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(KEY, 0)
}
/// Retrieves first TerminalNode corresponding to token KEYS
/// Returns `None` if there is no child corresponding to token KEYS
fn KEYS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(KEYS, 0)
}
/// Retrieves first TerminalNode corresponding to token LAMBDA
/// Returns `None` if there is no child corresponding to token LAMBDA
fn LAMBDA(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LAMBDA, 0)
}
/// Retrieves first TerminalNode corresponding to token LAST
/// Returns `None` if there is no child corresponding to token LAST
fn LAST(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LAST, 0)
}
/// Retrieves first TerminalNode corresponding to token LATERAL
/// Returns `None` if there is no child corresponding to token LATERAL
fn LATERAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LATERAL, 0)
}
/// Retrieves first TerminalNode corresponding to token LEADING
/// Returns `None` if there is no child corresponding to token LEADING
fn LEADING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LEADING, 0)
}
/// Retrieves first TerminalNode corresponding to token LEVEL
/// Returns `None` if there is no child corresponding to token LEVEL
fn LEVEL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LEVEL, 0)
}
/// Retrieves first TerminalNode corresponding to token LIBRARY
/// Returns `None` if there is no child corresponding to token LIBRARY
fn LIBRARY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LIBRARY, 0)
}
/// Retrieves first TerminalNode corresponding to token LIMIT
/// Returns `None` if there is no child corresponding to token LIMIT
fn LIMIT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LIMIT, 0)
}
/// Retrieves first TerminalNode corresponding to token LOCAL
/// Returns `None` if there is no child corresponding to token LOCAL
fn LOCAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LOCAL, 0)
}
/// Retrieves first TerminalNode corresponding to token LOCATION
/// Returns `None` if there is no child corresponding to token LOCATION
fn LOCATION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LOCATION, 0)
}
/// Retrieves first TerminalNode corresponding to token LOCK
/// Returns `None` if there is no child corresponding to token LOCK
fn LOCK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LOCK, 0)
}
/// Retrieves first TerminalNode corresponding to token LOGICAL
/// Returns `None` if there is no child corresponding to token LOGICAL
fn LOGICAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(LOGICAL, 0)
}
/// Retrieves first TerminalNode corresponding to token M
/// Returns `None` if there is no child corresponding to token M
fn M(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(M, 0)
}
/// Retrieves first TerminalNode corresponding to token MAP
/// Returns `None` if there is no child corresponding to token MAP
fn MAP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MAP, 0)
}
/// Retrieves first TerminalNode corresponding to token MASKING
/// Returns `None` if there is no child corresponding to token MASKING
fn MASKING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MASKING, 0)
}
/// Retrieves first TerminalNode corresponding to token MATCH
/// Returns `None` if there is no child corresponding to token MATCH
fn MATCH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MATCH, 0)
}
/// Retrieves first TerminalNode corresponding to token MATCHED
/// Returns `None` if there is no child corresponding to token MATCHED
fn MATCHED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MATCHED, 0)
}
/// Retrieves first TerminalNode corresponding to token MATCHES
/// Returns `None` if there is no child corresponding to token MATCHES
fn MATCHES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MATCHES, 0)
}
/// Retrieves first TerminalNode corresponding to token MATCH_RECOGNIZE
/// Returns `None` if there is no child corresponding to token MATCH_RECOGNIZE
fn MATCH_RECOGNIZE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MATCH_RECOGNIZE, 0)
}
/// Retrieves first TerminalNode corresponding to token MATERIALIZED
/// Returns `None` if there is no child corresponding to token MATERIALIZED
fn MATERIALIZED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MATERIALIZED, 0)
}
/// Retrieves first TerminalNode corresponding to token MAX
/// Returns `None` if there is no child corresponding to token MAX
fn MAX(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MAX, 0)
}
/// Retrieves first TerminalNode corresponding to token MEASURES
/// Returns `None` if there is no child corresponding to token MEASURES
fn MEASURES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MEASURES, 0)
}
/// Retrieves first TerminalNode corresponding to token MERGE
/// Returns `None` if there is no child corresponding to token MERGE
fn MERGE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MERGE, 0)
}
/// Retrieves first TerminalNode corresponding to token MIN
/// Returns `None` if there is no child corresponding to token MIN
fn MIN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MIN, 0)
}
/// Retrieves first TerminalNode corresponding to token MINUS_KW
/// Returns `None` if there is no child corresponding to token MINUS_KW
fn MINUS_KW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MINUS_KW, 0)
}
/// Retrieves first TerminalNode corresponding to token MINUTE
/// Returns `None` if there is no child corresponding to token MINUTE
fn MINUTE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MINUTE, 0)
}
/// Retrieves first TerminalNode corresponding to token MINUTES
/// Returns `None` if there is no child corresponding to token MINUTES
fn MINUTES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MINUTES, 0)
}
/// Retrieves first TerminalNode corresponding to token MODEL
/// Returns `None` if there is no child corresponding to token MODEL
fn MODEL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MODEL, 0)
}
/// Retrieves first TerminalNode corresponding to token MONTH
/// Returns `None` if there is no child corresponding to token MONTH
fn MONTH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MONTH, 0)
}
/// Retrieves first TerminalNode corresponding to token MONTHS
/// Returns `None` if there is no child corresponding to token MONTHS
fn MONTHS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(MONTHS, 0)
}
/// Retrieves first TerminalNode corresponding to token NEXT
/// Returns `None` if there is no child corresponding to token NEXT
fn NEXT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NEXT, 0)
}
/// Retrieves first TerminalNode corresponding to token NFC
/// Returns `None` if there is no child corresponding to token NFC
fn NFC(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NFC, 0)
}
/// Retrieves first TerminalNode corresponding to token NFD
/// Returns `None` if there is no child corresponding to token NFD
fn NFD(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NFD, 0)
}
/// Retrieves first TerminalNode corresponding to token NFKC
/// Returns `None` if there is no child corresponding to token NFKC
fn NFKC(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NFKC, 0)
}
/// Retrieves first TerminalNode corresponding to token NFKD
/// Returns `None` if there is no child corresponding to token NFKD
fn NFKD(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NFKD, 0)
}
/// Retrieves first TerminalNode corresponding to token NO
/// Returns `None` if there is no child corresponding to token NO
fn NO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NO, 0)
}
/// Retrieves first TerminalNode corresponding to token NONE
/// Returns `None` if there is no child corresponding to token NONE
fn NONE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NONE, 0)
}
/// Retrieves first TerminalNode corresponding to token NULLS
/// Returns `None` if there is no child corresponding to token NULLS
fn NULLS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(NULLS, 0)
}
/// Retrieves first TerminalNode corresponding to token OBJECT
/// Returns `None` if there is no child corresponding to token OBJECT
fn OBJECT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(OBJECT, 0)
}
/// Retrieves first TerminalNode corresponding to token OF
/// Returns `None` if there is no child corresponding to token OF
fn OF(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(OF, 0)
}
/// Retrieves first TerminalNode corresponding to token OFFSET
/// Returns `None` if there is no child corresponding to token OFFSET
fn OFFSET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(OFFSET, 0)
}
/// Retrieves first TerminalNode corresponding to token OMIT
/// Returns `None` if there is no child corresponding to token OMIT
fn OMIT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(OMIT, 0)
}
/// Retrieves first TerminalNode corresponding to token ONE
/// Returns `None` if there is no child corresponding to token ONE
fn ONE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ONE, 0)
}
/// Retrieves first TerminalNode corresponding to token ONLY
/// Returns `None` if there is no child corresponding to token ONLY
fn ONLY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ONLY, 0)
}
/// Retrieves first TerminalNode corresponding to token OPTION
/// Returns `None` if there is no child corresponding to token OPTION
fn OPTION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(OPTION, 0)
}
/// Retrieves first TerminalNode corresponding to token ORDINALITY
/// Returns `None` if there is no child corresponding to token ORDINALITY
fn ORDINALITY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ORDINALITY, 0)
}
/// Retrieves first TerminalNode corresponding to token OUTPUT
/// Returns `None` if there is no child corresponding to token OUTPUT
fn OUTPUT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(OUTPUT, 0)
}
/// Retrieves first TerminalNode corresponding to token OVER
/// Returns `None` if there is no child corresponding to token OVER
fn OVER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(OVER, 0)
}
/// Retrieves first TerminalNode corresponding to token OVERFLOW
/// Returns `None` if there is no child corresponding to token OVERFLOW
fn OVERFLOW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(OVERFLOW, 0)
}
/// Retrieves first TerminalNode corresponding to token PARTITION
/// Returns `None` if there is no child corresponding to token PARTITION
fn PARTITION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PARTITION, 0)
}
/// Retrieves first TerminalNode corresponding to token PARTITIONS
/// Returns `None` if there is no child corresponding to token PARTITIONS
fn PARTITIONS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PARTITIONS, 0)
}
/// Retrieves first TerminalNode corresponding to token PASSING
/// Returns `None` if there is no child corresponding to token PASSING
fn PASSING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PASSING, 0)
}
/// Retrieves first TerminalNode corresponding to token PAST
/// Returns `None` if there is no child corresponding to token PAST
fn PAST(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PAST, 0)
}
/// Retrieves first TerminalNode corresponding to token PATH
/// Returns `None` if there is no child corresponding to token PATH
fn PATH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PATH, 0)
}
/// Retrieves first TerminalNode corresponding to token PATTERN
/// Returns `None` if there is no child corresponding to token PATTERN
fn PATTERN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PATTERN, 0)
}
/// Retrieves first TerminalNode corresponding to token PER
/// Returns `None` if there is no child corresponding to token PER
fn PER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PER, 0)
}
/// Retrieves first TerminalNode corresponding to token PERIOD
/// Returns `None` if there is no child corresponding to token PERIOD
fn PERIOD(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PERIOD, 0)
}
/// Retrieves first TerminalNode corresponding to token PERMUTE
/// Returns `None` if there is no child corresponding to token PERMUTE
fn PERMUTE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PERMUTE, 0)
}
/// Retrieves first TerminalNode corresponding to token POSITION
/// Returns `None` if there is no child corresponding to token POSITION
fn POSITION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(POSITION, 0)
}
/// Retrieves first TerminalNode corresponding to token PRECEDING
/// Returns `None` if there is no child corresponding to token PRECEDING
fn PRECEDING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PRECEDING, 0)
}
/// Retrieves first TerminalNode corresponding to token PRECISION
/// Returns `None` if there is no child corresponding to token PRECISION
fn PRECISION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PRECISION, 0)
}
/// Retrieves first TerminalNode corresponding to token PRIVILEGES
/// Returns `None` if there is no child corresponding to token PRIVILEGES
fn PRIVILEGES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PRIVILEGES, 0)
}
/// Retrieves first TerminalNode corresponding to token PROCEDURE
/// Returns `None` if there is no child corresponding to token PROCEDURE
fn PROCEDURE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PROCEDURE, 0)
}
/// Retrieves first TerminalNode corresponding to token PROPERTIES
/// Returns `None` if there is no child corresponding to token PROPERTIES
fn PROPERTIES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PROPERTIES, 0)
}
/// Retrieves first TerminalNode corresponding to token PRUNE
/// Returns `None` if there is no child corresponding to token PRUNE
fn PRUNE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(PRUNE, 0)
}
/// Retrieves first TerminalNode corresponding to token QUOTES
/// Returns `None` if there is no child corresponding to token QUOTES
fn QUOTES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(QUOTES, 0)
}
/// Retrieves first TerminalNode corresponding to token RANGE
/// Returns `None` if there is no child corresponding to token RANGE
fn RANGE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RANGE, 0)
}
/// Retrieves first TerminalNode corresponding to token READ
/// Returns `None` if there is no child corresponding to token READ
fn READ(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(READ, 0)
}
/// Retrieves first TerminalNode corresponding to token REFRESH
/// Returns `None` if there is no child corresponding to token REFRESH
fn REFRESH(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(REFRESH, 0)
}
/// Retrieves first TerminalNode corresponding to token RENAME
/// Returns `None` if there is no child corresponding to token RENAME
fn RENAME(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RENAME, 0)
}
/// Retrieves first TerminalNode corresponding to token REPEATABLE
/// Returns `None` if there is no child corresponding to token REPEATABLE
fn REPEATABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(REPEATABLE, 0)
}
/// Retrieves first TerminalNode corresponding to token REPLACE
/// Returns `None` if there is no child corresponding to token REPLACE
fn REPLACE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(REPLACE, 0)
}
/// Retrieves first TerminalNode corresponding to token RESET
/// Returns `None` if there is no child corresponding to token RESET
fn RESET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RESET, 0)
}
/// Retrieves first TerminalNode corresponding to token RESPECT
/// Returns `None` if there is no child corresponding to token RESPECT
fn RESPECT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RESPECT, 0)
}
/// Retrieves first TerminalNode corresponding to token RESTRICT
/// Returns `None` if there is no child corresponding to token RESTRICT
fn RESTRICT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RESTRICT, 0)
}
/// Retrieves first TerminalNode corresponding to token RETURNING
/// Returns `None` if there is no child corresponding to token RETURNING
fn RETURNING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RETURNING, 0)
}
/// Retrieves first TerminalNode corresponding to token REVOKE
/// Returns `None` if there is no child corresponding to token REVOKE
fn REVOKE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(REVOKE, 0)
}
/// Retrieves first TerminalNode corresponding to token RLS
/// Returns `None` if there is no child corresponding to token RLS
fn RLS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RLS, 0)
}
/// Retrieves first TerminalNode corresponding to token ROLE
/// Returns `None` if there is no child corresponding to token ROLE
fn ROLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ROLE, 0)
}
/// Retrieves first TerminalNode corresponding to token ROLES
/// Returns `None` if there is no child corresponding to token ROLES
fn ROLES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ROLES, 0)
}
/// Retrieves first TerminalNode corresponding to token ROLLBACK
/// Returns `None` if there is no child corresponding to token ROLLBACK
fn ROLLBACK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ROLLBACK, 0)
}
/// Retrieves first TerminalNode corresponding to token ROLLUP
/// Returns `None` if there is no child corresponding to token ROLLUP
fn ROLLUP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ROLLUP, 0)
}
/// Retrieves first TerminalNode corresponding to token ROW
/// Returns `None` if there is no child corresponding to token ROW
fn ROW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ROW, 0)
}
/// Retrieves first TerminalNode corresponding to token ROWS
/// Returns `None` if there is no child corresponding to token ROWS
fn ROWS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ROWS, 0)
}
/// Retrieves first TerminalNode corresponding to token RUNNING
/// Returns `None` if there is no child corresponding to token RUNNING
fn RUNNING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(RUNNING, 0)
}
/// Retrieves first TerminalNode corresponding to token S
/// Returns `None` if there is no child corresponding to token S
fn S(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(S, 0)
}
/// Retrieves first TerminalNode corresponding to token SCALAR
/// Returns `None` if there is no child corresponding to token SCALAR
fn SCALAR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SCALAR, 0)
}
/// Retrieves first TerminalNode corresponding to token SCHEMA
/// Returns `None` if there is no child corresponding to token SCHEMA
fn SCHEMA(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SCHEMA, 0)
}
/// Retrieves first TerminalNode corresponding to token SCHEMAS
/// Returns `None` if there is no child corresponding to token SCHEMAS
fn SCHEMAS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SCHEMAS, 0)
}
/// Retrieves first TerminalNode corresponding to token SEC
/// Returns `None` if there is no child corresponding to token SEC
fn SEC(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SEC, 0)
}
/// Retrieves first TerminalNode corresponding to token SECOND
/// Returns `None` if there is no child corresponding to token SECOND
fn SECOND(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SECOND, 0)
}
/// Retrieves first TerminalNode corresponding to token SECONDS
/// Returns `None` if there is no child corresponding to token SECONDS
fn SECONDS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SECONDS, 0)
}
/// Retrieves first TerminalNode corresponding to token SECURITY
/// Returns `None` if there is no child corresponding to token SECURITY
fn SECURITY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SECURITY, 0)
}
/// Retrieves first TerminalNode corresponding to token SEEK
/// Returns `None` if there is no child corresponding to token SEEK
fn SEEK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SEEK, 0)
}
/// Retrieves first TerminalNode corresponding to token SEMI
/// Returns `None` if there is no child corresponding to token SEMI
fn SEMI(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SEMI, 0)
}
/// Retrieves first TerminalNode corresponding to token SERIALIZABLE
/// Returns `None` if there is no child corresponding to token SERIALIZABLE
fn SERIALIZABLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SERIALIZABLE, 0)
}
/// Retrieves first TerminalNode corresponding to token SESSION
/// Returns `None` if there is no child corresponding to token SESSION
fn SESSION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SESSION, 0)
}
/// Retrieves first TerminalNode corresponding to token SET
/// Returns `None` if there is no child corresponding to token SET
fn SET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SET, 0)
}
/// Retrieves first TerminalNode corresponding to token SETS
/// Returns `None` if there is no child corresponding to token SETS
fn SETS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SETS, 0)
}
/// Retrieves first TerminalNode corresponding to token SHOW
/// Returns `None` if there is no child corresponding to token SHOW
fn SHOW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SHOW, 0)
}
/// Retrieves first TerminalNode corresponding to token SNAPSHOT
/// Returns `None` if there is no child corresponding to token SNAPSHOT
fn SNAPSHOT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SNAPSHOT, 0)
}
/// Retrieves first TerminalNode corresponding to token SOME
/// Returns `None` if there is no child corresponding to token SOME
fn SOME(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SOME, 0)
}
/// Retrieves first TerminalNode corresponding to token START
/// Returns `None` if there is no child corresponding to token START
fn START(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(START, 0)
}
/// Retrieves first TerminalNode corresponding to token STATS
/// Returns `None` if there is no child corresponding to token STATS
fn STATS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(STATS, 0)
}
/// Retrieves first TerminalNode corresponding to token STRING_KW
/// Returns `None` if there is no child corresponding to token STRING_KW
fn STRING_KW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(STRING_KW, 0)
}
/// Retrieves first TerminalNode corresponding to token STRUCT
/// Returns `None` if there is no child corresponding to token STRUCT
fn STRUCT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(STRUCT, 0)
}
/// Retrieves first TerminalNode corresponding to token SUBSET
/// Returns `None` if there is no child corresponding to token SUBSET
fn SUBSET(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SUBSET, 0)
}
/// Retrieves first TerminalNode corresponding to token SUBSTRING
/// Returns `None` if there is no child corresponding to token SUBSTRING
fn SUBSTRING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SUBSTRING, 0)
}
/// Retrieves first TerminalNode corresponding to token SYSTEM
/// Returns `None` if there is no child corresponding to token SYSTEM
fn SYSTEM(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SYSTEM, 0)
}
/// Retrieves first TerminalNode corresponding to token SYSTEM_TIME
/// Returns `None` if there is no child corresponding to token SYSTEM_TIME
fn SYSTEM_TIME(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(SYSTEM_TIME, 0)
}
/// Retrieves first TerminalNode corresponding to token TABLES
/// Returns `None` if there is no child corresponding to token TABLES
fn TABLES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TABLES, 0)
}
/// Retrieves first TerminalNode corresponding to token TABLESAMPLE
/// Returns `None` if there is no child corresponding to token TABLESAMPLE
fn TABLESAMPLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TABLESAMPLE, 0)
}
/// Retrieves first TerminalNode corresponding to token TEMP
/// Returns `None` if there is no child corresponding to token TEMP
fn TEMP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TEMP, 0)
}
/// Retrieves first TerminalNode corresponding to token TEMPORARY
/// Returns `None` if there is no child corresponding to token TEMPORARY
fn TEMPORARY(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TEMPORARY, 0)
}
/// Retrieves first TerminalNode corresponding to token TEXT
/// Returns `None` if there is no child corresponding to token TEXT
fn TEXT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TEXT, 0)
}
/// Retrieves first TerminalNode corresponding to token TIES
/// Returns `None` if there is no child corresponding to token TIES
fn TIES(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TIES, 0)
}
/// Retrieves first TerminalNode corresponding to token TIME
/// Returns `None` if there is no child corresponding to token TIME
fn TIME(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TIME, 0)
}
/// Retrieves first TerminalNode corresponding to token TIMESTAMP
/// Returns `None` if there is no child corresponding to token TIMESTAMP
fn TIMESTAMP(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TIMESTAMP, 0)
}
/// Retrieves first TerminalNode corresponding to token TO
/// Returns `None` if there is no child corresponding to token TO
fn TO(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TO, 0)
}
/// Retrieves first TerminalNode corresponding to token TRAILING
/// Returns `None` if there is no child corresponding to token TRAILING
fn TRAILING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TRAILING, 0)
}
/// Retrieves first TerminalNode corresponding to token TRANSACTION
/// Returns `None` if there is no child corresponding to token TRANSACTION
fn TRANSACTION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TRANSACTION, 0)
}
/// Retrieves first TerminalNode corresponding to token TRUNCATE
/// Returns `None` if there is no child corresponding to token TRUNCATE
fn TRUNCATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TRUNCATE, 0)
}
/// Retrieves first TerminalNode corresponding to token TRY_CAST
/// Returns `None` if there is no child corresponding to token TRY_CAST
fn TRY_CAST(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TRY_CAST, 0)
}
/// Retrieves first TerminalNode corresponding to token TUPLE
/// Returns `None` if there is no child corresponding to token TUPLE
fn TUPLE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TUPLE, 0)
}
/// Retrieves first TerminalNode corresponding to token TYPE
/// Returns `None` if there is no child corresponding to token TYPE
fn TYPE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(TYPE, 0)
}
/// Retrieves first TerminalNode corresponding to token UNBOUNDED
/// Returns `None` if there is no child corresponding to token UNBOUNDED
fn UNBOUNDED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UNBOUNDED, 0)
}
/// Retrieves first TerminalNode corresponding to token UNCOMMITTED
/// Returns `None` if there is no child corresponding to token UNCOMMITTED
fn UNCOMMITTED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UNCOMMITTED, 0)
}
/// Retrieves first TerminalNode corresponding to token UNCONDITIONAL
/// Returns `None` if there is no child corresponding to token UNCONDITIONAL
fn UNCONDITIONAL(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UNCONDITIONAL, 0)
}
/// Retrieves first TerminalNode corresponding to token UNIQUE
/// Returns `None` if there is no child corresponding to token UNIQUE
fn UNIQUE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UNIQUE, 0)
}
/// Retrieves first TerminalNode corresponding to token UNKNOWN
/// Returns `None` if there is no child corresponding to token UNKNOWN
fn UNKNOWN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UNKNOWN, 0)
}
/// Retrieves first TerminalNode corresponding to token UNLOAD
/// Returns `None` if there is no child corresponding to token UNLOAD
fn UNLOAD(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UNLOAD, 0)
}
/// Retrieves first TerminalNode corresponding to token UNMATCHED
/// Returns `None` if there is no child corresponding to token UNMATCHED
fn UNMATCHED(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UNMATCHED, 0)
}
/// Retrieves first TerminalNode corresponding to token UPDATE
/// Returns `None` if there is no child corresponding to token UPDATE
fn UPDATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UPDATE, 0)
}
/// Retrieves first TerminalNode corresponding to token USE
/// Returns `None` if there is no child corresponding to token USE
fn USE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(USE, 0)
}
/// Retrieves first TerminalNode corresponding to token USER
/// Returns `None` if there is no child corresponding to token USER
fn USER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(USER, 0)
}
/// Retrieves first TerminalNode corresponding to token UTF16
/// Returns `None` if there is no child corresponding to token UTF16
fn UTF16(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UTF16, 0)
}
/// Retrieves first TerminalNode corresponding to token UTF32
/// Returns `None` if there is no child corresponding to token UTF32
fn UTF32(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UTF32, 0)
}
/// Retrieves first TerminalNode corresponding to token UTF8
/// Returns `None` if there is no child corresponding to token UTF8
fn UTF8(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(UTF8, 0)
}
/// Retrieves first TerminalNode corresponding to token VACUUM
/// Returns `None` if there is no child corresponding to token VACUUM
fn VACUUM(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(VACUUM, 0)
}
/// Retrieves first TerminalNode corresponding to token VALIDATE
/// Returns `None` if there is no child corresponding to token VALIDATE
fn VALIDATE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(VALIDATE, 0)
}
/// Retrieves first TerminalNode corresponding to token VALUE
/// Returns `None` if there is no child corresponding to token VALUE
fn VALUE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(VALUE, 0)
}
/// Retrieves first TerminalNode corresponding to token VARYING
/// Returns `None` if there is no child corresponding to token VARYING
fn VARYING(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(VARYING, 0)
}
/// Retrieves first TerminalNode corresponding to token VERBOSE
/// Returns `None` if there is no child corresponding to token VERBOSE
fn VERBOSE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(VERBOSE, 0)
}
/// Retrieves first TerminalNode corresponding to token VERSION
/// Returns `None` if there is no child corresponding to token VERSION
fn VERSION(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(VERSION, 0)
}
/// Retrieves first TerminalNode corresponding to token VIEW
/// Returns `None` if there is no child corresponding to token VIEW
fn VIEW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(VIEW, 0)
}
/// Retrieves first TerminalNode corresponding to token WINDOW
/// Returns `None` if there is no child corresponding to token WINDOW
fn WINDOW(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WINDOW, 0)
}
/// Retrieves first TerminalNode corresponding to token WITHIN
/// Returns `None` if there is no child corresponding to token WITHIN
fn WITHIN(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WITHIN, 0)
}
/// Retrieves first TerminalNode corresponding to token WITHOUT
/// Returns `None` if there is no child corresponding to token WITHOUT
fn WITHOUT(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WITHOUT, 0)
}
/// Retrieves first TerminalNode corresponding to token WORK
/// Returns `None` if there is no child corresponding to token WORK
fn WORK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WORK, 0)
}
/// Retrieves first TerminalNode corresponding to token WRAPPER
/// Returns `None` if there is no child corresponding to token WRAPPER
fn WRAPPER(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WRAPPER, 0)
}
/// Retrieves first TerminalNode corresponding to token WRITE
/// Returns `None` if there is no child corresponding to token WRITE
fn WRITE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WRITE, 0)
}
/// Retrieves first TerminalNode corresponding to token WEEK
/// Returns `None` if there is no child corresponding to token WEEK
fn WEEK(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(WEEK, 0)
}
/// Retrieves first TerminalNode corresponding to token XZ
/// Returns `None` if there is no child corresponding to token XZ
fn XZ(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(XZ, 0)
}
/// Retrieves first TerminalNode corresponding to token YEAR
/// Returns `None` if there is no child corresponding to token YEAR
fn YEAR(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(YEAR, 0)
}
/// Retrieves first TerminalNode corresponding to token YEARS
/// Returns `None` if there is no child corresponding to token YEARS
fn YEARS(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(YEARS, 0)
}
/// Retrieves first TerminalNode corresponding to token ZONE
/// Returns `None` if there is no child corresponding to token ZONE
fn ZONE(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ZONE, 0)
}
/// Retrieves first TerminalNode corresponding to token ZSTD
/// Returns `None` if there is no child corresponding to token ZSTD
fn ZSTD(&self) -> Option<Rc<TerminalNode<'input,TrinoParserContextType>>> where Self:Sized{
	self.get_token(ZSTD, 0)
}

}

impl<'input> NonReservedContextAttrs<'input> for NonReservedContext<'input>{}

impl<'input, I, H> TrinoParser<'input, I, H>
where
    I: TokenStream<'input, TF = LocalTokenFactory<'input> > + TidAble<'input>,
    H: ErrorStrategy<'input,BaseParserType<'input,I>>
{
	pub fn nonReserved(&mut self,)
	-> Result<Rc<NonReservedContextAll<'input>>,ANTLRError> {
		let mut recog = self;
		let _parentctx = recog.ctx.take();
		let mut _localctx = NonReservedContextExt::new(_parentctx.clone(), recog.base.get_state());
        recog.base.enter_rule(_localctx.clone(), 298, RULE_nonReserved);
        let mut _localctx: Rc<NonReservedContextAll> = _localctx;
		let mut _la: isize = -1;
		let result: Result<(), ANTLRError> = (|| {

			//recog.base.enter_outer_alt(_localctx.clone(), 1);
			recog.base.enter_outer_alt(None, 1);
			{
			recog.base.set_state(3025);
			_la = recog.base.input.la(1);
			if { !(((((_la - 9)) & !0x3f) == 0 && ((1usize << (_la - 9)) & ((1usize << (ABORT - 9)) | (1usize << (ABSENT - 9)) | (1usize << (ADD - 9)) | (1usize << (ADMIN - 9)) | (1usize << (AFTER - 9)) | (1usize << (ALL - 9)) | (1usize << (ANALYZE - 9)) | (1usize << (ANTI - 9)) | (1usize << (ANY - 9)) | (1usize << (ARRAY - 9)) | (1usize << (ASC - 9)) | (1usize << (AT - 9)) | (1usize << (ATTACH - 9)) | (1usize << (AUTHORIZATION - 9)) | (1usize << (BEGIN - 9)) | (1usize << (BERNOULLI - 9)) | (1usize << (BOTH - 9)) | (1usize << (BZIP2 - 9)) | (1usize << (CALL - 9)) | (1usize << (CANCEL - 9)) | (1usize << (CASCADE - 9)))) != 0) || ((((_la - 41)) & !0x3f) == 0 && ((1usize << (_la - 41)) & ((1usize << (CATALOGS - 41)) | (1usize << (CHARACTER - 41)) | (1usize << (CLONE - 41)) | (1usize << (CLOSE - 41)) | (1usize << (CLUSTER - 41)) | (1usize << (COLUMN - 41)) | (1usize << (COLUMNS - 41)) | (1usize << (COMMENT - 41)) | (1usize << (COMMIT - 41)) | (1usize << (COMMITTED - 41)) | (1usize << (COMPRESSION - 41)) | (1usize << (CONDITIONAL - 41)) | (1usize << (CONNECTION - 41)) | (1usize << (COPARTITION - 41)) | (1usize << (COPY - 41)) | (1usize << (COUNT - 41)) | (1usize << (CURRENT - 41)) | (1usize << (DATA - 41)) | (1usize << (DATABASE - 41)) | (1usize << (DATASHARE - 41)) | (1usize << (DATE - 41)) | (1usize << (DAY - 41)) | (1usize << (DAYS - 41)))) != 0) || ((((_la - 74)) & !0x3f) == 0 && ((1usize << (_la - 74)) & ((1usize << (DECLARE - 74)) | (1usize << (DEFAULT - 74)) | (1usize << (DEFINE - 74)) | (1usize << (DEFINER - 74)) | (1usize << (DELIMITER - 74)) | (1usize << (DENY - 74)) | (1usize << (DESC - 74)) | (1usize << (DESCRIBE - 74)) | (1usize << (DESCRIPTOR - 74)) | (1usize << (DISTRIBUTED - 74)) | (1usize << (DETACH - 74)) | (1usize << (DOUBLE - 74)) | (1usize << (EMPTY - 74)) | (1usize << (ENCODING - 74)) | (1usize << (END - 74)) | (1usize << (ERROR - 74)) | (1usize << (EXCLUDING - 74)) | (1usize << (EXECUTE - 74)) | (1usize << (EXPLAIN - 74)))) != 0) || ((((_la - 106)) & !0x3f) == 0 && ((1usize << (_la - 106)) & ((1usize << (EXTERNAL - 106)) | (1usize << (FETCH - 106)) | (1usize << (FILTER - 106)) | (1usize << (FINAL - 106)) | (1usize << (FIRST - 106)) | (1usize << (FOLLOWING - 106)) | (1usize << (FORMAT - 106)) | (1usize << (FUNCTIONS - 106)) | (1usize << (GRACE - 106)) | (1usize << (GRANT - 106)) | (1usize << (GRANTED - 106)) | (1usize << (GRANTS - 106)) | (1usize << (GRAPHVIZ - 106)) | (1usize << (GROUPS - 106)) | (1usize << (GZIP - 106)) | (1usize << (HOUR - 106)) | (1usize << (HOURS - 106)) | (1usize << (IF - 106)) | (1usize << (IGNORE - 106)))) != 0) || ((((_la - 138)) & !0x3f) == 0 && ((1usize << (_la - 138)) & ((1usize << (INCLUDING - 138)) | (1usize << (INITIAL - 138)) | (1usize << (INPUT - 138)) | (1usize << (INTEGER - 138)) | (1usize << (INTERVAL - 138)) | (1usize << (INVOKER - 138)) | (1usize << (IO - 138)) | (1usize << (ISOLATION - 138)) | (1usize << (JSON - 138)) | (1usize << (KEEP - 138)) | (1usize << (KEY - 138)) | (1usize << (KEYS - 138)) | (1usize << (LAMBDA - 138)) | (1usize << (LAST - 138)) | (1usize << (LATERAL - 138)) | (1usize << (LEADING - 138)) | (1usize << (LEVEL - 138)))) != 0) || ((((_la - 170)) & !0x3f) == 0 && ((1usize << (_la - 170)) & ((1usize << (LIBRARY - 170)) | (1usize << (LIMIT - 170)) | (1usize << (LOCAL - 170)) | (1usize << (LOCATION - 170)) | (1usize << (LOCK - 170)) | (1usize << (LOGICAL - 170)) | (1usize << (M - 170)) | (1usize << (MAP - 170)) | (1usize << (MASKING - 170)) | (1usize << (MATCH - 170)) | (1usize << (MATCHED - 170)) | (1usize << (MATCHES - 170)) | (1usize << (MATCH_RECOGNIZE - 170)) | (1usize << (MATERIALIZED - 170)) | (1usize << (MAX - 170)) | (1usize << (MEASURES - 170)) | (1usize << (MERGE - 170)) | (1usize << (MIN - 170)) | (1usize << (MINUS_KW - 170)) | (1usize << (MINUTE - 170)) | (1usize << (MINUTES - 170)) | (1usize << (MODEL - 170)) | (1usize << (MONTH - 170)) | (1usize << (MONTHS - 170)) | (1usize << (NEXT - 170)) | (1usize << (NFC - 170)) | (1usize << (NFD - 170)) | (1usize << (NFKC - 170)) | (1usize << (NFKD - 170)))) != 0) || ((((_la - 202)) & !0x3f) == 0 && ((1usize << (_la - 202)) & ((1usize << (NO - 202)) | (1usize << (NONE - 202)) | (1usize << (NULLS - 202)) | (1usize << (OBJECT - 202)) | (1usize << (OF - 202)) | (1usize << (OFFSET - 202)) | (1usize << (OMIT - 202)) | (1usize << (ONE - 202)) | (1usize << (ONLY - 202)) | (1usize << (OPTION - 202)) | (1usize << (ORDINALITY - 202)) | (1usize << (OUTPUT - 202)) | (1usize << (OVER - 202)) | (1usize << (OVERFLOW - 202)) | (1usize << (PARTITION - 202)) | (1usize << (PARTITIONS - 202)) | (1usize << (PASSING - 202)) | (1usize << (PAST - 202)) | (1usize << (PATH - 202)) | (1usize << (PATTERN - 202)) | (1usize << (PER - 202)) | (1usize << (PERIOD - 202)))) != 0) || ((((_la - 234)) & !0x3f) == 0 && ((1usize << (_la - 234)) & ((1usize << (PERMUTE - 234)) | (1usize << (POSITION - 234)) | (1usize << (PRECEDING - 234)) | (1usize << (PRECISION - 234)) | (1usize << (PROCEDURE - 234)) | (1usize << (PRIVILEGES - 234)) | (1usize << (PROPERTIES - 234)) | (1usize << (PRUNE - 234)) | (1usize << (QUOTES - 234)) | (1usize << (RANGE - 234)) | (1usize << (READ - 234)) | (1usize << (REFRESH - 234)) | (1usize << (RENAME - 234)) | (1usize << (REPEATABLE - 234)) | (1usize << (REPLACE - 234)) | (1usize << (RESET - 234)) | (1usize << (RESPECT - 234)) | (1usize << (RESTRICT - 234)) | (1usize << (RETURNING - 234)) | (1usize << (REVOKE - 234)) | (1usize << (RLS - 234)) | (1usize << (ROLE - 234)) | (1usize << (ROLES - 234)) | (1usize << (ROLLBACK - 234)) | (1usize << (ROLLUP - 234)) | (1usize << (ROW - 234)) | (1usize << (ROWS - 234)) | (1usize << (RUNNING - 234)))) != 0) || ((((_la - 266)) & !0x3f) == 0 && ((1usize << (_la - 266)) & ((1usize << (S - 266)) | (1usize << (SCALAR - 266)) | (1usize << (SEC - 266)) | (1usize << (SECOND - 266)) | (1usize << (SECONDS - 266)) | (1usize << (SCHEMA - 266)) | (1usize << (SCHEMAS - 266)) | (1usize << (SECURITY - 266)) | (1usize << (SEEK - 266)) | (1usize << (SEMI - 266)) | (1usize << (SERIALIZABLE - 266)) | (1usize << (SESSION - 266)) | (1usize << (SET - 266)) | (1usize << (SETS - 266)) | (1usize << (SHOW - 266)) | (1usize << (SNAPSHOT - 266)) | (1usize << (SOME - 266)) | (1usize << (START - 266)) | (1usize << (STATS - 266)) | (1usize << (STRUCT - 266)) | (1usize << (SUBSET - 266)) | (1usize << (SUBSTRING - 266)) | (1usize << (SYSTEM - 266)) | (1usize << (SYSTEM_TIME - 266)))) != 0) || ((((_la - 298)) & !0x3f) == 0 && ((1usize << (_la - 298)) & ((1usize << (TABLES - 298)) | (1usize << (TABLESAMPLE - 298)) | (1usize << (TEMP - 298)) | (1usize << (TEMPORARY - 298)) | (1usize << (TEXT - 298)) | (1usize << (STRING_KW - 298)) | (1usize << (TIES - 298)) | (1usize << (TIME - 298)) | (1usize << (TIMESTAMP - 298)) | (1usize << (TO - 298)) | (1usize << (TRAILING - 298)) | (1usize << (TRANSACTION - 298)) | (1usize << (TRUNCATE - 298)) | (1usize << (TRY_CAST - 298)) | (1usize << (TUPLE - 298)) | (1usize << (TYPE - 298)) | (1usize << (UNBOUNDED - 298)) | (1usize << (UNCOMMITTED - 298)) | (1usize << (UNCONDITIONAL - 298)) | (1usize << (UNIQUE - 298)) | (1usize << (UNKNOWN - 298)) | (1usize << (UNLOAD - 298)) | (1usize << (UNMATCHED - 298)))) != 0) || ((((_la - 330)) & !0x3f) == 0 && ((1usize << (_la - 330)) & ((1usize << (UPDATE - 330)) | (1usize << (USE - 330)) | (1usize << (USER - 330)) | (1usize << (UTF16 - 330)) | (1usize << (UTF32 - 330)) | (1usize << (UTF8 - 330)) | (1usize << (VACUUM - 330)) | (1usize << (VALIDATE - 330)) | (1usize << (VALUE - 330)) | (1usize << (VARYING - 330)) | (1usize << (VERBOSE - 330)) | (1usize << (VERSION - 330)) | (1usize << (VIEW - 330)) | (1usize << (WEEK - 330)) | (1usize << (WINDOW - 330)) | (1usize << (WITHIN - 330)) | (1usize << (WITHOUT - 330)) | (1usize << (WORK - 330)) | (1usize << (WRAPPER - 330)) | (1usize << (WRITE - 330)) | (1usize << (XZ - 330)) | (1usize << (YEAR - 330)) | (1usize << (YEARS - 330)) | (1usize << (ZONE - 330)) | (1usize << (ZSTD - 330)))) != 0)) } {
				recog.err_handler.recover_inline(&mut recog.base)?;

			}
			else {
				if  recog.base.input.la(1)==TOKEN_EOF { recog.base.matched_eof = true };
				recog.err_handler.report_match(&mut recog.base);
				recog.base.consume(&mut recog.err_handler);
			}
			}
			Ok(())
		})();
		match result {
		Ok(_)=>{},
        Err(e @ ANTLRError::FallThrough(_)) => return Err(e),
		Err(ref re) => {
				//_localctx.exception = re;
				recog.err_handler.report_error(&mut recog.base, re);
				recog.err_handler.recover(&mut recog.base, re)?;
			}
		}
		recog.base.exit_rule();

		Ok(_localctx)
	}
}

thread_local! {
    static _ATN: Rc<ATN> =
        Rc::new(ATNDeserializer::new(None).deserialize(_serializedATN.chars()));
    static _decision_to_DFA: Rc<Vec<RefCell<DFA>>> = {
        let mut dfa = Vec::new();
        let size = _ATN.with(|atn| atn.decision_to_state.len());
        for i in 0..size {
            dfa.push(DFA::new(_ATN.with(|atn| atn.clone()), _ATN.with(|atn| atn
            .get_decision_state(i)), i as isize).into())
        }
        Rc::new(dfa)
    };
}



const _serializedATN:&'static str =
	"\x03\u{608b}\u{a72a}\u{8133}\u{b9ed}\u{417c}\u{3be7}\u{7786}\u{5964}\x03\
	\u{190}\u{bd6}\x04\x02\x09\x02\x04\x03\x09\x03\x04\x04\x09\x04\x04\x05\x09\
	\x05\x04\x06\x09\x06\x04\x07\x09\x07\x04\x08\x09\x08\x04\x09\x09\x09\x04\
	\x0a\x09\x0a\x04\x0b\x09\x0b\x04\x0c\x09\x0c\x04\x0d\x09\x0d\x04\x0e\x09\
	\x0e\x04\x0f\x09\x0f\x04\x10\x09\x10\x04\x11\x09\x11\x04\x12\x09\x12\x04\
	\x13\x09\x13\x04\x14\x09\x14\x04\x15\x09\x15\x04\x16\x09\x16\x04\x17\x09\
	\x17\x04\x18\x09\x18\x04\x19\x09\x19\x04\x1a\x09\x1a\x04\x1b\x09\x1b\x04\
	\x1c\x09\x1c\x04\x1d\x09\x1d\x04\x1e\x09\x1e\x04\x1f\x09\x1f\x04\x20\x09\
	\x20\x04\x21\x09\x21\x04\x22\x09\x22\x04\x23\x09\x23\x04\x24\x09\x24\x04\
	\x25\x09\x25\x04\x26\x09\x26\x04\x27\x09\x27\x04\x28\x09\x28\x04\x29\x09\
	\x29\x04\x2a\x09\x2a\x04\x2b\x09\x2b\x04\x2c\x09\x2c\x04\x2d\x09\x2d\x04\
	\x2e\x09\x2e\x04\x2f\x09\x2f\x04\x30\x09\x30\x04\x31\x09\x31\x04\x32\x09\
	\x32\x04\x33\x09\x33\x04\x34\x09\x34\x04\x35\x09\x35\x04\x36\x09\x36\x04\
	\x37\x09\x37\x04\x38\x09\x38\x04\x39\x09\x39\x04\x3a\x09\x3a\x04\x3b\x09\
	\x3b\x04\x3c\x09\x3c\x04\x3d\x09\x3d\x04\x3e\x09\x3e\x04\x3f\x09\x3f\x04\
	\x40\x09\x40\x04\x41\x09\x41\x04\x42\x09\x42\x04\x43\x09\x43\x04\x44\x09\
	\x44\x04\x45\x09\x45\x04\x46\x09\x46\x04\x47\x09\x47\x04\x48\x09\x48\x04\
	\x49\x09\x49\x04\x4a\x09\x4a\x04\x4b\x09\x4b\x04\x4c\x09\x4c\x04\x4d\x09\
	\x4d\x04\x4e\x09\x4e\x04\x4f\x09\x4f\x04\x50\x09\x50\x04\x51\x09\x51\x04\
	\x52\x09\x52\x04\x53\x09\x53\x04\x54\x09\x54\x04\x55\x09\x55\x04\x56\x09\
	\x56\x04\x57\x09\x57\x04\x58\x09\x58\x04\x59\x09\x59\x04\x5a\x09\x5a\x04\
	\x5b\x09\x5b\x04\x5c\x09\x5c\x04\x5d\x09\x5d\x04\x5e\x09\x5e\x04\x5f\x09\
	\x5f\x04\x60\x09\x60\x04\x61\x09\x61\x04\x62\x09\x62\x04\x63\x09\x63\x04\
	\x64\x09\x64\x04\x65\x09\x65\x04\x66\x09\x66\x04\x67\x09\x67\x04\x68\x09\
	\x68\x04\x69\x09\x69\x04\x6a\x09\x6a\x04\x6b\x09\x6b\x04\x6c\x09\x6c\x04\
	\x6d\x09\x6d\x04\x6e\x09\x6e\x04\x6f\x09\x6f\x04\x70\x09\x70\x04\x71\x09\
	\x71\x04\x72\x09\x72\x04\x73\x09\x73\x04\x74\x09\x74\x04\x75\x09\x75\x04\
	\x76\x09\x76\x04\x77\x09\x77\x04\x78\x09\x78\x04\x79\x09\x79\x04\x7a\x09\
	\x7a\x04\x7b\x09\x7b\x04\x7c\x09\x7c\x04\x7d\x09\x7d\x04\x7e\x09\x7e\x04\
	\x7f\x09\x7f\x04\u{80}\x09\u{80}\x04\u{81}\x09\u{81}\x04\u{82}\x09\u{82}\
	\x04\u{83}\x09\u{83}\x04\u{84}\x09\u{84}\x04\u{85}\x09\u{85}\x04\u{86}\x09\
	\u{86}\x04\u{87}\x09\u{87}\x04\u{88}\x09\u{88}\x04\u{89}\x09\u{89}\x04\u{8a}\
	\x09\u{8a}\x04\u{8b}\x09\u{8b}\x04\u{8c}\x09\u{8c}\x04\u{8d}\x09\u{8d}\x04\
	\u{8e}\x09\u{8e}\x04\u{8f}\x09\u{8f}\x04\u{90}\x09\u{90}\x04\u{91}\x09\u{91}\
	\x04\u{92}\x09\u{92}\x04\u{93}\x09\u{93}\x04\u{94}\x09\u{94}\x04\u{95}\x09\
	\u{95}\x04\u{96}\x09\u{96}\x04\u{97}\x09\u{97}\x03\x02\x05\x02\u{130}\x0a\
	\x02\x03\x02\x03\x02\x05\x02\u{134}\x0a\x02\x07\x02\u{136}\x0a\x02\x0c\x02\
	\x0e\x02\u{139}\x0b\x02\x03\x02\x03\x02\x03\x03\x05\x03\u{13e}\x0a\x03\x03\
	\x03\x05\x03\u{141}\x0a\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\
	\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\
	\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\
	\x07\u{15a}\x0a\x07\x03\x07\x03\x07\x07\x07\u{15e}\x0a\x07\x0c\x07\x0e\x07\
	\u{161}\x0b\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\
	\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\
	\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u{17a}\
	\x0a\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u{180}\x0a\x07\x03\x07\
	\x03\x07\x05\x07\u{184}\x0a\x07\x03\x07\x03\x07\x05\x07\u{188}\x0a\x07\x03\
	\x07\x03\x07\x05\x07\u{18c}\x0a\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\
	\x07\x03\x07\x05\x07\u{194}\x0a\x07\x03\x07\x03\x07\x05\x07\u{198}\x0a\x07\
	\x03\x07\x05\x07\u{19b}\x0a\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\
	\x03\x07\x05\x07\u{1a3}\x0a\x07\x03\x07\x03\x07\x05\x07\u{1a7}\x0a\x07\x03\
	\x07\x03\x07\x05\x07\u{1ab}\x0a\x07\x03\x07\x03\x07\x05\x07\u{1af}\x0a\x07\
	\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u{1b7}\x0a\x07\
	\x03\x07\x03\x07\x03\x07\x05\x07\u{1bc}\x0a\x07\x03\x07\x03\x07\x03\x07\
	\x03\x07\x05\x07\u{1c2}\x0a\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\
	\u{1c8}\x0a\x07\x03\x07\x03\x07\x05\x07\u{1cc}\x0a\x07\x03\x07\x03\x07\x05\
	\x07\u{1d0}\x0a\x07\x03\x07\x03\x07\x05\x07\u{1d4}\x0a\x07\x03\x07\x03\x07\
	\x03\x07\x03\x07\x05\x07\u{1da}\x0a\x07\x03\x07\x03\x07\x03\x07\x03\x07\
	\x03\x07\x05\x07\u{1e1}\x0a\x07\x03\x07\x03\x07\x03\x07\x05\x07\u{1e6}\x0a\
	\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u{1ed}\x0a\x07\x03\
	\x07\x03\x07\x03\x07\x03\x07\x05\x07\u{1f3}\x0a\x07\x03\x07\x03\x07\x05\
	\x07\u{1f7}\x0a\x07\x03\x07\x03\x07\x05\x07\u{1fb}\x0a\x07\x03\x07\x03\x07\
	\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u{203}\x0a\x07\x03\x07\x03\x07\
	\x03\x07\x05\x07\u{208}\x0a\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\
	\u{20e}\x0a\x07\x03\x07\x03\x07\x05\x07\u{212}\x0a\x07\x03\x07\x03\x07\x03\
	\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\
	\x07\x05\x07\u{220}\x0a\x07\x03\x07\x05\x07\u{223}\x0a\x07\x03\x07\x03\x07\
	\x07\x07\u{227}\x0a\x07\x0c\x07\x0e\x07\u{22a}\x0b\x07\x03\x07\x03\x07\x07\
	\x07\u{22e}\x0a\x07\x0c\x07\x0e\x07\u{231}\x0b\x07\x03\x07\x03\x07\x07\x07\
	\u{235}\x0a\x07\x0c\x07\x0e\x07\u{238}\x0b\x07\x03\x07\x03\x07\x03\x07\x05\
	\x07\u{23d}\x0a\x07\x03\x07\x03\x07\x07\x07\u{241}\x0a\x07\x0c\x07\x0e\x07\
	\u{244}\x0b\x07\x03\x07\x03\x07\x07\x07\u{248}\x0a\x07\x0c\x07\x0e\x07\u{24b}\
	\x0b\x07\x03\x07\x03\x07\x07\x07\u{24f}\x0a\x07\x0c\x07\x0e\x07\u{252}\x0b\
	\x07\x03\x07\x03\x07\x07\x07\u{256}\x0a\x07\x0c\x07\x0e\x07\u{259}\x0b\x07\
	\x03\x07\x03\x07\x07\x07\u{25d}\x0a\x07\x0c\x07\x0e\x07\u{260}\x0b\x07\x03\
	\x07\x03\x07\x03\x07\x03\x07\x05\x07\u{266}\x0a\x07\x03\x07\x03\x07\x03\
	\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u{271}\x0a\
	\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u{279}\x0a\
	\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u{281}\x0a\
	\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u{288}\x0a\x07\x03\
	\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u{292}\
	\x0a\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u{299}\x0a\x07\
	\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u{2a1}\x0a\x07\
	\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\
	\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\
	\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\
	\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x07\x07\u{2c3}\x0a\x07\x0c\x07\
	\x0e\x07\u{2c6}\x0b\x07\x05\x07\u{2c8}\x0a\x07\x03\x07\x05\x07\u{2cb}\x0a\
	\x07\x03\x07\x05\x07\u{2ce}\x0a\x07\x03\x07\x03\x07\x05\x07\u{2d2}\x0a\x07\
	\x03\x07\x03\x07\x07\x07\u{2d6}\x0a\x07\x0c\x07\x0e\x07\u{2d9}\x0b\x07\x03\
	\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\
	\x07\u{2e4}\x0a\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\
	\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\
	\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\
	\x07\x03\x07\x03\x07\x03\x07\x03\x07\x07\x07\u{303}\x0a\x07\x0c\x07\x0e\
	\x07\u{306}\x0b\x07\x03\x07\x03\x07\x03\x07\x07\x07\u{30b}\x0a\x07\x0c\x07\
	\x0e\x07\u{30e}\x0b\x07\x03\x07\x03\x07\x07\x07\u{312}\x0a\x07\x0c\x07\x0e\
	\x07\u{315}\x0b\x07\x03\x07\x03\x07\x07\x07\u{319}\x0a\x07\x0c\x07\x0e\x07\
	\u{31c}\x0b\x07\x03\x07\x03\x07\x03\x07\x03\x07\x07\x07\u{322}\x0a\x07\x0c\
	\x07\x0e\x07\u{325}\x0b\x07\x03\x07\x05\x07\u{328}\x0a\x07\x03\x07\x03\x07\
	\x05\x07\u{32c}\x0a\x07\x03\x07\x03\x07\x05\x07\u{330}\x0a\x07\x03\x07\x03\
	\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x07\x07\u{33b}\
	\x0a\x07\x0c\x07\x0e\x07\u{33e}\x0b\x07\x03\x07\x03\x07\x05\x07\u{342}\x0a\
	\x07\x03\x07\x03\x07\x03\x07\x07\x07\u{347}\x0a\x07\x0c\x07\x0e\x07\u{34a}\
	\x0b\x07\x03\x07\x03\x07\x07\x07\u{34e}\x0a\x07\x0c\x07\x0e\x07\u{351}\x0b\
	\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x07\x07\u{358}\x0a\x07\x0c\
	\x07\x0e\x07\u{35b}\x0b\x07\x03\x07\x05\x07\u{35e}\x0a\x07\x05\x07\u{360}\
	\x0a\x07\x03\x07\x03\x07\x07\x07\u{364}\x0a\x07\x0c\x07\x0e\x07\u{367}\x0b\
	\x07\x03\x07\x03\x07\x07\x07\u{36b}\x0a\x07\x0c\x07\x0e\x07\u{36e}\x0b\x07\
	\x03\x07\x03\x07\x07\x07\u{372}\x0a\x07\x0c\x07\x0e\x07\u{375}\x0b\x07\x03\
	\x07\x03\x07\x07\x07\u{379}\x0a\x07\x0c\x07\x0e\x07\u{37c}\x0b\x07\x03\x07\
	\x03\x07\x07\x07\u{380}\x0a\x07\x0c\x07\x0e\x07\u{383}\x0b\x07\x03\x07\x03\
	\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x07\x07\u{38d}\x0a\
	\x07\x0c\x07\x0e\x07\u{390}\x0b\x07\x05\x07\u{392}\x0a\x07\x03\x08\x03\x08\
	\x03\x08\x07\x08\u{397}\x0a\x08\x0c\x08\x0e\x08\u{39a}\x0b\x08\x03\x09\x05\
	\x09\u{39d}\x0a\x09\x03\x09\x03\x09\x03\x0a\x03\x0a\x05\x0a\u{3a3}\x0a\x0a\
	\x03\x0a\x03\x0a\x03\x0a\x07\x0a\u{3a8}\x0a\x0a\x0c\x0a\x0e\x0a\u{3ab}\x0b\
	\x0a\x03\x0b\x03\x0b\x03\x0c\x03\x0c\x03\x0c\x05\x0c\u{3b2}\x0a\x0c\x03\
	\x0d\x03\x0d\x03\x0d\x03\x0e\x03\x0e\x03\x0f\x03\x0f\x03\x10\x03\x10\x05\
	\x10\u{3bd}\x0a\x10\x03\x10\x05\x10\u{3c0}\x0a\x10\x03\x11\x03\x11\x03\x11\
	\x07\x11\u{3c5}\x0a\x11\x0c\x11\x0e\x11\u{3c8}\x0b\x11\x03\x11\x05\x11\u{3cb}\
	\x0a\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\
	\x05\x14\u{3d5}\x0a\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x07\x15\
	\u{3dc}\x0a\x15\x0c\x15\x0e\x15\u{3df}\x0b\x15\x03\x15\x05\x15\u{3e2}\x0a\
	\x15\x03\x16\x03\x16\x03\x16\x03\x16\x07\x16\u{3e8}\x0a\x16\x0c\x16\x0e\
	\x16\u{3eb}\x0b\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x05\
	\x16\u{3f3}\x0a\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x05\x18\u{3fa}\
	\x0a\x18\x03\x19\x03\x19\x03\x1a\x03\x1a\x03\x1a\x03\x1a\x05\x1a\u{402}\
	\x0a\x1a\x05\x1a\u{404}\x0a\x1a\x03\x1a\x03\x1a\x03\x1a\x03\x1a\x03\x1a\
	\x03\x1a\x03\x1a\x03\x1a\x05\x1a\u{40e}\x0a\x1a\x03\x1b\x03\x1b\x05\x1b\
	\u{412}\x0a\x1b\x03\x1c\x03\x1c\x03\x1d\x03\x1d\x05\x1d\u{418}\x0a\x1d\x03\
	\x1e\x03\x1e\x03\x1f\x03\x1f\x03\x20\x03\x20\x03\x20\x03\x20\x07\x20\u{422}\
	\x0a\x20\x0c\x20\x0e\x20\u{425}\x0b\x20\x03\x21\x03\x21\x05\x21\u{429}\x0a\
	\x21\x03\x22\x03\x22\x03\x22\x03\x22\x07\x22\u{42f}\x0a\x22\x0c\x22\x0e\
	\x22\u{432}\x0b\x22\x03\x23\x03\x23\x05\x23\u{436}\x0a\x23\x03\x24\x03\x24\
	\x03\x25\x03\x25\x03\x25\x03\x25\x07\x25\u{43e}\x0a\x25\x0c\x25\x0e\x25\
	\u{441}\x0b\x25\x03\x25\x05\x25\u{444}\x0a\x25\x03\x26\x03\x26\x03\x26\x03\
	\x26\x03\x26\x03\x26\x03\x26\x03\x26\x05\x26\u{44e}\x0a\x26\x03\x27\x03\
	\x27\x05\x27\u{452}\x0a\x27\x03\x27\x03\x27\x05\x27\u{456}\x0a\x27\x03\x28\
	\x03\x28\x05\x28\u{45a}\x0a\x28\x03\x28\x03\x28\x03\x28\x03\x28\x03\x28\
	\x07\x28\u{461}\x0a\x28\x0c\x28\x0e\x28\u{464}\x0b\x28\x03\x28\x05\x28\u{467}\
	\x0a\x28\x05\x28\u{469}\x0a\x28\x03\x28\x03\x28\x05\x28\u{46d}\x0a\x28\x03\
	\x28\x05\x28\u{470}\x0a\x28\x03\x28\x03\x28\x05\x28\u{474}\x0a\x28\x03\x28\
	\x03\x28\x03\x28\x03\x28\x07\x28\u{47a}\x0a\x28\x0c\x28\x0e\x28\u{47d}\x0b\
	\x28\x03\x28\x05\x28\u{480}\x0a\x28\x05\x28\u{482}\x0a\x28\x03\x29\x03\x29\
	\x03\x29\x07\x29\u{487}\x0a\x29\x0c\x29\x0e\x29\u{48a}\x0b\x29\x03\x29\x05\
	\x29\u{48d}\x0a\x29\x03\x2a\x03\x2a\x03\x2a\x03\x2a\x03\x2b\x05\x2b\u{494}\
	\x0a\x2b\x03\x2b\x03\x2b\x03\x2b\x07\x2b\u{499}\x0a\x2b\x0c\x2b\x0e\x2b\
	\u{49c}\x0b\x2b\x03\x2b\x05\x2b\u{49f}\x0a\x2b\x03\x2c\x03\x2c\x03\x2c\x03\
	\x2c\x03\x2c\x07\x2c\u{4a6}\x0a\x2c\x0c\x2c\x0e\x2c\u{4a9}\x0b\x2c\x03\x2c\
	\x05\x2c\u{4ac}\x0a\x2c\x05\x2c\u{4ae}\x0a\x2c\x03\x2c\x03\x2c\x03\x2c\x03\
	\x2c\x03\x2c\x03\x2c\x07\x2c\u{4b6}\x0a\x2c\x0c\x2c\x0e\x2c\u{4b9}\x0b\x2c\
	\x03\x2c\x05\x2c\u{4bc}\x0a\x2c\x05\x2c\u{4be}\x0a\x2c\x03\x2c\x03\x2c\x03\
	\x2c\x03\x2c\x03\x2c\x03\x2c\x03\x2c\x07\x2c\u{4c7}\x0a\x2c\x0c\x2c\x0e\
	\x2c\u{4ca}\x0b\x2c\x03\x2c\x05\x2c\u{4cd}\x0a\x2c\x03\x2c\x03\x2c\x03\x2c\
	\x05\x2c\u{4d2}\x0a\x2c\x03\x2d\x03\x2d\x03\x2d\x03\x2d\x07\x2d\u{4d8}\x0a\
	\x2d\x0c\x2d\x0e\x2d\u{4db}\x0b\x2d\x05\x2d\u{4dd}\x0a\x2d\x03\x2d\x05\x2d\
	\u{4e0}\x0a\x2d\x03\x2d\x03\x2d\x05\x2d\u{4e4}\x0a\x2d\x03\x2e\x03\x2e\x03\
	\x2e\x03\x2e\x03\x2e\x03\x2e\x03\x2f\x05\x2f\u{4ed}\x0a\x2f\x03\x2f\x05\
	\x2f\u{4f0}\x0a\x2f\x03\x2f\x05\x2f\u{4f3}\x0a\x2f\x03\x2f\x05\x2f\u{4f6}\
	\x0a\x2f\x03\x30\x03\x30\x03\x30\x03\x30\x03\x30\x07\x30\u{4fd}\x0a\x30\
	\x0c\x30\x0e\x30\u{500}\x0b\x30\x03\x30\x05\x30\u{503}\x0a\x30\x03\x31\x03\
	\x31\x03\x31\x03\x31\x03\x31\x07\x31\u{50a}\x0a\x31\x0c\x31\x0e\x31\u{50d}\
	\x0b\x31\x03\x31\x05\x31\u{510}\x0a\x31\x03\x32\x03\x32\x05\x32\u{514}\x0a\
	\x32\x03\x32\x03\x32\x03\x32\x03\x32\x03\x32\x03\x33\x03\x33\x03\x34\x03\
	\x34\x05\x34\u{51f}\x0a\x34\x03\x34\x05\x34\u{522}\x0a\x34\x03\x34\x05\x34\
	\u{525}\x0a\x34\x03\x35\x03\x35\x03\x36\x03\x36\x03\x36\x03\x36\x03\x36\
	\x05\x36\u{52e}\x0a\x36\x03\x37\x03\x37\x03\x38\x03\x38\x03\x38\x03\x38\
	\x03\x38\x03\x38\x03\x38\x03\x38\x03\x38\x03\x38\x03\x38\x05\x38\u{53d}\
	\x0a\x38\x03\x38\x03\x38\x03\x38\x03\x38\x03\x38\x05\x38\u{544}\x0a\x38\
	\x07\x38\u{546}\x0a\x38\x0c\x38\x0e\x38\u{549}\x0b\x38\x03\x39\x05\x39\u{54c}\
	\x0a\x39\x03\x39\x03\x39\x05\x39\u{550}\x0a\x39\x03\x39\x03\x39\x05\x39\
	\u{554}\x0a\x39\x03\x39\x03\x39\x05\x39\u{558}\x0a\x39\x05\x39\u{55a}\x0a\
	\x39\x03\x3a\x03\x3a\x03\x3a\x03\x3a\x03\x3a\x03\x3a\x03\x3a\x07\x3a\u{563}\
	\x0a\x3a\x0c\x3a\x0e\x3a\u{566}\x0b\x3a\x03\x3a\x05\x3a\u{569}\x0a\x3a\x03\
	\x3a\x03\x3a\x05\x3a\u{56d}\x0a\x3a\x03\x3b\x03\x3b\x03\x3c\x03\x3c\x03\
	\x3d\x03\x3d\x05\x3d\u{575}\x0a\x3d\x03\x3e\x03\x3e\x03\x3e\x03\x3e\x03\
	\x3e\x03\x3e\x03\x3f\x03\x3f\x03\x40\x03\x40\x03\x41\x03\x41\x03\x41\x05\
	\x41\u{584}\x0a\x41\x03\x41\x05\x41\u{587}\x0a\x41\x03\x42\x03\x42\x03\x42\
	\x03\x42\x05\x42\u{58d}\x0a\x42\x03\x43\x03\x43\x03\x44\x03\x44\x03\x44\
	\x03\x44\x03\x44\x03\x44\x03\x44\x03\x44\x07\x44\u{599}\x0a\x44\x0c\x44\
	\x0e\x44\u{59c}\x0b\x44\x03\x44\x05\x44\u{59f}\x0a\x44\x05\x44\u{5a1}\x0a\
	\x44\x03\x44\x03\x44\x03\x44\x03\x44\x03\x44\x07\x44\u{5a8}\x0a\x44\x0c\
	\x44\x0e\x44\u{5ab}\x0b\x44\x03\x44\x05\x44\u{5ae}\x0a\x44\x05\x44\u{5b0}\
	\x0a\x44\x03\x44\x03\x44\x03\x44\x03\x44\x07\x44\u{5b6}\x0a\x44\x0c\x44\
	\x0e\x44\u{5b9}\x0b\x44\x03\x44\x05\x44\u{5bc}\x0a\x44\x05\x44\u{5be}\x0a\
	\x44\x03\x44\x05\x44\u{5c1}\x0a\x44\x03\x44\x03\x44\x03\x44\x05\x44\u{5c6}\
	\x0a\x44\x03\x44\x05\x44\u{5c9}\x0a\x44\x03\x44\x03\x44\x03\x44\x03\x44\
	\x03\x44\x03\x44\x03\x44\x03\x44\x07\x44\u{5d3}\x0a\x44\x0c\x44\x0e\x44\
	\u{5d6}\x0b\x44\x03\x44\x05\x44\u{5d9}\x0a\x44\x05\x44\u{5db}\x0a\x44\x03\
	\x44\x03\x44\x03\x44\x03\x44\x07\x44\u{5e1}\x0a\x44\x0c\x44\x0e\x44\u{5e4}\
	\x0b\x44\x03\x44\x05\x44\u{5e7}\x0a\x44\x03\x44\x03\x44\x05\x44\u{5eb}\x0a\
	\x44\x03\x45\x03\x45\x03\x45\x03\x45\x03\x46\x03\x46\x03\x46\x03\x46\x03\
	\x46\x03\x46\x03\x46\x03\x46\x03\x46\x05\x46\u{5fa}\x0a\x46\x05\x46\u{5fc}\
	\x0a\x46\x03\x47\x03\x47\x03\x47\x03\x47\x03\x47\x03\x47\x03\x47\x03\x47\
	\x03\x47\x05\x47\u{607}\x0a\x47\x03\x48\x03\x48\x03\x48\x03\x48\x03\x48\
	\x03\x48\x03\x48\x03\x48\x03\x48\x03\x48\x03\x48\x03\x48\x03\x48\x03\x48\
	\x03\x48\x03\x48\x03\x48\x03\x48\x03\x48\x05\x48\u{61c}\x0a\x48\x03\x49\
	\x03\x49\x03\x49\x03\x49\x03\x49\x03\x49\x07\x49\u{624}\x0a\x49\x0c\x49\
	\x0e\x49\u{627}\x0b\x49\x03\x49\x05\x49\u{62a}\x0a\x49\x03\x49\x03\x49\x03\
	\x4a\x03\x4a\x03\x4a\x03\x4a\x03\x4b\x03\x4b\x03\x4c\x03\x4c\x05\x4c\u{636}\
	\x0a\x4c\x03\x4c\x03\x4c\x05\x4c\u{63a}\x0a\x4c\x05\x4c\u{63c}\x0a\x4c\x03\
	\x4d\x03\x4d\x03\x4d\x05\x4d\u{641}\x0a\x4d\x03\x4d\x03\x4d\x03\x4e\x03\
	\x4e\x05\x4e\u{647}\x0a\x4e\x03\x4e\x03\x4e\x03\x4e\x03\x4e\x03\x4e\x03\
	\x4e\x03\x4e\x03\x4e\x03\x4e\x07\x4e\u{652}\x0a\x4e\x0c\x4e\x0e\x4e\u{655}\
	\x0b\x4e\x03\x4e\x05\x4e\u{658}\x0a\x4e\x03\x4e\x03\x4e\x03\x4e\x05\x4e\
	\u{65d}\x0a\x4e\x03\x4e\x03\x4e\x03\x4e\x03\x4e\x03\x4e\x03\x4e\x03\x4e\
	\x03\x4e\x03\x4e\x03\x4e\x03\x4e\x03\x4e\x03\x4e\x03\x4e\x05\x4e\u{66d}\
	\x0a\x4e\x03\x4f\x03\x4f\x03\x4f\x03\x4f\x03\x4f\x07\x4f\u{674}\x0a\x4f\
	\x0c\x4f\x0e\x4f\u{677}\x0b\x4f\x03\x4f\x05\x4f\u{67a}\x0a\x4f\x05\x4f\u{67c}\
	\x0a\x4f\x03\x4f\x05\x4f\u{67f}\x0a\x4f\x03\x4f\x03\x4f\x05\x4f\u{683}\x0a\
	\x4f\x03\x50\x03\x50\x03\x50\x03\x50\x07\x50\u{689}\x0a\x50\x0c\x50\x0e\
	\x50\u{68c}\x0b\x50\x03\x50\x05\x50\u{68f}\x0a\x50\x03\x51\x03\x51\x03\x52\
	\x03\x52\x03\x52\x05\x52\u{696}\x0a\x52\x03\x52\x03\x52\x03\x52\x05\x52\
	\u{69b}\x0a\x52\x03\x53\x03\x53\x03\x53\x03\x53\x03\x53\x03\x53\x03\x53\
	\x07\x53\u{6a4}\x0a\x53\x0c\x53\x0e\x53\u{6a7}\x0b\x53\x03\x53\x05\x53\u{6aa}\
	\x0a\x53\x05\x53\u{6ac}\x0a\x53\x03\x53\x03\x53\x05\x53\u{6b0}\x0a\x53\x05\
	\x53\u{6b2}\x0a\x53\x03\x53\x03\x53\x03\x53\x03\x53\x03\x53\x03\x53\x05\
	\x53\u{6ba}\x0a\x53\x03\x53\x03\x53\x03\x53\x03\x53\x03\x53\x03\x53\x07\
	\x53\u{6c2}\x0a\x53\x0c\x53\x0e\x53\u{6c5}\x0b\x53\x03\x53\x05\x53\u{6c8}\
	\x0a\x53\x03\x53\x03\x53\x03\x53\x05\x53\u{6cd}\x0a\x53\x05\x53\u{6cf}\x0a\
	\x53\x03\x54\x03\x54\x03\x54\x03\x54\x03\x54\x05\x54\u{6d6}\x0a\x54\x03\
	\x54\x03\x54\x05\x54\u{6da}\x0a\x54\x05\x54\u{6dc}\x0a\x54\x03\x54\x03\x54\
	\x03\x54\x03\x54\x03\x54\x05\x54\u{6e3}\x0a\x54\x03\x54\x03\x54\x05\x54\
	\u{6e7}\x0a\x54\x05\x54\u{6e9}\x0a\x54\x05\x54\u{6eb}\x0a\x54\x03\x55\x03\
	\x55\x03\x55\x03\x55\x03\x55\x07\x55\u{6f2}\x0a\x55\x0c\x55\x0e\x55\u{6f5}\
	\x0b\x55\x03\x55\x05\x55\u{6f8}\x0a\x55\x03\x55\x03\x55\x03\x55\x03\x55\
	\x03\x55\x03\x55\x03\x55\x03\x55\x05\x55\u{702}\x0a\x55\x03\x56\x03\x56\
	\x05\x56\u{706}\x0a\x56\x03\x57\x03\x57\x03\x57\x03\x57\x03\x57\x03\x57\
	\x07\x57\u{70e}\x0a\x57\x0c\x57\x0e\x57\u{711}\x0b\x57\x03\x57\x05\x57\u{714}\
	\x0a\x57\x03\x57\x03\x57\x03\x58\x03\x58\x03\x59\x03\x59\x03\x59\x05\x59\
	\u{71d}\x0a\x59\x03\x59\x03\x59\x05\x59\u{721}\x0a\x59\x03\x59\x03\x59\x03\
	\x59\x03\x59\x03\x59\x03\x59\x07\x59\u{729}\x0a\x59\x0c\x59\x0e\x59\u{72c}\
	\x0b\x59\x03\x5a\x03\x5a\x03\x5a\x03\x5a\x03\x5a\x03\x5a\x03\x5a\x03\x5a\
	\x03\x5a\x03\x5a\x05\x5a\u{738}\x0a\x5a\x03\x5a\x03\x5a\x03\x5a\x03\x5a\
	\x03\x5a\x03\x5a\x05\x5a\u{740}\x0a\x5a\x03\x5a\x03\x5a\x03\x5a\x03\x5a\
	\x03\x5a\x07\x5a\u{747}\x0a\x5a\x0c\x5a\x0e\x5a\u{74a}\x0b\x5a\x03\x5a\x05\
	\x5a\u{74d}\x0a\x5a\x03\x5a\x03\x5a\x03\x5a\x05\x5a\u{752}\x0a\x5a\x03\x5a\
	\x03\x5a\x03\x5a\x03\x5a\x03\x5a\x03\x5a\x05\x5a\u{75a}\x0a\x5a\x03\x5a\
	\x03\x5a\x03\x5a\x03\x5a\x05\x5a\u{760}\x0a\x5a\x03\x5a\x05\x5a\u{763}\x0a\
	\x5a\x03\x5a\x03\x5a\x03\x5a\x03\x5a\x03\x5a\x05\x5a\u{76a}\x0a\x5a\x03\
	\x5a\x03\x5a\x05\x5a\u{76e}\x0a\x5a\x03\x5a\x03\x5a\x03\x5a\x05\x5a\u{773}\
	\x0a\x5a\x03\x5a\x03\x5a\x03\x5a\x03\x5a\x03\x5a\x05\x5a\u{77a}\x0a\x5a\
	\x03\x5a\x05\x5a\u{77d}\x0a\x5a\x03\x5b\x03\x5b\x03\x5b\x03\x5b\x05\x5b\
	\u{783}\x0a\x5b\x03\x5b\x03\x5b\x03\x5b\x03\x5b\x03\x5b\x03\x5b\x03\x5b\
	\x03\x5b\x03\x5b\x03\x5b\x03\x5b\x03\x5b\x03\x5b\x03\x5b\x03\x5b\x07\x5b\
	\u{794}\x0a\x5b\x0c\x5b\x0e\x5b\u{797}\x0b\x5b\x03\x5c\x03\x5c\x03\x5c\x03\
	\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\
	\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x06\x5c\u{7aa}\x0a\x5c\x0d\x5c\x0e\
	\x5c\u{7ab}\x03\x5c\x05\x5c\u{7af}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\
	\x03\x5c\x03\x5c\x03\x5c\x07\x5c\u{7b8}\x0a\x5c\x0c\x5c\x0e\x5c\u{7bb}\x0b\
	\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\
	\x5c\x03\x5c\x03\x5c\x03\x5c\x05\x5c\u{7c9}\x0a\x5c\x03\x5c\x03\x5c\x03\
	\x5c\x05\x5c\u{7ce}\x0a\x5c\x03\x5c\x05\x5c\u{7d1}\x0a\x5c\x03\x5c\x03\x5c\
	\x03\x5c\x05\x5c\u{7d6}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\
	\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x07\x5c\u{7e1}\x0a\x5c\x0c\x5c\x0e\x5c\
	\u{7e4}\x0b\x5c\x03\x5c\x05\x5c\u{7e7}\x0a\x5c\x03\x5c\x03\x5c\x05\x5c\u{7eb}\
	\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\
	\x06\x5c\u{7f5}\x0a\x5c\x0d\x5c\x0e\x5c\u{7f6}\x03\x5c\x03\x5c\x05\x5c\u{7fb}\
	\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x06\x5c\u{801}\x0a\x5c\x0d\x5c\
	\x0e\x5c\u{802}\x03\x5c\x03\x5c\x05\x5c\u{807}\x0a\x5c\x03\x5c\x03\x5c\x03\
	\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\
	\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x05\x5c\u{81c}\
	\x0a\x5c\x03\x5c\x05\x5c\u{81f}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\
	\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x05\x5c\u{82a}\x0a\x5c\x03\x5c\
	\x05\x5c\u{82d}\x0a\x5c\x05\x5c\u{82f}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\
	\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x05\x5c\u{83a}\x0a\x5c\x03\
	\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x05\
	\x5c\u{845}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\
	\x5c\x05\x5c\u{84e}\x0a\x5c\x03\x5c\x05\x5c\u{851}\x0a\x5c\x03\x5c\x03\x5c\
	\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\
	\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x05\x5c\u{865}\
	\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x07\x5c\u{86a}\x0a\x5c\x0c\x5c\x0e\x5c\
	\u{86d}\x0b\x5c\x05\x5c\u{86f}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\
	\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\
	\x5c\x03\x5c\x03\x5c\x07\x5c\u{881}\x0a\x5c\x0c\x5c\x0e\x5c\u{884}\x0b\x5c\
	\x05\x5c\u{886}\x0a\x5c\x03\x5c\x05\x5c\u{889}\x0a\x5c\x03\x5c\x03\x5c\x03\
	\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\
	\x5c\x07\x5c\u{897}\x0a\x5c\x0c\x5c\x0e\x5c\u{89a}\x0b\x5c\x05\x5c\u{89c}\
	\x0a\x5c\x03\x5c\x05\x5c\u{89f}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\
	\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\
	\x05\x5c\u{8ae}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\
	\x03\x5c\x05\x5c\u{8b7}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x05\x5c\
	\u{8bd}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x05\x5c\u{8c3}\x0a\x5c\x03\
	\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x05\
	\x5c\u{8ce}\x0a\x5c\x05\x5c\u{8d0}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x05\x5c\
	\u{8d5}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x05\x5c\u{8dc}\x0a\
	\x5c\x05\x5c\u{8de}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x05\x5c\u{8e4}\
	\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x05\x5c\u{8ea}\x0a\x5c\x03\x5c\
	\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x07\x5c\u{8f3}\x0a\x5c\
	\x0c\x5c\x0e\x5c\u{8f6}\x0b\x5c\x03\x5c\x05\x5c\u{8f9}\x0a\x5c\x03\x5c\x03\
	\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x05\x5c\u{901}\x0a\x5c\x03\x5c\x03\
	\x5c\x03\x5c\x05\x5c\u{906}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x05\x5c\u{90b}\
	\x0a\x5c\x05\x5c\u{90d}\x0a\x5c\x05\x5c\u{90f}\x0a\x5c\x03\x5c\x03\x5c\x03\
	\x5c\x03\x5c\x05\x5c\u{915}\x0a\x5c\x05\x5c\u{917}\x0a\x5c\x03\x5c\x03\x5c\
	\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x07\x5c\u{91f}\x0a\x5c\x0c\x5c\x0e\x5c\
	\u{922}\x0b\x5c\x03\x5c\x05\x5c\u{925}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\
	\x5c\x03\x5c\x03\x5c\x05\x5c\u{92d}\x0a\x5c\x05\x5c\u{92f}\x0a\x5c\x03\x5c\
	\x03\x5c\x03\x5c\x03\x5c\x05\x5c\u{935}\x0a\x5c\x05\x5c\u{937}\x0a\x5c\x03\
	\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x07\x5c\u{93e}\x0a\x5c\x0c\x5c\x0e\
	\x5c\u{941}\x0b\x5c\x03\x5c\x05\x5c\u{944}\x0a\x5c\x05\x5c\u{946}\x0a\x5c\
	\x03\x5c\x03\x5c\x05\x5c\u{94a}\x0a\x5c\x03\x5c\x03\x5c\x03\x5c\x03\x5c\
	\x03\x5c\x03\x5c\x03\x5c\x03\x5c\x07\x5c\u{954}\x0a\x5c\x0c\x5c\x0e\x5c\
	\u{957}\x0b\x5c\x03\x5d\x05\x5d\u{95a}\x0a\x5d\x03\x5e\x05\x5e\u{95d}\x0a\
	\x5e\x03\x5e\x05\x5e\u{960}\x0a\x5e\x03\x5e\x05\x5e\u{963}\x0a\x5e\x03\x5f\
	\x03\x5f\x03\x60\x03\x60\x03\x60\x03\x60\x03\x60\x07\x60\u{96c}\x0a\x60\
	\x0c\x60\x0e\x60\u{96f}\x0b\x60\x05\x60\u{971}\x0a\x60\x03\x61\x03\x61\x03\
	\x61\x03\x61\x03\x61\x03\x61\x05\x61\u{979}\x0a\x61\x03\x62\x03\x62\x03\
	\x62\x05\x62\u{97e}\x0a\x62\x03\x63\x03\x63\x03\x63\x03\x63\x05\x63\u{984}\
	\x0a\x63\x03\x63\x03\x63\x03\x63\x03\x63\x07\x63\u{98a}\x0a\x63\x0c\x63\
	\x0e\x63\u{98d}\x0b\x63\x05\x63\u{98f}\x0a\x63\x03\x63\x05\x63\u{992}\x0a\
	\x63\x03\x64\x03\x64\x03\x64\x05\x64\u{997}\x0a\x64\x03\x65\x03\x65\x03\
	\x65\x05\x65\u{99c}\x0a\x65\x03\x66\x03\x66\x03\x66\x03\x66\x03\x67\x03\
	\x67\x03\x68\x03\x68\x03\x68\x03\x68\x05\x68\u{9a8}\x0a\x68\x03\x69\x03\
	\x69\x05\x69\u{9ac}\x0a\x69\x03\x69\x03\x69\x05\x69\u{9b0}\x0a\x69\x03\x69\
	\x05\x69\u{9b3}\x0a\x69\x05\x69\u{9b5}\x0a\x69\x03\x6a\x03\x6a\x03\x6a\x03\
	\x6a\x03\x6a\x03\x6a\x05\x6a\u{9bd}\x0a\x6a\x03\x6b\x05\x6b\u{9c0}\x0a\x6b\
	\x03\x6b\x03\x6b\x03\x6b\x03\x6b\x03\x6b\x03\x6b\x03\x6b\x03\x6b\x05\x6b\
	\u{9ca}\x0a\x6b\x03\x6c\x03\x6c\x03\x6d\x03\x6d\x03\x6d\x03\x6d\x05\x6d\
	\u{9d2}\x0a\x6d\x03\x6e\x03\x6e\x03\x6e\x03\x6e\x05\x6e\u{9d8}\x0a\x6e\x05\
	\x6e\u{9da}\x0a\x6e\x03\x6f\x03\x6f\x03\x6f\x03\x6f\x03\x6f\x03\x6f\x05\
	\x6f\u{9e2}\x0a\x6f\x03\x70\x03\x70\x03\x71\x03\x71\x03\x72\x03\x72\x03\
	\x73\x03\x73\x05\x73\u{9ec}\x0a\x73\x03\x73\x03\x73\x05\x73\u{9f0}\x0a\x73\
	\x03\x73\x03\x73\x03\x73\x05\x73\u{9f5}\x0a\x73\x03\x74\x03\x74\x03\x75\
	\x03\x75\x03\x76\x03\x76\x03\x77\x03\x77\x03\x77\x05\x77\u{a00}\x0a\x77\
	\x03\x77\x05\x77\u{a03}\x0a\x77\x03\x78\x03\x78\x03\x78\x03\x78\x03\x78\
	\x03\x78\x03\x78\x07\x78\u{a0c}\x0a\x78\x0c\x78\x0e\x78\u{a0f}\x0b\x78\x03\
	\x78\x05\x78\u{a12}\x0a\x78\x03\x78\x03\x78\x03\x78\x03\x78\x03\x78\x03\
	\x78\x05\x78\u{a1a}\x0a\x78\x03\x78\x03\x78\x03\x78\x03\x78\x03\x78\x05\
	\x78\u{a21}\x0a\x78\x03\x78\x03\x78\x03\x78\x05\x78\u{a26}\x0a\x78\x03\x78\
	\x03\x78\x03\x78\x03\x78\x03\x78\x05\x78\u{a2d}\x0a\x78\x03\x78\x03\x78\
	\x03\x78\x03\x78\x03\x78\x03\x78\x03\x78\x03\x78\x05\x78\u{a37}\x0a\x78\
	\x03\x78\x03\x78\x03\x78\x05\x78\u{a3c}\x0a\x78\x03\x78\x03\x78\x03\x78\
	\x03\x78\x03\x78\x05\x78\u{a43}\x0a\x78\x03\x78\x03\x78\x03\x78\x03\x78\
	\x03\x78\x03\x78\x03\x78\x03\x78\x03\x78\x03\x78\x03\x78\x05\x78\u{a50}\
	\x0a\x78\x03\x78\x03\x78\x03\x78\x03\x78\x03\x78\x03\x78\x03\x78\x03\x78\
	\x03\x78\x03\x78\x03\x78\x03\x78\x07\x78\u{a5e}\x0a\x78\x0c\x78\x0e\x78\
	\u{a61}\x0b\x78\x03\x78\x05\x78\u{a64}\x0a\x78\x03\x78\x03\x78\x05\x78\u{a68}\
	\x0a\x78\x03\x78\x03\x78\x03\x78\x03\x78\x03\x78\x07\x78\u{a6f}\x0a\x78\
	\x0c\x78\x0e\x78\u{a72}\x0b\x78\x03\x78\x03\x78\x05\x78\u{a76}\x0a\x78\x03\
	\x79\x03\x79\x03\x79\x03\x79\x05\x79\u{a7c}\x0a\x79\x03\x7a\x03\x7a\x05\
	\x7a\u{a80}\x0a\x7a\x03\x7b\x03\x7b\x03\x7b\x03\x7b\x03\x7b\x03\x7c\x03\
	\x7c\x03\x7c\x03\x7c\x03\x7c\x03\x7c\x03\x7d\x03\x7d\x03\x7d\x03\x7d\x03\
	\x7d\x03\x7d\x05\x7d\u{a93}\x0a\x7d\x03\x7e\x03\x7e\x03\x7e\x03\x7e\x07\
	\x7e\u{a99}\x0a\x7e\x0c\x7e\x0e\x7e\u{a9c}\x0b\x7e\x03\x7e\x05\x7e\u{a9f}\
	\x0a\x7e\x05\x7e\u{aa1}\x0a\x7e\x03\x7e\x03\x7e\x03\x7e\x03\x7e\x05\x7e\
	\u{aa7}\x0a\x7e\x03\x7e\x05\x7e\u{aaa}\x0a\x7e\x03\x7e\x03\x7e\x03\x7e\x03\
	\x7e\x03\x7e\x05\x7e\u{ab1}\x0a\x7e\x03\x7e\x03\x7e\x03\x7e\x03\x7e\x07\
	\x7e\u{ab7}\x0a\x7e\x0c\x7e\x0e\x7e\u{aba}\x0b\x7e\x03\x7e\x05\x7e\u{abd}\
	\x0a\x7e\x05\x7e\u{abf}\x0a\x7e\x03\x7e\x03\x7e\x03\x7e\x03\x7e\x07\x7e\
	\u{ac5}\x0a\x7e\x0c\x7e\x0e\x7e\u{ac8}\x0b\x7e\x03\x7e\x05\x7e\u{acb}\x0a\
	\x7e\x05\x7e\u{acd}\x0a\x7e\x03\x7f\x03\x7f\x03\x7f\x03\x7f\x03\x7f\x03\
	\x7f\x03\x7f\x03\x7f\x03\x7f\x03\x7f\x03\x7f\x03\x7f\x03\x7f\x03\x7f\x03\
	\x7f\x03\x7f\x03\x7f\x03\x7f\x03\x7f\x03\x7f\x03\x7f\x03\x7f\x03\x7f\x03\
	\x7f\x05\x7f\u{ae7}\x0a\x7f\x03\u{80}\x03\u{80}\x03\u{80}\x03\u{80}\x03\
	\u{80}\x03\u{80}\x03\u{80}\x03\u{80}\x03\u{80}\x05\u{80}\u{af2}\x0a\u{80}\
	\x03\u{81}\x03\u{81}\x03\u{81}\x05\u{81}\u{af7}\x0a\u{81}\x03\u{81}\x03\
	\u{81}\x03\u{81}\x03\u{81}\x03\u{81}\x07\u{81}\u{afe}\x0a\u{81}\x0c\u{81}\
	\x0e\u{81}\u{b01}\x0b\u{81}\x03\u{82}\x03\u{82}\x03\u{82}\x03\u{82}\x03\
	\u{82}\x03\u{82}\x03\u{82}\x03\u{82}\x07\u{82}\u{b0b}\x0a\u{82}\x0c\u{82}\
	\x0e\u{82}\u{b0e}\x0b\u{82}\x03\u{82}\x05\u{82}\u{b11}\x0a\u{82}\x03\u{82}\
	\x03\u{82}\x03\u{82}\x03\u{82}\x03\u{82}\x03\u{82}\x03\u{82}\x03\u{82}\x03\
	\u{82}\x03\u{82}\x03\u{82}\x03\u{82}\x05\u{82}\u{b1f}\x0a\u{82}\x03\u{83}\
	\x03\u{83}\x05\u{83}\u{b23}\x0a\u{83}\x03\u{83}\x03\u{83}\x05\u{83}\u{b27}\
	\x0a\u{83}\x03\u{83}\x03\u{83}\x05\u{83}\u{b2b}\x0a\u{83}\x03\u{83}\x03\
	\u{83}\x03\u{83}\x03\u{83}\x05\u{83}\u{b31}\x0a\u{83}\x03\u{83}\x03\u{83}\
	\x05\u{83}\u{b35}\x0a\u{83}\x03\u{83}\x03\u{83}\x05\u{83}\u{b39}\x0a\u{83}\
	\x03\u{83}\x05\u{83}\u{b3c}\x0a\u{83}\x03\u{83}\x03\u{83}\x05\u{83}\u{b40}\
	\x0a\u{83}\x05\u{83}\u{b42}\x0a\u{83}\x03\u{84}\x03\u{84}\x03\u{84}\x03\
	\u{84}\x03\u{84}\x05\u{84}\u{b49}\x0a\u{84}\x03\u{85}\x03\u{85}\x03\u{85}\
	\x03\u{85}\x03\u{85}\x03\u{85}\x03\u{85}\x05\u{85}\u{b52}\x0a\u{85}\x03\
	\u{86}\x03\u{86}\x03\u{86}\x03\u{86}\x05\u{86}\u{b58}\x0a\u{86}\x03\u{87}\
	\x03\u{87}\x03\u{88}\x03\u{88}\x03\u{88}\x07\u{88}\u{b5f}\x0a\u{88}\x0c\
	\u{88}\x0e\u{88}\u{b62}\x0b\u{88}\x03\u{89}\x03\u{89}\x03\u{8a}\x03\u{8a}\
	\x03\u{8a}\x03\u{8a}\x03\u{8a}\x03\u{8a}\x03\u{8b}\x03\u{8b}\x03\u{8c}\x03\
	\u{8c}\x03\u{8c}\x03\u{8c}\x03\u{8c}\x05\u{8c}\u{b73}\x0a\u{8c}\x03\u{8d}\
	\x03\u{8d}\x03\u{8d}\x05\u{8d}\u{b78}\x0a\u{8d}\x03\u{8e}\x03\u{8e}\x03\
	\u{8f}\x03\u{8f}\x03\u{90}\x03\u{90}\x03\u{90}\x03\u{91}\x03\u{91}\x03\u{91}\
	\x03\u{91}\x03\u{92}\x03\u{92}\x03\u{92}\x07\u{92}\u{b88}\x0a\u{92}\x0c\
	\u{92}\x0e\u{92}\u{b8b}\x0b\u{92}\x03\u{93}\x05\u{93}\u{b8e}\x0a\u{93}\x03\
	\u{93}\x03\u{93}\x05\u{93}\u{b92}\x0a\u{93}\x03\u{93}\x03\u{93}\x05\u{93}\
	\u{b96}\x0a\u{93}\x03\u{93}\x05\u{93}\u{b99}\x0a\u{93}\x03\u{94}\x03\u{94}\
	\x03\u{94}\x03\u{94}\x03\u{94}\x07\u{94}\u{ba0}\x0a\u{94}\x0c\u{94}\x0e\
	\u{94}\u{ba3}\x0b\u{94}\x03\u{94}\x03\u{94}\x03\u{94}\x03\u{94}\x03\u{94}\
	\x03\u{94}\x03\u{94}\x03\u{94}\x03\u{94}\x03\u{94}\x03\u{94}\x03\u{94}\x03\
	\u{94}\x03\u{94}\x03\u{94}\x03\u{94}\x03\u{94}\x03\u{94}\x03\u{94}\x07\u{94}\
	\u{bb8}\x0a\u{94}\x0c\u{94}\x0e\u{94}\u{bbb}\x0b\u{94}\x03\u{94}\x03\u{94}\
	\x03\u{94}\x03\u{94}\x05\u{94}\u{bc1}\x0a\u{94}\x03\u{95}\x03\u{95}\x03\
	\u{95}\x03\u{95}\x05\u{95}\u{bc7}\x0a\u{95}\x03\u{96}\x03\u{96}\x03\u{96}\
	\x07\u{96}\u{bcc}\x0a\u{96}\x0c\u{96}\x0e\u{96}\u{bcf}\x0b\u{96}\x03\u{96}\
	\x05\u{96}\u{bd2}\x0a\u{96}\x03\u{97}\x03\u{97}\x03\u{97}\x02\x07\x6e\u{b0}\
	\u{b4}\u{b6}\u{100}\u{98}\x02\x04\x06\x08\x0a\x0c\x0e\x10\x12\x14\x16\x18\
	\x1a\x1c\x1e\x20\x22\x24\x26\x28\x2a\x2c\x2e\x30\x32\x34\x36\x38\x3a\x3c\
	\x3e\x40\x42\x44\x46\x48\x4a\x4c\x4e\x50\x52\x54\x56\x58\x5a\x5c\x5e\x60\
	\x62\x64\x66\x68\x6a\x6c\x6e\x70\x72\x74\x76\x78\x7a\x7c\x7e\u{80}\u{82}\
	\u{84}\u{86}\u{88}\u{8a}\u{8c}\u{8e}\u{90}\u{92}\u{94}\u{96}\u{98}\u{9a}\
	\u{9c}\u{9e}\u{a0}\u{a2}\u{a4}\u{a6}\u{a8}\u{aa}\u{ac}\u{ae}\u{b0}\u{b2}\
	\u{b4}\u{b6}\u{b8}\u{ba}\u{bc}\u{be}\u{c0}\u{c2}\u{c4}\u{c6}\u{c8}\u{ca}\
	\u{cc}\u{ce}\u{d0}\u{d2}\u{d4}\u{d6}\u{d8}\u{da}\u{dc}\u{de}\u{e0}\u{e2}\
	\u{e4}\u{e6}\u{e8}\u{ea}\u{ec}\u{ee}\u{f0}\u{f2}\u{f4}\u{f6}\u{f8}\u{fa}\
	\u{fc}\u{fe}\u{100}\u{102}\u{104}\u{106}\u{108}\u{10a}\u{10c}\u{10e}\u{110}\
	\u{112}\u{114}\u{116}\u{118}\u{11a}\u{11c}\u{11e}\u{120}\u{122}\u{124}\u{126}\
	\u{128}\u{12a}\u{12c}\x02\x23\x03\x02\u{17d}\u{17d}\x04\x02\x50\x50\u{97}\
	\u{97}\x04\x02\u{111}\u{111}\u{12b}\u{12b}\x03\x02\u{109}\u{10a}\x04\x02\
	\u{17c}\u{17c}\u{185}\u{185}\x05\x02\x67\x67\u{c0}\u{c0}\u{145}\u{145}\x04\
	\x02\x10\x10\x58\x58\x04\x02\x18\x18\x55\x55\x04\x02\x72\x72\u{a7}\u{a7}\
	\x04\x02\x1f\x1f\u{129}\u{129}\x05\x02\x21\x21\u{a9}\u{a9}\u{139}\u{139}\
	\x04\x02\u{8d}\u{8d}\u{114}\u{114}\x04\x02\u{9b}\u{9b}\u{ad}\u{ad}\x04\x02\
	\u{176}\u{177}\u{181}\u{181}\x03\x02\u{178}\u{17a}\x03\x02\u{176}\u{177}\
	\x04\x02\u{a3}\u{a3}\u{d5}\u{d5}\x03\x02\u{150}\u{152}\x06\x02\x64\x64\x6e\
	\x6e\u{13c}\u{13c}\u{147}\u{147}\x04\x02\x39\x39\u{144}\u{144}\x04\x02\x71\
	\x71\u{10b}\u{10b}\x03\x02\u{170}\u{175}\x05\x02\x10\x10\x15\x15\u{121}\
	\u{121}\x04\x02\x6e\x6e\u{13c}\u{13c}\x0c\x02\x49\x4a\u{86}\u{87}\u{b4}\
	\u{b4}\u{bf}\u{bf}\u{c1}\u{c2}\u{c4}\u{c5}\u{10c}\u{10c}\u{10e}\u{110}\u{15b}\
	\u{15b}\u{166}\u{167}\x03\x02\u{c8}\u{cb}\x04\x02\x73\x73\u{ee}\u{ee}\x04\
	\x02\u{d8}\u{d8}\u{164}\u{164}\x05\x02\x7f\x7f\u{9d}\u{9d}\u{131}\u{131}\
	\x06\x02\x5a\x5a\u{98}\u{98}\u{b3}\u{b3}\u{154}\u{154}\x07\x02\x40\x40\x51\
	\x51\u{93}\u{93}\u{115}\u{115}\u{14c}\u{14c}\x04\x02\u{136}\u{136}\u{159}\
	\u{159}\x48\x02\x0b\x10\x12\x12\x14\x16\x18\x1b\x1e\x1f\x21\x21\x23\x26\
	\x2b\x2f\x31\x32\x34\x36\x38\x39\x3b\x3b\x3d\x3f\x43\x43\x45\x4a\x4c\x4d\
	\x4f\x50\x53\x57\x5a\x5a\x5c\x5d\x60\x60\x62\x64\x68\x69\x6b\x6c\x6f\x73\
	\x75\x75\x79\x79\x7b\x7f\u{82}\u{83}\u{86}\u{87}\u{89}\u{8a}\u{8c}\u{8d}\
	\u{8f}\u{8f}\u{91}\u{91}\u{95}\u{95}\u{97}\u{98}\u{9a}\u{9a}\u{9d}\u{9d}\
	\u{a3}\u{a9}\u{ab}\u{ac}\u{ae}\u{ae}\u{b0}\u{c5}\u{c7}\u{cd}\u{d1}\u{d5}\
	\u{d7}\u{d9}\u{dd}\u{dd}\u{df}\u{df}\u{e1}\u{e3}\u{e5}\u{ef}\u{f2}\u{f8}\
	\u{fa}\u{102}\u{104}\u{114}\u{116}\u{116}\u{119}\u{11d}\u{120}\u{121}\u{123}\
	\u{124}\u{126}\u{12a}\u{12c}\u{12f}\u{131}\u{132}\u{134}\u{137}\u{139}\u{13a}\
	\u{13d}\u{140}\u{142}\u{144}\u{146}\u{149}\u{14c}\u{14e}\u{150}\u{155}\u{157}\
	\u{15b}\u{15e}\u{15e}\u{160}\u{167}\u{169}\u{16a}\x02\u{d80}\x02\u{12f}\
	\x03\x02\x02\x02\x04\u{13d}\x03\x02\x02\x02\x06\u{144}\x03\x02\x02\x02\x08\
	\u{147}\x03\x02\x02\x02\x0a\u{14a}\x03\x02\x02\x02\x0c\u{391}\x03\x02\x02\
	\x02\x0e\u{393}\x03\x02\x02\x02\x10\u{39c}\x03\x02\x02\x02\x12\u{3a0}\x03\
	\x02\x02\x02\x14\u{3ac}\x03\x02\x02\x02\x16\u{3ae}\x03\x02\x02\x02\x18\u{3b3}\
	\x03\x02\x02\x02\x1a\u{3b6}\x03\x02\x02\x02\x1c\u{3b8}\x03\x02\x02\x02\x1e\
	\u{3ba}\x03\x02\x02\x02\x20\u{3c1}\x03\x02\x02\x02\x22\u{3cc}\x03\x02\x02\
	\x02\x24\u{3d0}\x03\x02\x02\x02\x26\u{3d2}\x03\x02\x02\x02\x28\u{3d8}\x03\
	\x02\x02\x02\x2a\u{3f2}\x03\x02\x02\x02\x2c\u{3f4}\x03\x02\x02\x02\x2e\u{3f9}\
	\x03\x02\x02\x02\x30\u{3fb}\x03\x02\x02\x02\x32\u{3fd}\x03\x02\x02\x02\x34\
	\u{40f}\x03\x02\x02\x02\x36\u{413}\x03\x02\x02\x02\x38\u{417}\x03\x02\x02\
	\x02\x3a\u{419}\x03\x02\x02\x02\x3c\u{41b}\x03\x02\x02\x02\x3e\u{41d}\x03\
	\x02\x02\x02\x40\u{426}\x03\x02\x02\x02\x42\u{42a}\x03\x02\x02\x02\x44\u{433}\
	\x03\x02\x02\x02\x46\u{437}\x03\x02\x02\x02\x48\u{439}\x03\x02\x02\x02\x4a\
	\u{44d}\x03\x02\x02\x02\x4c\u{44f}\x03\x02\x02\x02\x4e\u{457}\x03\x02\x02\
	\x02\x50\u{483}\x03\x02\x02\x02\x52\u{48e}\x03\x02\x02\x02\x54\u{493}\x03\
	\x02\x02\x02\x56\u{4d1}\x03\x02\x02\x02\x58\u{4e3}\x03\x02\x02\x02\x5a\u{4e5}\
	\x03\x02\x02\x02\x5c\u{4ec}\x03\x02\x02\x02\x5e\u{4f7}\x03\x02\x02\x02\x60\
	\u{504}\x03\x02\x02\x02\x62\u{511}\x03\x02\x02\x02\x64\u{51a}\x03\x02\x02\
	\x02\x66\u{524}\x03\x02\x02\x02\x68\u{526}\x03\x02\x02\x02\x6a\u{52d}\x03\
	\x02\x02\x02\x6c\u{52f}\x03\x02\x02\x02\x6e\u{531}\x03\x02\x02\x02\x70\u{559}\
	\x03\x02\x02\x02\x72\u{56c}\x03\x02\x02\x02\x74\u{56e}\x03\x02\x02\x02\x76\
	\u{570}\x03\x02\x02\x02\x78\u{572}\x03\x02\x02\x02\x7a\u{576}\x03\x02\x02\
	\x02\x7c\u{57c}\x03\x02\x02\x02\x7e\u{57e}\x03\x02\x02\x02\u{80}\u{586}\
	\x03\x02\x02\x02\u{82}\u{58c}\x03\x02\x02\x02\u{84}\u{58e}\x03\x02\x02\x02\
	\u{86}\u{590}\x03\x02\x02\x02\u{88}\u{5ec}\x03\x02\x02\x02\u{8a}\u{5fb}\
	\x03\x02\x02\x02\u{8c}\u{606}\x03\x02\x02\x02\u{8e}\u{61b}\x03\x02\x02\x02\
	\u{90}\u{61d}\x03\x02\x02\x02\u{92}\u{62d}\x03\x02\x02\x02\u{94}\u{631}\
	\x03\x02\x02\x02\u{96}\u{633}\x03\x02\x02\x02\u{98}\u{63d}\x03\x02\x02\x02\
	\u{9a}\u{66c}\x03\x02\x02\x02\u{9c}\u{66e}\x03\x02\x02\x02\u{9e}\u{684}\
	\x03\x02\x02\x02\u{a0}\u{690}\x03\x02\x02\x02\u{a2}\u{695}\x03\x02\x02\x02\
	\u{a4}\u{69c}\x03\x02\x02\x02\u{a6}\u{6ea}\x03\x02\x02\x02\u{a8}\u{701}\
	\x03\x02\x02\x02\u{aa}\u{703}\x03\x02\x02\x02\u{ac}\u{707}\x03\x02\x02\x02\
	\u{ae}\u{717}\x03\x02\x02\x02\u{b0}\u{720}\x03\x02\x02\x02\u{b2}\u{77c}\
	\x03\x02\x02\x02\u{b4}\u{782}\x03\x02\x02\x02\u{b6}\u{949}\x03\x02\x02\x02\
	\u{b8}\u{959}\x03\x02\x02\x02\u{ba}\u{95c}\x03\x02\x02\x02\u{bc}\u{964}\
	\x03\x02\x02\x02\u{be}\u{970}\x03\x02\x02\x02\u{c0}\u{978}\x03\x02\x02\x02\
	\u{c2}\u{97a}\x03\x02\x02\x02\u{c4}\u{97f}\x03\x02\x02\x02\u{c6}\u{993}\
	\x03\x02\x02\x02\u{c8}\u{998}\x03\x02\x02\x02\u{ca}\u{99d}\x03\x02\x02\x02\
	\u{cc}\u{9a1}\x03\x02\x02\x02\u{ce}\u{9a7}\x03\x02\x02\x02\u{d0}\u{9b4}\
	\x03\x02\x02\x02\u{d2}\u{9bc}\x03\x02\x02\x02\u{d4}\u{9c9}\x03\x02\x02\x02\
	\u{d6}\u{9cb}\x03\x02\x02\x02\u{d8}\u{9d1}\x03\x02\x02\x02\u{da}\u{9d9}\
	\x03\x02\x02\x02\u{dc}\u{9e1}\x03\x02\x02\x02\u{de}\u{9e3}\x03\x02\x02\x02\
	\u{e0}\u{9e5}\x03\x02\x02\x02\u{e2}\u{9e7}\x03\x02\x02\x02\u{e4}\u{9e9}\
	\x03\x02\x02\x02\u{e6}\u{9f6}\x03\x02\x02\x02\u{e8}\u{9f8}\x03\x02\x02\x02\
	\u{ea}\u{9fa}\x03\x02\x02\x02\u{ec}\u{a02}\x03\x02\x02\x02\u{ee}\u{a75}\
	\x03\x02\x02\x02\u{f0}\u{a7b}\x03\x02\x02\x02\u{f2}\u{a7f}\x03\x02\x02\x02\
	\u{f4}\u{a81}\x03\x02\x02\x02\u{f6}\u{a86}\x03\x02\x02\x02\u{f8}\u{a8c}\
	\x03\x02\x02\x02\u{fa}\u{aa0}\x03\x02\x02\x02\u{fc}\u{ae6}\x03\x02\x02\x02\
	\u{fe}\u{af1}\x03\x02\x02\x02\u{100}\u{af3}\x03\x02\x02\x02\u{102}\u{b1e}\
	\x03\x02\x02\x02\u{104}\u{b41}\x03\x02\x02\x02\u{106}\u{b48}\x03\x02\x02\
	\x02\u{108}\u{b51}\x03\x02\x02\x02\u{10a}\u{b57}\x03\x02\x02\x02\u{10c}\
	\u{b59}\x03\x02\x02\x02\u{10e}\u{b5b}\x03\x02\x02\x02\u{110}\u{b63}\x03\
	\x02\x02\x02\u{112}\u{b65}\x03\x02\x02\x02\u{114}\u{b6b}\x03\x02\x02\x02\
	\u{116}\u{b72}\x03\x02\x02\x02\u{118}\u{b77}\x03\x02\x02\x02\u{11a}\u{b79}\
	\x03\x02\x02\x02\u{11c}\u{b7b}\x03\x02\x02\x02\u{11e}\u{b7d}\x03\x02\x02\
	\x02\u{120}\u{b80}\x03\x02\x02\x02\u{122}\u{b84}\x03\x02\x02\x02\u{124}\
	\u{b98}\x03\x02\x02\x02\u{126}\u{bc0}\x03\x02\x02\x02\u{128}\u{bc6}\x03\
	\x02\x02\x02\u{12a}\u{bd1}\x03\x02\x02\x02\u{12c}\u{bd3}\x03\x02\x02\x02\
	\u{12e}\u{130}\x05\x0c\x07\x02\u{12f}\u{12e}\x03\x02\x02\x02\u{12f}\u{130}\
	\x03\x02\x02\x02\u{130}\u{137}\x03\x02\x02\x02\u{131}\u{133}\x07\u{17d}\
	\x02\x02\u{132}\u{134}\x05\x0c\x07\x02\u{133}\u{132}\x03\x02\x02\x02\u{133}\
	\u{134}\x03\x02\x02\x02\u{134}\u{136}\x03\x02\x02\x02\u{135}\u{131}\x03\
	\x02\x02\x02\u{136}\u{139}\x03\x02\x02\x02\u{137}\u{135}\x03\x02\x02\x02\
	\u{137}\u{138}\x03\x02\x02\x02\u{138}\u{13a}\x03\x02\x02\x02\u{139}\u{137}\
	\x03\x02\x02\x02\u{13a}\u{13b}\x07\x02\x02\x03\u{13b}\x03\x03\x02\x02\x02\
	\u{13c}\u{13e}\x05\x0c\x07\x02\u{13d}\u{13c}\x03\x02\x02\x02\u{13d}\u{13e}\
	\x03\x02\x02\x02\u{13e}\u{140}\x03\x02\x02\x02\u{13f}\u{141}\x07\u{17d}\
	\x02\x02\u{140}\u{13f}\x03\x02\x02\x02\u{140}\u{141}\x03\x02\x02\x02\u{141}\
	\u{142}\x03\x02\x02\x02\u{142}\u{143}\x07\x02\x02\x03\u{143}\x05\x03\x02\
	\x02\x02\u{144}\u{145}\x05\u{ae}\x58\x02\u{145}\u{146}\x07\x02\x02\x03\u{146}\
	\x07\x03\x02\x02\x02\u{147}\u{148}\x05\u{10e}\u{88}\x02\u{148}\u{149}\x07\
	\x02\x02\x03\u{149}\x09\x03\x02\x02\x02\u{14a}\u{14b}\x05\u{ec}\x77\x02\
	\u{14b}\u{14c}\x07\x02\x02\x03\u{14c}\x0b\x03\x02\x02\x02\u{14d}\u{392}\
	\x05\x10\x09\x02\u{14e}\u{14f}\x07\u{14d}\x02\x02\u{14f}\u{392}\x05\u{118}\
	\u{8d}\x02\u{150}\u{151}\x07\u{14d}\x02\x02\u{151}\u{152}\x05\u{118}\u{8d}\
	\x02\u{152}\u{153}\x07\u{16f}\x02\x02\u{153}\u{154}\x05\u{118}\u{8d}\x02\
	\u{154}\u{392}\x03\x02\x02\x02\u{155}\u{156}\x07\x5e\x02\x02\u{156}\u{159}\
	\x07\u{111}\x02\x02\u{157}\u{158}\x07\u{89}\x02\x02\u{158}\u{15a}\x07\x6a\
	\x02\x02\u{159}\u{157}\x03\x02\x02\x02\u{159}\u{15a}\x03\x02\x02\x02\u{15a}\
	\u{15b}\x03\x02\x02\x02\u{15b}\u{15f}\x05\u{10e}\u{88}\x02\u{15c}\u{15e}\
	\x0a\x02\x02\x02\u{15d}\u{15c}\x03\x02\x02\x02\u{15e}\u{161}\x03\x02\x02\
	\x02\u{15f}\u{15d}\x03\x02\x02\x02\u{15f}\u{160}\x03\x02\x02\x02\u{160}\
	\u{392}\x03\x02\x02\x02\u{161}\u{15f}\x03\x02\x02\x02\u{162}\u{163}\x07\
	\x11\x02\x02\u{163}\u{164}\x07\u{111}\x02\x02\u{164}\u{165}\x05\u{10e}\u{88}\
	\x02\u{165}\u{166}\x07\u{fb}\x02\x02\u{166}\u{167}\x07\u{137}\x02\x02\u{167}\
	\u{168}\x05\u{118}\u{8d}\x02\u{168}\u{392}\x03\x02\x02\x02\u{169}\u{16a}\
	\x07\x11\x02\x02\u{16a}\u{16b}\x07\u{111}\x02\x02\u{16b}\u{16c}\x05\u{10e}\
	\u{88}\x02\u{16c}\u{16d}\x07\u{11b}\x02\x02\u{16d}\u{16e}\x07\x1b\x02\x02\
	\u{16e}\u{16f}\x05\u{116}\u{8c}\x02\u{16f}\u{392}\x03\x02\x02\x02\u{170}\
	\u{171}\x07\x5e\x02\x02\u{171}\u{172}\x07\u{12b}\x02\x02\u{172}\u{392}\x05\
	\u{10e}\u{88}\x02\u{173}\u{174}\x07\x5e\x02\x02\u{174}\u{175}\x07\u{15a}\
	\x02\x02\u{175}\u{392}\x05\u{10e}\u{88}\x02\u{176}\u{179}\x07\x40\x02\x02\
	\u{177}\u{178}\x07\u{db}\x02\x02\u{178}\u{17a}\x07\u{fd}\x02\x02\u{179}\
	\u{177}\x03\x02\x02\x02\u{179}\u{17a}\x03\x02\x02\x02\u{17a}\u{17b}\x03\
	\x02\x02\x02\u{17b}\u{17f}\x07\u{12b}\x02\x02\u{17c}\u{17d}\x07\u{89}\x02\
	\x02\u{17d}\u{17e}\x07\u{cf}\x02\x02\u{17e}\u{180}\x07\x6a\x02\x02\u{17f}\
	\u{17c}\x03\x02\x02\x02\u{17f}\u{180}\x03\x02\x02\x02\u{180}\u{181}\x03\
	\x02\x02\x02\u{181}\u{183}\x05\u{10e}\u{88}\x02\u{182}\u{184}\x05\u{98}\
	\x4d\x02\u{183}\u{182}\x03\x02\x02\x02\u{183}\u{184}\x03\x02\x02\x02\u{184}\
	\u{187}\x03\x02\x02\x02\u{185}\u{186}\x07\x34\x02\x02\u{186}\u{188}\x05\
	\u{da}\x6e\x02\u{187}\u{185}\x03\x02\x02\x02\u{187}\u{188}\x03\x02\x02\x02\
	\u{188}\u{18b}\x03\x02\x02\x02\u{189}\u{18a}\x07\u{15f}\x02\x02\u{18a}\u{18c}\
	\x05\x26\x14\x02\u{18b}\u{189}\x03\x02\x02\x02\u{18b}\u{18c}\x03\x02\x02\
	\x02\u{18c}\u{18d}\x03\x02\x02\x02\u{18d}\u{193}\x07\x17\x02\x02\u{18e}\
	\u{194}\x05\x10\x09\x02\u{18f}\u{190}\x07\u{16b}\x02\x02\u{190}\u{191}\x05\
	\x10\x09\x02\u{191}\u{192}\x07\u{16c}\x02\x02\u{192}\u{194}\x03\x02\x02\
	\x02\u{193}\u{18e}\x03\x02\x02\x02\u{193}\u{18f}\x03\x02\x02\x02\u{194}\
	\u{19a}\x03\x02\x02\x02\u{195}\u{197}\x07\u{15f}\x02\x02\u{196}\u{198}\x07\
	\u{cc}\x02\x02\u{197}\u{196}\x03\x02\x02\x02\u{197}\u{198}\x03\x02\x02\x02\
	\u{198}\u{199}\x03\x02\x02\x02\u{199}\u{19b}\x07\x45\x02\x02\u{19a}\u{195}\
	\x03\x02\x02\x02\u{19a}\u{19b}\x03\x02\x02\x02\u{19b}\u{392}\x03\x02\x02\
	\x02\u{19c}\u{19d}\x07\x40\x02\x02\u{19d}\u{19e}\x07\u{f9}\x02\x02\u{19e}\
	\u{1a2}\x07\u{12b}\x02\x02\u{19f}\u{1a0}\x07\u{89}\x02\x02\u{1a0}\u{1a1}\
	\x07\u{cf}\x02\x02\u{1a1}\u{1a3}\x07\x6a\x02\x02\u{1a2}\u{19f}\x03\x02\x02\
	\x02\u{1a2}\u{1a3}\x03\x02\x02\x02\u{1a3}\u{1a4}\x03\x02\x02\x02\u{1a4}\
	\u{1a6}\x05\u{10e}\u{88}\x02\u{1a5}\u{1a7}\x05\u{98}\x4d\x02\u{1a6}\u{1a5}\
	\x03\x02\x02\x02\u{1a6}\u{1a7}\x03\x02\x02\x02\u{1a7}\u{1aa}\x03\x02\x02\
	\x02\u{1a8}\u{1a9}\x07\x34\x02\x02\u{1a9}\u{1ab}\x05\u{da}\x6e\x02\u{1aa}\
	\u{1a8}\x03\x02\x02\x02\u{1aa}\u{1ab}\x03\x02\x02\x02\u{1ab}\u{1ae}\x03\
	\x02\x02\x02\u{1ac}\u{1ad}\x07\u{15f}\x02\x02\u{1ad}\u{1af}\x05\x26\x14\
	\x02\u{1ae}\u{1ac}\x03\x02\x02\x02\u{1ae}\u{1af}\x03\x02\x02\x02\u{1af}\
	\u{1b0}\x03\x02\x02\x02\u{1b0}\u{1b6}\x07\x17\x02\x02\u{1b1}\u{1b7}\x05\
	\x10\x09\x02\u{1b2}\u{1b3}\x07\u{16b}\x02\x02\u{1b3}\u{1b4}\x05\x10\x09\
	\x02\u{1b4}\u{1b5}\x07\u{16c}\x02\x02\u{1b5}\u{1b7}\x03\x02\x02\x02\u{1b6}\
	\u{1b1}\x03\x02\x02\x02\u{1b6}\u{1b2}\x03\x02\x02\x02\u{1b7}\u{392}\x03\
	\x02\x02\x02\u{1b8}\u{1bb}\x07\x40\x02\x02\u{1b9}\u{1ba}\x07\u{db}\x02\x02\
	\u{1ba}\u{1bc}\x07\u{fd}\x02\x02\u{1bb}\u{1b9}\x03\x02\x02\x02\u{1bb}\u{1bc}\
	\x03\x02\x02\x02\u{1bc}\u{1bd}\x03\x02\x02\x02\u{1bd}\u{1c1}\x07\u{12b}\
	\x02\x02\u{1be}\u{1bf}\x07\u{89}\x02\x02\u{1bf}\u{1c0}\x07\u{cf}\x02\x02\
	\u{1c0}\u{1c2}\x07\x6a\x02\x02\u{1c1}\u{1be}\x03\x02\x02\x02\u{1c1}\u{1c2}\
	\x03\x02\x02\x02\u{1c2}\u{1c3}\x03\x02\x02\x02\u{1c3}\u{1cb}\x05\u{10e}\
	\u{88}\x02\u{1c4}\u{1c5}\x07\u{16b}\x02\x02\u{1c5}\u{1c7}\x05\x0e\x08\x02\
	\u{1c6}\u{1c8}\x07\x33\x02\x02\u{1c7}\u{1c6}\x03\x02\x02\x02\u{1c7}\u{1c8}\
	\x03\x02\x02\x02\u{1c8}\u{1c9}\x03\x02\x02\x02\u{1c9}\u{1ca}\x07\u{16c}\
	\x02\x02\u{1ca}\u{1cc}\x03\x02\x02\x02\u{1cb}\u{1c4}\x03\x02\x02\x02\u{1cb}\
	\u{1cc}\x03\x02\x02\x02\u{1cc}\u{1cf}\x03\x02\x02\x02\u{1cd}\u{1ce}\x07\
	\x34\x02\x02\u{1ce}\u{1d0}\x05\u{da}\x6e\x02\u{1cf}\u{1cd}\x03\x02\x02\x02\
	\u{1cf}\u{1d0}\x03\x02\x02\x02\u{1d0}\u{1d3}\x03\x02\x02\x02\u{1d1}\u{1d2}\
	\x07\u{15f}\x02\x02\u{1d2}\u{1d4}\x05\x26\x14\x02\u{1d3}\u{1d1}\x03\x02\
	\x02\x02\u{1d3}\u{1d4}\x03\x02\x02\x02\u{1d4}\u{392}\x03\x02\x02\x02\u{1d5}\
	\u{1d6}\x07\u{93}\x02\x02\u{1d6}\u{1d7}\x07\u{96}\x02\x02\u{1d7}\u{1d9}\
	\x05\u{10e}\u{88}\x02\u{1d8}\u{1da}\x05\u{98}\x4d\x02\u{1d9}\u{1d8}\x03\
	\x02\x02\x02\u{1d9}\u{1da}\x03\x02\x02\x02\u{1da}\u{1e0}\x03\x02\x02\x02\
	\u{1db}\u{1e1}\x05\x10\x09\x02\u{1dc}\u{1dd}\x07\u{16b}\x02\x02\u{1dd}\u{1de}\
	\x05\x10\x09\x02\u{1de}\u{1df}\x07\u{16c}\x02\x02\u{1df}\u{1e1}\x03\x02\
	\x02\x02\u{1e0}\u{1db}\x03\x02\x02\x02\u{1e0}\u{1dc}\x03\x02\x02\x02\u{1e1}\
	\u{392}\x03\x02\x02\x02\u{1e2}\u{1e5}\x07\x40\x02\x02\u{1e3}\u{1e4}\x07\
	\u{db}\x02\x02\u{1e4}\u{1e6}\x07\u{fd}\x02\x02\u{1e5}\u{1e3}\x03\x02\x02\
	\x02\u{1e5}\u{1e6}\x03\x02\x02\x02\u{1e6}\u{1e7}\x03\x02\x02\x02\u{1e7}\
	\u{1e8}\x07\u{bb}\x02\x02\u{1e8}\u{1ec}\x07\u{15a}\x02\x02\u{1e9}\u{1ea}\
	\x07\u{89}\x02\x02\u{1ea}\u{1eb}\x07\u{cf}\x02\x02\u{1eb}\u{1ed}\x07\x6a\
	\x02\x02\u{1ec}\u{1e9}\x03\x02\x02\x02\u{1ec}\u{1ed}\x03\x02\x02\x02\u{1ed}\
	\u{1ee}\x03\x02\x02\x02\u{1ee}\u{1f2}\x05\u{10e}\u{88}\x02\u{1ef}\u{1f0}\
	\x07\x7b\x02\x02\u{1f0}\u{1f1}\x07\u{eb}\x02\x02\u{1f1}\u{1f3}\x05\u{e4}\
	\x73\x02\u{1f2}\u{1ef}\x03\x02\x02\x02\u{1f2}\u{1f3}\x03\x02\x02\x02\u{1f3}\
	\u{1f6}\x03\x02\x02\x02\u{1f4}\u{1f5}\x07\x34\x02\x02\u{1f5}\u{1f7}\x05\
	\u{da}\x6e\x02\u{1f6}\u{1f4}\x03\x02\x02\x02\u{1f6}\u{1f7}\x03\x02\x02\x02\
	\u{1f7}\u{1fa}\x03\x02\x02\x02\u{1f8}\u{1f9}\x07\u{15f}\x02\x02\u{1f9}\u{1fb}\
	\x05\x26\x14\x02\u{1fa}\u{1f8}\x03\x02\x02\x02\u{1fa}\u{1fb}\x03\x02\x02\
	\x02\u{1fb}\u{1fc}\x03\x02\x02\x02\u{1fc}\u{202}\x07\x17\x02\x02\u{1fd}\
	\u{1fe}\x07\u{16b}\x02\x02\u{1fe}\u{1ff}\x05\x10\x09\x02\u{1ff}\u{200}\x07\
	\u{16c}\x02\x02\u{200}\u{203}\x03\x02\x02\x02\u{201}\u{203}\x05\x10\x09\
	\x02\u{202}\u{1fd}\x03\x02\x02\x02\u{202}\u{201}\x03\x02\x02\x02\u{203}\
	\u{392}\x03\x02\x02\x02\u{204}\u{207}\x07\x40\x02\x02\u{205}\u{206}\x07\
	\u{db}\x02\x02\u{206}\u{208}\x07\u{fd}\x02\x02\u{207}\u{205}\x03\x02\x02\
	\x02\u{207}\u{208}\x03\x02\x02\x02\u{208}\u{209}\x03\x02\x02\x02\u{209}\
	\u{20a}\x07\u{15a}\x02\x02\u{20a}\u{20d}\x05\u{10e}\u{88}\x02\u{20b}\u{20c}\
	\x07\x34\x02\x02\u{20c}\u{20e}\x05\u{da}\x6e\x02\u{20d}\u{20b}\x03\x02\x02\
	\x02\u{20d}\u{20e}\x03\x02\x02\x02\u{20e}\u{211}\x03\x02\x02\x02\u{20f}\
	\u{210}\x07\u{113}\x02\x02\u{210}\u{212}\x09\x03\x02\x02\u{211}\u{20f}\x03\
	\x02\x02\x02\u{211}\u{212}\x03\x02\x02\x02\u{212}\u{213}\x03\x02\x02\x02\
	\u{213}\u{214}\x07\x17\x02\x02\u{214}\u{215}\x05\x10\x09\x02\u{215}\u{392}\
	\x03\x02\x02\x02\u{216}\u{217}\x07\x56\x02\x02\u{217}\u{392}\x05\u{10e}\
	\u{88}\x02\u{218}\u{219}\x07\u{11d}\x02\x02\u{219}\u{21a}\x07\x32\x02\x02\
	\u{21a}\u{21b}\x07\x76\x02\x02\u{21b}\u{392}\x05\u{10e}\u{88}\x02\u{21c}\
	\u{21f}\x07\x40\x02\x02\u{21d}\u{21e}\x07\u{db}\x02\x02\u{21e}\u{220}\x07\
	\u{fd}\x02\x02\u{21f}\u{21d}\x03\x02\x02\x02\u{21f}\u{220}\x03\x02\x02\x02\
	\u{220}\u{222}\x03\x02\x02\x02\u{221}\u{223}\x07\x6c\x02\x02\u{222}\u{221}\
	\x03\x02\x02\x02\u{222}\u{223}\x03\x02\x02\x02\u{223}\u{224}\x03\x02\x02\
	\x02\u{224}\u{228}\x07\x78\x02\x02\u{225}\u{227}\x0a\x02\x02\x02\u{226}\
	\u{225}\x03\x02\x02\x02\u{227}\u{22a}\x03\x02\x02\x02\u{228}\u{226}\x03\
	\x02\x02\x02\u{228}\u{229}\x03\x02\x02\x02\u{229}\u{392}\x03\x02\x02\x02\
	\u{22a}\u{228}\x03\x02\x02\x02\u{22b}\u{22f}\x07\u{be}\x02\x02\u{22c}\u{22e}\
	\x0a\x02\x02\x02\u{22d}\u{22c}\x03\x02\x02\x02\u{22e}\u{231}\x03\x02\x02\
	\x02\u{22f}\u{22d}\x03\x02\x02\x02\u{22f}\u{230}\x03\x02\x02\x02\u{230}\
	\u{392}\x03\x02\x02\x02\u{231}\u{22f}\x03\x02\x02\x02\u{232}\u{236}\x07\
	\u{11b}\x02\x02\u{233}\u{235}\x0a\x02\x02\x02\u{234}\u{233}\x03\x02\x02\
	\x02\u{235}\u{238}\x03\x02\x02\x02\u{236}\u{234}\x03\x02\x02\x02\u{236}\
	\u{237}\x03\x02\x02\x02\u{237}\u{392}\x03\x02\x02\x02\u{238}\u{236}\x03\
	\x02\x02\x02\u{239}\u{23c}\x07\x40\x02\x02\u{23a}\u{23b}\x07\u{db}\x02\x02\
	\u{23b}\u{23d}\x07\u{fd}\x02\x02\u{23c}\u{23a}\x03\x02\x02\x02\u{23c}\u{23d}\
	\x03\x02\x02\x02\u{23d}\u{23e}\x03\x02\x02\x02\u{23e}\u{242}\x07\u{111}\
	\x02\x02\u{23f}\u{241}\x0a\x02\x02\x02\u{240}\u{23f}\x03\x02\x02\x02\u{241}\
	\u{244}\x03\x02\x02\x02\u{242}\u{240}\x03\x02\x02\x02\u{242}\u{243}\x03\
	\x02\x02\x02\u{243}\u{392}\x03\x02\x02\x02\u{244}\u{242}\x03\x02\x02\x02\
	\u{245}\u{249}\x07\x5e\x02\x02\u{246}\u{248}\x0a\x02\x02\x02\u{247}\u{246}\
	\x03\x02\x02\x02\u{248}\u{24b}\x03\x02\x02\x02\u{249}\u{247}\x03\x02\x02\
	\x02\u{249}\u{24a}\x03\x02\x02\x02\u{24a}\u{392}\x03\x02\x02\x02\u{24b}\
	\u{249}\x03\x02\x02\x02\u{24c}\u{250}\x07\x51\x02\x02\u{24d}\u{24f}\x0a\
	\x02\x02\x02\u{24e}\u{24d}\x03\x02\x02\x02\u{24f}\u{252}\x03\x02\x02\x02\
	\u{250}\u{24e}\x03\x02\x02\x02\u{250}\u{251}\x03\x02\x02\x02\u{251}\u{392}\
	\x03\x02\x02\x02\u{252}\u{250}\x03\x02\x02\x02\u{253}\u{257}\x07\u{13d}\
	\x02\x02\u{254}\u{256}\x0a\x02\x02\x02\u{255}\u{254}\x03\x02\x02\x02\u{256}\
	\u{259}\x03\x02\x02\x02\u{257}\u{255}\x03\x02\x02\x02\u{257}\u{258}\x03\
	\x02\x02\x02\u{258}\u{392}\x03\x02\x02\x02\u{259}\u{257}\x03\x02\x02\x02\
	\u{25a}\u{25e}\x07\x34\x02\x02\u{25b}\u{25d}\x0a\x02\x02\x02\u{25c}\u{25b}\
	\x03\x02\x02\x02\u{25d}\u{260}\x03\x02\x02\x02\u{25e}\u{25c}\x03\x02\x02\
	\x02\u{25e}\u{25f}\x03\x02\x02\x02\u{25f}\u{392}\x03\x02\x02\x02\u{260}\
	\u{25e}\x03\x02\x02\x02\u{261}\u{262}\x07\x11\x02\x02\u{262}\u{265}\x07\
	\u{12b}\x02\x02\u{263}\u{264}\x07\u{89}\x02\x02\u{264}\u{266}\x07\x6a\x02\
	\x02\u{265}\u{263}\x03\x02\x02\x02\u{265}\u{266}\x03\x02\x02\x02\u{266}\
	\u{267}\x03\x02\x02\x02\u{267}\u{268}\x05\u{10e}\u{88}\x02\u{268}\u{269}\
	\x07\u{fb}\x02\x02\u{269}\u{26a}\x07\u{137}\x02\x02\u{26a}\u{26b}\x05\u{10e}\
	\u{88}\x02\u{26b}\u{392}\x03\x02\x02\x02\u{26c}\u{26d}\x07\x11\x02\x02\u{26d}\
	\u{270}\x07\u{12b}\x02\x02\u{26e}\u{26f}\x07\u{89}\x02\x02\u{26f}\u{271}\
	\x07\x6a\x02\x02\u{270}\u{26e}\x03\x02\x02\x02\u{270}\u{271}\x03\x02\x02\
	\x02\u{271}\u{272}\x03\x02\x02\x02\u{272}\u{273}\x05\u{10e}\u{88}\x02\u{273}\
	\u{274}\x07\x0d\x02\x02\u{274}\u{278}\x07\x31\x02\x02\u{275}\u{276}\x07\
	\u{89}\x02\x02\u{276}\u{277}\x07\u{cf}\x02\x02\u{277}\u{279}\x07\x6a\x02\
	\x02\u{278}\u{275}\x03\x02\x02\x02\u{278}\u{279}\x03\x02\x02\x02\u{279}\
	\u{27a}\x03\x02\x02\x02\u{27a}\u{27b}\x05\x16\x0c\x02\u{27b}\u{392}\x03\
	\x02\x02\x02\u{27c}\u{27d}\x07\x11\x02\x02\u{27d}\u{280}\x07\u{12b}\x02\
	\x02\u{27e}\u{27f}\x07\u{89}\x02\x02\u{27f}\u{281}\x07\x6a\x02\x02\u{280}\
	\u{27e}\x03\x02\x02\x02\u{280}\u{281}\x03\x02\x02\x02\u{281}\u{282}\x03\
	\x02\x02\x02\u{282}\u{283}\x05\u{10e}\u{88}\x02\u{283}\u{284}\x07\u{fb}\
	\x02\x02\u{284}\u{287}\x07\x31\x02\x02\u{285}\u{286}\x07\u{89}\x02\x02\u{286}\
	\u{288}\x07\x6a\x02\x02\u{287}\u{285}\x03\x02\x02\x02\u{287}\u{288}\x03\
	\x02\x02\x02\u{288}\u{289}\x03\x02\x02\x02\u{289}\u{28a}\x05\u{118}\u{8d}\
	\x02\u{28a}\u{28b}\x07\u{137}\x02\x02\u{28b}\u{28c}\x05\u{118}\u{8d}\x02\
	\u{28c}\u{392}\x03\x02\x02\x02\u{28d}\u{28e}\x07\x11\x02\x02\u{28e}\u{291}\
	\x07\u{12b}\x02\x02\u{28f}\u{290}\x07\u{89}\x02\x02\u{290}\u{292}\x07\x6a\
	\x02\x02\u{291}\u{28f}\x03\x02\x02\x02\u{291}\u{292}\x03\x02\x02\x02\u{292}\
	\u{293}\x03\x02\x02\x02\u{293}\u{294}\x05\u{10e}\u{88}\x02\u{294}\u{295}\
	\x07\x5e\x02\x02\u{295}\u{298}\x07\x31\x02\x02\u{296}\u{297}\x07\u{89}\x02\
	\x02\u{297}\u{299}\x07\x6a\x02\x02\u{298}\u{296}\x03\x02\x02\x02\u{298}\
	\u{299}\x03\x02\x02\x02\u{299}\u{29a}\x03\x02\x02\x02\u{29a}\u{29b}\x05\
	\u{10e}\u{88}\x02\u{29b}\u{392}\x03\x02\x02\x02\u{29c}\u{29d}\x07\x11\x02\
	\x02\u{29d}\u{2a0}\x07\u{12b}\x02\x02\u{29e}\u{29f}\x07\u{89}\x02\x02\u{29f}\
	\u{2a1}\x07\x6a\x02\x02\u{2a0}\u{29e}\x03\x02\x02\x02\u{2a0}\u{2a1}\x03\
	\x02\x02\x02\u{2a1}\u{2a2}\x03\x02\x02\x02\u{2a2}\u{2a3}\x05\u{10e}\u{88}\
	\x02\u{2a3}\u{2a4}\x07\x11\x02\x02\u{2a4}\u{2a5}\x07\x31\x02\x02\u{2a5}\
	\u{2a6}\x05\u{118}\u{8d}\x02\u{2a6}\u{2a7}\x07\u{11b}\x02\x02\u{2a7}\u{2a8}\
	\x07\x45\x02\x02\u{2a8}\u{2a9}\x07\u{140}\x02\x02\u{2a9}\u{2aa}\x05\u{ec}\
	\x77\x02\u{2aa}\u{392}\x03\x02\x02\x02\u{2ab}\u{2ac}\x07\x11\x02\x02\u{2ac}\
	\u{2ad}\x07\u{12b}\x02\x02\u{2ad}\u{2ae}\x05\u{10e}\u{88}\x02\u{2ae}\u{2af}\
	\x07\u{11b}\x02\x02\u{2af}\u{2b0}\x07\x1b\x02\x02\u{2b0}\u{2b1}\x05\u{116}\
	\u{8c}\x02\u{2b1}\u{392}\x03\x02\x02\x02\u{2b2}\u{2b3}\x07\x11\x02\x02\u{2b3}\
	\u{2b4}\x07\u{12b}\x02\x02\u{2b4}\u{2b5}\x05\u{10e}\u{88}\x02\u{2b5}\u{2b6}\
	\x07\u{11b}\x02\x02\u{2b6}\u{2b7}\x07\u{f4}\x02\x02\u{2b7}\u{2b8}\x05\x28\
	\x15\x02\u{2b8}\u{392}\x03\x02\x02\x02\u{2b9}\u{2ba}\x07\x11\x02\x02\u{2ba}\
	\u{2bb}\x07\u{12b}\x02\x02\u{2bb}\u{2bc}\x05\u{10e}\u{88}\x02\u{2bc}\u{2bd}\
	\x07\x69\x02\x02\u{2bd}\u{2cd}\x05\u{118}\u{8d}\x02\u{2be}\u{2c7}\x07\u{16b}\
	\x02\x02\u{2bf}\u{2c4}\x05\u{bc}\x5f\x02\u{2c0}\u{2c1}\x07\x33\x02\x02\u{2c1}\
	\u{2c3}\x05\u{bc}\x5f\x02\u{2c2}\u{2c0}\x03\x02\x02\x02\u{2c3}\u{2c6}\x03\
	\x02\x02\x02\u{2c4}\u{2c2}\x03\x02\x02\x02\u{2c4}\u{2c5}\x03\x02\x02\x02\
	\u{2c5}\u{2c8}\x03\x02\x02\x02\u{2c6}\u{2c4}\x03\x02\x02\x02\u{2c7}\u{2bf}\
	\x03\x02\x02\x02\u{2c7}\u{2c8}\x03\x02\x02\x02\u{2c8}\u{2ca}\x03\x02\x02\
	\x02\u{2c9}\u{2cb}\x07\x33\x02\x02\u{2ca}\u{2c9}\x03\x02\x02\x02\u{2ca}\
	\u{2cb}\x03\x02\x02\x02\u{2cb}\u{2cc}\x03\x02\x02\x02\u{2cc}\u{2ce}\x07\
	\u{16c}\x02\x02\u{2cd}\u{2be}\x03\x02\x02\x02\u{2cd}\u{2ce}\x03\x02\x02\
	\x02\u{2ce}\u{2d1}\x03\x02\x02\x02\u{2cf}\u{2d0}\x07\u{15d}\x02\x02\u{2d0}\
	\u{2d2}\x05\u{b0}\x59\x02\u{2d1}\u{2cf}\x03\x02\x02\x02\u{2d1}\u{2d2}\x03\
	\x02\x02\x02\u{2d2}\u{392}\x03\x02\x02\x02\u{2d3}\u{2d7}\x07\x12\x02\x02\
	\u{2d4}\u{2d6}\x0a\x02\x02\x02\u{2d5}\u{2d4}\x03\x02\x02\x02\u{2d6}\u{2d9}\
	\x03\x02\x02\x02\u{2d7}\u{2d5}\x03\x02\x02\x02\u{2d7}\u{2d8}\x03\x02\x02\
	\x02\u{2d8}\u{392}\x03\x02\x02\x02\u{2d9}\u{2d7}\x03\x02\x02\x02\u{2da}\
	\u{2db}\x07\u{fa}\x02\x02\u{2db}\u{2dc}\x07\u{bb}\x02\x02\u{2dc}\u{2dd}\
	\x07\u{15a}\x02\x02\u{2dd}\u{392}\x05\u{10e}\u{88}\x02\u{2de}\u{2df}\x07\
	\x11\x02\x02\u{2df}\u{2e0}\x07\u{bb}\x02\x02\u{2e0}\u{2e3}\x07\u{15a}\x02\
	\x02\u{2e1}\u{2e2}\x07\u{89}\x02\x02\u{2e2}\u{2e4}\x07\x6a\x02\x02\u{2e3}\
	\u{2e1}\x03\x02\x02\x02\u{2e3}\u{2e4}\x03\x02\x02\x02\u{2e4}\u{2e5}\x03\
	\x02\x02\x02\u{2e5}\u{2e6}\x05\u{10e}\u{88}\x02\u{2e6}\u{2e7}\x07\u{fb}\
	\x02\x02\u{2e7}\u{2e8}\x07\u{137}\x02\x02\u{2e8}\u{2e9}\x05\u{10e}\u{88}\
	\x02\u{2e9}\u{392}\x03\x02\x02\x02\u{2ea}\u{2eb}\x07\x11\x02\x02\u{2eb}\
	\u{2ec}\x07\u{bb}\x02\x02\u{2ec}\u{2ed}\x07\u{15a}\x02\x02\u{2ed}\u{2ee}\
	\x05\u{10e}\u{88}\x02\u{2ee}\u{2ef}\x07\u{11b}\x02\x02\u{2ef}\u{2f0}\x07\
	\u{f4}\x02\x02\u{2f0}\u{2f1}\x05\x28\x15\x02\u{2f1}\u{392}\x03\x02\x02\x02\
	\u{2f2}\u{2f3}\x07\x11\x02\x02\u{2f3}\u{2f4}\x07\u{15a}\x02\x02\u{2f4}\u{2f5}\
	\x05\u{10e}\u{88}\x02\u{2f5}\u{2f6}\x07\u{fb}\x02\x02\u{2f6}\u{2f7}\x07\
	\u{137}\x02\x02\u{2f7}\u{2f8}\x05\u{10e}\u{88}\x02\u{2f8}\u{392}\x03\x02\
	\x02\x02\u{2f9}\u{2fa}\x07\x11\x02\x02\u{2fa}\u{2fb}\x07\u{15a}\x02\x02\
	\u{2fb}\u{2fc}\x05\u{10e}\u{88}\x02\u{2fc}\u{2fd}\x07\u{11b}\x02\x02\u{2fd}\
	\u{2fe}\x07\x1b\x02\x02\u{2fe}\u{2ff}\x05\u{116}\u{8c}\x02\u{2ff}\u{392}\
	\x03\x02\x02\x02\u{300}\u{304}\x07\x24\x02\x02\u{301}\u{303}\x0a\x02\x02\
	\x02\u{302}\u{301}\x03\x02\x02\x02\u{303}\u{306}\x03\x02\x02\x02\u{304}\
	\u{302}\x03\x02\x02\x02\u{304}\u{305}\x03\x02\x02\x02\u{305}\u{392}\x03\
	\x02\x02\x02\u{306}\u{304}\x03\x02\x02\x02\u{307}\u{308}\x07\x40\x02\x02\
	\u{308}\u{30c}\x07\u{105}\x02\x02\u{309}\u{30b}\x0a\x02\x02\x02\u{30a}\u{309}\
	\x03\x02\x02\x02\u{30b}\u{30e}\x03\x02\x02\x02\u{30c}\u{30a}\x03\x02\x02\
	\x02\u{30c}\u{30d}\x03\x02\x02\x02\u{30d}\u{392}\x03\x02\x02\x02\u{30e}\
	\u{30c}\x03\x02\x02\x02\u{30f}\u{313}\x07\x7c\x02\x02\u{310}\u{312}\x0a\
	\x02\x02\x02\u{311}\u{310}\x03\x02\x02\x02\u{312}\u{315}\x03\x02\x02\x02\
	\u{313}\u{311}\x03\x02\x02\x02\u{313}\u{314}\x03\x02\x02\x02\u{314}\u{392}\
	\x03\x02\x02\x02\u{315}\u{313}\x03\x02\x02\x02\u{316}\u{31a}\x07\u{102}\
	\x02\x02\u{317}\u{319}\x0a\x02\x02\x02\u{318}\u{317}\x03\x02\x02\x02\u{319}\
	\u{31c}\x03\x02\x02\x02\u{31a}\u{318}\x03\x02\x02\x02\u{31a}\u{31b}\x03\
	\x02\x02\x02\u{31b}\u{392}\x03\x02\x02\x02\u{31c}\u{31a}\x03\x02\x02\x02\
	\u{31d}\u{32b}\x07\x54\x02\x02\u{31e}\u{323}\x05\u{10c}\u{87}\x02\u{31f}\
	\u{320}\x07\x33\x02\x02\u{320}\u{322}\x05\u{10c}\u{87}\x02\u{321}\u{31f}\
	\x03\x02\x02\x02\u{322}\u{325}\x03\x02\x02\x02\u{323}\u{321}\x03\x02\x02\
	\x02\u{323}\u{324}\x03\x02\x02\x02\u{324}\u{327}\x03\x02\x02\x02\u{325}\
	\u{323}\x03\x02\x02\x02\u{326}\u{328}\x07\x33\x02\x02\u{327}\u{326}\x03\
	\x02\x02\x02\u{327}\u{328}\x03\x02\x02\x02\u{328}\u{32c}\x03\x02\x02\x02\
	\u{329}\u{32a}\x07\x10\x02\x02\u{32a}\u{32c}\x07\u{f3}\x02\x02\u{32b}\u{31e}\
	\x03\x02\x02\x02\u{32b}\u{329}\x03\x02\x02\x02\u{32c}\u{32d}\x03\x02\x02\
	\x02\u{32d}\u{32f}\x07\u{d6}\x02\x02\u{32e}\u{330}\x09\x04\x02\x02\u{32f}\
	\u{32e}\x03\x02\x02\x02\u{32f}\u{330}\x03\x02\x02\x02\u{330}\u{331}\x03\
	\x02\x02\x02\u{331}\u{332}\x05\u{10e}\u{88}\x02\u{332}\u{333}\x07\u{137}\
	\x02\x02\u{333}\u{334}\x05\u{116}\u{8c}\x02\u{334}\u{392}\x03\x02\x02\x02\
	\u{335}\u{341}\x07\x6b\x02\x02\u{336}\u{337}\x07\u{16b}\x02\x02\u{337}\u{33c}\
	\x05\u{10a}\u{86}\x02\u{338}\u{339}\x07\x33\x02\x02\u{339}\u{33b}\x05\u{10a}\
	\u{86}\x02\u{33a}\u{338}\x03\x02\x02\x02\u{33b}\u{33e}\x03\x02\x02\x02\u{33c}\
	\u{33a}\x03\x02\x02\x02\u{33c}\u{33d}\x03\x02\x02\x02\u{33d}\u{33f}\x03\
	\x02\x02\x02\u{33e}\u{33c}\x03\x02\x02\x02\u{33f}\u{340}\x07\u{16c}\x02\
	\x02\u{340}\u{342}\x03\x02\x02\x02\u{341}\u{336}\x03\x02\x02\x02\u{341}\
	\u{342}\x03\x02\x02\x02\u{342}\u{343}\x03\x02\x02\x02\u{343}\u{392}\x05\
	\x0c\x07\x02\u{344}\u{348}\x07\u{11d}\x02\x02\u{345}\u{347}\x0a\x02\x02\
	\x02\u{346}\u{345}\x03\x02\x02\x02\u{347}\u{34a}\x03\x02\x02\x02\u{348}\
	\u{346}\x03\x02\x02\x02\u{348}\u{349}\x03\x02\x02\x02\u{349}\u{392}\x03\
	\x02\x02\x02\u{34a}\u{348}\x03\x02\x02\x02\u{34b}\u{34f}\x07\u{fe}\x02\x02\
	\u{34c}\u{34e}\x0a\x02\x02\x02\u{34d}\u{34c}\x03\x02\x02\x02\u{34e}\u{351}\
	\x03\x02\x02\x02\u{34f}\u{34d}\x03\x02\x02\x02\u{34f}\u{350}\x03\x02\x02\
	\x02\u{350}\u{392}\x03\x02\x02\x02\u{351}\u{34f}\x03\x02\x02\x02\u{352}\
	\u{353}\x07\u{123}\x02\x02\u{353}\u{35f}\x07\u{13a}\x02\x02\u{354}\u{359}\
	\x05\u{106}\u{84}\x02\u{355}\u{356}\x07\x33\x02\x02\u{356}\u{358}\x05\u{106}\
	\u{84}\x02\u{357}\u{355}\x03\x02\x02\x02\u{358}\u{35b}\x03\x02\x02\x02\u{359}\
	\u{357}\x03\x02\x02\x02\u{359}\u{35a}\x03\x02\x02\x02\u{35a}\u{35d}\x03\
	\x02\x02\x02\u{35b}\u{359}\x03\x02\x02\x02\u{35c}\u{35e}\x07\x33\x02\x02\
	\u{35d}\u{35c}\x03\x02\x02\x02\u{35d}\u{35e}\x03\x02\x02\x02\u{35e}\u{360}\
	\x03\x02\x02\x02\u{35f}\u{354}\x03\x02\x02\x02\u{35f}\u{360}\x03\x02\x02\
	\x02\u{360}\u{392}\x03\x02\x02\x02\u{361}\u{365}\x07\x35\x02\x02\u{362}\
	\u{364}\x0a\x02\x02\x02\u{363}\u{362}\x03\x02\x02\x02\u{364}\u{367}\x03\
	\x02\x02\x02\u{365}\u{363}\x03\x02\x02\x02\u{365}\u{366}\x03\x02\x02\x02\
	\u{366}\u{392}\x03\x02\x02\x02\u{367}\u{365}\x03\x02\x02\x02\u{368}\u{36c}\
	\x07\u{107}\x02\x02\u{369}\u{36b}\x0a\x02\x02\x02\u{36a}\u{369}\x03\x02\
	\x02\x02\u{36b}\u{36e}\x03\x02\x02\x02\u{36c}\u{36a}\x03\x02\x02\x02\u{36c}\
	\u{36d}\x03\x02\x02\x02\u{36d}\u{392}\x03\x02\x02\x02\u{36e}\u{36c}\x03\
	\x02\x02\x02\u{36f}\u{373}\x07\u{f0}\x02\x02\u{370}\u{372}\x0a\x02\x02\x02\
	\u{371}\u{370}\x03\x02\x02\x02\u{372}\u{375}\x03\x02\x02\x02\u{373}\u{371}\
	\x03\x02\x02\x02\u{373}\u{374}\x03\x02\x02\x02\u{374}\u{392}\x03\x02\x02\
	\x02\u{375}\u{373}\x03\x02\x02\x02\u{376}\u{37a}\x07\x4b\x02\x02\u{377}\
	\u{379}\x0a\x02\x02\x02\u{378}\u{377}\x03\x02\x02\x02\u{379}\u{37c}\x03\
	\x02\x02\x02\u{37a}\u{378}\x03\x02\x02\x02\u{37a}\u{37b}\x03\x02\x02\x02\
	\u{37b}\u{392}\x03\x02\x02\x02\u{37c}\u{37a}\x03\x02\x02\x02\u{37d}\u{381}\
	\x07\x69\x02\x02\u{37e}\u{380}\x0a\x02\x02\x02\u{37f}\u{37e}\x03\x02\x02\
	\x02\u{380}\u{383}\x03\x02\x02\x02\u{381}\u{37f}\x03\x02\x02\x02\u{381}\
	\u{382}\x03\x02\x02\x02\u{382}\u{392}\x03\x02\x02\x02\u{383}\u{381}\x03\
	\x02\x02\x02\u{384}\u{385}\x07\x56\x02\x02\u{385}\u{386}\x07\u{8f}\x02\x02\
	\u{386}\u{392}\x05\u{118}\u{8d}\x02\u{387}\u{388}\x07\x56\x02\x02\u{388}\
	\u{389}\x07\u{df}\x02\x02\u{389}\u{392}\x05\u{118}\u{8d}\x02\u{38a}\u{38e}\
	\x07\u{14c}\x02\x02\u{38b}\u{38d}\x0a\x02\x02\x02\u{38c}\u{38b}\x03\x02\
	\x02\x02\u{38d}\u{390}\x03\x02\x02\x02\u{38e}\u{38c}\x03\x02\x02\x02\u{38e}\
	\u{38f}\x03\x02\x02\x02\u{38f}\u{392}\x03\x02\x02\x02\u{390}\u{38e}\x03\
	\x02\x02\x02\u{391}\u{14d}\x03\x02\x02\x02\u{391}\u{14e}\x03\x02\x02\x02\
	\u{391}\u{150}\x03\x02\x02\x02\u{391}\u{155}\x03\x02\x02\x02\u{391}\u{162}\
	\x03\x02\x02\x02\u{391}\u{169}\x03\x02\x02\x02\u{391}\u{170}\x03\x02\x02\
	\x02\u{391}\u{173}\x03\x02\x02\x02\u{391}\u{176}\x03\x02\x02\x02\u{391}\
	\u{19c}\x03\x02\x02\x02\u{391}\u{1b8}\x03\x02\x02\x02\u{391}\u{1d5}\x03\
	\x02\x02\x02\u{391}\u{1e2}\x03\x02\x02\x02\u{391}\u{204}\x03\x02\x02\x02\
	\u{391}\u{216}\x03\x02\x02\x02\u{391}\u{218}\x03\x02\x02\x02\u{391}\u{21c}\
	\x03\x02\x02\x02\u{391}\u{22b}\x03\x02\x02\x02\u{391}\u{232}\x03\x02\x02\
	\x02\u{391}\u{239}\x03\x02\x02\x02\u{391}\u{245}\x03\x02\x02\x02\u{391}\
	\u{24c}\x03\x02\x02\x02\u{391}\u{253}\x03\x02\x02\x02\u{391}\u{25a}\x03\
	\x02\x02\x02\u{391}\u{261}\x03\x02\x02\x02\u{391}\u{26c}\x03\x02\x02\x02\
	\u{391}\u{27c}\x03\x02\x02\x02\u{391}\u{28d}\x03\x02\x02\x02\u{391}\u{29c}\
	\x03\x02\x02\x02\u{391}\u{2ab}\x03\x02\x02\x02\u{391}\u{2b2}\x03\x02\x02\
	\x02\u{391}\u{2b9}\x03\x02\x02\x02\u{391}\u{2d3}\x03\x02\x02\x02\u{391}\
	\u{2da}\x03\x02\x02\x02\u{391}\u{2de}\x03\x02\x02\x02\u{391}\u{2ea}\x03\
	\x02\x02\x02\u{391}\u{2f2}\x03\x02\x02\x02\u{391}\u{2f9}\x03\x02\x02\x02\
	\u{391}\u{300}\x03\x02\x02\x02\u{391}\u{307}\x03\x02\x02\x02\u{391}\u{30f}\
	\x03\x02\x02\x02\u{391}\u{316}\x03\x02\x02\x02\u{391}\u{31d}\x03\x02\x02\
	\x02\u{391}\u{335}\x03\x02\x02\x02\u{391}\u{344}\x03\x02\x02\x02\u{391}\
	\u{34b}\x03\x02\x02\x02\u{391}\u{352}\x03\x02\x02\x02\u{391}\u{361}\x03\
	\x02\x02\x02\u{391}\u{368}\x03\x02\x02\x02\u{391}\u{36f}\x03\x02\x02\x02\
	\u{391}\u{376}\x03\x02\x02\x02\u{391}\u{37d}\x03\x02\x02\x02\u{391}\u{384}\
	\x03\x02\x02\x02\u{391}\u{387}\x03\x02\x02\x02\u{391}\u{38a}\x03\x02\x02\
	\x02\u{392}\x0d\x03\x02\x02\x02\u{393}\u{398}\x05\x14\x0b\x02\u{394}\u{395}\
	\x07\x33\x02\x02\u{395}\u{397}\x05\x14\x0b\x02\u{396}\u{394}\x03\x02\x02\
	\x02\u{397}\u{39a}\x03\x02\x02\x02\u{398}\u{396}\x03\x02\x02\x02\u{398}\
	\u{399}\x03\x02\x02\x02\u{399}\x0f\x03\x02\x02\x02\u{39a}\u{398}\x03\x02\
	\x02\x02\u{39b}\u{39d}\x05\x12\x0a\x02\u{39c}\u{39b}\x03\x02\x02\x02\u{39c}\
	\u{39d}\x03\x02\x02\x02\u{39d}\u{39e}\x03\x02\x02\x02\u{39e}\u{39f}\x05\
	\x30\x19\x02\u{39f}\x11\x03\x02\x02\x02\u{3a0}\u{3a2}\x07\u{15f}\x02\x02\
	\u{3a1}\u{3a3}\x07\u{f9}\x02\x02\u{3a2}\u{3a1}\x03\x02\x02\x02\u{3a2}\u{3a3}\
	\x03\x02\x02\x02\u{3a3}\u{3a4}\x03\x02\x02\x02\u{3a4}\u{3a9}\x05\x62\x32\
	\x02\u{3a5}\u{3a6}\x07\x33\x02\x02\u{3a6}\u{3a8}\x05\x62\x32\x02\u{3a7}\
	\u{3a5}\x03\x02\x02\x02\u{3a8}\u{3ab}\x03\x02\x02\x02\u{3a9}\u{3a7}\x03\
	\x02\x02\x02\u{3a9}\u{3aa}\x03\x02\x02\x02\u{3aa}\x13\x03\x02\x02\x02\u{3ab}\
	\u{3a9}\x03\x02\x02\x02\u{3ac}\u{3ad}\x05\x16\x0c\x02\u{3ad}\x15\x03\x02\
	\x02\x02\u{3ae}\u{3b1}\x05\x18\x0d\x02\u{3af}\u{3b0}\x07\x34\x02\x02\u{3b0}\
	\u{3b2}\x05\u{da}\x6e\x02\u{3b1}\u{3af}\x03\x02\x02\x02\u{3b1}\u{3b2}\x03\
	\x02\x02\x02\u{3b2}\x17\x03\x02\x02\x02\u{3b3}\u{3b4}\x05\x1a\x0e\x02\u{3b4}\
	\u{3b5}\x05\x1e\x10\x02\u{3b5}\x19\x03\x02\x02\x02\u{3b6}\u{3b7}\x05\u{118}\
	\u{8d}\x02\u{3b7}\x1b\x03\x02\x02\x02\u{3b8}\u{3b9}\x05\x1a\x0e\x02\u{3b9}\
	\x1d\x03\x02\x02\x02\u{3ba}\u{3bf}\x05\x24\x13\x02\u{3bb}\u{3bd}\x07\u{cf}\
	\x02\x02\u{3bc}\u{3bb}\x03\x02\x02\x02\u{3bc}\u{3bd}\x03\x02\x02\x02\u{3bd}\
	\u{3be}\x03\x02\x02\x02\u{3be}\u{3c0}\x07\u{d0}\x02\x02\u{3bf}\u{3bc}\x03\
	\x02\x02\x02\u{3bf}\u{3c0}\x03\x02\x02\x02\u{3c0}\x1f\x03\x02\x02\x02\u{3c1}\
	\u{3c6}\x05\x22\x12\x02\u{3c2}\u{3c3}\x07\x33\x02\x02\u{3c3}\u{3c5}\x05\
	\x22\x12\x02\u{3c4}\u{3c2}\x03\x02\x02\x02\u{3c5}\u{3c8}\x03\x02\x02\x02\
	\u{3c6}\u{3c4}\x03\x02\x02\x02\u{3c6}\u{3c7}\x03\x02\x02\x02\u{3c7}\u{3ca}\
	\x03\x02\x02\x02\u{3c8}\u{3c6}\x03\x02\x02\x02\u{3c9}\u{3cb}\x07\x33\x02\
	\x02\u{3ca}\u{3c9}\x03\x02\x02\x02\u{3ca}\u{3cb}\x03\x02\x02\x02\u{3cb}\
	\x21\x03\x02\x02\x02\u{3cc}\u{3cd}\x05\u{118}\u{8d}\x02\u{3cd}\u{3ce}\x07\
	\u{170}\x02\x02\u{3ce}\u{3cf}\x05\u{ae}\x58\x02\u{3cf}\x23\x03\x02\x02\x02\
	\u{3d0}\u{3d1}\x05\u{ec}\x77\x02\u{3d1}\x25\x03\x02\x02\x02\u{3d2}\u{3d4}\
	\x07\u{16b}\x02\x02\u{3d3}\u{3d5}\x05\x28\x15\x02\u{3d4}\u{3d3}\x03\x02\
	\x02\x02\u{3d4}\u{3d5}\x03\x02\x02\x02\u{3d5}\u{3d6}\x03\x02\x02\x02\u{3d6}\
	\u{3d7}\x07\u{16c}\x02\x02\u{3d7}\x27\x03\x02\x02\x02\u{3d8}\u{3dd}\x05\
	\x2a\x16\x02\u{3d9}\u{3da}\x07\x33\x02\x02\u{3da}\u{3dc}\x05\x2a\x16\x02\
	\u{3db}\u{3d9}\x03\x02\x02\x02\u{3dc}\u{3df}\x03\x02\x02\x02\u{3dd}\u{3db}\
	\x03\x02\x02\x02\u{3dd}\u{3de}\x03\x02\x02\x02\u{3de}\u{3e1}\x03\x02\x02\
	\x02\u{3df}\u{3dd}\x03\x02\x02\x02\u{3e0}\u{3e2}\x07\x33\x02\x02\u{3e1}\
	\u{3e0}\x03\x02\x02\x02\u{3e1}\u{3e2}\x03\x02\x02\x02\u{3e2}\x29\x03\x02\
	\x02\x02\u{3e3}\u{3e4}\x05\x2c\x17\x02\u{3e4}\u{3e5}\x07\u{170}\x02\x02\
	\u{3e5}\u{3e9}\x07\u{16b}\x02\x02\u{3e6}\u{3e8}\x05\x2a\x16\x02\u{3e7}\u{3e6}\
	\x03\x02\x02\x02\u{3e8}\u{3eb}\x03\x02\x02\x02\u{3e9}\u{3e7}\x03\x02\x02\
	\x02\u{3e9}\u{3ea}\x03\x02\x02\x02\u{3ea}\u{3ec}\x03\x02\x02\x02\u{3eb}\
	\u{3e9}\x03\x02\x02\x02\u{3ec}\u{3ed}\x07\u{16c}\x02\x02\u{3ed}\u{3f3}\x03\
	\x02\x02\x02\u{3ee}\u{3ef}\x05\x2c\x17\x02\u{3ef}\u{3f0}\x07\u{170}\x02\
	\x02\u{3f0}\u{3f1}\x05\x2e\x18\x02\u{3f1}\u{3f3}\x03\x02\x02\x02\u{3f2}\
	\u{3e3}\x03\x02\x02\x02\u{3f2}\u{3ee}\x03\x02\x02\x02\u{3f3}\x2b\x03\x02\
	\x02\x02\u{3f4}\u{3f5}\x05\u{118}\u{8d}\x02\u{3f5}\x2d\x03\x02\x02\x02\u{3f6}\
	\u{3fa}\x07\x4d\x02\x02\u{3f7}\u{3fa}\x05\u{118}\u{8d}\x02\u{3f8}\u{3fa}\
	\x05\u{ae}\x58\x02\u{3f9}\u{3f6}\x03\x02\x02\x02\u{3f9}\u{3f7}\x03\x02\x02\
	\x02\u{3f9}\u{3f8}\x03\x02\x02\x02\u{3fa}\x2f\x03\x02\x02\x02\u{3fb}\u{3fc}\
	\x05\x32\x1a\x02\u{3fc}\x31\x03\x02\x02\x02\u{3fd}\u{403}\x05\x34\x1b\x02\
	\u{3fe}\u{3ff}\x07\u{d4}\x02\x02\u{3ff}\u{401}\x05\x3a\x1e\x02\u{400}\u{402}\
	\x05\x36\x1c\x02\u{401}\u{400}\x03\x02\x02\x02\u{401}\u{402}\x03\x02\x02\
	\x02\u{402}\u{404}\x03\x02\x02\x02\u{403}\u{3fe}\x03\x02\x02\x02\u{403}\
	\u{404}\x03\x02\x02\x02\u{404}\u{40d}\x03\x02\x02\x02\u{405}\u{406}\x07\
	\u{ae}\x02\x02\u{406}\u{40e}\x05\x38\x1d\x02\u{407}\u{408}\x07\x6f\x02\x02\
	\u{408}\u{409}\x07\x72\x02\x02\u{409}\u{40a}\x05\x3a\x1e\x02\u{40a}\u{40b}\
	\x07\u{10a}\x02\x02\u{40b}\u{40c}\x07\u{d8}\x02\x02\u{40c}\u{40e}\x03\x02\
	\x02\x02\u{40d}\u{405}\x03\x02\x02\x02\u{40d}\u{407}\x03\x02\x02\x02\u{40d}\
	\u{40e}\x03\x02\x02\x02\u{40e}\x33\x03\x02\x02\x02\u{40f}\u{411}\x05\x3c\
	\x1f\x02\u{410}\u{412}\x05\x60\x31\x02\u{411}\u{410}\x03\x02\x02\x02\u{411}\
	\u{412}\x03\x02\x02\x02\u{412}\x35\x03\x02\x02\x02\u{413}\u{414}\x09\x05\
	\x02\x02\u{414}\x37\x03\x02\x02\x02\u{415}\u{418}\x07\x10\x02\x02\u{416}\
	\u{418}\x05\x3a\x1e\x02\u{417}\u{415}\x03\x02\x02\x02\u{417}\u{416}\x03\
	\x02\x02\x02\u{418}\x39\x03\x02\x02\x02\u{419}\u{41a}\x09\x06\x02\x02\u{41a}\
	\x3b\x03\x02\x02\x02\u{41b}\u{41c}\x05\x3e\x20\x02\u{41c}\x3d\x03\x02\x02\
	\x02\u{41d}\u{423}\x05\x42\x22\x02\u{41e}\u{41f}\x05\x40\x21\x02\u{41f}\
	\u{420}\x05\x42\x22\x02\u{420}\u{422}\x03\x02\x02\x02\u{421}\u{41e}\x03\
	\x02\x02\x02\u{422}\u{425}\x03\x02\x02\x02\u{423}\u{421}\x03\x02\x02\x02\
	\u{423}\u{424}\x03\x02\x02\x02\u{424}\x3f\x03\x02\x02\x02\u{425}\u{423}\
	\x03\x02\x02\x02\u{426}\u{428}\x09\x07\x02\x02\u{427}\u{429}\x05\x46\x24\
	\x02\u{428}\u{427}\x03\x02\x02\x02\u{428}\u{429}\x03\x02\x02\x02\u{429}\
	\x41\x03\x02\x02\x02\u{42a}\u{430}\x05\x4a\x26\x02\u{42b}\u{42c}\x05\x44\
	\x23\x02\u{42c}\u{42d}\x05\x4a\x26\x02\u{42d}\u{42f}\x03\x02\x02\x02\u{42e}\
	\u{42b}\x03\x02\x02\x02\u{42f}\u{432}\x03\x02\x02\x02\u{430}\u{42e}\x03\
	\x02\x02\x02\u{430}\u{431}\x03\x02\x02\x02\u{431}\x43\x03\x02\x02\x02\u{432}\
	\u{430}\x03\x02\x02\x02\u{433}\u{435}\x07\u{94}\x02\x02\u{434}\u{436}\x05\
	\x46\x24\x02\u{435}\u{434}\x03\x02\x02\x02\u{435}\u{436}\x03\x02\x02\x02\
	\u{436}\x45\x03\x02\x02\x02\u{437}\u{438}\x09\x08\x02\x02\u{438}\x47\x03\
	\x02\x02\x02\u{439}\u{43a}\x07\u{156}\x02\x02\u{43a}\u{43f}\x05\u{ae}\x58\
	\x02\u{43b}\u{43c}\x07\x33\x02\x02\u{43c}\u{43e}\x05\u{ae}\x58\x02\u{43d}\
	\u{43b}\x03\x02\x02\x02\u{43e}\u{441}\x03\x02\x02\x02\u{43f}\u{43d}\x03\
	\x02\x02\x02\u{43f}\u{440}\x03\x02\x02\x02\u{440}\u{443}\x03\x02\x02\x02\
	\u{441}\u{43f}\x03\x02\x02\x02\u{442}\u{444}\x07\x33\x02\x02\u{443}\u{442}\
	\x03\x02\x02\x02\u{443}\u{444}\x03\x02\x02\x02\u{444}\x49\x03\x02\x02\x02\
	\u{445}\u{44e}\x05\x4e\x28\x02\u{446}\u{447}\x07\u{12b}\x02\x02\u{447}\u{44e}\
	\x05\u{110}\u{89}\x02\u{448}\u{44e}\x05\x48\x25\x02\u{449}\u{44a}\x07\u{16b}\
	\x02\x02\u{44a}\u{44b}\x05\x30\x19\x02\u{44b}\u{44c}\x07\u{16c}\x02\x02\
	\u{44c}\u{44e}\x03\x02\x02\x02\u{44d}\u{445}\x03\x02\x02\x02\u{44d}\u{446}\
	\x03\x02\x02\x02\u{44d}\u{448}\x03\x02\x02\x02\u{44d}\u{449}\x03\x02\x02\
	\x02\u{44e}\x4b\x03\x02\x02\x02\u{44f}\u{451}\x05\u{ae}\x58\x02\u{450}\u{452}\
	\x09\x09\x02\x02\u{451}\u{450}\x03\x02\x02\x02\u{451}\u{452}\x03\x02\x02\
	\x02\u{452}\u{455}\x03\x02\x02\x02\u{453}\u{454}\x07\u{d1}\x02\x02\u{454}\
	\u{456}\x09\x0a\x02\x02\u{455}\u{453}\x03\x02\x02\x02\u{455}\u{456}\x03\
	\x02\x02\x02\u{456}\x4d\x03\x02\x02\x02\u{457}\u{459}\x07\u{115}\x02\x02\
	\u{458}\u{45a}\x05\x46\x24\x02\u{459}\u{458}\x03\x02\x02\x02\u{459}\u{45a}\
	\x03\x02\x02\x02\u{45a}\u{45b}\x03\x02\x02\x02\u{45b}\u{468}\x05\x50\x29\
	\x02\u{45c}\u{45d}\x07\x76\x02\x02\u{45d}\u{462}\x05\x6c\x37\x02\u{45e}\
	\u{45f}\x07\x33\x02\x02\u{45f}\u{461}\x05\x6c\x37\x02\u{460}\u{45e}\x03\
	\x02\x02\x02\u{461}\u{464}\x03\x02\x02\x02\u{462}\u{460}\x03\x02\x02\x02\
	\u{462}\u{463}\x03\x02\x02\x02\u{463}\u{466}\x03\x02\x02\x02\u{464}\u{462}\
	\x03\x02\x02\x02\u{465}\u{467}\x07\x33\x02\x02\u{466}\u{465}\x03\x02\x02\
	\x02\u{466}\u{467}\x03\x02\x02\x02\u{467}\u{469}\x03\x02\x02\x02\u{468}\
	\u{45c}\x03\x02\x02\x02\u{468}\u{469}\x03\x02\x02\x02\u{469}\u{46c}\x03\
	\x02\x02\x02\u{46a}\u{46b}\x07\u{15d}\x02\x02\u{46b}\u{46d}\x05\u{b0}\x59\
	\x02\u{46c}\u{46a}\x03\x02\x02\x02\u{46c}\u{46d}\x03\x02\x02\x02\u{46d}\
	\u{46f}\x03\x02\x02\x02\u{46e}\u{470}\x05\x52\x2a\x02\u{46f}\u{46e}\x03\
	\x02\x02\x02\u{46f}\u{470}\x03\x02\x02\x02\u{470}\u{473}\x03\x02\x02\x02\
	\u{471}\u{472}\x07\u{84}\x02\x02\u{472}\u{474}\x05\u{b0}\x59\x02\u{473}\
	\u{471}\x03\x02\x02\x02\u{473}\u{474}\x03\x02\x02\x02\u{474}\u{481}\x03\
	\x02\x02\x02\u{475}\u{476}\x07\u{15e}\x02\x02\u{476}\u{47b}\x05\x5a\x2e\
	\x02\u{477}\u{478}\x07\x33\x02\x02\u{478}\u{47a}\x05\x5a\x2e\x02\u{479}\
	\u{477}\x03\x02\x02\x02\u{47a}\u{47d}\x03\x02\x02\x02\u{47b}\u{479}\x03\
	\x02\x02\x02\u{47b}\u{47c}\x03\x02\x02\x02\u{47c}\u{47f}\x03\x02\x02\x02\
	\u{47d}\u{47b}\x03\x02\x02\x02\u{47e}\u{480}\x07\x33\x02\x02\u{47f}\u{47e}\
	\x03\x02\x02\x02\u{47f}\u{480}\x03\x02\x02\x02\u{480}\u{482}\x03\x02\x02\
	\x02\u{481}\u{475}\x03\x02\x02\x02\u{481}\u{482}\x03\x02\x02\x02\u{482}\
	\x4f\x03\x02\x02\x02\u{483}\u{488}\x05\x66\x34\x02\u{484}\u{485}\x07\x33\
	\x02\x02\u{485}\u{487}\x05\x66\x34\x02\u{486}\u{484}\x03\x02\x02\x02\u{487}\
	\u{48a}\x03\x02\x02\x02\u{488}\u{486}\x03\x02\x02\x02\u{488}\u{489}\x03\
	\x02\x02\x02\u{489}\u{48c}\x03\x02\x02\x02\u{48a}\u{488}\x03\x02\x02\x02\
	\u{48b}\u{48d}\x07\x33\x02\x02\u{48c}\u{48b}\x03\x02\x02\x02\u{48c}\u{48d}\
	\x03\x02\x02\x02\u{48d}\x51\x03\x02\x02\x02\u{48e}\u{48f}\x07\u{80}\x02\
	\x02\u{48f}\u{490}\x07\x22\x02\x02\u{490}\u{491}\x05\x54\x2b\x02\u{491}\
	\x53\x03\x02\x02\x02\u{492}\u{494}\x05\x46\x24\x02\u{493}\u{492}\x03\x02\
	\x02\x02\u{493}\u{494}\x03\x02\x02\x02\u{494}\u{495}\x03\x02\x02\x02\u{495}\
	\u{49a}\x05\x56\x2c\x02\u{496}\u{497}\x07\x33\x02\x02\u{497}\u{499}\x05\
	\x56\x2c\x02\u{498}\u{496}\x03\x02\x02\x02\u{499}\u{49c}\x03\x02\x02\x02\
	\u{49a}\u{498}\x03\x02\x02\x02\u{49a}\u{49b}\x03\x02\x02\x02\u{49b}\u{49e}\
	\x03\x02\x02\x02\u{49c}\u{49a}\x03\x02\x02\x02\u{49d}\u{49f}\x07\x33\x02\
	\x02\u{49e}\u{49d}\x03\x02\x02\x02\u{49e}\u{49f}\x03\x02\x02\x02\u{49f}\
	\x55\x03\x02\x02\x02\u{4a0}\u{4a1}\x07\u{108}\x02\x02\u{4a1}\u{4ad}\x07\
	\u{16b}\x02\x02\u{4a2}\u{4a7}\x05\u{ae}\x58\x02\u{4a3}\u{4a4}\x07\x33\x02\
	\x02\u{4a4}\u{4a6}\x05\u{ae}\x58\x02\u{4a5}\u{4a3}\x03\x02\x02\x02\u{4a6}\
	\u{4a9}\x03\x02\x02\x02\u{4a7}\u{4a5}\x03\x02\x02\x02\u{4a7}\u{4a8}\x03\
	\x02\x02\x02\u{4a8}\u{4ab}\x03\x02\x02\x02\u{4a9}\u{4a7}\x03\x02\x02\x02\
	\u{4aa}\u{4ac}\x07\x33\x02\x02\u{4ab}\u{4aa}\x03\x02\x02\x02\u{4ab}\u{4ac}\
	\x03\x02\x02\x02\u{4ac}\u{4ae}\x03\x02\x02\x02\u{4ad}\u{4a2}\x03\x02\x02\
	\x02\u{4ad}\u{4ae}\x03\x02\x02\x02\u{4ae}\u{4af}\x03\x02\x02\x02\u{4af}\
	\u{4d2}\x07\u{16c}\x02\x02\u{4b0}\u{4b1}\x07\x42\x02\x02\u{4b1}\u{4bd}\x07\
	\u{16b}\x02\x02\u{4b2}\u{4b7}\x05\u{ae}\x58\x02\u{4b3}\u{4b4}\x07\x33\x02\
	\x02\u{4b4}\u{4b6}\x05\u{ae}\x58\x02\u{4b5}\u{4b3}\x03\x02\x02\x02\u{4b6}\
	\u{4b9}\x03\x02\x02\x02\u{4b7}\u{4b5}\x03\x02\x02\x02\u{4b7}\u{4b8}\x03\
	\x02\x02\x02\u{4b8}\u{4bb}\x03\x02\x02\x02\u{4b9}\u{4b7}\x03\x02\x02\x02\
	\u{4ba}\u{4bc}\x07\x33\x02\x02\u{4bb}\u{4ba}\x03\x02\x02\x02\u{4bb}\u{4bc}\
	\x03\x02\x02\x02\u{4bc}\u{4be}\x03\x02\x02\x02\u{4bd}\u{4b2}\x03\x02\x02\
	\x02\u{4bd}\u{4be}\x03\x02\x02\x02\u{4be}\u{4bf}\x03\x02\x02\x02\u{4bf}\
	\u{4d2}\x07\u{16c}\x02\x02\u{4c0}\u{4c1}\x07\u{81}\x02\x02\u{4c1}\u{4c2}\
	\x07\u{11c}\x02\x02\u{4c2}\u{4c3}\x07\u{16b}\x02\x02\u{4c3}\u{4c8}\x05\x58\
	\x2d\x02\u{4c4}\u{4c5}\x07\x33\x02\x02\u{4c5}\u{4c7}\x05\x58\x2d\x02\u{4c6}\
	\u{4c4}\x03\x02\x02\x02\u{4c7}\u{4ca}\x03\x02\x02\x02\u{4c8}\u{4c6}\x03\
	\x02\x02\x02\u{4c8}\u{4c9}\x03\x02\x02\x02\u{4c9}\u{4cc}\x03\x02\x02\x02\
	\u{4ca}\u{4c8}\x03\x02\x02\x02\u{4cb}\u{4cd}\x07\x33\x02\x02\u{4cc}\u{4cb}\
	\x03\x02\x02\x02\u{4cc}\u{4cd}\x03\x02\x02\x02\u{4cd}\u{4ce}\x03\x02\x02\
	\x02\u{4ce}\u{4cf}\x07\u{16c}\x02\x02\u{4cf}\u{4d2}\x03\x02\x02\x02\u{4d0}\
	\u{4d2}\x05\x58\x2d\x02\u{4d1}\u{4a0}\x03\x02\x02\x02\u{4d1}\u{4b0}\x03\
	\x02\x02\x02\u{4d1}\u{4c0}\x03\x02\x02\x02\u{4d1}\u{4d0}\x03\x02\x02\x02\
	\u{4d2}\x57\x03\x02\x02\x02\u{4d3}\u{4dc}\x07\u{16b}\x02\x02\u{4d4}\u{4d9}\
	\x05\u{ae}\x58\x02\u{4d5}\u{4d6}\x07\x33\x02\x02\u{4d6}\u{4d8}\x05\u{ae}\
	\x58\x02\u{4d7}\u{4d5}\x03\x02\x02\x02\u{4d8}\u{4db}\x03\x02\x02\x02\u{4d9}\
	\u{4d7}\x03\x02\x02\x02\u{4d9}\u{4da}\x03\x02\x02\x02\u{4da}\u{4dd}\x03\
	\x02\x02\x02\u{4db}\u{4d9}\x03\x02\x02\x02\u{4dc}\u{4d4}\x03\x02\x02\x02\
	\u{4dc}\u{4dd}\x03\x02\x02\x02\u{4dd}\u{4df}\x03\x02\x02\x02\u{4de}\u{4e0}\
	\x07\x33\x02\x02\u{4df}\u{4de}\x03\x02\x02\x02\u{4df}\u{4e0}\x03\x02\x02\
	\x02\u{4e0}\u{4e1}\x03\x02\x02\x02\u{4e1}\u{4e4}\x07\u{16c}\x02\x02\u{4e2}\
	\u{4e4}\x05\u{ae}\x58\x02\u{4e3}\u{4d3}\x03\x02\x02\x02\u{4e3}\u{4e2}\x03\
	\x02\x02\x02\u{4e4}\x59\x03\x02\x02\x02\u{4e5}\u{4e6}\x05\u{118}\u{8d}\x02\
	\u{4e6}\u{4e7}\x07\x17\x02\x02\u{4e7}\u{4e8}\x07\u{16b}\x02\x02\u{4e8}\u{4e9}\
	\x05\x5c\x2f\x02\u{4e9}\u{4ea}\x07\u{16c}\x02\x02\u{4ea}\x5b\x03\x02\x02\
	\x02\u{4eb}\u{4ed}\x05\u{118}\u{8d}\x02\u{4ec}\u{4eb}\x03\x02\x02\x02\u{4ec}\
	\u{4ed}\x03\x02\x02\x02\u{4ed}\u{4ef}\x03\x02\x02\x02\u{4ee}\u{4f0}\x05\
	\x5e\x30\x02\u{4ef}\u{4ee}\x03\x02\x02\x02\u{4ef}\u{4f0}\x03\x02\x02\x02\
	\u{4f0}\u{4f2}\x03\x02\x02\x02\u{4f1}\u{4f3}\x05\x60\x31\x02\u{4f2}\u{4f1}\
	\x03\x02\x02\x02\u{4f2}\u{4f3}\x03\x02\x02\x02\u{4f3}\u{4f5}\x03\x02\x02\
	\x02\u{4f4}\u{4f6}\x05\u{fa}\x7e\x02\u{4f5}\u{4f4}\x03\x02\x02\x02\u{4f5}\
	\u{4f6}\x03\x02\x02\x02\u{4f6}\x5d\x03\x02\x02\x02\u{4f7}\u{4f8}\x07\u{e3}\
	\x02\x02\u{4f8}\u{4f9}\x07\x22\x02\x02\u{4f9}\u{4fe}\x05\u{ae}\x58\x02\u{4fa}\
	\u{4fb}\x07\x33\x02\x02\u{4fb}\u{4fd}\x05\u{ae}\x58\x02\u{4fc}\u{4fa}\x03\
	\x02\x02\x02\u{4fd}\u{500}\x03\x02\x02\x02\u{4fe}\u{4fc}\x03\x02\x02\x02\
	\u{4fe}\u{4ff}\x03\x02\x02\x02\u{4ff}\u{502}\x03\x02\x02\x02\u{500}\u{4fe}\
	\x03\x02\x02\x02\u{501}\u{503}\x07\x33\x02\x02\u{502}\u{501}\x03\x02\x02\
	\x02\u{502}\u{503}\x03\x02\x02\x02\u{503}\x5f\x03\x02\x02\x02\u{504}\u{505}\
	\x07\u{dc}\x02\x02\u{505}\u{506}\x07\x22\x02\x02\u{506}\u{50b}\x05\x4c\x27\
	\x02\u{507}\u{508}\x07\x33\x02\x02\u{508}\u{50a}\x05\x4c\x27\x02\u{509}\
	\u{507}\x03\x02\x02\x02\u{50a}\u{50d}\x03\x02\x02\x02\u{50b}\u{509}\x03\
	\x02\x02\x02\u{50b}\u{50c}\x03\x02\x02\x02\u{50c}\u{50f}\x03\x02\x02\x02\
	\u{50d}\u{50b}\x03\x02\x02\x02\u{50e}\u{510}\x07\x33\x02\x02\u{50f}\u{50e}\
	\x03\x02\x02\x02\u{50f}\u{510}\x03\x02\x02\x02\u{510}\x61\x03\x02\x02\x02\
	\u{511}\u{513}\x05\u{118}\u{8d}\x02\u{512}\u{514}\x05\u{98}\x4d\x02\u{513}\
	\u{512}\x03\x02\x02\x02\u{513}\u{514}\x03\x02\x02\x02\u{514}\u{515}\x03\
	\x02\x02\x02\u{515}\u{516}\x07\x17\x02\x02\u{516}\u{517}\x07\u{16b}\x02\
	\x02\u{517}\u{518}\x05\x10\x09\x02\u{518}\u{519}\x07\u{16c}\x02\x02\u{519}\
	\x63\x03\x02\x02\x02\u{51a}\u{51b}\x05\x1a\x0e\x02\u{51b}\x65\x03\x02\x02\
	\x02\u{51c}\u{521}\x05\u{ae}\x58\x02\u{51d}\u{51f}\x07\x17\x02\x02\u{51e}\
	\u{51d}\x03\x02\x02\x02\u{51e}\u{51f}\x03\x02\x02\x02\u{51f}\u{520}\x03\
	\x02\x02\x02\u{520}\u{522}\x05\x64\x33\x02\u{521}\u{51e}\x03\x02\x02\x02\
	\u{521}\u{522}\x03\x02\x02\x02\u{522}\u{525}\x03\x02\x02\x02\u{523}\u{525}\
	\x05\x68\x35\x02\u{524}\u{51c}\x03\x02\x02\x02\u{524}\u{523}\x03\x02\x02\
	\x02\u{525}\x67\x03\x02\x02\x02\u{526}\u{527}\x05\x6a\x36\x02\u{527}\x69\
	\x03\x02\x02\x02\u{528}\u{529}\x05\u{b6}\x5c\x02\u{529}\u{52a}\x07\u{16f}\
	\x02\x02\u{52a}\u{52b}\x07\u{178}\x02\x02\u{52b}\u{52e}\x03\x02\x02\x02\
	\u{52c}\u{52e}\x07\u{178}\x02\x02\u{52d}\u{528}\x03\x02\x02\x02\u{52d}\u{52c}\
	\x03\x02\x02\x02\u{52e}\x6b\x03\x02\x02\x02\u{52f}\u{530}\x05\x6e\x38\x02\
	\u{530}\x6d\x03\x02\x02\x02\u{531}\u{532}\x08\x38\x01\x02\u{532}\u{533}\
	\x05\x74\x3b\x02\u{533}\u{547}\x03\x02\x02\x02\u{534}\u{543}\x0c\x04\x02\
	\x02\u{535}\u{536}\x07\x41\x02\x02\u{536}\u{537}\x07\u{9c}\x02\x02\u{537}\
	\u{544}\x05\x74\x3b\x02\u{538}\u{539}\x05\x70\x39\x02\u{539}\u{53a}\x07\
	\u{9c}\x02\x02\u{53a}\u{53c}\x05\x74\x3b\x02\u{53b}\u{53d}\x05\x72\x3a\x02\
	\u{53c}\u{53b}\x03\x02\x02\x02\u{53c}\u{53d}\x03\x02\x02\x02\u{53d}\u{544}\
	\x03\x02\x02\x02\u{53e}\u{53f}\x07\u{c6}\x02\x02\u{53f}\u{540}\x05\x70\x39\
	\x02\u{540}\u{541}\x07\u{9c}\x02\x02\u{541}\u{542}\x05\x74\x3b\x02\u{542}\
	\u{544}\x03\x02\x02\x02\u{543}\u{535}\x03\x02\x02\x02\u{543}\u{538}\x03\
	\x02\x02\x02\u{543}\u{53e}\x03\x02\x02\x02\u{544}\u{546}\x03\x02\x02\x02\
	\u{545}\u{534}\x03\x02\x02\x02\u{546}\u{549}\x03\x02\x02\x02\u{547}\u{545}\
	\x03\x02\x02\x02\u{547}\u{548}\x03\x02\x02\x02\u{548}\x6f\x03\x02\x02\x02\
	\u{549}\u{547}\x03\x02\x02\x02\u{54a}\u{54c}\x07\u{8e}\x02\x02\u{54b}\u{54a}\
	\x03\x02\x02\x02\u{54b}\u{54c}\x03\x02\x02\x02\u{54c}\u{55a}\x03\x02\x02\
	\x02\u{54d}\u{54f}\x07\u{aa}\x02\x02\u{54e}\u{550}\x07\u{de}\x02\x02\u{54f}\
	\u{54e}\x03\x02\x02\x02\u{54f}\u{550}\x03\x02\x02\x02\u{550}\u{55a}\x03\
	\x02\x02\x02\u{551}\u{553}\x07\u{103}\x02\x02\u{552}\u{554}\x07\u{de}\x02\
	\x02\u{553}\u{552}\x03\x02\x02\x02\u{553}\u{554}\x03\x02\x02\x02\u{554}\
	\u{55a}\x03\x02\x02\x02\u{555}\u{557}\x07\x77\x02\x02\u{556}\u{558}\x07\
	\u{de}\x02\x02\u{557}\u{556}\x03\x02\x02\x02\u{557}\u{558}\x03\x02\x02\x02\
	\u{558}\u{55a}\x03\x02\x02\x02\u{559}\u{54b}\x03\x02\x02\x02\u{559}\u{54d}\
	\x03\x02\x02\x02\u{559}\u{551}\x03\x02\x02\x02\u{559}\u{555}\x03\x02\x02\
	\x02\u{55a}\x71\x03\x02\x02\x02\u{55b}\u{55c}\x07\u{d6}\x02\x02\u{55c}\u{56d}\
	\x05\u{b0}\x59\x02\u{55d}\u{55e}\x07\u{14f}\x02\x02\u{55e}\u{55f}\x07\u{16b}\
	\x02\x02\u{55f}\u{564}\x05\u{118}\u{8d}\x02\u{560}\u{561}\x07\x33\x02\x02\
	\u{561}\u{563}\x05\u{118}\u{8d}\x02\u{562}\u{560}\x03\x02\x02\x02\u{563}\
	\u{566}\x03\x02\x02\x02\u{564}\u{562}\x03\x02\x02\x02\u{564}\u{565}\x03\
	\x02\x02\x02\u{565}\u{568}\x03\x02\x02\x02\u{566}\u{564}\x03\x02\x02\x02\
	\u{567}\u{569}\x07\x33\x02\x02\u{568}\u{567}\x03\x02\x02\x02\u{568}\u{569}\
	\x03\x02\x02\x02\u{569}\u{56a}\x03\x02\x02\x02\u{56a}\u{56b}\x07\u{16c}\
	\x02\x02\u{56b}\u{56d}\x03\x02\x02\x02\u{56c}\u{55b}\x03\x02\x02\x02\u{56c}\
	\u{55d}\x03\x02\x02\x02\u{56d}\x73\x03\x02\x02\x02\u{56e}\u{56f}\x05\x78\
	\x3d\x02\u{56f}\x75\x03\x02\x02\x02\u{570}\u{571}\x05\u{86}\x44\x02\u{571}\
	\x77\x03\x02\x02\x02\u{572}\u{574}\x05\x76\x3c\x02\u{573}\u{575}\x05\x7a\
	\x3e\x02\u{574}\u{573}\x03\x02\x02\x02\u{574}\u{575}\x03\x02\x02\x02\u{575}\
	\x79\x03\x02\x02\x02\u{576}\u{577}\x07\u{12d}\x02\x02\u{577}\u{578}\x05\
	\x7c\x3f\x02\u{578}\u{579}\x07\u{16b}\x02\x02\u{579}\u{57a}\x05\u{ae}\x58\
	\x02\u{57a}\u{57b}\x07\u{16c}\x02\x02\u{57b}\x7b\x03\x02\x02\x02\u{57c}\
	\u{57d}\x09\x0b\x02\x02\u{57d}\x7d\x03\x02\x02\x02\u{57e}\u{57f}\x09\x0c\
	\x02\x02\u{57f}\x7f\x03\x02\x02\x02\u{580}\u{587}\x07\x64\x02\x02\u{581}\
	\u{583}\x07\u{13d}\x02\x02\u{582}\u{584}\x05\u{da}\x6e\x02\u{583}\u{582}\
	\x03\x02\x02\x02\u{583}\u{584}\x03\x02\x02\x02\u{584}\u{585}\x03\x02\x02\
	\x02\u{585}\u{587}\x05\u{82}\x42\x02\u{586}\u{580}\x03\x02\x02\x02\u{586}\
	\u{581}\x03\x02\x02\x02\u{587}\u{81}\x03\x02\x02\x02\u{588}\u{589}\x07\u{15f}\
	\x02\x02\u{589}\u{58d}\x07\x3f\x02\x02\u{58a}\u{58b}\x07\u{161}\x02\x02\
	\u{58b}\u{58d}\x07\x3f\x02\x02\u{58c}\u{588}\x03\x02\x02\x02\u{58c}\u{58a}\
	\x03\x02\x02\x02\u{58d}\u{83}\x03\x02\x02\x02\u{58e}\u{58f}\x05\u{96}\x4c\
	\x02\u{58f}\u{85}\x03\x02\x02\x02\u{590}\u{5ea}\x05\u{84}\x43\x02\u{591}\
	\u{592}\x07\u{ba}\x02\x02\u{592}\u{5a0}\x07\u{16b}\x02\x02\u{593}\u{594}\
	\x07\u{e3}\x02\x02\u{594}\u{595}\x07\x22\x02\x02\u{595}\u{59a}\x05\u{ae}\
	\x58\x02\u{596}\u{597}\x07\x33\x02\x02\u{597}\u{599}\x05\u{ae}\x58\x02\u{598}\
	\u{596}\x03\x02\x02\x02\u{599}\u{59c}\x03\x02\x02\x02\u{59a}\u{598}\x03\
	\x02\x02\x02\u{59a}\u{59b}\x03\x02\x02\x02\u{59b}\u{59e}\x03\x02\x02\x02\
	\u{59c}\u{59a}\x03\x02\x02\x02\u{59d}\u{59f}\x07\x33\x02\x02\u{59e}\u{59d}\
	\x03\x02\x02\x02\u{59e}\u{59f}\x03\x02\x02\x02\u{59f}\u{5a1}\x03\x02\x02\
	\x02\u{5a0}\u{593}\x03\x02\x02\x02\u{5a0}\u{5a1}\x03\x02\x02\x02\u{5a1}\
	\u{5af}\x03\x02\x02\x02\u{5a2}\u{5a3}\x07\u{dc}\x02\x02\u{5a3}\u{5a4}\x07\
	\x22\x02\x02\u{5a4}\u{5a9}\x05\x4c\x27\x02\u{5a5}\u{5a6}\x07\x33\x02\x02\
	\u{5a6}\u{5a8}\x05\x4c\x27\x02\u{5a7}\u{5a5}\x03\x02\x02\x02\u{5a8}\u{5ab}\
	\x03\x02\x02\x02\u{5a9}\u{5a7}\x03\x02\x02\x02\u{5a9}\u{5aa}\x03\x02\x02\
	\x02\u{5aa}\u{5ad}\x03\x02\x02\x02\u{5ab}\u{5a9}\x03\x02\x02\x02\u{5ac}\
	\u{5ae}\x07\x33\x02\x02\u{5ad}\u{5ac}\x03\x02\x02\x02\u{5ad}\u{5ae}\x03\
	\x02\x02\x02\u{5ae}\u{5b0}\x03\x02\x02\x02\u{5af}\u{5a2}\x03\x02\x02\x02\
	\u{5af}\u{5b0}\x03\x02\x02\x02\u{5b0}\u{5bd}\x03\x02\x02\x02\u{5b1}\u{5b2}\
	\x07\u{bd}\x02\x02\u{5b2}\u{5b7}\x05\u{88}\x45\x02\u{5b3}\u{5b4}\x07\x33\
	\x02\x02\u{5b4}\u{5b6}\x05\u{88}\x45\x02\u{5b5}\u{5b3}\x03\x02\x02\x02\u{5b6}\
	\u{5b9}\x03\x02\x02\x02\u{5b7}\u{5b5}\x03\x02\x02\x02\u{5b7}\u{5b8}\x03\
	\x02\x02\x02\u{5b8}\u{5bb}\x03\x02\x02\x02\u{5b9}\u{5b7}\x03\x02\x02\x02\
	\u{5ba}\u{5bc}\x07\x33\x02\x02\u{5bb}\u{5ba}\x03\x02\x02\x02\u{5bb}\u{5bc}\
	\x03\x02\x02\x02\u{5bc}\u{5be}\x03\x02\x02\x02\u{5bd}\u{5b1}\x03\x02\x02\
	\x02\u{5bd}\u{5be}\x03\x02\x02\x02\u{5be}\u{5c0}\x03\x02\x02\x02\u{5bf}\
	\u{5c1}\x05\u{8a}\x46\x02\u{5c0}\u{5bf}\x03\x02\x02\x02\u{5c0}\u{5c1}\x03\
	\x02\x02\x02\u{5c1}\u{5c5}\x03\x02\x02\x02\u{5c2}\u{5c3}\x07\x0f\x02\x02\
	\u{5c3}\u{5c4}\x07\u{b7}\x02\x02\u{5c4}\u{5c6}\x05\u{8e}\x48\x02\u{5c5}\
	\u{5c2}\x03\x02\x02\x02\u{5c5}\u{5c6}\x03\x02\x02\x02\u{5c6}\u{5c8}\x03\
	\x02\x02\x02\u{5c7}\u{5c9}\x09\x0d\x02\x02\u{5c8}\u{5c7}\x03\x02\x02\x02\
	\u{5c8}\u{5c9}\x03\x02\x02\x02\u{5c9}\u{5ca}\x03\x02\x02\x02\u{5ca}\u{5cb}\
	\x07\u{e9}\x02\x02\u{5cb}\u{5cc}\x07\u{16b}\x02\x02\u{5cc}\u{5cd}\x05\u{100}\
	\u{81}\x02\u{5cd}\u{5da}\x07\u{16c}\x02\x02\u{5ce}\u{5cf}\x07\u{127}\x02\
	\x02\u{5cf}\u{5d4}\x05\u{90}\x49\x02\u{5d0}\u{5d1}\x07\x33\x02\x02\u{5d1}\
	\u{5d3}\x05\u{90}\x49\x02\u{5d2}\u{5d0}\x03\x02\x02\x02\u{5d3}\u{5d6}\x03\
	\x02\x02\x02\u{5d4}\u{5d2}\x03\x02\x02\x02\u{5d4}\u{5d5}\x03\x02\x02\x02\
	\u{5d5}\u{5d8}\x03\x02\x02\x02\u{5d6}\u{5d4}\x03\x02\x02\x02\u{5d7}\u{5d9}\
	\x07\x33\x02\x02\u{5d8}\u{5d7}\x03\x02\x02\x02\u{5d8}\u{5d9}\x03\x02\x02\
	\x02\u{5d9}\u{5db}\x03\x02\x02\x02\u{5da}\u{5ce}\x03\x02\x02\x02\u{5da}\
	\u{5db}\x03\x02\x02\x02\u{5db}\u{5dc}\x03\x02\x02\x02\u{5dc}\u{5dd}\x07\
	\x4f\x02\x02\u{5dd}\u{5e2}\x05\u{92}\x4a\x02\u{5de}\u{5df}\x07\x33\x02\x02\
	\u{5df}\u{5e1}\x05\u{92}\x4a\x02\u{5e0}\u{5de}\x03\x02\x02\x02\u{5e1}\u{5e4}\
	\x03\x02\x02\x02\u{5e2}\u{5e0}\x03\x02\x02\x02\u{5e2}\u{5e3}\x03\x02\x02\
	\x02\u{5e3}\u{5e6}\x03\x02\x02\x02\u{5e4}\u{5e2}\x03\x02\x02\x02\u{5e5}\
	\u{5e7}\x07\x33\x02\x02\u{5e6}\u{5e5}\x03\x02\x02\x02\u{5e6}\u{5e7}\x03\
	\x02\x02\x02\u{5e7}\u{5e8}\x03\x02\x02\x02\u{5e8}\u{5e9}\x07\u{16c}\x02\
	\x02\u{5e9}\u{5eb}\x03\x02\x02\x02\u{5ea}\u{591}\x03\x02\x02\x02\u{5ea}\
	\u{5eb}\x03\x02\x02\x02\u{5eb}\u{87}\x03\x02\x02\x02\u{5ec}\u{5ed}\x05\u{ae}\
	\x58\x02\u{5ed}\u{5ee}\x07\x17\x02\x02\u{5ee}\u{5ef}\x05\u{118}\u{8d}\x02\
	\u{5ef}\u{89}\x03\x02\x02\x02\u{5f0}\u{5f1}\x07\u{d7}\x02\x02\u{5f1}\u{5f2}\
	\x07\u{109}\x02\x02\u{5f2}\u{5f3}\x07\u{ea}\x02\x02\u{5f3}\u{5fc}\x07\u{b7}\
	\x02\x02\u{5f4}\u{5f5}\x07\x10\x02\x02\u{5f5}\u{5f6}\x07\u{10a}\x02\x02\
	\u{5f6}\u{5f7}\x07\u{ea}\x02\x02\u{5f7}\u{5f9}\x07\u{b7}\x02\x02\u{5f8}\
	\u{5fa}\x05\u{8c}\x47\x02\u{5f9}\u{5f8}\x03\x02\x02\x02\u{5f9}\u{5fa}\x03\
	\x02\x02\x02\u{5fa}\u{5fc}\x03\x02\x02\x02\u{5fb}\u{5f0}\x03\x02\x02\x02\
	\u{5fb}\u{5f4}\x03\x02\x02\x02\u{5fc}\u{8b}\x03\x02\x02\x02\u{5fd}\u{5fe}\
	\x07\u{11d}\x02\x02\u{5fe}\u{5ff}\x07\x60\x02\x02\u{5ff}\u{607}\x07\u{b9}\
	\x02\x02\u{600}\u{601}\x07\u{d5}\x02\x02\u{601}\u{602}\x07\x60\x02\x02\u{602}\
	\u{607}\x07\u{b9}\x02\x02\u{603}\u{604}\x07\u{15f}\x02\x02\u{604}\u{605}\
	\x07\u{149}\x02\x02\u{605}\u{607}\x07\u{10a}\x02\x02\u{606}\u{5fd}\x03\x02\
	\x02\x02\u{606}\u{600}\x03\x02\x02\x02\u{606}\u{603}\x03\x02\x02\x02\u{607}\
	\u{8d}\x03\x02\x02\x02\u{608}\u{609}\x07\u{11f}\x02\x02\u{609}\u{60a}\x07\
	\u{137}\x02\x02\u{60a}\u{60b}\x07\u{c7}\x02\x02\u{60b}\u{61c}\x07\u{109}\
	\x02\x02\u{60c}\u{60d}\x07\u{11f}\x02\x02\u{60d}\u{60e}\x07\u{e7}\x02\x02\
	\u{60e}\u{60f}\x07\u{a7}\x02\x02\u{60f}\u{61c}\x07\u{109}\x02\x02\u{610}\
	\u{611}\x07\u{11f}\x02\x02\u{611}\u{612}\x07\u{137}\x02\x02\u{612}\u{613}\
	\x07\x72\x02\x02\u{613}\u{61c}\x05\u{118}\u{8d}\x02\u{614}\u{615}\x07\u{11f}\
	\x02\x02\u{615}\u{616}\x07\u{137}\x02\x02\u{616}\u{617}\x07\u{a7}\x02\x02\
	\u{617}\u{61c}\x05\u{118}\u{8d}\x02\u{618}\u{619}\x07\u{11f}\x02\x02\u{619}\
	\u{61a}\x07\u{137}\x02\x02\u{61a}\u{61c}\x05\u{118}\u{8d}\x02\u{61b}\u{608}\
	\x03\x02\x02\x02\u{61b}\u{60c}\x03\x02\x02\x02\u{61b}\u{610}\x03\x02\x02\
	\x02\u{61b}\u{614}\x03\x02\x02\x02\u{61b}\u{618}\x03\x02\x02\x02\u{61c}\
	\u{8f}\x03\x02\x02\x02\u{61d}\u{61e}\x05\u{118}\u{8d}\x02\u{61e}\u{61f}\
	\x07\u{170}\x02\x02\u{61f}\u{620}\x07\u{16b}\x02\x02\u{620}\u{625}\x05\u{118}\
	\u{8d}\x02\u{621}\u{622}\x07\x33\x02\x02\u{622}\u{624}\x05\u{118}\u{8d}\
	\x02\u{623}\u{621}\x03\x02\x02\x02\u{624}\u{627}\x03\x02\x02\x02\u{625}\
	\u{623}\x03\x02\x02\x02\u{625}\u{626}\x03\x02\x02\x02\u{626}\u{629}\x03\
	\x02\x02\x02\u{627}\u{625}\x03\x02\x02\x02\u{628}\u{62a}\x07\x33\x02\x02\
	\u{629}\u{628}\x03\x02\x02\x02\u{629}\u{62a}\x03\x02\x02\x02\u{62a}\u{62b}\
	\x03\x02\x02\x02\u{62b}\u{62c}\x07\u{16c}\x02\x02\u{62c}\u{91}\x03\x02\x02\
	\x02\u{62d}\u{62e}\x05\u{118}\u{8d}\x02\u{62e}\u{62f}\x07\x17\x02\x02\u{62f}\
	\u{630}\x05\u{ae}\x58\x02\u{630}\u{93}\x03\x02\x02\x02\u{631}\u{632}\x05\
	\u{9a}\x4e\x02\u{632}\u{95}\x03\x02\x02\x02\u{633}\u{63b}\x05\u{94}\x4b\
	\x02\u{634}\u{636}\x07\x17\x02\x02\u{635}\u{634}\x03\x02\x02\x02\u{635}\
	\u{636}\x03\x02\x02\x02\u{636}\u{637}\x03\x02\x02\x02\u{637}\u{639}\x05\
	\u{118}\u{8d}\x02\u{638}\u{63a}\x05\u{98}\x4d\x02\u{639}\u{638}\x03\x02\
	\x02\x02\u{639}\u{63a}\x03\x02\x02\x02\u{63a}\u{63c}\x03\x02\x02\x02\u{63b}\
	\u{635}\x03\x02\x02\x02\u{63b}\u{63c}\x03\x02\x02\x02\u{63c}\u{97}\x03\x02\
	\x02\x02\u{63d}\u{63e}\x07\u{16b}\x02\x02\u{63e}\u{640}\x05\u{122}\u{92}\
	\x02\u{63f}\u{641}\x07\x33\x02\x02\u{640}\u{63f}\x03\x02\x02\x02\u{640}\
	\u{641}\x03\x02\x02\x02\u{641}\u{642}\x03\x02\x02\x02\u{642}\u{643}\x07\
	\u{16c}\x02\x02\u{643}\u{99}\x03\x02\x02\x02\u{644}\u{646}\x05\u{110}\u{89}\
	\x02\u{645}\u{647}\x05\u{112}\u{8a}\x02\u{646}\u{645}\x03\x02\x02\x02\u{646}\
	\u{647}\x03\x02\x02\x02\u{647}\u{66d}\x03\x02\x02\x02\u{648}\u{649}\x07\
	\u{16b}\x02\x02\u{649}\u{64a}\x05\x10\x09\x02\u{64a}\u{64b}\x07\u{16c}\x02\
	\x02\u{64b}\u{66d}\x03\x02\x02\x02\u{64c}\u{64d}\x07\u{14a}\x02\x02\u{64d}\
	\u{64e}\x07\u{16b}\x02\x02\u{64e}\u{653}\x05\u{ae}\x58\x02\u{64f}\u{650}\
	\x07\x33\x02\x02\u{650}\u{652}\x05\u{ae}\x58\x02\u{651}\u{64f}\x03\x02\x02\
	\x02\u{652}\u{655}\x03\x02\x02\x02\u{653}\u{651}\x03\x02\x02\x02\u{653}\
	\u{654}\x03\x02\x02\x02\u{654}\u{657}\x03\x02\x02\x02\u{655}\u{653}\x03\
	\x02\x02\x02\u{656}\u{658}\x07\x33\x02\x02\u{657}\u{656}\x03\x02\x02\x02\
	\u{657}\u{658}\x03\x02\x02\x02\u{658}\u{659}\x03\x02\x02\x02\u{659}\u{65c}\
	\x07\u{16c}\x02\x02\u{65a}\u{65b}\x07\u{15f}\x02\x02\u{65b}\u{65d}\x07\u{dd}\
	\x02\x02\u{65c}\u{65a}\x03\x02\x02\x02\u{65c}\u{65d}\x03\x02\x02\x02\u{65d}\
	\u{66d}\x03\x02\x02\x02\u{65e}\u{65f}\x07\u{a8}\x02\x02\u{65f}\u{660}\x07\
	\u{16b}\x02\x02\u{660}\u{661}\x05\x10\x09\x02\u{661}\u{662}\x07\u{16c}\x02\
	\x02\u{662}\u{66d}\x03\x02\x02\x02\u{663}\u{664}\x07\u{12b}\x02\x02\u{664}\
	\u{665}\x07\u{16b}\x02\x02\u{665}\u{666}\x05\u{9c}\x4f\x02\u{666}\u{667}\
	\x07\u{16c}\x02\x02\u{667}\u{66d}\x03\x02\x02\x02\u{668}\u{669}\x07\u{16b}\
	\x02\x02\u{669}\u{66a}\x05\x6c\x37\x02\u{66a}\u{66b}\x07\u{16c}\x02\x02\
	\u{66b}\u{66d}\x03\x02\x02\x02\u{66c}\u{644}\x03\x02\x02\x02\u{66c}\u{648}\
	\x03\x02\x02\x02\u{66c}\u{64c}\x03\x02\x02\x02\u{66c}\u{65e}\x03\x02\x02\
	\x02\u{66c}\u{663}\x03\x02\x02\x02\u{66c}\u{668}\x03\x02\x02\x02\u{66d}\
	\u{9b}\x03\x02\x02\x02\u{66e}\u{66f}\x05\u{c0}\x61\x02\u{66f}\u{67b}\x07\
	\u{16b}\x02\x02\u{670}\u{675}\x05\u{a2}\x52\x02\u{671}\u{672}\x07\x33\x02\
	\x02\u{672}\u{674}\x05\u{a2}\x52\x02\u{673}\u{671}\x03\x02\x02\x02\u{674}\
	\u{677}\x03\x02\x02\x02\u{675}\u{673}\x03\x02\x02\x02\u{675}\u{676}\x03\
	\x02\x02\x02\u{676}\u{679}\x03\x02\x02\x02\u{677}\u{675}\x03\x02\x02\x02\
	\u{678}\u{67a}\x07\x33\x02\x02\u{679}\u{678}\x03\x02\x02\x02\u{679}\u{67a}\
	\x03\x02\x02\x02\u{67a}\u{67c}\x03\x02\x02\x02\u{67b}\u{670}\x03\x02\x02\
	\x02\u{67b}\u{67c}\x03\x02\x02\x02\u{67c}\u{67e}\x03\x02\x02\x02\u{67d}\
	\u{67f}\x05\u{9e}\x50\x02\u{67e}\u{67d}\x03\x02\x02\x02\u{67e}\u{67f}\x03\
	\x02\x02\x02\u{67f}\u{680}\x03\x02\x02\x02\u{680}\u{682}\x07\u{16c}\x02\
	\x02\u{681}\u{683}\x05\u{f8}\x7d\x02\u{682}\u{681}\x03\x02\x02\x02\u{682}\
	\u{683}\x03\x02\x02\x02\u{683}\u{9d}\x03\x02\x02\x02\u{684}\u{685}\x07\x3d\
	\x02\x02\u{685}\u{68a}\x05\u{ac}\x57\x02\u{686}\u{687}\x07\x33\x02\x02\u{687}\
	\u{689}\x05\u{ac}\x57\x02\u{688}\u{686}\x03\x02\x02\x02\u{689}\u{68c}\x03\
	\x02\x02\x02\u{68a}\u{688}\x03\x02\x02\x02\u{68a}\u{68b}\x03\x02\x02\x02\
	\u{68b}\u{68e}\x03\x02\x02\x02\u{68c}\u{68a}\x03\x02\x02\x02\u{68d}\u{68f}\
	\x07\x33\x02\x02\u{68e}\u{68d}\x03\x02\x02\x02\u{68e}\u{68f}\x03\x02\x02\
	\x02\u{68f}\u{9f}\x03\x02\x02\x02\u{690}\u{691}\x05\u{118}\u{8d}\x02\u{691}\
	\u{a1}\x03\x02\x02\x02\u{692}\u{693}\x05\u{a0}\x51\x02\u{693}\u{694}\x07\
	\x03\x02\x02\u{694}\u{696}\x03\x02\x02\x02\u{695}\u{692}\x03\x02\x02\x02\
	\u{695}\u{696}\x03\x02\x02\x02\u{696}\u{69a}\x03\x02\x02\x02\u{697}\u{69b}\
	\x05\u{a4}\x53\x02\u{698}\u{69b}\x05\u{a8}\x55\x02\u{699}\u{69b}\x05\u{ae}\
	\x58\x02\u{69a}\u{697}\x03\x02\x02\x02\u{69a}\u{698}\x03\x02\x02\x02\u{69a}\
	\u{699}\x03\x02\x02\x02\u{69b}\u{a3}\x03\x02\x02\x02\u{69c}\u{6b1}\x05\u{a6}\
	\x54\x02\u{69d}\u{69e}\x07\u{e3}\x02\x02\u{69e}\u{6af}\x07\x22\x02\x02\u{69f}\
	\u{6ab}\x07\u{16b}\x02\x02\u{6a0}\u{6a5}\x05\u{ae}\x58\x02\u{6a1}\u{6a2}\
	\x07\x33\x02\x02\u{6a2}\u{6a4}\x05\u{ae}\x58\x02\u{6a3}\u{6a1}\x03\x02\x02\
	\x02\u{6a4}\u{6a7}\x03\x02\x02\x02\u{6a5}\u{6a3}\x03\x02\x02\x02\u{6a5}\
	\u{6a6}\x03\x02\x02\x02\u{6a6}\u{6a9}\x03\x02\x02\x02\u{6a7}\u{6a5}\x03\
	\x02\x02\x02\u{6a8}\u{6aa}\x07\x33\x02\x02\u{6a9}\u{6a8}\x03\x02\x02\x02\
	\u{6a9}\u{6aa}\x03\x02\x02\x02\u{6aa}\u{6ac}\x03\x02\x02\x02\u{6ab}\u{6a0}\
	\x03\x02\x02\x02\u{6ab}\u{6ac}\x03\x02\x02\x02\u{6ac}\u{6ad}\x03\x02\x02\
	\x02\u{6ad}\u{6b0}\x07\u{16c}\x02\x02\u{6ae}\u{6b0}\x05\u{ae}\x58\x02\u{6af}\
	\u{69f}\x03\x02\x02\x02\u{6af}\u{6ae}\x03\x02\x02\x02\u{6b0}\u{6b2}\x03\
	\x02\x02\x02\u{6b1}\u{69d}\x03\x02\x02\x02\u{6b1}\u{6b2}\x03\x02\x02\x02\
	\u{6b2}\u{6b9}\x03\x02\x02\x02\u{6b3}\u{6b4}\x07\u{f5}\x02\x02\u{6b4}\u{6b5}\
	\x07\u{15c}\x02\x02\u{6b5}\u{6ba}\x07\x60\x02\x02\u{6b6}\u{6b7}\x07\u{a3}\
	\x02\x02\u{6b7}\u{6b8}\x07\u{15c}\x02\x02\u{6b8}\u{6ba}\x07\x60\x02\x02\
	\u{6b9}\u{6b3}\x03\x02\x02\x02\u{6b9}\u{6b6}\x03\x02\x02\x02\u{6b9}\u{6ba}\
	\x03\x02\x02\x02\u{6ba}\u{6ce}\x03\x02\x02\x02\u{6bb}\u{6bc}\x07\u{dc}\x02\
	\x02\u{6bc}\u{6cc}\x07\x22\x02\x02\u{6bd}\u{6be}\x07\u{16b}\x02\x02\u{6be}\
	\u{6c3}\x05\x4c\x27\x02\u{6bf}\u{6c0}\x07\x33\x02\x02\u{6c0}\u{6c2}\x05\
	\x4c\x27\x02\u{6c1}\u{6bf}\x03\x02\x02\x02\u{6c2}\u{6c5}\x03\x02\x02\x02\
	\u{6c3}\u{6c1}\x03\x02\x02\x02\u{6c3}\u{6c4}\x03\x02\x02\x02\u{6c4}\u{6c7}\
	\x03\x02\x02\x02\u{6c5}\u{6c3}\x03\x02\x02\x02\u{6c6}\u{6c8}\x07\x33\x02\
	\x02\u{6c7}\u{6c6}\x03\x02\x02\x02\u{6c7}\u{6c8}\x03\x02\x02\x02\u{6c8}\
	\u{6c9}\x03\x02\x02\x02\u{6c9}\u{6ca}\x07\u{16c}\x02\x02\u{6ca}\u{6cd}\x03\
	\x02\x02\x02\u{6cb}\u{6cd}\x05\x4c\x27\x02\u{6cc}\u{6bd}\x03\x02\x02\x02\
	\u{6cc}\u{6cb}\x03\x02\x02\x02\u{6cd}\u{6cf}\x03\x02\x02\x02\u{6ce}\u{6bb}\
	\x03\x02\x02\x02\u{6ce}\u{6cf}\x03\x02\x02\x02\u{6cf}\u{a5}\x03\x02\x02\
	\x02\u{6d0}\u{6d1}\x07\u{12b}\x02\x02\u{6d1}\u{6d2}\x07\u{16b}\x02\x02\u{6d2}\
	\u{6d3}\x05\u{10e}\u{88}\x02\u{6d3}\u{6db}\x07\u{16c}\x02\x02\u{6d4}\u{6d6}\
	\x07\x17\x02\x02\u{6d5}\u{6d4}\x03\x02\x02\x02\u{6d5}\u{6d6}\x03\x02\x02\
	\x02\u{6d6}\u{6d7}\x03\x02\x02\x02\u{6d7}\u{6d9}\x05\u{118}\u{8d}\x02\u{6d8}\
	\u{6da}\x05\u{98}\x4d\x02\u{6d9}\u{6d8}\x03\x02\x02\x02\u{6d9}\u{6da}\x03\
	\x02\x02\x02\u{6da}\u{6dc}\x03\x02\x02\x02\u{6db}\u{6d5}\x03\x02\x02\x02\
	\u{6db}\u{6dc}\x03\x02\x02\x02\u{6dc}\u{6eb}\x03\x02\x02\x02\u{6dd}\u{6de}\
	\x07\u{12b}\x02\x02\u{6de}\u{6df}\x07\u{16b}\x02\x02\u{6df}\u{6e0}\x05\x10\
	\x09\x02\u{6e0}\u{6e8}\x07\u{16c}\x02\x02\u{6e1}\u{6e3}\x07\x17\x02\x02\
	\u{6e2}\u{6e1}\x03\x02\x02\x02\u{6e2}\u{6e3}\x03\x02\x02\x02\u{6e3}\u{6e4}\
	\x03\x02\x02\x02\u{6e4}\u{6e6}\x05\u{118}\u{8d}\x02\u{6e5}\u{6e7}\x05\u{98}\
	\x4d\x02\u{6e6}\u{6e5}\x03\x02\x02\x02\u{6e6}\u{6e7}\x03\x02\x02\x02\u{6e7}\
	\u{6e9}\x03\x02\x02\x02\u{6e8}\u{6e2}\x03\x02\x02\x02\u{6e8}\u{6e9}\x03\
	\x02\x02\x02\u{6e9}\u{6eb}\x03\x02\x02\x02\u{6ea}\u{6d0}\x03\x02\x02\x02\
	\u{6ea}\u{6dd}\x03\x02\x02\x02\u{6eb}\u{a7}\x03\x02\x02\x02\u{6ec}\u{6ed}\
	\x07\x57\x02\x02\u{6ed}\u{6ee}\x07\u{16b}\x02\x02\u{6ee}\u{6f3}\x05\u{aa}\
	\x56\x02\u{6ef}\u{6f0}\x07\x33\x02\x02\u{6f0}\u{6f2}\x05\u{aa}\x56\x02\u{6f1}\
	\u{6ef}\x03\x02\x02\x02\u{6f2}\u{6f5}\x03\x02\x02\x02\u{6f3}\u{6f1}\x03\
	\x02\x02\x02\u{6f3}\u{6f4}\x03\x02\x02\x02\u{6f4}\u{6f7}\x03\x02\x02\x02\
	\u{6f5}\u{6f3}\x03\x02\x02\x02\u{6f6}\u{6f8}\x07\x33\x02\x02\u{6f7}\u{6f6}\
	\x03\x02\x02\x02\u{6f7}\u{6f8}\x03\x02\x02\x02\u{6f8}\u{6f9}\x03\x02\x02\
	\x02\u{6f9}\u{6fa}\x07\u{16c}\x02\x02\u{6fa}\u{702}\x03\x02\x02\x02\u{6fb}\
	\u{6fc}\x07\x2a\x02\x02\u{6fc}\u{6fd}\x07\u{16b}\x02\x02\u{6fd}\u{6fe}\x07\
	\u{d0}\x02\x02\u{6fe}\u{6ff}\x07\x17\x02\x02\u{6ff}\u{700}\x07\x57\x02\x02\
	\u{700}\u{702}\x07\u{16c}\x02\x02\u{701}\u{6ec}\x03\x02\x02\x02\u{701}\u{6fb}\
	\x03\x02\x02\x02\u{702}\u{a9}\x03\x02\x02\x02\u{703}\u{705}\x05\u{118}\u{8d}\
	\x02\u{704}\u{706}\x05\u{ec}\x77\x02\u{705}\u{704}\x03\x02\x02\x02\u{705}\
	\u{706}\x03\x02\x02\x02\u{706}\u{ab}\x03\x02\x02\x02\u{707}\u{708}\x07\u{16b}\
	\x02\x02\u{708}\u{709}\x05\u{10e}\u{88}\x02\u{709}\u{70a}\x07\x33\x02\x02\
	\u{70a}\u{70f}\x05\u{10e}\u{88}\x02\u{70b}\u{70c}\x07\x33\x02\x02\u{70c}\
	\u{70e}\x05\u{10e}\u{88}\x02\u{70d}\u{70b}\x03\x02\x02\x02\u{70e}\u{711}\
	\x03\x02\x02\x02\u{70f}\u{70d}\x03\x02\x02\x02\u{70f}\u{710}\x03\x02\x02\
	\x02\u{710}\u{713}\x03\x02\x02\x02\u{711}\u{70f}\x03\x02\x02\x02\u{712}\
	\u{714}\x07\x33\x02\x02\u{713}\u{712}\x03\x02\x02\x02\u{713}\u{714}\x03\
	\x02\x02\x02\u{714}\u{715}\x03\x02\x02\x02\u{715}\u{716}\x07\u{16c}\x02\
	\x02\u{716}\u{ad}\x03\x02\x02\x02\u{717}\u{718}\x05\u{b0}\x59\x02\u{718}\
	\u{af}\x03\x02\x02\x02\u{719}\u{71a}\x08\x59\x01\x02\u{71a}\u{71c}\x05\u{b4}\
	\x5b\x02\u{71b}\u{71d}\x05\u{b2}\x5a\x02\u{71c}\u{71b}\x03\x02\x02\x02\u{71c}\
	\u{71d}\x03\x02\x02\x02\u{71d}\u{721}\x03\x02\x02\x02\u{71e}\u{71f}\x07\
	\u{cf}\x02\x02\u{71f}\u{721}\x05\u{b0}\x59\x05\u{720}\u{719}\x03\x02\x02\
	\x02\u{720}\u{71e}\x03\x02\x02\x02\u{721}\u{72a}\x03\x02\x02\x02\u{722}\
	\u{723}\x0c\x04\x02\x02\u{723}\u{724}\x07\x13\x02\x02\u{724}\u{729}\x05\
	\u{b0}\x59\x05\u{725}\u{726}\x0c\x03\x02\x02\u{726}\u{727}\x07\u{db}\x02\
	\x02\u{727}\u{729}\x05\u{b0}\x59\x04\u{728}\u{722}\x03\x02\x02\x02\u{728}\
	\u{725}\x03\x02\x02\x02\u{729}\u{72c}\x03\x02\x02\x02\u{72a}\u{728}\x03\
	\x02\x02\x02\u{72a}\u{72b}\x03\x02\x02\x02\u{72b}\u{b1}\x03\x02\x02\x02\
	\u{72c}\u{72a}\x03\x02\x02\x02\u{72d}\u{72e}\x05\u{de}\x70\x02\u{72e}\u{72f}\
	\x05\u{b4}\x5b\x02\u{72f}\u{77d}\x03\x02\x02\x02\u{730}\u{731}\x05\u{de}\
	\x70\x02\u{731}\u{732}\x05\u{e0}\x71\x02\u{732}\u{733}\x07\u{16b}\x02\x02\
	\u{733}\u{734}\x05\x10\x09\x02\u{734}\u{735}\x07\u{16c}\x02\x02\u{735}\u{77d}\
	\x03\x02\x02\x02\u{736}\u{738}\x07\u{cf}\x02\x02\u{737}\u{736}\x03\x02\x02\
	\x02\u{737}\u{738}\x03\x02\x02\x02\u{738}\u{739}\x03\x02\x02\x02\u{739}\
	\u{73a}\x07\x20\x02\x02\u{73a}\u{73b}\x05\u{b4}\x5b\x02\u{73b}\u{73c}\x07\
	\x13\x02\x02\u{73c}\u{73d}\x05\u{b4}\x5b\x02\u{73d}\u{77d}\x03\x02\x02\x02\
	\u{73e}\u{740}\x07\u{cf}\x02\x02\u{73f}\u{73e}\x03\x02\x02\x02\u{73f}\u{740}\
	\x03\x02\x02\x02\u{740}\u{741}\x03\x02\x02\x02\u{741}\u{742}\x07\u{8b}\x02\
	\x02\u{742}\u{743}\x07\u{16b}\x02\x02\u{743}\u{748}\x05\u{ae}\x58\x02\u{744}\
	\u{745}\x07\x33\x02\x02\u{745}\u{747}\x05\u{ae}\x58\x02\u{746}\u{744}\x03\
	\x02\x02\x02\u{747}\u{74a}\x03\x02\x02\x02\u{748}\u{746}\x03\x02\x02\x02\
	\u{748}\u{749}\x03\x02\x02\x02\u{749}\u{74c}\x03\x02\x02\x02\u{74a}\u{748}\
	\x03\x02\x02\x02\u{74b}\u{74d}\x07\x33\x02\x02\u{74c}\u{74b}\x03\x02\x02\
	\x02\u{74c}\u{74d}\x03\x02\x02\x02\u{74d}\u{74e}\x03\x02\x02\x02\u{74e}\
	\u{74f}\x07\u{16c}\x02\x02\u{74f}\u{77d}\x03\x02\x02\x02\u{750}\u{752}\x07\
	\u{cf}\x02\x02\u{751}\u{750}\x03\x02\x02\x02\u{751}\u{752}\x03\x02\x02\x02\
	\u{752}\u{753}\x03\x02\x02\x02\u{753}\u{754}\x07\u{8b}\x02\x02\u{754}\u{755}\
	\x07\u{16b}\x02\x02\u{755}\u{756}\x05\x10\x09\x02\u{756}\u{757}\x07\u{16c}\
	\x02\x02\u{757}\u{77d}\x03\x02\x02\x02\u{758}\u{75a}\x07\u{cf}\x02\x02\u{759}\
	\u{758}\x03\x02\x02\x02\u{759}\u{75a}\x03\x02\x02\x02\u{75a}\u{75b}\x03\
	\x02\x02\x02\u{75b}\u{75c}\x09\x0e\x02\x02\u{75c}\u{75f}\x05\u{b4}\x5b\x02\
	\u{75d}\u{75e}\x07\x65\x02\x02\u{75e}\u{760}\x05\u{b4}\x5b\x02\u{75f}\u{75d}\
	\x03\x02\x02\x02\u{75f}\u{760}\x03\x02\x02\x02\u{760}\u{77d}\x03\x02\x02\
	\x02\u{761}\u{763}\x07\u{cf}\x02\x02\u{762}\u{761}\x03\x02\x02\x02\u{762}\
	\u{763}\x03\x02\x02\x02\u{763}\u{764}\x03\x02\x02\x02\u{764}\u{765}\x07\
	\u{11e}\x02\x02\u{765}\u{766}\x07\u{137}\x02\x02\u{766}\u{769}\x05\u{b4}\
	\x5b\x02\u{767}\u{768}\x07\x65\x02\x02\u{768}\u{76a}\x05\u{b4}\x5b\x02\u{769}\
	\u{767}\x03\x02\x02\x02\u{769}\u{76a}\x03\x02\x02\x02\u{76a}\u{77d}\x03\
	\x02\x02\x02\u{76b}\u{76d}\x07\u{99}\x02\x02\u{76c}\u{76e}\x07\u{cf}\x02\
	\x02\u{76d}\u{76c}\x03\x02\x02\x02\u{76d}\u{76e}\x03\x02\x02\x02\u{76e}\
	\u{76f}\x03\x02\x02\x02\u{76f}\u{77d}\x07\u{d0}\x02\x02\u{770}\u{772}\x07\
	\u{99}\x02\x02\u{771}\u{773}\x07\u{cf}\x02\x02\u{772}\u{771}\x03\x02\x02\
	\x02\u{772}\u{773}\x03\x02\x02\x02\u{773}\u{774}\x03\x02\x02\x02\u{774}\
	\u{775}\x07\x58\x02\x02\u{775}\u{776}\x07\x76\x02\x02\u{776}\u{77d}\x05\
	\u{b4}\x5b\x02\u{777}\u{779}\x07\u{99}\x02\x02\u{778}\u{77a}\x07\u{cf}\x02\
	\x02\u{779}\u{778}\x03\x02\x02\x02\u{779}\u{77a}\x03\x02\x02\x02\u{77a}\
	\u{77b}\x03\x02\x02\x02\u{77b}\u{77d}\x07\u{147}\x02\x02\u{77c}\u{72d}\x03\
	\x02\x02\x02\u{77c}\u{730}\x03\x02\x02\x02\u{77c}\u{737}\x03\x02\x02\x02\
	\u{77c}\u{73f}\x03\x02\x02\x02\u{77c}\u{751}\x03\x02\x02\x02\u{77c}\u{759}\
	\x03\x02\x02\x02\u{77c}\u{762}\x03\x02\x02\x02\u{77c}\u{76b}\x03\x02\x02\
	\x02\u{77c}\u{770}\x03\x02\x02\x02\u{77c}\u{777}\x03\x02\x02\x02\u{77d}\
	\u{b3}\x03\x02\x02\x02\u{77e}\u{77f}\x08\x5b\x01\x02\u{77f}\u{783}\x05\u{b6}\
	\x5c\x02\u{780}\u{781}\x09\x0f\x02\x02\u{781}\u{783}\x05\u{b4}\x5b\x07\u{782}\
	\u{77e}\x03\x02\x02\x02\u{782}\u{780}\x03\x02\x02\x02\u{783}\u{795}\x03\
	\x02\x02\x02\u{784}\u{785}\x0c\x06\x02\x02\u{785}\u{786}\x09\x10\x02\x02\
	\u{786}\u{794}\x05\u{b4}\x5b\x07\u{787}\u{788}\x0c\x05\x02\x02\u{788}\u{789}\
	\x09\x11\x02\x02\u{789}\u{794}\x05\u{b4}\x5b\x06\u{78a}\u{78b}\x0c\x04\x02\
	\x02\u{78b}\u{78c}\x07\u{17b}\x02\x02\u{78c}\u{794}\x05\u{b4}\x5b\x05\u{78d}\
	\u{78e}\x0c\x03\x02\x02\u{78e}\u{78f}\x07\u{180}\x02\x02\u{78f}\u{794}\x05\
	\u{b4}\x5b\x04\u{790}\u{791}\x0c\x08\x02\x02\u{791}\u{792}\x07\x19\x02\x02\
	\u{792}\u{794}\x05\u{dc}\x6f\x02\u{793}\u{784}\x03\x02\x02\x02\u{793}\u{787}\
	\x03\x02\x02\x02\u{793}\u{78a}\x03\x02\x02\x02\u{793}\u{78d}\x03\x02\x02\
	\x02\u{793}\u{790}\x03\x02\x02\x02\u{794}\u{797}\x03\x02\x02\x02\u{795}\
	\u{793}\x03\x02\x02\x02\u{795}\u{796}\x03\x02\x02\x02\u{796}\u{b5}\x03\x02\
	\x02\x02\u{797}\u{795}\x03\x02\x02\x02\u{798}\u{799}\x08\x5c\x01\x02\u{799}\
	\u{94a}\x07\u{d0}\x02\x02\u{79a}\u{94a}\x05\u{e4}\x73\x02\u{79b}\u{94a}\
	\x05\u{124}\u{93}\x02\u{79c}\u{94a}\x05\u{e2}\x72\x02\u{79d}\u{94a}\x05\
	\u{da}\x6e\x02\u{79e}\u{94a}\x07\u{184}\x02\x02\u{79f}\u{7a0}\x05\u{118}\
	\u{8d}\x02\u{7a0}\u{7a1}\x05\u{da}\x6e\x02\u{7a1}\u{94a}\x03\x02\x02\x02\
	\u{7a2}\u{7a3}\x07\x5d\x02\x02\u{7a3}\u{7a4}\x07\u{ef}\x02\x02\u{7a4}\u{94a}\
	\x05\u{da}\x6e\x02\u{7a5}\u{7a6}\x07\u{16b}\x02\x02\u{7a6}\u{7a9}\x05\u{ae}\
	\x58\x02\u{7a7}\u{7a8}\x07\x33\x02\x02\u{7a8}\u{7aa}\x05\u{ae}\x58\x02\u{7a9}\
	\u{7a7}\x03\x02\x02\x02\u{7aa}\u{7ab}\x03\x02\x02\x02\u{7ab}\u{7a9}\x03\
	\x02\x02\x02\u{7ab}\u{7ac}\x03\x02\x02\x02\u{7ac}\u{7ae}\x03\x02\x02\x02\
	\u{7ad}\u{7af}\x07\x33\x02\x02\u{7ae}\u{7ad}\x03\x02\x02\x02\u{7ae}\u{7af}\
	\x03\x02\x02\x02\u{7af}\u{7b0}\x03\x02\x02\x02\u{7b0}\u{7b1}\x07\u{16c}\
	\x02\x02\u{7b1}\u{94a}\x03\x02\x02\x02\u{7b2}\u{7b3}\x07\u{109}\x02\x02\
	\u{7b3}\u{7b4}\x07\u{16b}\x02\x02\u{7b4}\u{7b9}\x05\u{ae}\x58\x02\u{7b5}\
	\u{7b6}\x07\x33\x02\x02\u{7b6}\u{7b8}\x05\u{ae}\x58\x02\u{7b7}\u{7b5}\x03\
	\x02\x02\x02\u{7b8}\u{7bb}\x03\x02\x02\x02\u{7b9}\u{7b7}\x03\x02\x02\x02\
	\u{7b9}\u{7ba}\x03\x02\x02\x02\u{7ba}\u{7bc}\x03\x02\x02\x02\u{7bb}\u{7b9}\
	\x03\x02\x02\x02\u{7bc}\u{7bd}\x07\u{16c}\x02\x02\u{7bd}\u{94a}\x03\x02\
	\x02\x02\u{7be}\u{7bf}\x07\u{ed}\x02\x02\u{7bf}\u{7c0}\x07\u{16b}\x02\x02\
	\u{7c0}\u{7c1}\x05\u{b4}\x5b\x02\u{7c1}\u{7c2}\x07\u{8b}\x02\x02\u{7c2}\
	\u{7c3}\x05\u{b4}\x5b\x02\u{7c3}\u{7c4}\x07\u{16c}\x02\x02\u{7c4}\u{94a}\
	\x03\x02\x02\x02\u{7c5}\u{7c6}\x07\u{af}\x02\x02\u{7c6}\u{7c8}\x07\u{16b}\
	\x02\x02\u{7c7}\u{7c9}\x05\x46\x24\x02\u{7c8}\u{7c7}\x03\x02\x02\x02\u{7c8}\
	\u{7c9}\x03\x02\x02\x02\u{7c9}\u{7ca}\x03\x02\x02\x02\u{7ca}\u{7cd}\x05\
	\u{ae}\x58\x02\u{7cb}\u{7cc}\x07\x33\x02\x02\u{7cc}\u{7ce}\x05\u{ae}\x58\
	\x02\u{7cd}\u{7cb}\x03\x02\x02\x02\u{7cd}\u{7ce}\x03\x02\x02\x02\u{7ce}\
	\u{7d0}\x03\x02\x02\x02\u{7cf}\u{7d1}\x07\x33\x02\x02\u{7d0}\u{7cf}\x03\
	\x02\x02\x02\u{7d0}\u{7d1}\x03\x02\x02\x02\u{7d1}\u{7d5}\x03\x02\x02\x02\
	\u{7d2}\u{7d3}\x07\u{d6}\x02\x02\u{7d3}\u{7d4}\x07\u{e2}\x02\x02\u{7d4}\
	\u{7d6}\x05\u{80}\x41\x02\u{7d5}\u{7d2}\x03\x02\x02\x02\u{7d5}\u{7d6}\x03\
	\x02\x02\x02\u{7d6}\u{7d7}\x03\x02\x02\x02\u{7d7}\u{7ea}\x07\u{16c}\x02\
	\x02\u{7d8}\u{7d9}\x07\u{160}\x02\x02\u{7d9}\u{7da}\x07\u{80}\x02\x02\u{7da}\
	\u{7db}\x07\u{16b}\x02\x02\u{7db}\u{7dc}\x07\u{dc}\x02\x02\u{7dc}\u{7dd}\
	\x07\x22\x02\x02\u{7dd}\u{7e2}\x05\x4c\x27\x02\u{7de}\u{7df}\x07\x33\x02\
	\x02\u{7df}\u{7e1}\x05\x4c\x27\x02\u{7e0}\u{7de}\x03\x02\x02\x02\u{7e1}\
	\u{7e4}\x03\x02\x02\x02\u{7e2}\u{7e0}\x03\x02\x02\x02\u{7e2}\u{7e3}\x03\
	\x02\x02\x02\u{7e3}\u{7e6}\x03\x02\x02\x02\u{7e4}\u{7e2}\x03\x02\x02\x02\
	\u{7e5}\u{7e7}\x07\x33\x02\x02\u{7e6}\u{7e5}\x03\x02\x02\x02\u{7e6}\u{7e7}\
	\x03\x02\x02\x02\u{7e7}\u{7e8}\x03\x02\x02\x02\u{7e8}\u{7e9}\x07\u{16c}\
	\x02\x02\u{7e9}\u{7eb}\x03\x02\x02\x02\u{7ea}\u{7d8}\x03\x02\x02\x02\u{7ea}\
	\u{7eb}\x03\x02\x02\x02\u{7eb}\u{94a}\x03\x02\x02\x02\u{7ec}\u{7ed}\x07\
	\x6a\x02\x02\u{7ed}\u{7ee}\x07\u{16b}\x02\x02\u{7ee}\u{7ef}\x05\x10\x09\
	\x02\u{7ef}\u{7f0}\x07\u{16c}\x02\x02\u{7f0}\u{94a}\x03\x02\x02\x02\u{7f1}\
	\u{7f2}\x07\x27\x02\x02\u{7f2}\u{7f4}\x05\u{ae}\x58\x02\u{7f3}\u{7f5}\x05\
	\u{f4}\x7b\x02\u{7f4}\u{7f3}\x03\x02\x02\x02\u{7f5}\u{7f6}\x03\x02\x02\x02\
	\u{7f6}\u{7f4}\x03\x02\x02\x02\u{7f6}\u{7f7}\x03\x02\x02\x02\u{7f7}\u{7fa}\
	\x03\x02\x02\x02\u{7f8}\u{7f9}\x07\x5f\x02\x02\u{7f9}\u{7fb}\x05\u{ae}\x58\
	\x02\u{7fa}\u{7f8}\x03\x02\x02\x02\u{7fa}\u{7fb}\x03\x02\x02\x02\u{7fb}\
	\u{7fc}\x03\x02\x02\x02\u{7fc}\u{7fd}\x07\x63\x02\x02\u{7fd}\u{94a}\x03\
	\x02\x02\x02\u{7fe}\u{800}\x07\x27\x02\x02\u{7ff}\u{801}\x05\u{f4}\x7b\x02\
	\u{800}\u{7ff}\x03\x02\x02\x02\u{801}\u{802}\x03\x02\x02\x02\u{802}\u{800}\
	\x03\x02\x02\x02\u{802}\u{803}\x03\x02\x02\x02\u{803}\u{806}\x03\x02\x02\
	\x02\u{804}\u{805}\x07\x5f\x02\x02\u{805}\u{807}\x05\u{ae}\x58\x02\u{806}\
	\u{804}\x03\x02\x02\x02\u{806}\u{807}\x03\x02\x02\x02\u{807}\u{808}\x03\
	\x02\x02\x02\u{808}\u{809}\x07\x63\x02\x02\u{809}\u{94a}\x03\x02\x02\x02\
	\u{80a}\u{80b}\x07\x2a\x02\x02\u{80b}\u{80c}\x07\u{16b}\x02\x02\u{80c}\u{80d}\
	\x05\u{ae}\x58\x02\u{80d}\u{80e}\x07\x17\x02\x02\u{80e}\u{80f}\x05\u{ec}\
	\x77\x02\u{80f}\u{810}\x07\u{16c}\x02\x02\u{810}\u{94a}\x03\x02\x02\x02\
	\u{811}\u{812}\x07\u{13e}\x02\x02\u{812}\u{813}\x07\u{16b}\x02\x02\u{813}\
	\u{814}\x05\u{ae}\x58\x02\u{814}\u{815}\x07\x17\x02\x02\u{815}\u{816}\x05\
	\u{ec}\x77\x02\u{816}\u{817}\x07\u{16c}\x02\x02\u{817}\u{94a}\x03\x02\x02\
	\x02\u{818}\u{819}\x07\u{13b}\x02\x02\u{819}\u{81b}\x07\u{16b}\x02\x02\u{81a}\
	\u{81c}\x05\x7e\x40\x02\u{81b}\u{81a}\x03\x02\x02\x02\u{81b}\u{81c}\x03\
	\x02\x02\x02\u{81c}\u{81e}\x03\x02\x02\x02\u{81d}\u{81f}\x05\u{b4}\x5b\x02\
	\u{81e}\u{81d}\x03\x02\x02\x02\u{81e}\u{81f}\x03\x02\x02\x02\u{81f}\u{820}\
	\x03\x02\x02\x02\u{820}\u{821}\x07\x76\x02\x02\u{821}\u{822}\x03\x02\x02\
	\x02\u{822}\u{823}\x05\u{b4}\x5b\x02\u{823}\u{824}\x07\u{16c}\x02\x02\u{824}\
	\u{94a}\x03\x02\x02\x02\u{825}\u{826}\x07\u{13b}\x02\x02\u{826}\u{82e}\x07\
	\u{16b}\x02\x02\u{827}\u{829}\x05\x7e\x40\x02\u{828}\u{82a}\x05\u{b4}\x5b\
	\x02\u{829}\u{828}\x03\x02\x02\x02\u{829}\u{82a}\x03\x02\x02\x02\u{82a}\
	\u{82c}\x03\x02\x02\x02\u{82b}\u{82d}\x07\x76\x02\x02\u{82c}\u{82b}\x03\
	\x02\x02\x02\u{82c}\u{82d}\x03\x02\x02\x02\u{82d}\u{82f}\x03\x02\x02\x02\
	\u{82e}\u{827}\x03\x02\x02\x02\u{82e}\u{82f}\x03\x02\x02\x02\u{82f}\u{830}\
	\x03\x02\x02\x02\u{830}\u{831}\x05\u{b4}\x5b\x02\u{831}\u{832}\x07\u{16c}\
	\x02\x02\u{832}\u{94a}\x03\x02\x02\x02\u{833}\u{834}\x07\u{13b}\x02\x02\
	\u{834}\u{835}\x07\u{16b}\x02\x02\u{835}\u{836}\x05\u{b4}\x5b\x02\u{836}\
	\u{837}\x07\x33\x02\x02\u{837}\u{839}\x05\u{b4}\x5b\x02\u{838}\u{83a}\x07\
	\x33\x02\x02\u{839}\u{838}\x03\x02\x02\x02\u{839}\u{83a}\x03\x02\x02\x02\
	\u{83a}\u{83b}\x03\x02\x02\x02\u{83b}\u{83c}\x07\u{16c}\x02\x02\u{83c}\u{94a}\
	\x03\x02\x02\x02\u{83d}\u{83e}\x07\u{128}\x02\x02\u{83e}\u{83f}\x07\u{16b}\
	\x02\x02\u{83f}\u{840}\x05\u{b4}\x5b\x02\u{840}\u{841}\x07\x76\x02\x02\u{841}\
	\u{844}\x05\u{b4}\x5b\x02\u{842}\u{843}\x07\x74\x02\x02\u{843}\u{845}\x05\
	\u{b4}\x5b\x02\u{844}\u{842}\x03\x02\x02\x02\u{844}\u{845}\x03\x02\x02\x02\
	\u{845}\u{846}\x03\x02\x02\x02\u{846}\u{847}\x07\u{16c}\x02\x02\u{847}\u{94a}\
	\x03\x02\x02\x02\u{848}\u{849}\x07\u{ce}\x02\x02\u{849}\u{84a}\x07\u{16b}\
	\x02\x02\u{84a}\u{84d}\x05\u{b4}\x5b\x02\u{84b}\u{84c}\x07\x33\x02\x02\u{84c}\
	\u{84e}\x05\u{e8}\x75\x02\u{84d}\u{84b}\x03\x02\x02\x02\u{84d}\u{84e}\x03\
	\x02\x02\x02\u{84e}\u{850}\x03\x02\x02\x02\u{84f}\u{851}\x07\x33\x02\x02\
	\u{850}\u{84f}\x03\x02\x02\x02\u{850}\u{851}\x03\x02\x02\x02\u{851}\u{852}\
	\x03\x02\x02\x02\u{852}\u{853}\x07\u{16c}\x02\x02\u{853}\u{94a}\x03\x02\
	\x02\x02\u{854}\u{855}\x07\x6d\x02\x02\u{855}\u{856}\x07\u{16b}\x02\x02\
	\u{856}\u{857}\x05\u{118}\u{8d}\x02\u{857}\u{858}\x07\x76\x02\x02\u{858}\
	\u{859}\x05\u{b4}\x5b\x02\u{859}\u{85a}\x07\u{16c}\x02\x02\u{85a}\u{94a}\
	\x03\x02\x02\x02\u{85b}\u{85c}\x07\x3f\x02\x02\u{85c}\u{85d}\x07\u{16b}\
	\x02\x02\u{85d}\u{85e}\x07\u{178}\x02\x02\u{85e}\u{85f}\x07\u{16c}\x02\x02\
	\u{85f}\u{94a}\x05\u{ba}\x5e\x02\u{860}\u{861}\x05\u{b8}\x5d\x02\u{861}\
	\u{862}\x05\u{c0}\x61\x02\u{862}\u{86e}\x07\u{16b}\x02\x02\u{863}\u{865}\
	\x05\x46\x24\x02\u{864}\u{863}\x03\x02\x02\x02\u{864}\u{865}\x03\x02\x02\
	\x02\u{865}\u{866}\x03\x02\x02\x02\u{866}\u{86b}\x05\u{bc}\x5f\x02\u{867}\
	\u{868}\x07\x33\x02\x02\u{868}\u{86a}\x05\u{bc}\x5f\x02\u{869}\u{867}\x03\
	\x02\x02\x02\u{86a}\u{86d}\x03\x02\x02\x02\u{86b}\u{869}\x03\x02\x02\x02\
	\u{86b}\u{86c}\x03\x02\x02\x02\u{86c}\u{86f}\x03\x02\x02\x02\u{86d}\u{86b}\
	\x03\x02\x02\x02\u{86e}\u{864}\x03\x02\x02\x02\u{86e}\u{86f}\x03\x02\x02\
	\x02\u{86f}\u{870}\x03\x02\x02\x02\u{870}\u{871}\x05\u{be}\x60\x02\u{871}\
	\u{872}\x03\x02\x02\x02\u{872}\u{873}\x07\u{16c}\x02\x02\u{873}\u{874}\x05\
	\u{ba}\x5e\x02\u{874}\u{94a}\x03\x02\x02\x02\u{875}\u{876}\x05\u{118}\u{8d}\
	\x02\u{876}\u{877}\x05\u{f8}\x7d\x02\u{877}\u{94a}\x03\x02\x02\x02\u{878}\
	\u{879}\x05\u{118}\u{8d}\x02\u{879}\u{87a}\x07\x04\x02\x02\u{87a}\u{87b}\
	\x05\u{ae}\x58\x02\u{87b}\u{94a}\x03\x02\x02\x02\u{87c}\u{885}\x07\u{16b}\
	\x02\x02\u{87d}\u{882}\x05\u{118}\u{8d}\x02\u{87e}\u{87f}\x07\x33\x02\x02\
	\u{87f}\u{881}\x05\u{118}\u{8d}\x02\u{880}\u{87e}\x03\x02\x02\x02\u{881}\
	\u{884}\x03\x02\x02\x02\u{882}\u{880}\x03\x02\x02\x02\u{882}\u{883}\x03\
	\x02\x02\x02\u{883}\u{886}\x03\x02\x02\x02\u{884}\u{882}\x03\x02\x02\x02\
	\u{885}\u{87d}\x03\x02\x02\x02\u{885}\u{886}\x03\x02\x02\x02\u{886}\u{888}\
	\x03\x02\x02\x02\u{887}\u{889}\x07\x33\x02\x02\u{888}\u{887}\x03\x02\x02\
	\x02\u{888}\u{889}\x03\x02\x02\x02\u{889}\u{88a}\x03\x02\x02\x02\u{88a}\
	\u{88b}\x07\u{16c}\x02\x02\u{88b}\u{88c}\x07\x04\x02\x02\u{88c}\u{94a}\x05\
	\u{ae}\x58\x02\u{88d}\u{88e}\x07\u{16b}\x02\x02\u{88e}\u{88f}\x05\x10\x09\
	\x02\u{88f}\u{890}\x07\u{16c}\x02\x02\u{890}\u{94a}\x03\x02\x02\x02\u{891}\
	\u{892}\x07\x16\x02\x02\u{892}\u{89b}\x07\u{16d}\x02\x02\u{893}\u{898}\x05\
	\u{ae}\x58\x02\u{894}\u{895}\x07\x33\x02\x02\u{895}\u{897}\x05\u{ae}\x58\
	\x02\u{896}\u{894}\x03\x02\x02\x02\u{897}\u{89a}\x03\x02\x02\x02\u{898}\
	\u{896}\x03\x02\x02\x02\u{898}\u{899}\x03\x02\x02\x02\u{899}\u{89c}\x03\
	\x02\x02\x02\u{89a}\u{898}\x03\x02\x02\x02\u{89b}\u{893}\x03\x02\x02\x02\
	\u{89b}\u{89c}\x03\x02\x02\x02\u{89c}\u{89e}\x03\x02\x02\x02\u{89d}\u{89f}\
	\x07\x33\x02\x02\u{89e}\u{89d}\x03\x02\x02\x02\u{89e}\u{89f}\x03\x02\x02\
	\x02\u{89f}\u{8a0}\x03\x02\x02\x02\u{8a0}\u{94a}\x07\u{16e}\x02\x02\u{8a1}\
	\u{94a}\x05\x1a\x0e\x02\u{8a2}\u{8a3}\x07\u{16b}\x02\x02\u{8a3}\u{8a4}\x05\
	\u{ae}\x58\x02\u{8a4}\u{8a5}\x07\u{16c}\x02\x02\u{8a5}\u{94a}\x03\x02\x02\
	\x02\u{8a6}\u{8a7}\x07\u{9f}\x02\x02\u{8a7}\u{8a8}\x07\u{16b}\x02\x02\u{8a8}\
	\u{8ad}\x05\u{c4}\x63\x02\u{8a9}\u{8aa}\x05\u{cc}\x67\x02\u{8aa}\u{8ab}\
	\x07\u{d6}\x02\x02\u{8ab}\u{8ac}\x07\x64\x02\x02\u{8ac}\u{8ae}\x03\x02\x02\
	\x02\u{8ad}\u{8a9}\x03\x02\x02\x02\u{8ad}\u{8ae}\x03\x02\x02\x02\u{8ae}\
	\u{8af}\x03\x02\x02\x02\u{8af}\u{8b0}\x07\u{16c}\x02\x02\u{8b0}\u{94a}\x03\
	\x02\x02\x02\u{8b1}\u{8b2}\x07\u{a2}\x02\x02\u{8b2}\u{8b3}\x07\u{16b}\x02\
	\x02\u{8b3}\u{8b6}\x05\u{c4}\x63\x02\u{8b4}\u{8b5}\x07\u{101}\x02\x02\u{8b5}\
	\u{8b7}\x05\u{ec}\x77\x02\u{8b6}\u{8b4}\x03\x02\x02\x02\u{8b6}\u{8b7}\x03\
	\x02\x02\x02\u{8b7}\u{8bc}\x03\x02\x02\x02\u{8b8}\u{8b9}\x05\u{ce}\x68\x02\
	\u{8b9}\u{8ba}\x07\u{d6}\x02\x02\u{8ba}\u{8bb}\x07\x60\x02\x02\u{8bb}\u{8bd}\
	\x03\x02\x02\x02\u{8bc}\u{8b8}\x03\x02\x02\x02\u{8bc}\u{8bd}\x03\x02\x02\
	\x02\u{8bd}\u{8c2}\x03\x02\x02\x02\u{8be}\u{8bf}\x05\u{ce}\x68\x02\u{8bf}\
	\u{8c0}\x07\u{d6}\x02\x02\u{8c0}\u{8c1}\x07\x64\x02\x02\u{8c1}\u{8c3}\x03\
	\x02\x02\x02\u{8c2}\u{8be}\x03\x02\x02\x02\u{8c2}\u{8c3}\x03\x02\x02\x02\
	\u{8c3}\u{8c4}\x03\x02\x02\x02\u{8c4}\u{8c5}\x07\u{16c}\x02\x02\u{8c5}\u{94a}\
	\x03\x02\x02\x02\u{8c6}\u{8c7}\x07\u{a1}\x02\x02\u{8c7}\u{8c8}\x07\u{16b}\
	\x02\x02\u{8c8}\u{8cf}\x05\u{c4}\x63\x02\u{8c9}\u{8ca}\x07\u{101}\x02\x02\
	\u{8ca}\u{8cd}\x05\u{ec}\x77\x02\u{8cb}\u{8cc}\x07\x75\x02\x02\u{8cc}\u{8ce}\
	\x05\u{c8}\x65\x02\u{8cd}\u{8cb}\x03\x02\x02\x02\u{8cd}\u{8ce}\x03\x02\x02\
	\x02\u{8ce}\u{8d0}\x03\x02\x02\x02\u{8cf}\u{8c9}\x03\x02\x02\x02\u{8cf}\
	\u{8d0}\x03\x02\x02\x02\u{8d0}\u{8d4}\x03\x02\x02\x02\u{8d1}\u{8d2}\x05\
	\u{d0}\x69\x02\u{8d2}\u{8d3}\x07\u{163}\x02\x02\u{8d3}\u{8d5}\x03\x02\x02\
	\x02\u{8d4}\u{8d1}\x03\x02\x02\x02\u{8d4}\u{8d5}\x03\x02\x02\x02\u{8d5}\
	\u{8dd}\x03\x02\x02\x02\u{8d6}\u{8d7}\x09\x12\x02\x02\u{8d7}\u{8db}\x07\
	\u{f6}\x02\x02\u{8d8}\u{8d9}\x07\u{d6}\x02\x02\u{8d9}\u{8da}\x07\u{10d}\
	\x02\x02\u{8da}\u{8dc}\x07\u{132}\x02\x02\u{8db}\u{8d8}\x03\x02\x02\x02\
	\u{8db}\u{8dc}\x03\x02\x02\x02\u{8dc}\u{8de}\x03\x02\x02\x02\u{8dd}\u{8d6}\
	\x03\x02\x02\x02\u{8dd}\u{8de}\x03\x02\x02\x02\u{8de}\u{8e3}\x03\x02\x02\
	\x02\u{8df}\u{8e0}\x05\u{d2}\x6a\x02\u{8e0}\u{8e1}\x07\u{d6}\x02\x02\u{8e1}\
	\u{8e2}\x07\x60\x02\x02\u{8e2}\u{8e4}\x03\x02\x02\x02\u{8e3}\u{8df}\x03\
	\x02\x02\x02\u{8e3}\u{8e4}\x03\x02\x02\x02\u{8e4}\u{8e9}\x03\x02\x02\x02\
	\u{8e5}\u{8e6}\x05\u{d2}\x6a\x02\u{8e6}\u{8e7}\x07\u{d6}\x02\x02\u{8e7}\
	\u{8e8}\x07\x64\x02\x02\u{8e8}\u{8ea}\x03\x02\x02\x02\u{8e9}\u{8e5}\x03\
	\x02\x02\x02\u{8e9}\u{8ea}\x03\x02\x02\x02\u{8ea}\u{8eb}\x03\x02\x02\x02\
	\u{8eb}\u{8ec}\x07\u{16c}\x02\x02\u{8ec}\u{94a}\x03\x02\x02\x02\u{8ed}\u{8ee}\
	\x07\u{a0}\x02\x02\u{8ee}\u{90e}\x07\u{16b}\x02\x02\u{8ef}\u{8f4}\x05\u{d4}\
	\x6b\x02\u{8f0}\u{8f1}\x07\x33\x02\x02\u{8f1}\u{8f3}\x05\u{d4}\x6b\x02\u{8f2}\
	\u{8f0}\x03\x02\x02\x02\u{8f3}\u{8f6}\x03\x02\x02\x02\u{8f4}\u{8f2}\x03\
	\x02\x02\x02\u{8f4}\u{8f5}\x03\x02\x02\x02\u{8f5}\u{8f8}\x03\x02\x02\x02\
	\u{8f6}\u{8f4}\x03\x02\x02\x02\u{8f7}\u{8f9}\x07\x33\x02\x02\u{8f8}\u{8f7}\
	\x03\x02\x02\x02\u{8f8}\u{8f9}\x03\x02\x02\x02\u{8f9}\u{900}\x03\x02\x02\
	\x02\u{8fa}\u{8fb}\x07\u{d0}\x02\x02\u{8fb}\u{8fc}\x07\u{d6}\x02\x02\u{8fc}\
	\u{901}\x07\u{d0}\x02\x02\u{8fd}\u{8fe}\x07\x0c\x02\x02\u{8fe}\u{8ff}\x07\
	\u{d6}\x02\x02\u{8ff}\u{901}\x07\u{d0}\x02\x02\u{900}\u{8fa}\x03\x02\x02\
	\x02\u{900}\u{8fd}\x03\x02\x02\x02\u{900}\u{901}\x03\x02\x02\x02\u{901}\
	\u{90c}\x03\x02\x02\x02\u{902}\u{903}\x07\u{15f}\x02\x02\u{903}\u{905}\x07\
	\u{146}\x02\x02\u{904}\u{906}\x07\u{a5}\x02\x02\u{905}\u{904}\x03\x02\x02\
	\x02\u{905}\u{906}\x03\x02\x02\x02\u{906}\u{90d}\x03\x02\x02\x02\u{907}\
	\u{908}\x07\u{161}\x02\x02\u{908}\u{90a}\x07\u{146}\x02\x02\u{909}\u{90b}\
	\x07\u{a5}\x02\x02\u{90a}\u{909}\x03\x02\x02\x02\u{90a}\u{90b}\x03\x02\x02\
	\x02\u{90b}\u{90d}\x03\x02\x02\x02\u{90c}\u{902}\x03\x02\x02\x02\u{90c}\
	\u{907}\x03\x02\x02\x02\u{90c}\u{90d}\x03\x02\x02\x02\u{90d}\u{90f}\x03\
	\x02\x02\x02\u{90e}\u{8ef}\x03\x02\x02\x02\u{90e}\u{90f}\x03\x02\x02\x02\
	\u{90f}\u{916}\x03\x02\x02\x02\u{910}\u{911}\x07\u{101}\x02\x02\u{911}\u{914}\
	\x05\u{ec}\x77\x02\u{912}\u{913}\x07\x75\x02\x02\u{913}\u{915}\x05\u{c8}\
	\x65\x02\u{914}\u{912}\x03\x02\x02\x02\u{914}\u{915}\x03\x02\x02\x02\u{915}\
	\u{917}\x03\x02\x02\x02\u{916}\u{910}\x03\x02\x02\x02\u{916}\u{917}\x03\
	\x02\x02\x02\u{917}\u{918}\x03\x02\x02\x02\u{918}\u{94a}\x07\u{16c}\x02\
	\x02\u{919}\u{91a}\x07\u{9e}\x02\x02\u{91a}\u{92e}\x07\u{16b}\x02\x02\u{91b}\
	\u{920}\x05\u{c6}\x64\x02\u{91c}\u{91d}\x07\x33\x02\x02\u{91d}\u{91f}\x05\
	\u{c6}\x64\x02\u{91e}\u{91c}\x03\x02\x02\x02\u{91f}\u{922}\x03\x02\x02\x02\
	\u{920}\u{91e}\x03\x02\x02\x02\u{920}\u{921}\x03\x02\x02\x02\u{921}\u{924}\
	\x03\x02\x02\x02\u{922}\u{920}\x03\x02\x02\x02\u{923}\u{925}\x07\x33\x02\
	\x02\u{924}\u{923}\x03\x02\x02\x02\u{924}\u{925}\x03\x02\x02\x02\u{925}\
	\u{92c}\x03\x02\x02\x02\u{926}\u{927}\x07\u{d0}\x02\x02\u{927}\u{928}\x07\
	\u{d6}\x02\x02\u{928}\u{92d}\x07\u{d0}\x02\x02\u{929}\u{92a}\x07\x0c\x02\
	\x02\u{92a}\u{92b}\x07\u{d6}\x02\x02\u{92b}\u{92d}\x07\u{d0}\x02\x02\u{92c}\
	\u{926}\x03\x02\x02\x02\u{92c}\u{929}\x03\x02\x02\x02\u{92c}\u{92d}\x03\
	\x02\x02\x02\u{92d}\u{92f}\x03\x02\x02\x02\u{92e}\u{91b}\x03\x02\x02\x02\
	\u{92e}\u{92f}\x03\x02\x02\x02\u{92f}\u{936}\x03\x02\x02\x02\u{930}\u{931}\
	\x07\u{101}\x02\x02\u{931}\u{934}\x05\u{ec}\x77\x02\u{932}\u{933}\x07\x75\
	\x02\x02\u{933}\u{935}\x05\u{c8}\x65\x02\u{934}\u{932}\x03\x02\x02\x02\u{934}\
	\u{935}\x03\x02\x02\x02\u{935}\u{937}\x03\x02\x02\x02\u{936}\u{930}\x03\
	\x02\x02\x02\u{936}\u{937}\x03\x02\x02\x02\u{937}\u{938}\x03\x02\x02\x02\
	\u{938}\u{94a}\x07\u{16c}\x02\x02\u{939}\u{945}\x07\u{16d}\x02\x02\u{93a}\
	\u{93f}\x05\u{ae}\x58\x02\u{93b}\u{93c}\x07\x33\x02\x02\u{93c}\u{93e}\x05\
	\u{ae}\x58\x02\u{93d}\u{93b}\x03\x02\x02\x02\u{93e}\u{941}\x03\x02\x02\x02\
	\u{93f}\u{93d}\x03\x02\x02\x02\u{93f}\u{940}\x03\x02\x02\x02\u{940}\u{943}\
	\x03\x02\x02\x02\u{941}\u{93f}\x03\x02\x02\x02\u{942}\u{944}\x07\x33\x02\
	\x02\u{943}\u{942}\x03\x02\x02\x02\u{943}\u{944}\x03\x02\x02\x02\u{944}\
	\u{946}\x03\x02\x02\x02\u{945}\u{93a}\x03\x02\x02\x02\u{945}\u{946}\x03\
	\x02\x02\x02\u{946}\u{947}\x03\x02\x02\x02\u{947}\u{94a}\x07\u{16e}\x02\
	\x02\u{948}\u{94a}\x07\u{18b}\x02\x02\u{949}\u{798}\x03\x02\x02\x02\u{949}\
	\u{79a}\x03\x02\x02\x02\u{949}\u{79b}\x03\x02\x02\x02\u{949}\u{79c}\x03\
	\x02\x02\x02\u{949}\u{79d}\x03\x02\x02\x02\u{949}\u{79e}\x03\x02\x02\x02\
	\u{949}\u{79f}\x03\x02\x02\x02\u{949}\u{7a2}\x03\x02\x02\x02\u{949}\u{7a5}\
	\x03\x02\x02\x02\u{949}\u{7b2}\x03\x02\x02\x02\u{949}\u{7be}\x03\x02\x02\
	\x02\u{949}\u{7c5}\x03\x02\x02\x02\u{949}\u{7ec}\x03\x02\x02\x02\u{949}\
	\u{7f1}\x03\x02\x02\x02\u{949}\u{7fe}\x03\x02\x02\x02\u{949}\u{80a}\x03\
	\x02\x02\x02\u{949}\u{811}\x03\x02\x02\x02\u{949}\u{818}\x03\x02\x02\x02\
	\u{949}\u{825}\x03\x02\x02\x02\u{949}\u{833}\x03\x02\x02\x02\u{949}\u{83d}\
	\x03\x02\x02\x02\u{949}\u{848}\x03\x02\x02\x02\u{949}\u{854}\x03\x02\x02\
	\x02\u{949}\u{85b}\x03\x02\x02\x02\u{949}\u{860}\x03\x02\x02\x02\u{949}\
	\u{875}\x03\x02\x02\x02\u{949}\u{878}\x03\x02\x02\x02\u{949}\u{87c}\x03\
	\x02\x02\x02\u{949}\u{88d}\x03\x02\x02\x02\u{949}\u{891}\x03\x02\x02\x02\
	\u{949}\u{8a1}\x03\x02\x02\x02\u{949}\u{8a2}\x03\x02\x02\x02\u{949}\u{8a6}\
	\x03\x02\x02\x02\u{949}\u{8b1}\x03\x02\x02\x02\u{949}\u{8c6}\x03\x02\x02\
	\x02\u{949}\u{8ed}\x03\x02\x02\x02\u{949}\u{919}\x03\x02\x02\x02\u{949}\
	\u{939}\x03\x02\x02\x02\u{949}\u{948}\x03\x02\x02\x02\u{94a}\u{955}\x03\
	\x02\x02\x02\u{94b}\u{94c}\x0c\x0d\x02\x02\u{94c}\u{94d}\x07\u{16d}\x02\
	\x02\u{94d}\u{94e}\x05\u{b4}\x5b\x02\u{94e}\u{94f}\x07\u{16e}\x02\x02\u{94f}\
	\u{954}\x03\x02\x02\x02\u{950}\u{951}\x0c\x0c\x02\x02\u{951}\u{952}\x07\
	\u{16f}\x02\x02\u{952}\u{954}\x05\x1c\x0f\x02\u{953}\u{94b}\x03\x02\x02\
	\x02\u{953}\u{950}\x03\x02\x02\x02\u{954}\u{957}\x03\x02\x02\x02\u{955}\
	\u{953}\x03\x02\x02\x02\u{955}\u{956}\x03\x02\x02\x02\u{956}\u{b7}\x03\x02\
	\x02\x02\u{957}\u{955}\x03\x02\x02\x02\u{958}\u{95a}\x05\u{d6}\x6c\x02\u{959}\
	\u{958}\x03\x02\x02\x02\u{959}\u{95a}\x03\x02\x02\x02\u{95a}\u{b9}\x03\x02\
	\x02\x02\u{95b}\u{95d}\x05\u{f6}\x7c\x02\u{95c}\u{95b}\x03\x02\x02\x02\u{95c}\
	\u{95d}\x03\x02\x02\x02\u{95d}\u{962}\x03\x02\x02\x02\u{95e}\u{960}\x05\
	\u{d8}\x6d\x02\u{95f}\u{95e}\x03\x02\x02\x02\u{95f}\u{960}\x03\x02\x02\x02\
	\u{960}\u{961}\x03\x02\x02\x02\u{961}\u{963}\x05\u{f8}\x7d\x02\u{962}\u{95f}\
	\x03\x02\x02\x02\u{962}\u{963}\x03\x02\x02\x02\u{963}\u{bb}\x03\x02\x02\
	\x02\u{964}\u{965}\x05\u{ae}\x58\x02\u{965}\u{bd}\x03\x02\x02\x02\u{966}\
	\u{967}\x07\u{dc}\x02\x02\u{967}\u{968}\x07\x22\x02\x02\u{968}\u{96d}\x05\
	\x4c\x27\x02\u{969}\u{96a}\x07\x33\x02\x02\u{96a}\u{96c}\x05\x4c\x27\x02\
	\u{96b}\u{969}\x03\x02\x02\x02\u{96c}\u{96f}\x03\x02\x02\x02\u{96d}\u{96b}\
	\x03\x02\x02\x02\u{96d}\u{96e}\x03\x02\x02\x02\u{96e}\u{971}\x03\x02\x02\
	\x02\u{96f}\u{96d}\x03\x02\x02\x02\u{970}\u{966}\x03\x02\x02\x02\u{970}\
	\u{971}\x03\x02\x02\x02\u{971}\u{bf}\x03\x02\x02\x02\u{972}\u{979}\x05\u{10e}\
	\u{88}\x02\u{973}\u{979}\x07\u{aa}\x02\x02\u{974}\u{979}\x07\u{103}\x02\
	\x02\u{975}\u{979}\x07\u{89}\x02\x02\u{976}\u{979}\x07\u{fd}\x02\x02\u{977}\
	\u{979}\x07\u{81}\x02\x02\u{978}\u{972}\x03\x02\x02\x02\u{978}\u{973}\x03\
	\x02\x02\x02\u{978}\u{974}\x03\x02\x02\x02\u{978}\u{975}\x03\x02\x02\x02\
	\u{978}\u{976}\x03\x02\x02\x02\u{978}\u{977}\x03\x02\x02\x02\u{979}\u{c1}\
	\x03\x02\x02\x02\u{97a}\u{97d}\x05\u{ae}\x58\x02\u{97b}\u{97c}\x07\x17\x02\
	\x02\u{97c}\u{97e}\x05\u{118}\u{8d}\x02\u{97d}\u{97b}\x03\x02\x02\x02\u{97d}\
	\u{97e}\x03\x02\x02\x02\u{97e}\u{c3}\x03\x02\x02\x02\u{97f}\u{980}\x05\u{c6}\
	\x64\x02\u{980}\u{981}\x07\x33\x02\x02\u{981}\u{983}\x05\u{da}\x6e\x02\u{982}\
	\u{984}\x07\x33\x02\x02\u{983}\u{982}\x03\x02\x02\x02\u{983}\u{984}\x03\
	\x02\x02\x02\u{984}\u{98e}\x03\x02\x02\x02\u{985}\u{986}\x07\u{e6}\x02\x02\
	\u{986}\u{98b}\x05\u{ca}\x66\x02\u{987}\u{988}\x07\x33\x02\x02\u{988}\u{98a}\
	\x05\u{ca}\x66\x02\u{989}\u{987}\x03\x02\x02\x02\u{98a}\u{98d}\x03\x02\x02\
	\x02\u{98b}\u{989}\x03\x02\x02\x02\u{98b}\u{98c}\x03\x02\x02\x02\u{98c}\
	\u{98f}\x03\x02\x02\x02\u{98d}\u{98b}\x03\x02\x02\x02\u{98e}\u{985}\x03\
	\x02\x02\x02\u{98e}\u{98f}\x03\x02\x02\x02\u{98f}\u{991}\x03\x02\x02\x02\
	\u{990}\u{992}\x07\x33\x02\x02\u{991}\u{990}\x03\x02\x02\x02\u{991}\u{992}\
	\x03\x02\x02\x02\u{992}\u{c5}\x03\x02\x02\x02\u{993}\u{996}\x05\u{ae}\x58\
	\x02\u{994}\u{995}\x07\x75\x02\x02\u{995}\u{997}\x05\u{c8}\x65\x02\u{996}\
	\u{994}\x03\x02\x02\x02\u{996}\u{997}\x03\x02\x02\x02\u{997}\u{c7}\x03\x02\
	\x02\x02\u{998}\u{99b}\x07\u{9d}\x02\x02\u{999}\u{99a}\x07\x62\x02\x02\u{99a}\
	\u{99c}\x09\x13\x02\x02\u{99b}\u{999}\x03\x02\x02\x02\u{99b}\u{99c}\x03\
	\x02\x02\x02\u{99c}\u{c9}\x03\x02\x02\x02\u{99d}\u{99e}\x05\u{c6}\x64\x02\
	\u{99e}\u{99f}\x07\x17\x02\x02\u{99f}\u{9a0}\x05\u{118}\u{8d}\x02\u{9a0}\
	\u{cb}\x03\x02\x02\x02\u{9a1}\u{9a2}\x09\x14\x02\x02\u{9a2}\u{cd}\x03\x02\
	\x02\x02\u{9a3}\u{9a8}\x07\x64\x02\x02\u{9a4}\u{9a8}\x07\u{d0}\x02\x02\u{9a5}\
	\u{9a6}\x07\x4d\x02\x02\u{9a6}\u{9a8}\x05\u{ae}\x58\x02\u{9a7}\u{9a3}\x03\
	\x02\x02\x02\u{9a7}\u{9a4}\x03\x02\x02\x02\u{9a7}\u{9a5}\x03\x02\x02\x02\
	\u{9a8}\u{cf}\x03\x02\x02\x02\u{9a9}\u{9ab}\x07\u{161}\x02\x02\u{9aa}\u{9ac}\
	\x07\x16\x02\x02\u{9ab}\u{9aa}\x03\x02\x02\x02\u{9ab}\u{9ac}\x03\x02\x02\
	\x02\u{9ac}\u{9b5}\x03\x02\x02\x02\u{9ad}\u{9af}\x07\u{15f}\x02\x02\u{9ae}\
	\u{9b0}\x09\x15\x02\x02\u{9af}\u{9ae}\x03\x02\x02\x02\u{9af}\u{9b0}\x03\
	\x02\x02\x02\u{9b0}\u{9b2}\x03\x02\x02\x02\u{9b1}\u{9b3}\x07\x16\x02\x02\
	\u{9b2}\u{9b1}\x03\x02\x02\x02\u{9b2}\u{9b3}\x03\x02\x02\x02\u{9b3}\u{9b5}\
	\x03\x02\x02\x02\u{9b4}\u{9a9}\x03\x02\x02\x02\u{9b4}\u{9ad}\x03\x02\x02\
	\x02\u{9b5}\u{d1}\x03\x02\x02\x02\u{9b6}\u{9bd}\x07\x64\x02\x02\u{9b7}\u{9bd}\
	\x07\u{d0}\x02\x02\u{9b8}\u{9b9}\x07\x60\x02\x02\u{9b9}\u{9bd}\x07\x16\x02\
	\x02\u{9ba}\u{9bb}\x07\x60\x02\x02\u{9bb}\u{9bd}\x07\u{d2}\x02\x02\u{9bc}\
	\u{9b6}\x03\x02\x02\x02\u{9bc}\u{9b7}\x03\x02\x02\x02\u{9bc}\u{9b8}\x03\
	\x02\x02\x02\u{9bc}\u{9ba}\x03\x02\x02\x02\u{9bd}\u{d3}\x03\x02\x02\x02\
	\u{9be}\u{9c0}\x07\u{a4}\x02\x02\u{9bf}\u{9be}\x03\x02\x02\x02\u{9bf}\u{9c0}\
	\x03\x02\x02\x02\u{9c0}\u{9c1}\x03\x02\x02\x02\u{9c1}\u{9c2}\x05\u{ae}\x58\
	\x02\u{9c2}\u{9c3}\x07\u{155}\x02\x02\u{9c3}\u{9c4}\x05\u{c6}\x64\x02\u{9c4}\
	\u{9ca}\x03\x02\x02\x02\u{9c5}\u{9c6}\x05\u{ae}\x58\x02\u{9c6}\u{9c7}\x07\
	\u{17e}\x02\x02\u{9c7}\u{9c8}\x05\u{c6}\x64\x02\u{9c8}\u{9ca}\x03\x02\x02\
	\x02\u{9c9}\u{9bf}\x03\x02\x02\x02\u{9c9}\u{9c5}\x03\x02\x02\x02\u{9ca}\
	\u{d5}\x03\x02\x02\x02\u{9cb}\u{9cc}\x09\x16\x02\x02\u{9cc}\u{d7}\x03\x02\
	\x02\x02\u{9cd}\u{9ce}\x07\u{8a}\x02\x02\u{9ce}\u{9d2}\x07\u{d1}\x02\x02\
	\u{9cf}\u{9d0}\x07\u{ff}\x02\x02\u{9d0}\u{9d2}\x07\u{d1}\x02\x02\u{9d1}\
	\u{9cd}\x03\x02\x02\x02\u{9d1}\u{9cf}\x03\x02\x02\x02\u{9d2}\u{d9}\x03\x02\
	\x02\x02\u{9d3}\u{9da}\x07\u{182}\x02\x02\u{9d4}\u{9d7}\x07\u{183}\x02\x02\
	\u{9d5}\u{9d6}\x07\u{141}\x02\x02\u{9d6}\u{9d8}\x07\u{182}\x02\x02\u{9d7}\
	\u{9d5}\x03\x02\x02\x02\u{9d7}\u{9d8}\x03\x02\x02\x02\u{9d8}\u{9da}\x03\
	\x02\x02\x02\u{9d9}\u{9d3}\x03\x02\x02\x02\u{9d9}\u{9d4}\x03\x02\x02\x02\
	\u{9da}\u{db}\x03\x02\x02\x02\u{9db}\u{9dc}\x07\u{135}\x02\x02\u{9dc}\u{9dd}\
	\x07\u{169}\x02\x02\u{9dd}\u{9e2}\x05\u{e4}\x73\x02\u{9de}\u{9df}\x07\u{135}\
	\x02\x02\u{9df}\u{9e0}\x07\u{169}\x02\x02\u{9e0}\u{9e2}\x05\u{da}\x6e\x02\
	\u{9e1}\u{9db}\x03\x02\x02\x02\u{9e1}\u{9de}\x03\x02\x02\x02\u{9e2}\u{dd}\
	\x03\x02\x02\x02\u{9e3}\u{9e4}\x09\x17\x02\x02\u{9e4}\u{df}\x03\x02\x02\
	\x02\u{9e5}\u{9e6}\x09\x18\x02\x02\u{9e6}\u{e1}\x03\x02\x02\x02\u{9e7}\u{9e8}\
	\x09\x19\x02\x02\u{9e8}\u{e3}\x03\x02\x02\x02\u{9e9}\u{9eb}\x07\u{95}\x02\
	\x02\u{9ea}\u{9ec}\x09\x11\x02\x02\u{9eb}\u{9ea}\x03\x02\x02\x02\u{9eb}\
	\u{9ec}\x03\x02\x02\x02\u{9ec}\u{9ef}\x03\x02\x02\x02\u{9ed}\u{9f0}\x05\
	\u{da}\x6e\x02\u{9ee}\u{9f0}\x07\u{185}\x02\x02\u{9ef}\u{9ed}\x03\x02\x02\
	\x02\u{9ef}\u{9ee}\x03\x02\x02\x02\u{9f0}\u{9f1}\x03\x02\x02\x02\u{9f1}\
	\u{9f4}\x05\u{e6}\x74\x02\u{9f2}\u{9f3}\x07\u{137}\x02\x02\u{9f3}\u{9f5}\
	\x05\u{e6}\x74\x02\u{9f4}\u{9f2}\x03\x02\x02\x02\u{9f4}\u{9f5}\x03\x02\x02\
	\x02\u{9f5}\u{e5}\x03\x02\x02\x02\u{9f6}\u{9f7}\x09\x1a\x02\x02\u{9f7}\u{e7}\
	\x03\x02\x02\x02\u{9f8}\u{9f9}\x09\x1b\x02\x02\u{9f9}\u{e9}\x03\x02\x02\
	\x02\u{9fa}\u{9fb}\x05\u{118}\u{8d}\x02\u{9fb}\u{eb}\x03\x02\x02\x02\u{9fc}\
	\u{9ff}\x05\u{ee}\x78\x02\u{9fd}\u{9fe}\x07\u{cf}\x02\x02\u{9fe}\u{a00}\
	\x07\u{d0}\x02\x02\u{9ff}\u{9fd}\x03\x02\x02\x02\u{9ff}\u{a00}\x03\x02\x02\
	\x02\u{a00}\u{a03}\x03\x02\x02\x02\u{a01}\u{a03}\x07\u{d0}\x02\x02\u{a02}\
	\u{9fc}\x03\x02\x02\x02\u{a02}\u{a01}\x03\x02\x02\x02\u{a03}\u{ed}\x03\x02\
	\x02\x02\u{a04}\u{a05}\x07\u{17f}\x02\x02\u{a05}\u{a76}\x07\u{185}\x02\x02\
	\u{a06}\u{a07}\x07\u{109}\x02\x02\u{a07}\u{a08}\x07\u{16b}\x02\x02\u{a08}\
	\u{a0d}\x05\u{f0}\x79\x02\u{a09}\u{a0a}\x07\x33\x02\x02\u{a0a}\u{a0c}\x05\
	\u{f0}\x79\x02\u{a0b}\u{a09}\x03\x02\x02\x02\u{a0c}\u{a0f}\x03\x02\x02\x02\
	\u{a0d}\u{a0b}\x03\x02\x02\x02\u{a0d}\u{a0e}\x03\x02\x02\x02\u{a0e}\u{a11}\
	\x03\x02\x02\x02\u{a0f}\u{a0d}\x03\x02\x02\x02\u{a10}\u{a12}\x07\x33\x02\
	\x02\u{a11}\u{a10}\x03\x02\x02\x02\u{a11}\u{a12}\x03\x02\x02\x02\u{a12}\
	\u{a13}\x03\x02\x02\x02\u{a13}\u{a14}\x07\u{16c}\x02\x02\u{a14}\u{a76}\x03\
	\x02\x02\x02\u{a15}\u{a16}\x07\u{95}\x02\x02\u{a16}\u{a19}\x05\u{e6}\x74\
	\x02\u{a17}\u{a18}\x07\u{137}\x02\x02\u{a18}\u{a1a}\x05\u{e6}\x74\x02\u{a19}\
	\u{a17}\x03\x02\x02\x02\u{a19}\u{a1a}\x03\x02\x02\x02\u{a1a}\u{a76}\x03\
	\x02\x02\x02\u{a1b}\u{a20}\x07\u{136}\x02\x02\u{a1c}\u{a1d}\x07\u{16b}\x02\
	\x02\u{a1d}\u{a1e}\x05\u{f2}\x7a\x02\u{a1e}\u{a1f}\x07\u{16c}\x02\x02\u{a1f}\
	\u{a21}\x03\x02\x02\x02\u{a20}\u{a1c}\x03\x02\x02\x02\u{a20}\u{a21}\x03\
	\x02\x02\x02\u{a21}\u{a25}\x03\x02\x02\x02\u{a22}\u{a23}\x07\u{161}\x02\
	\x02\u{a23}\u{a24}\x07\u{135}\x02\x02\u{a24}\u{a26}\x07\u{169}\x02\x02\u{a25}\
	\u{a22}\x03\x02\x02\x02\u{a25}\u{a26}\x03\x02\x02\x02\u{a26}\u{a76}\x03\
	\x02\x02\x02\u{a27}\u{a2c}\x07\u{136}\x02\x02\u{a28}\u{a29}\x07\u{16b}\x02\
	\x02\u{a29}\u{a2a}\x05\u{f2}\x7a\x02\u{a2a}\u{a2b}\x07\u{16c}\x02\x02\u{a2b}\
	\u{a2d}\x03\x02\x02\x02\u{a2c}\u{a28}\x03\x02\x02\x02\u{a2c}\u{a2d}\x03\
	\x02\x02\x02\u{a2d}\u{a2e}\x03\x02\x02\x02\u{a2e}\u{a2f}\x07\u{15f}\x02\
	\x02\u{a2f}\u{a30}\x07\u{135}\x02\x02\u{a30}\u{a76}\x07\u{169}\x02\x02\u{a31}\
	\u{a36}\x07\u{135}\x02\x02\u{a32}\u{a33}\x07\u{16b}\x02\x02\u{a33}\u{a34}\
	\x05\u{f2}\x7a\x02\u{a34}\u{a35}\x07\u{16c}\x02\x02\u{a35}\u{a37}\x03\x02\
	\x02\x02\u{a36}\u{a32}\x03\x02\x02\x02\u{a36}\u{a37}\x03\x02\x02\x02\u{a37}\
	\u{a3b}\x03\x02\x02\x02\u{a38}\u{a39}\x07\u{161}\x02\x02\u{a39}\u{a3a}\x07\
	\u{135}\x02\x02\u{a3a}\u{a3c}\x07\u{169}\x02\x02\u{a3b}\u{a38}\x03\x02\x02\
	\x02\u{a3b}\u{a3c}\x03\x02\x02\x02\u{a3c}\u{a76}\x03\x02\x02\x02\u{a3d}\
	\u{a42}\x07\u{135}\x02\x02\u{a3e}\u{a3f}\x07\u{16b}\x02\x02\u{a3f}\u{a40}\
	\x05\u{f2}\x7a\x02\u{a40}\u{a41}\x07\u{16c}\x02\x02\u{a41}\u{a43}\x03\x02\
	\x02\x02\u{a42}\u{a3e}\x03\x02\x02\x02\u{a42}\u{a43}\x03\x02\x02\x02\u{a43}\
	\u{a44}\x03\x02\x02\x02\u{a44}\u{a45}\x07\u{15f}\x02\x02\u{a45}\u{a46}\x07\
	\u{135}\x02\x02\u{a46}\u{a76}\x07\u{169}\x02\x02\u{a47}\u{a48}\x07\x5d\x02\
	\x02\u{a48}\u{a76}\x07\u{ef}\x02\x02\u{a49}\u{a4a}\x07\u{b5}\x02\x02\u{a4a}\
	\u{a4b}\x07\u{172}\x02\x02\u{a4b}\u{a4c}\x05\u{ec}\x77\x02\u{a4c}\u{a4d}\
	\x07\x33\x02\x02\u{a4d}\u{a4f}\x05\u{ec}\x77\x02\u{a4e}\u{a50}\x07\x33\x02\
	\x02\u{a4f}\u{a4e}\x03\x02\x02\x02\u{a4f}\u{a50}\x03\x02\x02\x02\u{a50}\
	\u{a51}\x03\x02\x02\x02\u{a51}\u{a52}\x07\u{174}\x02\x02\u{a52}\u{a76}\x03\
	\x02\x02\x02\u{a53}\u{a54}\x07\x16\x02\x02\u{a54}\u{a55}\x07\u{172}\x02\
	\x02\u{a55}\u{a56}\x05\u{ec}\x77\x02\u{a56}\u{a57}\x07\u{174}\x02\x02\u{a57}\
	\u{a76}\x03\x02\x02\x02\u{a58}\u{a67}\x05\u{ea}\x76\x02\u{a59}\u{a5a}\x07\
	\u{16b}\x02\x02\u{a5a}\u{a5f}\x05\u{f2}\x7a\x02\u{a5b}\u{a5c}\x07\x33\x02\
	\x02\u{a5c}\u{a5e}\x05\u{f2}\x7a\x02\u{a5d}\u{a5b}\x03\x02\x02\x02\u{a5e}\
	\u{a61}\x03\x02\x02\x02\u{a5f}\u{a5d}\x03\x02\x02\x02\u{a5f}\u{a60}\x03\
	\x02\x02\x02\u{a60}\u{a63}\x03\x02\x02\x02\u{a61}\u{a5f}\x03\x02\x02\x02\
	\u{a62}\u{a64}\x07\x33\x02\x02\u{a63}\u{a62}\x03\x02\x02\x02\u{a63}\u{a64}\
	\x03\x02\x02\x02\u{a64}\u{a65}\x03\x02\x02\x02\u{a65}\u{a66}\x07\u{16c}\
	\x02\x02\u{a66}\u{a68}\x03\x02\x02\x02\u{a67}\u{a59}\x03\x02\x02\x02\u{a67}\
	\u{a68}\x03\x02\x02\x02\u{a68}\u{a76}\x03\x02\x02\x02\u{a69}\u{a6a}\x07\
	\x78\x02\x02\u{a6a}\u{a6b}\x07\u{16b}\x02\x02\u{a6b}\u{a70}\x05\u{ec}\x77\
	\x02\u{a6c}\u{a6d}\x07\x33\x02\x02\u{a6d}\u{a6f}\x05\u{ec}\x77\x02\u{a6e}\
	\u{a6c}\x03\x02\x02\x02\u{a6f}\u{a72}\x03\x02\x02\x02\u{a70}\u{a6e}\x03\
	\x02\x02\x02\u{a70}\u{a71}\x03\x02\x02\x02\u{a71}\u{a73}\x03\x02\x02\x02\
	\u{a72}\u{a70}\x03\x02\x02\x02\u{a73}\u{a74}\x07\u{16c}\x02\x02\u{a74}\u{a76}\
	\x03\x02\x02\x02\u{a75}\u{a04}\x03\x02\x02\x02\u{a75}\u{a06}\x03\x02\x02\
	\x02\u{a75}\u{a15}\x03\x02\x02\x02\u{a75}\u{a1b}\x03\x02\x02\x02\u{a75}\
	\u{a27}\x03\x02\x02\x02\u{a75}\u{a31}\x03\x02\x02\x02\u{a75}\u{a3d}\x03\
	\x02\x02\x02\u{a75}\u{a47}\x03\x02\x02\x02\u{a75}\u{a49}\x03\x02\x02\x02\
	\u{a75}\u{a53}\x03\x02\x02\x02\u{a75}\u{a58}\x03\x02\x02\x02\u{a75}\u{a69}\
	\x03\x02\x02\x02\u{a76}\u{ef}\x03\x02\x02\x02\u{a77}\u{a7c}\x05\u{ec}\x77\
	\x02\u{a78}\u{a79}\x05\u{118}\u{8d}\x02\u{a79}\u{a7a}\x05\u{ec}\x77\x02\
	\u{a7a}\u{a7c}\x03\x02\x02\x02\u{a7b}\u{a77}\x03\x02\x02\x02\u{a7b}\u{a78}\
	\x03\x02\x02\x02\u{a7c}\u{f1}\x03\x02\x02\x02\u{a7d}\u{a80}\x07\u{185}\x02\
	\x02\u{a7e}\u{a80}\x05\u{ec}\x77\x02\u{a7f}\u{a7d}\x03\x02\x02\x02\u{a7f}\
	\u{a7e}\x03\x02\x02\x02\u{a80}\u{f3}\x03\x02\x02\x02\u{a81}\u{a82}\x07\u{15c}\
	\x02\x02\u{a82}\u{a83}\x05\u{ae}\x58\x02\u{a83}\u{a84}\x07\u{133}\x02\x02\
	\u{a84}\u{a85}\x05\u{ae}\x58\x02\u{a85}\u{f5}\x03\x02\x02\x02\u{a86}\u{a87}\
	\x07\x70\x02\x02\u{a87}\u{a88}\x07\u{16b}\x02\x02\u{a88}\u{a89}\x07\u{15d}\
	\x02\x02\u{a89}\u{a8a}\x05\u{b0}\x59\x02\u{a8a}\u{a8b}\x07\u{16c}\x02\x02\
	\u{a8b}\u{f7}\x03\x02\x02\x02\u{a8c}\u{a92}\x07\u{e1}\x02\x02\u{a8d}\u{a93}\
	\x05\u{118}\u{8d}\x02\u{a8e}\u{a8f}\x07\u{16b}\x02\x02\u{a8f}\u{a90}\x05\
	\x5c\x2f\x02\u{a90}\u{a91}\x07\u{16c}\x02\x02\u{a91}\u{a93}\x03\x02\x02\
	\x02\u{a92}\u{a8d}\x03\x02\x02\x02\u{a92}\u{a8e}\x03\x02\x02\x02\u{a93}\
	\u{f9}\x03\x02\x02\x02\u{a94}\u{a95}\x07\u{bd}\x02\x02\u{a95}\u{a9a}\x05\
	\u{88}\x45\x02\u{a96}\u{a97}\x07\x33\x02\x02\u{a97}\u{a99}\x05\u{88}\x45\
	\x02\u{a98}\u{a96}\x03\x02\x02\x02\u{a99}\u{a9c}\x03\x02\x02\x02\u{a9a}\
	\u{a98}\x03\x02\x02\x02\u{a9a}\u{a9b}\x03\x02\x02\x02\u{a9b}\u{a9e}\x03\
	\x02\x02\x02\u{a9c}\u{a9a}\x03\x02\x02\x02\u{a9d}\u{a9f}\x07\x33\x02\x02\
	\u{a9e}\u{a9d}\x03\x02\x02\x02\u{a9e}\u{a9f}\x03\x02\x02\x02\u{a9f}\u{aa1}\
	\x03\x02\x02\x02\u{aa0}\u{a94}\x03\x02\x02\x02\u{aa0}\u{aa1}\x03\x02\x02\
	\x02\u{aa1}\u{aa2}\x03\x02\x02\x02\u{aa2}\u{aa6}\x05\u{fc}\x7f\x02\u{aa3}\
	\u{aa4}\x07\x0f\x02\x02\u{aa4}\u{aa5}\x07\u{b7}\x02\x02\u{aa5}\u{aa7}\x05\
	\u{8e}\x48\x02\u{aa6}\u{aa3}\x03\x02\x02\x02\u{aa6}\u{aa7}\x03\x02\x02\x02\
	\u{aa7}\u{aa9}\x03\x02\x02\x02\u{aa8}\u{aaa}\x09\x0d\x02\x02\u{aa9}\u{aa8}\
	\x03\x02\x02\x02\u{aa9}\u{aaa}\x03\x02\x02\x02\u{aaa}\u{ab0}\x03\x02\x02\
	\x02\u{aab}\u{aac}\x07\u{e9}\x02\x02\u{aac}\u{aad}\x07\u{16b}\x02\x02\u{aad}\
	\u{aae}\x05\u{100}\u{81}\x02\u{aae}\u{aaf}\x07\u{16c}\x02\x02\u{aaf}\u{ab1}\
	\x03\x02\x02\x02\u{ab0}\u{aab}\x03\x02\x02\x02\u{ab0}\u{ab1}\x03\x02\x02\
	\x02\u{ab1}\u{abe}\x03\x02\x02\x02\u{ab2}\u{ab3}\x07\u{127}\x02\x02\u{ab3}\
	\u{ab8}\x05\u{90}\x49\x02\u{ab4}\u{ab5}\x07\x33\x02\x02\u{ab5}\u{ab7}\x05\
	\u{90}\x49\x02\u{ab6}\u{ab4}\x03\x02\x02\x02\u{ab7}\u{aba}\x03\x02\x02\x02\
	\u{ab8}\u{ab6}\x03\x02\x02\x02\u{ab8}\u{ab9}\x03\x02\x02\x02\u{ab9}\u{abc}\
	\x03\x02\x02\x02\u{aba}\u{ab8}\x03\x02\x02\x02\u{abb}\u{abd}\x07\x33\x02\
	\x02\u{abc}\u{abb}\x03\x02\x02\x02\u{abc}\u{abd}\x03\x02\x02\x02\u{abd}\
	\u{abf}\x03\x02\x02\x02\u{abe}\u{ab2}\x03\x02\x02\x02\u{abe}\u{abf}\x03\
	\x02\x02\x02\u{abf}\u{acc}\x03\x02\x02\x02\u{ac0}\u{ac1}\x07\x4f\x02\x02\
	\u{ac1}\u{ac6}\x05\u{92}\x4a\x02\u{ac2}\u{ac3}\x07\x33\x02\x02\u{ac3}\u{ac5}\
	\x05\u{92}\x4a\x02\u{ac4}\u{ac2}\x03\x02\x02\x02\u{ac5}\u{ac8}\x03\x02\x02\
	\x02\u{ac6}\u{ac4}\x03\x02\x02\x02\u{ac6}\u{ac7}\x03\x02\x02\x02\u{ac7}\
	\u{aca}\x03\x02\x02\x02\u{ac8}\u{ac6}\x03\x02\x02\x02\u{ac9}\u{acb}\x07\
	\x33\x02\x02\u{aca}\u{ac9}\x03\x02\x02\x02\u{aca}\u{acb}\x03\x02\x02\x02\
	\u{acb}\u{acd}\x03\x02\x02\x02\u{acc}\u{ac0}\x03\x02\x02\x02\u{acc}\u{acd}\
	\x03\x02\x02\x02\u{acd}\u{fb}\x03\x02\x02\x02\u{ace}\u{acf}\x07\u{f7}\x02\
	\x02\u{acf}\u{ae7}\x05\u{fe}\u{80}\x02\u{ad0}\u{ad1}\x07\u{10a}\x02\x02\
	\u{ad1}\u{ae7}\x05\u{fe}\u{80}\x02\u{ad2}\u{ad3}\x07\u{82}\x02\x02\u{ad3}\
	\u{ae7}\x05\u{fe}\u{80}\x02\u{ad4}\u{ad5}\x07\u{f7}\x02\x02\u{ad5}\u{ad6}\
	\x07\x20\x02\x02\u{ad6}\u{ad7}\x05\u{fe}\u{80}\x02\u{ad7}\u{ad8}\x07\x13\
	\x02\x02\u{ad8}\u{ad9}\x05\u{fe}\u{80}\x02\u{ad9}\u{ae7}\x03\x02\x02\x02\
	\u{ada}\u{adb}\x07\u{10a}\x02\x02\u{adb}\u{adc}\x07\x20\x02\x02\u{adc}\u{add}\
	\x05\u{fe}\u{80}\x02\u{add}\u{ade}\x07\x13\x02\x02\u{ade}\u{adf}\x05\u{fe}\
	\u{80}\x02\u{adf}\u{ae7}\x03\x02\x02\x02\u{ae0}\u{ae1}\x07\u{82}\x02\x02\
	\u{ae1}\u{ae2}\x07\x20\x02\x02\u{ae2}\u{ae3}\x05\u{fe}\u{80}\x02\u{ae3}\
	\u{ae4}\x07\x13\x02\x02\u{ae4}\u{ae5}\x05\u{fe}\u{80}\x02\u{ae5}\u{ae7}\
	\x03\x02\x02\x02\u{ae6}\u{ace}\x03\x02\x02\x02\u{ae6}\u{ad0}\x03\x02\x02\
	\x02\u{ae6}\u{ad2}\x03\x02\x02\x02\u{ae6}\u{ad4}\x03\x02\x02\x02\u{ae6}\
	\u{ada}\x03\x02\x02\x02\u{ae6}\u{ae0}\x03\x02\x02\x02\u{ae7}\u{fd}\x03\x02\
	\x02\x02\u{ae8}\u{ae9}\x07\u{142}\x02\x02\u{ae9}\u{af2}\x07\u{ee}\x02\x02\
	\u{aea}\u{aeb}\x07\u{142}\x02\x02\u{aeb}\u{af2}\x07\x73\x02\x02\u{aec}\u{aed}\
	\x07\x43\x02\x02\u{aed}\u{af2}\x07\u{109}\x02\x02\u{aee}\u{aef}\x05\u{ae}\
	\x58\x02\u{aef}\u{af0}\x09\x1c\x02\x02\u{af0}\u{af2}\x03\x02\x02\x02\u{af1}\
	\u{ae8}\x03\x02\x02\x02\u{af1}\u{aea}\x03\x02\x02\x02\u{af1}\u{aec}\x03\
	\x02\x02\x02\u{af1}\u{aee}\x03\x02\x02\x02\u{af2}\u{ff}\x03\x02\x02\x02\
	\u{af3}\u{af4}\x08\u{81}\x01\x02\u{af4}\u{af6}\x05\u{102}\u{82}\x02\u{af5}\
	\u{af7}\x05\u{104}\u{83}\x02\u{af6}\u{af5}\x03\x02\x02\x02\u{af6}\u{af7}\
	\x03\x02\x02\x02\u{af7}\u{aff}\x03\x02\x02\x02\u{af8}\u{af9}\x0c\x04\x02\
	\x02\u{af9}\u{afe}\x05\u{100}\u{81}\x05\u{afa}\u{afb}\x0c\x03\x02\x02\u{afb}\
	\u{afc}\x07\x05\x02\x02\u{afc}\u{afe}\x05\u{100}\u{81}\x04\u{afd}\u{af8}\
	\x03\x02\x02\x02\u{afd}\u{afa}\x03\x02\x02\x02\u{afe}\u{b01}\x03\x02\x02\
	\x02\u{aff}\u{afd}\x03\x02\x02\x02\u{aff}\u{b00}\x03\x02\x02\x02\u{b00}\
	\u{101}\x03\x02\x02\x02\u{b01}\u{aff}\x03\x02\x02\x02\u{b02}\u{b1f}\x05\
	\u{118}\u{8d}\x02\u{b03}\u{b04}\x07\u{16b}\x02\x02\u{b04}\u{b1f}\x07\u{16c}\
	\x02\x02\u{b05}\u{b06}\x07\u{ec}\x02\x02\u{b06}\u{b07}\x07\u{16b}\x02\x02\
	\u{b07}\u{b0c}\x05\u{100}\u{81}\x02\u{b08}\u{b09}\x07\x33\x02\x02\u{b09}\
	\u{b0b}\x05\u{100}\u{81}\x02\u{b0a}\u{b08}\x03\x02\x02\x02\u{b0b}\u{b0e}\
	\x03\x02\x02\x02\u{b0c}\u{b0a}\x03\x02\x02\x02\u{b0c}\u{b0d}\x03\x02\x02\
	\x02\u{b0d}\u{b10}\x03\x02\x02\x02\u{b0e}\u{b0c}\x03\x02\x02\x02\u{b0f}\
	\u{b11}\x07\x33\x02\x02\u{b10}\u{b0f}\x03\x02\x02\x02\u{b10}\u{b11}\x03\
	\x02\x02\x02\u{b11}\u{b12}\x03\x02\x02\x02\u{b12}\u{b13}\x07\u{16c}\x02\
	\x02\u{b13}\u{b1f}\x03\x02\x02\x02\u{b14}\u{b15}\x07\u{16b}\x02\x02\u{b15}\
	\u{b16}\x05\u{100}\u{81}\x02\u{b16}\u{b17}\x07\u{16c}\x02\x02\u{b17}\u{b1f}\
	\x03\x02\x02\x02\u{b18}\u{b1f}\x07\x06\x02\x02\u{b19}\u{b1f}\x07\u{17f}\
	\x02\x02\u{b1a}\u{b1b}\x07\x07\x02\x02\u{b1b}\u{b1c}\x05\u{100}\u{81}\x02\
	\u{b1c}\u{b1d}\x07\x08\x02\x02\u{b1d}\u{b1f}\x03\x02\x02\x02\u{b1e}\u{b02}\
	\x03\x02\x02\x02\u{b1e}\u{b03}\x03\x02\x02\x02\u{b1e}\u{b05}\x03\x02\x02\
	\x02\u{b1e}\u{b14}\x03\x02\x02\x02\u{b1e}\u{b18}\x03\x02\x02\x02\u{b1e}\
	\u{b19}\x03\x02\x02\x02\u{b1e}\u{b1a}\x03\x02\x02\x02\u{b1f}\u{103}\x03\
	\x02\x02\x02\u{b20}\u{b22}\x07\u{178}\x02\x02\u{b21}\u{b23}\x07\u{17c}\x02\
	\x02\u{b22}\u{b21}\x03\x02\x02\x02\u{b22}\u{b23}\x03\x02\x02\x02\u{b23}\
	\u{b42}\x03\x02\x02\x02\u{b24}\u{b26}\x07\u{176}\x02\x02\u{b25}\u{b27}\x07\
	\u{17c}\x02\x02\u{b26}\u{b25}\x03\x02\x02\x02\u{b26}\u{b27}\x03\x02\x02\
	\x02\u{b27}\u{b42}\x03\x02\x02\x02\u{b28}\u{b2a}\x07\u{17c}\x02\x02\u{b29}\
	\u{b2b}\x07\u{17c}\x02\x02\u{b2a}\u{b29}\x03\x02\x02\x02\u{b2a}\u{b2b}\x03\
	\x02\x02\x02\u{b2b}\u{b42}\x03\x02\x02\x02\u{b2c}\u{b2d}\x07\x09\x02\x02\
	\u{b2d}\u{b2e}\x07\u{185}\x02\x02\u{b2e}\u{b30}\x07\x0a\x02\x02\u{b2f}\u{b31}\
	\x07\u{17c}\x02\x02\u{b30}\u{b2f}\x03\x02\x02\x02\u{b30}\u{b31}\x03\x02\
	\x02\x02\u{b31}\u{b42}\x03\x02\x02\x02\u{b32}\u{b34}\x07\x09\x02\x02\u{b33}\
	\u{b35}\x07\u{185}\x02\x02\u{b34}\u{b33}\x03\x02\x02\x02\u{b34}\u{b35}\x03\
	\x02\x02\x02\u{b35}\u{b36}\x03\x02\x02\x02\u{b36}\u{b38}\x07\x33\x02\x02\
	\u{b37}\u{b39}\x07\u{185}\x02\x02\u{b38}\u{b37}\x03\x02\x02\x02\u{b38}\u{b39}\
	\x03\x02\x02\x02\u{b39}\u{b3b}\x03\x02\x02\x02\u{b3a}\u{b3c}\x07\x33\x02\
	\x02\u{b3b}\u{b3a}\x03\x02\x02\x02\u{b3b}\u{b3c}\x03\x02\x02\x02\u{b3c}\
	\u{b3d}\x03\x02\x02\x02\u{b3d}\u{b3f}\x07\x0a\x02\x02\u{b3e}\u{b40}\x07\
	\u{17c}\x02\x02\u{b3f}\u{b3e}\x03\x02\x02\x02\u{b3f}\u{b40}\x03\x02\x02\
	\x02\u{b40}\u{b42}\x03\x02\x02\x02\u{b41}\u{b20}\x03\x02\x02\x02\u{b41}\
	\u{b24}\x03\x02\x02\x02\u{b41}\u{b28}\x03\x02\x02\x02\u{b41}\u{b2c}\x03\
	\x02\x02\x02\u{b41}\u{b32}\x03\x02\x02\x02\u{b42}\u{105}\x03\x02\x02\x02\
	\u{b43}\u{b44}\x07\u{9a}\x02\x02\u{b44}\u{b45}\x07\u{ab}\x02\x02\u{b45}\
	\u{b49}\x05\u{108}\u{85}\x02\u{b46}\u{b47}\x07\u{f8}\x02\x02\u{b47}\u{b49}\
	\x09\x1d\x02\x02\u{b48}\u{b43}\x03\x02\x02\x02\u{b48}\u{b46}\x03\x02\x02\
	\x02\u{b49}\u{107}\x03\x02\x02\x02\u{b4a}\u{b4b}\x07\u{f8}\x02\x02\u{b4b}\
	\u{b52}\x07\u{143}\x02\x02\u{b4c}\u{b4d}\x07\u{f8}\x02\x02\u{b4d}\u{b52}\
	\x07\x36\x02\x02\u{b4e}\u{b4f}\x07\u{fc}\x02\x02\u{b4f}\u{b52}\x07\u{f8}\
	\x02\x02\u{b50}\u{b52}\x07\u{119}\x02\x02\u{b51}\u{b4a}\x03\x02\x02\x02\
	\u{b51}\u{b4c}\x03\x02\x02\x02\u{b51}\u{b4e}\x03\x02\x02\x02\u{b51}\u{b50}\
	\x03\x02\x02\x02\u{b52}\u{109}\x03\x02\x02\x02\u{b53}\u{b54}\x07\x75\x02\
	\x02\u{b54}\u{b58}\x09\x1e\x02\x02\u{b55}\u{b56}\x07\u{140}\x02\x02\u{b56}\
	\u{b58}\x09\x1f\x02\x02\u{b57}\u{b53}\x03\x02\x02\x02\u{b57}\u{b55}\x03\
	\x02\x02\x02\u{b58}\u{10b}\x03\x02\x02\x02\u{b59}\u{b5a}\x09\x20\x02\x02\
	\u{b5a}\u{10d}\x03\x02\x02\x02\u{b5b}\u{b60}\x05\u{118}\u{8d}\x02\u{b5c}\
	\u{b5d}\x07\u{16f}\x02\x02\u{b5d}\u{b5f}\x05\u{11c}\u{8f}\x02\u{b5e}\u{b5c}\
	\x03\x02\x02\x02\u{b5f}\u{b62}\x03\x02\x02\x02\u{b60}\u{b5e}\x03\x02\x02\
	\x02\u{b60}\u{b61}\x03\x02\x02\x02\u{b61}\u{10f}\x03\x02\x02\x02\u{b62}\
	\u{b60}\x03\x02\x02\x02\u{b63}\u{b64}\x05\u{10e}\u{88}\x02\u{b64}\u{111}\
	\x03\x02\x02\x02\u{b65}\u{b66}\x07\x74\x02\x02\u{b66}\u{b67}\x05\u{114}\
	\u{8b}\x02\u{b67}\u{b68}\x07\x17\x02\x02\u{b68}\u{b69}\x07\u{d3}\x02\x02\
	\u{b69}\u{b6a}\x05\u{b4}\x5b\x02\u{b6a}\u{113}\x03\x02\x02\x02\u{b6b}\u{b6c}\
	\x09\x21\x02\x02\u{b6c}\u{115}\x03\x02\x02\x02\u{b6d}\u{b73}\x05\u{118}\
	\u{8d}\x02\u{b6e}\u{b6f}\x07\u{14e}\x02\x02\u{b6f}\u{b73}\x05\u{118}\u{8d}\
	\x02\u{b70}\u{b71}\x07\u{105}\x02\x02\u{b71}\u{b73}\x05\u{118}\u{8d}\x02\
	\u{b72}\u{b6d}\x03\x02\x02\x02\u{b72}\u{b6e}\x03\x02\x02\x02\u{b72}\u{b70}\
	\x03\x02\x02\x02\u{b73}\u{117}\x03\x02\x02\x02\u{b74}\u{b78}\x07\u{188}\
	\x02\x02\u{b75}\u{b78}\x05\u{11a}\u{8e}\x02\u{b76}\u{b78}\x05\u{12c}\u{97}\
	\x02\u{b77}\u{b74}\x03\x02\x02\x02\u{b77}\u{b75}\x03\x02\x02\x02\u{b77}\
	\u{b76}\x03\x02\x02\x02\u{b78}\u{119}\x03\x02\x02\x02\u{b79}\u{b7a}\x07\
	\u{18a}\x02\x02\u{b7a}\u{11b}\x03\x02\x02\x02\u{b7b}\u{b7c}\x05\u{118}\u{8d}\
	\x02\u{b7c}\u{11d}\x03\x02\x02\x02\u{b7d}\u{b7e}\x05\u{118}\u{8d}\x02\u{b7e}\
	\u{b7f}\x07\x02\x02\x03\u{b7f}\u{11f}\x03\x02\x02\x02\u{b80}\u{b81}\x07\
	\u{16b}\x02\x02\u{b81}\u{b82}\x05\u{122}\u{92}\x02\u{b82}\u{b83}\x07\u{16c}\
	\x02\x02\u{b83}\u{121}\x03\x02\x02\x02\u{b84}\u{b89}\x05\u{118}\u{8d}\x02\
	\u{b85}\u{b86}\x07\x33\x02\x02\u{b86}\u{b88}\x05\u{118}\u{8d}\x02\u{b87}\
	\u{b85}\x03\x02\x02\x02\u{b88}\u{b8b}\x03\x02\x02\x02\u{b89}\u{b87}\x03\
	\x02\x02\x02\u{b89}\u{b8a}\x03\x02\x02\x02\u{b8a}\u{123}\x03\x02\x02\x02\
	\u{b8b}\u{b89}\x03\x02\x02\x02\u{b8c}\u{b8e}\x07\u{177}\x02\x02\u{b8d}\u{b8c}\
	\x03\x02\x02\x02\u{b8d}\u{b8e}\x03\x02\x02\x02\u{b8e}\u{b8f}\x03\x02\x02\
	\x02\u{b8f}\u{b99}\x07\u{186}\x02\x02\u{b90}\u{b92}\x07\u{177}\x02\x02\u{b91}\
	\u{b90}\x03\x02\x02\x02\u{b91}\u{b92}\x03\x02\x02\x02\u{b92}\u{b93}\x03\
	\x02\x02\x02\u{b93}\u{b99}\x07\u{187}\x02\x02\u{b94}\u{b96}\x07\u{177}\x02\
	\x02\u{b95}\u{b94}\x03\x02\x02\x02\u{b95}\u{b96}\x03\x02\x02\x02\u{b96}\
	\u{b97}\x03\x02\x02\x02\u{b97}\u{b99}\x07\u{185}\x02\x02\u{b98}\u{b8d}\x03\
	\x02\x02\x02\u{b98}\u{b91}\x03\x02\x02\x02\u{b98}\u{b95}\x03\x02\x02\x02\
	\u{b99}\u{125}\x03\x02\x02\x02\u{b9a}\u{b9b}\x07\u{109}\x02\x02\u{b9b}\u{b9c}\
	\x07\u{16b}\x02\x02\u{b9c}\u{ba1}\x05\u{128}\u{95}\x02\u{b9d}\u{b9e}\x07\
	\x33\x02\x02\u{b9e}\u{ba0}\x05\u{128}\u{95}\x02\u{b9f}\u{b9d}\x03\x02\x02\
	\x02\u{ba0}\u{ba3}\x03\x02\x02\x02\u{ba1}\u{b9f}\x03\x02\x02\x02\u{ba1}\
	\u{ba2}\x03\x02\x02\x02\u{ba2}\u{ba4}\x03\x02\x02\x02\u{ba3}\u{ba1}\x03\
	\x02\x02\x02\u{ba4}\u{ba5}\x07\u{16c}\x02\x02\u{ba5}\u{bc1}\x03\x02\x02\
	\x02\u{ba6}\u{ba7}\x07\u{b5}\x02\x02\u{ba7}\u{ba8}\x07\u{16b}\x02\x02\u{ba8}\
	\u{ba9}\x05\u{126}\u{94}\x02\u{ba9}\u{baa}\x07\x33\x02\x02\u{baa}\u{bab}\
	\x05\u{126}\u{94}\x02\u{bab}\u{bac}\x07\u{16c}\x02\x02\u{bac}\u{bc1}\x03\
	\x02\x02\x02\u{bad}\u{bae}\x07\x16\x02\x02\u{bae}\u{baf}\x07\u{16b}\x02\
	\x02\u{baf}\u{bb0}\x05\u{126}\u{94}\x02\u{bb0}\u{bb1}\x07\u{16c}\x02\x02\
	\u{bb1}\u{bc1}\x03\x02\x02\x02\u{bb2}\u{bb3}\x07\x78\x02\x02\u{bb3}\u{bb4}\
	\x07\u{16b}\x02\x02\u{bb4}\u{bb9}\x05\u{126}\u{94}\x02\u{bb5}\u{bb6}\x07\
	\x33\x02\x02\u{bb6}\u{bb8}\x05\u{126}\u{94}\x02\u{bb7}\u{bb5}\x03\x02\x02\
	\x02\u{bb8}\u{bbb}\x03\x02\x02\x02\u{bb9}\u{bb7}\x03\x02\x02\x02\u{bb9}\
	\u{bba}\x03\x02\x02\x02\u{bba}\u{bbc}\x03\x02\x02\x02\u{bbb}\u{bb9}\x03\
	\x02\x02\x02\u{bbc}\u{bbd}\x07\u{16c}\x02\x02\u{bbd}\u{bc1}\x03\x02\x02\
	\x02\u{bbe}\u{bc1}\x07\u{91}\x02\x02\u{bbf}\u{bc1}\x05\u{ec}\x77\x02\u{bc0}\
	\u{b9a}\x03\x02\x02\x02\u{bc0}\u{ba6}\x03\x02\x02\x02\u{bc0}\u{bad}\x03\
	\x02\x02\x02\u{bc0}\u{bb2}\x03\x02\x02\x02\u{bc0}\u{bbe}\x03\x02\x02\x02\
	\u{bc0}\u{bbf}\x03\x02\x02\x02\u{bc1}\u{127}\x03\x02\x02\x02\u{bc2}\u{bc7}\
	\x05\u{126}\u{94}\x02\u{bc3}\u{bc4}\x05\u{118}\u{8d}\x02\u{bc4}\u{bc5}\x05\
	\u{126}\u{94}\x02\u{bc5}\u{bc7}\x03\x02\x02\x02\u{bc6}\u{bc2}\x03\x02\x02\
	\x02\u{bc6}\u{bc3}\x03\x02\x02\x02\u{bc7}\u{129}\x03\x02\x02\x02\u{bc8}\
	\u{bcd}\x05\u{126}\u{94}\x02\u{bc9}\u{bca}\x07\x33\x02\x02\u{bca}\u{bcc}\
	\x05\u{126}\u{94}\x02\u{bcb}\u{bc9}\x03\x02\x02\x02\u{bcc}\u{bcf}\x03\x02\
	\x02\x02\u{bcd}\u{bcb}\x03\x02\x02\x02\u{bcd}\u{bce}\x03\x02\x02\x02\u{bce}\
	\u{bd2}\x03\x02\x02\x02\u{bcf}\u{bcd}\x03\x02\x02\x02\u{bd0}\u{bd2}\x07\
	\x02\x02\x03\u{bd1}\u{bc8}\x03\x02\x02\x02\u{bd1}\u{bd0}\x03\x02\x02\x02\
	\u{bd2}\u{12b}\x03\x02\x02\x02\u{bd3}\u{bd4}\x09\x22\x02\x02\u{bd4}\u{12d}\
	\x03\x02\x02\x02\u{1a0}\u{12f}\u{133}\u{137}\u{13d}\u{140}\u{159}\u{15f}\
	\u{179}\u{17f}\u{183}\u{187}\u{18b}\u{193}\u{197}\u{19a}\u{1a2}\u{1a6}\u{1aa}\
	\u{1ae}\u{1b6}\u{1bb}\u{1c1}\u{1c7}\u{1cb}\u{1cf}\u{1d3}\u{1d9}\u{1e0}\u{1e5}\
	\u{1ec}\u{1f2}\u{1f6}\u{1fa}\u{202}\u{207}\u{20d}\u{211}\u{21f}\u{222}\u{228}\
	\u{22f}\u{236}\u{23c}\u{242}\u{249}\u{250}\u{257}\u{25e}\u{265}\u{270}\u{278}\
	\u{280}\u{287}\u{291}\u{298}\u{2a0}\u{2c4}\u{2c7}\u{2ca}\u{2cd}\u{2d1}\u{2d7}\
	\u{2e3}\u{304}\u{30c}\u{313}\u{31a}\u{323}\u{327}\u{32b}\u{32f}\u{33c}\u{341}\
	\u{348}\u{34f}\u{359}\u{35d}\u{35f}\u{365}\u{36c}\u{373}\u{37a}\u{381}\u{38e}\
	\u{391}\u{398}\u{39c}\u{3a2}\u{3a9}\u{3b1}\u{3bc}\u{3bf}\u{3c6}\u{3ca}\u{3d4}\
	\u{3dd}\u{3e1}\u{3e9}\u{3f2}\u{3f9}\u{401}\u{403}\u{40d}\u{411}\u{417}\u{423}\
	\u{428}\u{430}\u{435}\u{43f}\u{443}\u{44d}\u{451}\u{455}\u{459}\u{462}\u{466}\
	\u{468}\u{46c}\u{46f}\u{473}\u{47b}\u{47f}\u{481}\u{488}\u{48c}\u{493}\u{49a}\
	\u{49e}\u{4a7}\u{4ab}\u{4ad}\u{4b7}\u{4bb}\u{4bd}\u{4c8}\u{4cc}\u{4d1}\u{4d9}\
	\u{4dc}\u{4df}\u{4e3}\u{4ec}\u{4ef}\u{4f2}\u{4f5}\u{4fe}\u{502}\u{50b}\u{50f}\
	\u{513}\u{51e}\u{521}\u{524}\u{52d}\u{53c}\u{543}\u{547}\u{54b}\u{54f}\u{553}\
	\u{557}\u{559}\u{564}\u{568}\u{56c}\u{574}\u{583}\u{586}\u{58c}\u{59a}\u{59e}\
	\u{5a0}\u{5a9}\u{5ad}\u{5af}\u{5b7}\u{5bb}\u{5bd}\u{5c0}\u{5c5}\u{5c8}\u{5d4}\
	\u{5d8}\u{5da}\u{5e2}\u{5e6}\u{5ea}\u{5f9}\u{5fb}\u{606}\u{61b}\u{625}\u{629}\
	\u{635}\u{639}\u{63b}\u{640}\u{646}\u{653}\u{657}\u{65c}\u{66c}\u{675}\u{679}\
	\u{67b}\u{67e}\u{682}\u{68a}\u{68e}\u{695}\u{69a}\u{6a5}\u{6a9}\u{6ab}\u{6af}\
	\u{6b1}\u{6b9}\u{6c3}\u{6c7}\u{6cc}\u{6ce}\u{6d5}\u{6d9}\u{6db}\u{6e2}\u{6e6}\
	\u{6e8}\u{6ea}\u{6f3}\u{6f7}\u{701}\u{705}\u{70f}\u{713}\u{71c}\u{720}\u{728}\
	\u{72a}\u{737}\u{73f}\u{748}\u{74c}\u{751}\u{759}\u{75f}\u{762}\u{769}\u{76d}\
	\u{772}\u{779}\u{77c}\u{782}\u{793}\u{795}\u{7ab}\u{7ae}\u{7b9}\u{7c8}\u{7cd}\
	\u{7d0}\u{7d5}\u{7e2}\u{7e6}\u{7ea}\u{7f6}\u{7fa}\u{802}\u{806}\u{81b}\u{81e}\
	\u{829}\u{82c}\u{82e}\u{839}\u{844}\u{84d}\u{850}\u{864}\u{86b}\u{86e}\u{882}\
	\u{885}\u{888}\u{898}\u{89b}\u{89e}\u{8ad}\u{8b6}\u{8bc}\u{8c2}\u{8cd}\u{8cf}\
	\u{8d4}\u{8db}\u{8dd}\u{8e3}\u{8e9}\u{8f4}\u{8f8}\u{900}\u{905}\u{90a}\u{90c}\
	\u{90e}\u{914}\u{916}\u{920}\u{924}\u{92c}\u{92e}\u{934}\u{936}\u{93f}\u{943}\
	\u{945}\u{949}\u{953}\u{955}\u{959}\u{95c}\u{95f}\u{962}\u{96d}\u{970}\u{978}\
	\u{97d}\u{983}\u{98b}\u{98e}\u{991}\u{996}\u{99b}\u{9a7}\u{9ab}\u{9af}\u{9b2}\
	\u{9b4}\u{9bc}\u{9bf}\u{9c9}\u{9d1}\u{9d7}\u{9d9}\u{9e1}\u{9eb}\u{9ef}\u{9f4}\
	\u{9ff}\u{a02}\u{a0d}\u{a11}\u{a19}\u{a20}\u{a25}\u{a2c}\u{a36}\u{a3b}\u{a42}\
	\u{a4f}\u{a5f}\u{a63}\u{a67}\u{a70}\u{a75}\u{a7b}\u{a7f}\u{a92}\u{a9a}\u{a9e}\
	\u{aa0}\u{aa6}\u{aa9}\u{ab0}\u{ab8}\u{abc}\u{abe}\u{ac6}\u{aca}\u{acc}\u{ae6}\
	\u{af1}\u{af6}\u{afd}\u{aff}\u{b0c}\u{b10}\u{b1e}\u{b22}\u{b26}\u{b2a}\u{b30}\
	\u{b34}\u{b38}\u{b3b}\u{b3f}\u{b41}\u{b48}\u{b51}\u{b57}\u{b60}\u{b72}\u{b77}\
	\u{b89}\u{b8d}\u{b91}\u{b95}\u{b98}\u{ba1}\u{bb9}\u{bc0}\u{bc6}\u{bcd}\u{bd1}";

